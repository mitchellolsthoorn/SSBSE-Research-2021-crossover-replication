/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:16:52 GMT 2021
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.TreeSet;
import java.util.UnknownFormatConversionException;
import java.util.Vector;
import java.util.function.UnaryOperator;
import java.util.stream.IntStream;
import org.apache.commons.lang3.text.StrBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StrBuilder_ESTest extends StrBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StringBuilder stringBuilder0 = new StringBuilder(" in an array of ");
      assertEquals(" in an array of ", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(0);
      assertEquals(" in an array of 0", stringBuilder0.toString());
      assertEquals(" in an array of 0", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.append(stringBuilder0, 0, 0);
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(" in an array of 0", stringBuilder0.toString());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder(1294);
      assertEquals(1294, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.startsWith("");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotSame(strBuilder0, strBuilder1);
      assertTrue(boolean0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      
      String string0 = strBuilder1.midString(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1294, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNotSame(strBuilder1, strBuilder0);
      assertEquals("", string0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(string0);
      
      StrBuilder strBuilder2 = strBuilder1.appendFixedWidthPadRight(436, 27, 'Q');
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(27, strBuilder1.size());
      assertEquals(1294, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(27, strBuilder2.size());
      assertEquals(27, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(1294, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(92, strBuilder0.capacity());
      assertEquals(60, strBuilder0.size());
      assertEquals(60, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(432);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(64, strBuilder0.size());
      assertEquals(64, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(92, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(92, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(64, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(64, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder("");
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = new StrBuilder("");
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.deleteAll("");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(64, strBuilder0.size());
      assertEquals(64, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(92, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(92, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(64, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(64, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(92, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(64, strBuilder4.size());
      assertEquals(64, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(432);
      assertEquals(432, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(432, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(432, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(432, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder5 = strBuilder0.append(charBuffer0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(496, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(496, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(992, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(432, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(432, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(432, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(432, charBuffer0.limit());
      assertEquals(992, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(496, strBuilder5.size());
      assertEquals(496, strBuilder5.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = new StrBuilder();
      assertEquals(0, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isEmpty());
      assertFalse(strBuilder6.isNotEmpty());
      assertEquals(0, strBuilder6.length());
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertTrue(strBuilder6.equals((Object)strBuilder2));
      assertTrue(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = new StrBuilder(1272);
      assertTrue(strBuilder7.isEmpty());
      assertFalse(strBuilder7.isNotEmpty());
      assertEquals(0, strBuilder7.size());
      assertEquals(0, strBuilder7.length());
      assertEquals(1272, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertTrue(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertTrue(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertTrue(strBuilder7.equals((Object)strBuilder6));
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = strBuilder7.append('J');
      assertFalse(strBuilder7.isEmpty());
      assertEquals(1, strBuilder7.size());
      assertEquals(1, strBuilder7.length());
      assertEquals(1272, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertTrue(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertTrue(strBuilder8.isNotEmpty());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNullText());
      assertEquals(1, strBuilder8.size());
      assertEquals(1, strBuilder8.length());
      assertEquals(1272, strBuilder8.capacity());
      assertSame(strBuilder7, strBuilder8);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder4);
      assertNotSame(strBuilder8, strBuilder2);
      assertNotSame(strBuilder8, strBuilder6);
      assertNotSame(strBuilder8, strBuilder5);
      assertNotSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder7);
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertNotNull(strBuilder8);
      
      StrBuilder strBuilder9 = strBuilder1.appendln(strBuilder7);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(498, strBuilder0.length());
      assertEquals(498, strBuilder0.size());
      assertEquals(992, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(992, strBuilder1.capacity());
      assertEquals(498, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(498, strBuilder1.size());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(1, strBuilder7.size());
      assertEquals(1, strBuilder7.length());
      assertEquals(1272, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertTrue(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals(498, strBuilder9.size());
      assertEquals(498, strBuilder9.length());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertEquals(992, strBuilder9.capacity());
      assertTrue(strBuilder9.isNotEmpty());
      assertFalse(strBuilder9.isEmpty());
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder7, strBuilder8);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder9);
      assertNotSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder5);
      assertNotSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder0);
      assertNotSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder6);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder8));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder2));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertNotNull(strBuilder9);
      
      StrBuilder strBuilder10 = strBuilder9.replaceAll('p', '!');
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(498, strBuilder0.length());
      assertEquals(498, strBuilder0.size());
      assertEquals(992, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(992, strBuilder1.capacity());
      assertEquals(498, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(498, strBuilder1.size());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(1, strBuilder7.size());
      assertEquals(1, strBuilder7.length());
      assertEquals(1272, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertTrue(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals(498, strBuilder9.size());
      assertEquals(498, strBuilder9.length());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertEquals(992, strBuilder9.capacity());
      assertTrue(strBuilder9.isNotEmpty());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(498, strBuilder10.length());
      assertEquals(498, strBuilder10.size());
      assertTrue(strBuilder10.isNotEmpty());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(992, strBuilder10.capacity());
      assertNull(strBuilder10.getNewLineText());
      assertNull(strBuilder10.getNullText());
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder10);
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder10);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder9);
      assertNotSame(strBuilder7, strBuilder10);
      assertSame(strBuilder7, strBuilder8);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder9);
      assertNotSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder5);
      assertNotSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder10);
      assertSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder0);
      assertNotSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder10, strBuilder7);
      assertNotSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder1);
      assertNotSame(strBuilder10, strBuilder2);
      assertNotSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder9);
      assertNotSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder8));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder9));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder2));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder10.equals((Object)strBuilder7));
      assertFalse(strBuilder10.equals((Object)strBuilder8));
      assertFalse(strBuilder10.equals((Object)strBuilder2));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder10.equals((Object)strBuilder3));
      assertNotNull(strBuilder10);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader");
      assertEquals(89, strBuilder0.capacity());
      assertEquals(57, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(57, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      strBuilder0.buffer = charArray0;
      assertEquals(57, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(57, strBuilder0.size());
      
      // Undeclared exception!
      try { 
        strBuilder0.appendSeparator('x', 420);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.append((CharSequence) strBuilder0);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendln(strBuilder0);
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertEquals(2, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertEquals(2, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertEquals(1, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = '2';
      charArray0[2] = ')';
      charArray0[3] = 'M';
      charArray0[4] = '7';
      charArray0[5] = '5';
      StrBuilder strBuilder4 = strBuilder2.appendln(charArray0);
      assertEquals(14, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder1.length());
      assertEquals(14, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(8, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(14, strBuilder2.capacity());
      assertEquals(8, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(14, strBuilder4.capacity());
      assertEquals(8, strBuilder4.size());
      assertEquals(8, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertArrayEquals(new char[] {'#', '2', ')', 'M', '7', '5'}, charArray0);
      assertNotNull(strBuilder4);
      assertEquals(6, charArray0.length);
      
      StringReader stringReader0 = new StringReader("d9Xa?YjC+}&");
      assertNotNull(stringReader0);
      
      StrBuilder strBuilder5 = strBuilder0.appendFixedWidthPadRight((Object) stringReader0, 456, '2');
      assertEquals(464, strBuilder0.size());
      assertEquals(464, strBuilder0.length());
      assertEquals(928, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(928, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(464, strBuilder5.size());
      assertEquals(464, strBuilder5.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertNotNull(strBuilder5);
      
      int int0 = strBuilder2.indexOf("", 31);
      assertEquals(464, strBuilder0.size());
      assertEquals(464, strBuilder0.length());
      assertEquals(928, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(928, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(464, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(464, strBuilder1.size());
      assertEquals(928, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(464, strBuilder2.length());
      assertEquals(464, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(31, int0);
      
      StrBuilder strBuilder6 = strBuilder2.setNullText("");
      assertEquals(464, strBuilder0.size());
      assertEquals(464, strBuilder0.length());
      assertEquals(928, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(928, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(464, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(464, strBuilder1.size());
      assertEquals(928, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(464, strBuilder2.length());
      assertEquals(464, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(464, strBuilder6.size());
      assertEquals(464, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(928, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertNotNull(strBuilder6);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) '2';
      objectArray0[1] = (Object) strBuilder1;
      objectArray0[2] = (Object) strBuilder2;
      objectArray0[3] = (Object) '#';
      objectArray0[4] = (Object) '7';
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) strBuilder6;
      StrBuilder strBuilder7 = strBuilder1.appendln("", objectArray0);
      assertEquals(465, strBuilder0.size());
      assertEquals(465, strBuilder0.length());
      assertEquals(928, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(928, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(465, strBuilder1.length());
      assertEquals(465, strBuilder1.size());
      assertEquals(928, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(465, strBuilder7.size());
      assertEquals(465, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertTrue(strBuilder7.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder4);
      assertNotNull(strBuilder7);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = 'H';
      StrBuilder strBuilder0 = new StrBuilder('H');
      assertEquals(72, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln("", 0, 0);
      assertEquals(72, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(72, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = 4;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) strBuilder0);
      assertEquals(72, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.remaining());
      assertEquals("\n", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(charBuffer0, 1304, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("8");
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.substring(0, 0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder1 = new StrBuilder(0);
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = stringBuffer0.append((double) 0);
      assertEquals(3, stringBuffer0.length());
      assertEquals("0.0", stringBuffer0.toString());
      assertEquals("0.0", stringBuffer1.toString());
      assertEquals(3, stringBuffer1.length());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      
      StrBuilder strBuilder2 = strBuilder1.appendln(stringBuffer0, 0, 0);
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, stringBuffer0.length());
      assertEquals("0.0", stringBuffer0.toString());
      assertEquals(1, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(stringBuffer0, stringBuffer1);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.reverse();
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      
      String string1 = strBuilder2.rightString(0);
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, stringBuffer0.length());
      assertEquals("0.0", stringBuffer0.toString());
      assertEquals(1, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(stringBuffer0, stringBuffer1);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertEquals("", string1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      String string2 = strBuilder_StrBuilderTokenizer0.getContent();
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertEquals("\n", string2);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      boolean boolean1 = strBuilder_StrBuilderTokenizer0.hasNext();
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertFalse(boolean1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("8");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.substring(0, 0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder1 = new StrBuilder(0);
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = stringBuffer0.append((double) 0);
      assertEquals("0.0", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      assertEquals("0.0", stringBuffer1.toString());
      assertEquals(3, stringBuffer1.length());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      
      StrBuilder strBuilder2 = strBuilder1.appendln(stringBuffer0, 0, 0);
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals("0.0", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      assertEquals(1, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.reverse();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder3.size());
      assertEquals(1, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(33, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      String string1 = strBuilder2.rightString(0);
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals("0.0", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      assertEquals(1, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertEquals("", string1);
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      String string2 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertEquals("\n", string2);
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("8");
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "add() is unsupported");
      assertFalse(boolean0);
      
      String string0 = strBuilder0.substring(0, 0);
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("8");
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(33, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.minimizeCapacity();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = strBuilder1.toCharArray(0, 0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      StrBuilder strBuilder3 = strBuilder1.reverse();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.reset();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((-1));
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator("Aborting to protect against StackOverflowError - output of one loop is the input of another", 23);
      assertEquals(188, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(94, strBuilder0.size());
      assertEquals(94, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(94, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(188, strBuilder2.capacity());
      assertEquals(94, strBuilder2.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.appendln((StringBuilder) null, (-150), 3);
      assertEquals(188, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(95, strBuilder0.length());
      assertEquals(95, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(95, strBuilder3.size());
      assertEquals(95, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(188, strBuilder3.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = ']';
      charArray0[2] = '7';
      charArray0[3] = '1';
      charArray0[4] = 'O';
      charArray0[5] = 'H';
      charArray0[6] = 'z';
      charArray0[7] = 'r';
      strBuilder3.buffer = charArray0;
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(95, strBuilder0.length());
      assertEquals(95, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.capacity());
      assertEquals(95, strBuilder3.size());
      assertEquals(95, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(8, strBuilder3.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder0.trim();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 94
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.reset();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((-1));
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator("Aborting to protect against StackOverflowError - output of one loop is the input of another", 23);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(94, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(94, strBuilder0.length());
      assertEquals(188, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(188, strBuilder2.capacity());
      assertEquals(94, strBuilder2.size());
      assertEquals(94, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.deleteFirst("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertEquals(188, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(188, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertEquals(188, strBuilder3.capacity());
      assertEquals(3, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(3, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      StringBuffer stringBuffer0 = new StringBuffer(44);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder2.appendln(stringBuffer0, 3, 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendNull();
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.delete(0, 0);
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(strBuilder1);
      assertEquals(0, charArray0.length);
      
      int int0 = 102;
      // Undeclared exception!
      try { 
        strBuilder0.validateRange(102, 102);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "$. VFYmsy%)=_YyFj-";
      objectArray0[1] = (Object) "$. VFYmsy%)=_YyFj-";
      objectArray0[2] = (Object) strBuilder0;
      // Undeclared exception!
      try { 
        strBuilder0.appendln("$. VFYmsy%)=_YyFj-", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = ')'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2171));
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendPadding(Integer.MAX_VALUE, 'b');
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("8");
      assertEquals(33, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.substring(0, 0);
      assertEquals(33, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("8");
      assertEquals(33, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = strBuilder1.toCharArray(0, 0);
      assertEquals(33, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      strBuilder0.appendTo(stringBuffer0);
      assertEquals(33, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertSame(strBuilder0, strBuilder1);
      
      String string1 = strBuilder0.leftString(0);
      assertEquals(33, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) fileSystemHandling0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) ":<,";
      objectArray0[5] = (Object) ":<,";
      objectArray0[6] = (Object) fileSystemHandling0;
      StrBuilder strBuilder2 = strBuilder1.appendln("", objectArray0);
      assertEquals(33, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotNull(strBuilder2);
      assertEquals(7, objectArray0.length);
      
      StrBuilder strBuilder3 = strBuilder1.appendSeparator(":<,");
      assertEquals(33, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(4, strBuilder3.size());
      assertEquals(4, strBuilder3.length());
      assertEquals(33, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      String string2 = strBuilder0.build();
      assertEquals(33, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals("\n:<,", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      StrBuilder strBuilder4 = new StrBuilder(81);
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(81, strBuilder4.capacity());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotNull(strBuilder4);
      
      // Undeclared exception!
      try { 
        strBuilder0.subSequence(27, (-20));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -47
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      Writer writer0 = strBuilder0.asWriter();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(writer0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(12, '2');
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(12, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(12, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(12, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder2 = strBuilder0.append(charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(12, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(12, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(12, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(strBuilder2);
      assertEquals(0, charArray0.length);
      
      StrBuilder strBuilder3 = strBuilder0.appendFixedWidthPadLeft(0, 0, '2');
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(12, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(12, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(12, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(256);
      assertEquals(256, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = 'V';
      charArray0[2] = '{';
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
      assertEquals(256, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(256, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'A', 'V', '{', '\u0000'}, charArray0);
      assertNotNull(strBuilder1);
      assertEquals(4, charArray0.length);
      
      int int0 = strBuilder1.indexOf('{');
      assertEquals(256, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(256, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'A', 'V', '{', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("8");
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.substring(0, 0);
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("8");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.appendln(stringBuffer0, 0, 0);
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(33, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(33, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.reverse();
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(33, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(33, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(1, strBuilder3.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      int int0 = strBuilder1.size();
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(33, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      TreeSet<StringReader> treeSet0 = new TreeSet<StringReader>();
      assertNotNull(treeSet0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(3);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.setLength(3);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = new StrBuilder("");
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.deleteAll((String) null);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(3, strBuilder4.length());
      assertEquals(3, strBuilder4.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotNull(strBuilder4);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      assertEquals(3, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder5 = strBuilder4.append(charBuffer0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(6, strBuilder4.length());
      assertEquals(6, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(3, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(6, strBuilder5.length());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(6, strBuilder5.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = new StrBuilder();
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isEmpty());
      assertEquals(0, strBuilder6.length());
      assertFalse(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(0, strBuilder6.size());
      assertTrue(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder6.append('J');
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(1, strBuilder6.size());
      assertEquals(1, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(1, strBuilder7.size());
      assertTrue(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertEquals(32, strBuilder7.capacity());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(1, strBuilder7.length());
      assertSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder6);
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = strBuilder1.appendln(strBuilder3);
      assertEquals(7, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(7, strBuilder8.length());
      assertEquals(7, strBuilder8.size());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNullText());
      assertTrue(strBuilder8.isNotEmpty());
      assertEquals(32, strBuilder8.capacity());
      assertNull(strBuilder8.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder3, strBuilder7);
      assertNotSame(strBuilder3, strBuilder8);
      assertNotSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder5);
      assertSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder5);
      assertNotSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder2);
      assertNotSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder3.equals((Object)strBuilder7));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertNotNull(strBuilder8);
      
      StrBuilder strBuilder9 = strBuilder4.replaceAll('0', 'p');
      assertEquals(7, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(7, strBuilder4.length());
      assertEquals(7, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertTrue(strBuilder9.isNotEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(32, strBuilder9.capacity());
      assertEquals(7, strBuilder9.length());
      assertEquals(7, strBuilder9.size());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder9);
      assertSame(strBuilder4, strBuilder8);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder0);
      assertNotSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder1);
      assertNotSame(strBuilder9, strBuilder7);
      assertNotSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertNotNull(strBuilder9);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(98);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(98, charBuffer0.capacity());
      assertEquals(98, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(98, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(98, charBuffer0.length());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(charBuffer0);
      assertEquals(196, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(98, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(98, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(98, strBuilder1.size());
      assertEquals(98, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(196, strBuilder1.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(98, charBuffer0.capacity());
      assertEquals(98, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(98, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(98, charBuffer0.length());
      assertEquals(196, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(98, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(98, strBuilder2.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      strBuilder0.size = 0;
      assertEquals(196, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      strBuilder0.size = 0;
      assertEquals(196, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(196, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      String string0 = strBuilder1.substring(0, 0);
      assertEquals(196, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(196, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder2.new StrBuilderTokenizer();
      assertEquals(196, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(196, strBuilder1.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(98, charBuffer0.capacity());
      assertEquals(98, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(98, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(98, charBuffer0.length());
      assertEquals(196, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder3 = strBuilder2.append("", (Object[]) null);
      assertEquals(196, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(196, strBuilder1.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(98, charBuffer0.capacity());
      assertEquals(98, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(98, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(98, charBuffer0.length());
      assertEquals(196, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(196, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)34;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)2, (byte) (-53), (byte)116, (byte)115, (byte)34}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      StrBuilder strBuilder4 = strBuilder3.minimizeCapacity();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(98, charBuffer0.capacity());
      assertEquals(98, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(98, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(98, charBuffer0.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder4);
      
      char[] charArray0 = strBuilder4.toCharArray(0, 0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(98, charBuffer0.capacity());
      assertEquals(98, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(98, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(98, charBuffer0.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      StrBuilder strBuilder5 = strBuilder0.append("", 0, 0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(0, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = new StrBuilder(0);
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(0, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertEquals(0, strBuilder6.size());
      assertFalse(strBuilder6.isNotEmpty());
      assertTrue(strBuilder6.equals((Object)strBuilder2));
      assertTrue(strBuilder6.equals((Object)strBuilder5));
      assertTrue(strBuilder6.equals((Object)strBuilder3));
      assertTrue(strBuilder6.equals((Object)strBuilder4));
      assertTrue(strBuilder6.equals((Object)strBuilder0));
      assertTrue(strBuilder6.equals((Object)strBuilder1));
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder3.deleteAll("");
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(98, charBuffer0.capacity());
      assertEquals(98, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(98, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(98, charBuffer0.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertEquals(0, strBuilder7.length());
      assertEquals(0, strBuilder7.size());
      assertFalse(strBuilder7.isNotEmpty());
      assertTrue(strBuilder7.isEmpty());
      assertEquals(0, strBuilder7.capacity());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder6);
      assertTrue(strBuilder0.equals((Object)strBuilder6));
      assertTrue(strBuilder1.equals((Object)strBuilder6));
      assertTrue(strBuilder2.equals((Object)strBuilder6));
      assertTrue(strBuilder7.equals((Object)strBuilder6));
      assertTrue(strBuilder3.equals((Object)strBuilder6));
      assertNotNull(strBuilder7);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be va:'");
      assertEquals(51, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("length must be va:'");
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(19, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(19, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(51, strBuilder1.capacity());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.insert(6, false);
      assertEquals(51, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(51, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(24, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(24, strBuilder2.length());
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(19, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(19, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(51, strBuilder1.capacity());
      assertEquals("length must be va:'", stringWriter0.toString());
      assertEquals("length must be va:'", stringWriter1.toString());
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertNotNull(stringWriter1);
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(19, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(19, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(51, strBuilder1.capacity());
      assertEquals("length must be va:'", stringWriter0.toString());
      assertEquals("length must be va:'", stringWriter1.toString());
      assertEquals(19, stringBuffer0.length());
      assertEquals("length must be va:'", stringBuffer0.toString());
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder3 = strBuilder2.append(stringBuffer0, 6, 6);
      assertEquals(51, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(30, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(19, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(19, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(51, strBuilder1.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(30, strBuilder2.length());
      assertEquals(51, strBuilder2.capacity());
      assertEquals(30, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals("length must be va:'", stringWriter0.toString());
      assertEquals("length must be va:'", stringWriter1.toString());
      assertEquals(19, stringBuffer0.length());
      assertEquals("length must be va:'", stringBuffer0.toString());
      assertEquals(30, strBuilder3.size());
      assertEquals(30, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(51, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.setNullText("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(51, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(30, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(19, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(19, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(51, strBuilder1.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(30, strBuilder2.length());
      assertEquals(51, strBuilder2.capacity());
      assertEquals(30, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", strBuilder2.getNullText());
      assertEquals("length must be va:'", stringWriter0.toString());
      assertEquals("length must be va:'", stringWriter1.toString());
      assertEquals(19, stringBuffer0.length());
      assertEquals("length must be va:'", stringBuffer0.toString());
      assertEquals(30, strBuilder3.size());
      assertEquals(30, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(51, strBuilder3.capacity());
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(51, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(30, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(30, strBuilder4.size());
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", strBuilder4.getNullText());
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder0.appendNull();
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(242, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(121, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(121, strBuilder0.length());
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", strBuilder0.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(121, strBuilder5.length());
      assertEquals(242, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", strBuilder5.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(121, strBuilder5.size());
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder5.setCharAt(6, 'u');
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(242, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(121, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(121, strBuilder0.length());
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", strBuilder0.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(121, strBuilder5.length());
      assertEquals(242, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", strBuilder5.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(121, strBuilder5.size());
      assertEquals(242, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(121, strBuilder6.size());
      assertEquals(121, strBuilder6.length());
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = new StrBuilder();
      assertEquals(0, strBuilder7.size());
      assertEquals(0, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertFalse(strBuilder7.isNotEmpty());
      assertEquals(32, strBuilder7.capacity());
      assertTrue(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertNotNull(strBuilder7);
      
      String string0 = strBuilder1.toString();
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(19, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(19, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(51, strBuilder1.capacity());
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder6);
      assertEquals("length must be va:'", string0);
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertNotNull(string0);
      
      boolean boolean0 = strBuilder7.isNotEmpty();
      assertEquals(0, strBuilder7.size());
      assertEquals(0, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertFalse(strBuilder7.isNotEmpty());
      assertEquals(32, strBuilder7.capacity());
      assertTrue(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder5);
      assertFalse(boolean0);
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(98);
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(98, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(98, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(98, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(98, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(charBuffer0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(196, strBuilder0.capacity());
      assertEquals(98, strBuilder0.length());
      assertEquals(98, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(196, strBuilder1.capacity());
      assertEquals(98, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(98, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(98, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(98, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(98, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(98, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(98, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(196, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(98, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      int int0 = 407;
      strBuilder0.size = 407;
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(196, strBuilder0.capacity());
      assertEquals(407, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(407, strBuilder0.size());
      
      // Undeclared exception!
      try { 
        strBuilder1.append((-1095.5F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("8");
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.substring(0, 0);
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("8");
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = strBuilder1.toCharArray(0, 0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      String string1 = strBuilder0.leftString(0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) fileSystemHandling0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) ":<,";
      objectArray0[5] = (Object) ":<,";
      objectArray0[6] = (Object) fileSystemHandling0;
      StrBuilder strBuilder2 = strBuilder1.appendln("", objectArray0);
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(33, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(33, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder2);
      assertEquals(7, objectArray0.length);
      
      StrBuilder strBuilder3 = strBuilder1.appendSeparator(":<,");
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertEquals(33, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(4, strBuilder3.size());
      assertEquals(4, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder3);
      
      String string2 = strBuilder0.build();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertEquals("\n:<,", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        strBuilder3.substring(1640);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("8");
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.substring(0, 0);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("8");
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(33, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = strBuilder1.toCharArray(0, 0);
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(33, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      StrBuilder strBuilder2 = strBuilder1.reverse();
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(33, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertEquals(33, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith("");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-282));
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("3#xTisj?", (String) null);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        charset0.encode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith((String) null);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.reset();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((-1));
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll('g');
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(3, strBuilder2.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      int int1 = strBuilder2.indexOf("org.apache.commons.lang3.text.StrTokenizer", 23);
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(3, strBuilder2.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = strBuilder0.equals((StrBuilder) null);
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertFalse(boolean0);
      
      StrBuilder strBuilder3 = strBuilder0.appendFixedWidthPadLeft(43, 97, 'P');
      assertEquals(200, strBuilder0.capacity());
      assertEquals(100, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(100, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(200, strBuilder3.capacity());
      assertEquals(100, strBuilder3.length());
      assertEquals(100, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder("k6\" OQ-zMY#!|8ehg^");
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean1 = strBuilder0.endsWith("k6\" OQ-zMY#!|8ehg^");
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0);
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(36, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(36, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(36, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(36, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(50, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll("C9O2VM");
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(36, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(36, strBuilder0.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(50, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(36, strBuilder2.size());
      assertEquals(36, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "D";
      stringArray0[1] = "k6\" OQ-zMY#!|8ehg^";
      stringArray0[2] = "k6\" OQ-zMY#!|8ehg^";
      stringArray0[3] = "Us'j14bT";
      stringArray0[4] = "D";
      stringArray0[5] = "k6\" OQ-zMY#!|8ehg^";
      StrBuilder strBuilder3 = strBuilder0.appendAll(stringArray0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(110, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(100, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(100, strBuilder0.size());
      assertEquals(100, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(100, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(110, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("5Sv!zR/Sq|>d}jGO");
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(4250);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8500, strBuilder0.capacity());
      assertEquals(4250, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4250, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4250, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(4250, strBuilder1.length());
      assertEquals(8500, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.insert(4250, (char[]) null);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8500, strBuilder0.capacity());
      assertEquals(4250, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4250, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4250, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(4250, strBuilder1.length());
      assertEquals(8500, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(4250, strBuilder2.size());
      assertEquals(4250, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(8500, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.ensureCapacity(9);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8500, strBuilder0.capacity());
      assertEquals(4250, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4250, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4250, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(4250, strBuilder1.length());
      assertEquals(8500, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(4250, strBuilder2.size());
      assertEquals(4250, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(8500, strBuilder2.capacity());
      assertEquals(8500, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(4250, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(4250, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      int int0 = strBuilder0.lastIndexOf("|jZKvS", 1294);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8500, strBuilder0.capacity());
      assertEquals(4250, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4250, strBuilder0.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertEquals((-1), int0);
      
      int int1 = strBuilder0.lastIndexOf('#', 1549);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8500, strBuilder0.capacity());
      assertEquals(4250, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4250, strBuilder0.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(23);
      assertEquals(23, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder(23);
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(23, strBuilder1.capacity());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = strBuilder1.getChars(charArray0);
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(23, strBuilder1.capacity());
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertTrue(strBuilder1.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Array and element cannot both be null");
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuilder0, 0, 0);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals("", stringBuilder0.toString());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder(0);
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      char[] charArray0 = strBuilder2.getChars((char[]) null);
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      StrBuilder strBuilder3 = strBuilder2.appendSeparator("8-ax7jf/.", (-1294));
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(3);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.append(false);
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder1.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(7, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(7, strBuilder2.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendln((double) 3);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(11, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(11, strBuilder2.size());
      assertEquals(11, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(11, strBuilder3.size());
      assertEquals(11, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[4] = '~';
      charArray0[5] = 's';
      charArray0[6] = 'D';
      charArray0[7] = 'F';
      charArray0[8] = 'S';
      StrBuilder strBuilder4 = new StrBuilder();
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = new StrBuilder("");
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.size());
      assertEquals(0, strBuilder5.length());
      assertFalse(strBuilder5.isNotEmpty());
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertNotNull(strBuilder5);
      
      boolean boolean0 = strBuilder0.startsWith("x aB\"Stgg(3'");
      assertEquals(32, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      
      String string0 = strBuilder1.midString(3, 5);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(11, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder4);
      assertEquals("alse3", string0);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertNotNull(string0);
      
      String string1 = strBuilder5.rightString(0);
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.size());
      assertEquals(0, strBuilder5.length());
      assertFalse(strBuilder5.isNotEmpty());
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertNotNull(string1);
      
      String string2 = strBuilder1.build();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(11, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder4);
      assertEquals("3\nfalse3.0\n", string2);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      StrBuilder strBuilder6 = new StrBuilder("|ax6d?GegBGGDG");
      assertEquals(14, strBuilder6.length());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(46, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(14, strBuilder6.size());
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = new StrBuilder((-1418));
      assertEquals(0, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertEquals(32, strBuilder7.capacity());
      assertTrue(strBuilder7.isEmpty());
      assertFalse(strBuilder7.isNotEmpty());
      assertEquals(0, strBuilder7.size());
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertTrue(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertTrue(strBuilder7.equals((Object)strBuilder5));
      assertNotNull(strBuilder7);
      
      boolean boolean1 = strBuilder7.equalsIgnoreCase(strBuilder5);
      assertEquals(0, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertEquals(32, strBuilder7.capacity());
      assertTrue(strBuilder7.isEmpty());
      assertFalse(strBuilder7.isNotEmpty());
      assertEquals(0, strBuilder7.size());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.size());
      assertEquals(0, strBuilder5.length());
      assertFalse(strBuilder5.isNotEmpty());
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder7);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder1);
      assertTrue(boolean1);
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertTrue(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertTrue(strBuilder7.equals((Object)strBuilder5));
      assertFalse(boolean1 == boolean0);
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder6));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertTrue(strBuilder5.equals((Object)strBuilder7));
      
      int int0 = strBuilder4.lastIndexOf("#:K!dJo]llJ", 0);
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isNotEmpty());
      assertNotSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder7);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder0);
      assertEquals((-1), int0);
      assertTrue(strBuilder4.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertTrue(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("xihnv!zR/Sq|>d}jGO");
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(50, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(18, strBuilder1.size());
      assertEquals(18, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(103);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(103, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(103, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(103, charBuffer0.remaining());
      assertEquals(103, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(charBuffer0);
      assertEquals(121, strBuilder0.size());
      assertEquals(242, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(121, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(121, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(121, strBuilder1.length());
      assertEquals(242, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(103, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(103, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(103, charBuffer0.remaining());
      assertEquals(103, charBuffer0.limit());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(242, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(121, strBuilder2.length());
      assertEquals(121, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.appendln(101);
      assertEquals(242, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(125, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(125, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(242, strBuilder3.capacity());
      assertEquals(125, strBuilder3.length());
      assertEquals(125, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.setLength(103);
      assertEquals(103, strBuilder0.length());
      assertEquals(242, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(103, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(103, strBuilder3.length());
      assertEquals(103, strBuilder3.size());
      assertEquals(242, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(103, strBuilder4.size());
      assertEquals(103, strBuilder4.length());
      assertEquals(242, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder1.append(false);
      assertEquals(242, strBuilder0.capacity());
      assertEquals(108, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(108, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(242, strBuilder1.capacity());
      assertEquals(108, strBuilder1.size());
      assertEquals(108, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(108, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(242, strBuilder5.capacity());
      assertEquals(108, strBuilder5.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertNotNull(strBuilder5);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder5.new StrBuilderWriter();
      assertEquals(242, strBuilder0.capacity());
      assertEquals(108, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(108, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(242, strBuilder1.capacity());
      assertEquals(108, strBuilder1.size());
      assertEquals(108, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(108, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(242, strBuilder5.capacity());
      assertEquals(108, strBuilder5.size());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.write((char[]) null, 3103, (-3692));
      assertEquals(242, strBuilder0.capacity());
      assertEquals(108, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(108, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(242, strBuilder1.capacity());
      assertEquals(108, strBuilder1.size());
      assertEquals(108, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(108, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(242, strBuilder5.capacity());
      assertEquals(108, strBuilder5.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      
      boolean boolean0 = strBuilder3.contains((String) null);
      assertEquals(242, strBuilder0.capacity());
      assertEquals(108, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(108, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder3.length());
      assertEquals(242, strBuilder3.capacity());
      assertEquals(108, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertFalse(boolean0);
      
      StrBuilder strBuilder6 = strBuilder5.append((double) 103);
      assertEquals(242, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(113, strBuilder0.length());
      assertEquals(113, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(242, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(113, strBuilder1.size());
      assertEquals(113, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(113, strBuilder5.length());
      assertEquals(113, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(242, strBuilder5.capacity());
      assertEquals(113, strBuilder6.size());
      assertEquals(113, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertEquals(242, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertNotNull(strBuilder6);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(102);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(charBuffer0);
      assertEquals(102, strBuilder0.size());
      assertEquals(204, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(102, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(102, strBuilder1.size());
      assertEquals(102, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(204, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(102, strBuilder2.length());
      assertEquals(102, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(204, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      strBuilder0.size = 0;
      assertEquals(0, strBuilder0.length());
      assertEquals(204, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(0, strBuilder0.length());
      assertEquals(204, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      String string0 = strBuilder1.substring(0, 0);
      assertEquals(0, strBuilder0.length());
      assertEquals(204, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(204, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder2.new StrBuilderTokenizer();
      assertEquals(0, strBuilder0.length());
      assertEquals(204, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(204, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(204, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder3 = strBuilder2.append("", (Object[]) null);
      assertEquals(0, strBuilder0.length());
      assertEquals(204, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(204, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(204, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(204, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.minimizeCapacity();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder0.append("", 0, 0);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = new StrBuilder(0);
      assertEquals(0, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertEquals(0, strBuilder6.size());
      assertFalse(strBuilder6.isNotEmpty());
      assertTrue(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.equals((Object)strBuilder5));
      assertTrue(strBuilder6.equals((Object)strBuilder4));
      assertTrue(strBuilder6.equals((Object)strBuilder1));
      assertTrue(strBuilder6.equals((Object)strBuilder3));
      assertTrue(strBuilder6.equals((Object)strBuilder0));
      assertTrue(strBuilder6.equals((Object)strBuilder2));
      assertNotNull(strBuilder6);
      
      // Undeclared exception!
      try { 
        strBuilder2.append(strBuilder3, 0, 283);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(102);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(102, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      strBuilder0.size = 0;
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      strBuilder0.size = 0;
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      String string0 = strBuilder1.substring(0, 0);
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder2 = strBuilder1.append("", (Object[]) null);
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder0.append("", 0, 0);
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder4.appendSeparator((String) null, 0);
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.size());
      assertEquals(0, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = new StrBuilder(0);
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isNotEmpty());
      assertTrue(strBuilder6.isEmpty());
      assertEquals(0, strBuilder6.size());
      assertEquals(0, strBuilder6.length());
      assertTrue(strBuilder6.equals((Object)strBuilder5));
      assertTrue(strBuilder6.equals((Object)strBuilder4));
      assertTrue(strBuilder6.equals((Object)strBuilder1));
      assertTrue(strBuilder6.equals((Object)strBuilder2));
      assertTrue(strBuilder6.equals((Object)strBuilder0));
      assertTrue(strBuilder6.equals((Object)strBuilder3));
      assertNotNull(strBuilder6);
      
      // Undeclared exception!
      try { 
        strBuilder6.charAt(5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 5
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-16));
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals("", stringBuilder0.toString());
      assertNotSame(strBuilder1, strBuilder0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator((String) null);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.trim();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      strBuilder2.hashCode();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      
      int int0 = strBuilder0.length();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertEquals(0, int0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      
      StrBuilder strBuilder4 = strBuilder1.append("M6XAg$");
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(6, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(6, strBuilder4.size());
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotNull(strBuilder4);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder5 = strBuilder3.insert(0, charArray0);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder5.isNotEmpty());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(0, strBuilder5.size());
      assertEquals(0, strBuilder5.length());
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(strBuilder5);
      assertEquals(0, charArray0.length);
      
      String string0 = strBuilder1.substring(0);
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertEquals("M6XAg$", string0);
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertNotNull(string0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StrBuilder strBuilder6 = strBuilder2.appendFixedWidthPadLeft((Object) "M6XAg$", (-235), 'I');
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertFalse(strBuilder6.isNotEmpty());
      assertTrue(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(0, strBuilder6.size());
      assertEquals(0, strBuilder6.length());
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder0.appendln(true);
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertEquals(5, strBuilder7.size());
      assertEquals(32, strBuilder7.capacity());
      assertEquals(5, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder6);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertNotNull(strBuilder7);
      
      int int1 = StrBuilder.CAPACITY;
      assertEquals(32, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "8";
      StrBuilder strBuilder0 = new StrBuilder("8");
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      strBuilder0.size = 117;
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(117, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      
      int int0 = 0;
      String string1 = strBuilder0.substring(0, 0);
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(117, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        strBuilder0.deleteFirst("8");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.close();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(133, 133);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 133
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      TreeSet<StringReader> treeSet0 = new TreeSet<StringReader>();
      assertNotNull(treeSet0);
      
      StringReader stringReader0 = treeSet0.pollFirst();
      assertNull(stringReader0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertNotNull(strBuilder_StrBuilderReader0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      StrBuilder strBuilder2 = strBuilder1.trim();
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.setNullText("', is neither of type Map.Entry nor an Array");
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals("', is neither of type Map.Entry nor an Array", strBuilder1.getNullText());
      assertEquals("', is neither of type Map.Entry nor an Array", strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertEquals("', is neither of type Map.Entry nor an Array", strBuilder3.getNullText());
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      StrBuilder strBuilder4 = strBuilder3.append((Object) null);
      assertEquals(88, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(44, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(44, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals("', is neither of type Map.Entry nor an Array", strBuilder1.getNullText());
      assertEquals("', is neither of type Map.Entry nor an Array", strBuilder2.getNullText());
      assertEquals(44, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(44, strBuilder2.size());
      assertEquals(88, strBuilder2.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(44, strBuilder3.size());
      assertEquals(44, strBuilder3.length());
      assertEquals(88, strBuilder3.capacity());
      assertEquals("', is neither of type Map.Entry nor an Array", strBuilder3.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals("', is neither of type Map.Entry nor an Array", strBuilder4.getNullText());
      assertEquals(88, strBuilder4.capacity());
      assertEquals(44, strBuilder4.length());
      assertEquals(44, strBuilder4.size());
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotNull(strBuilder4);
      
      char[] charArray0 = strBuilder4.toCharArray();
      assertEquals(88, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(44, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(44, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals("', is neither of type Map.Entry nor an Array", strBuilder1.getNullText());
      assertEquals("', is neither of type Map.Entry nor an Array", strBuilder2.getNullText());
      assertEquals(44, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(44, strBuilder2.size());
      assertEquals(88, strBuilder2.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(44, strBuilder3.size());
      assertEquals(44, strBuilder3.length());
      assertEquals(88, strBuilder3.capacity());
      assertEquals("', is neither of type Map.Entry nor an Array", strBuilder3.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals("', is neither of type Map.Entry nor an Array", strBuilder4.getNullText());
      assertEquals(88, strBuilder4.capacity());
      assertEquals(44, strBuilder4.length());
      assertEquals(44, strBuilder4.size());
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotNull(charArray0);
      assertEquals(44, charArray0.length);
      
      StrBuilder strBuilder5 = strBuilder1.appendln(charArray0);
      assertEquals(89, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(178, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(89, strBuilder1.size());
      assertEquals("', is neither of type Map.Entry nor an Array", strBuilder1.getNullText());
      assertEquals(89, strBuilder2.size());
      assertEquals(89, strBuilder2.length());
      assertEquals("', is neither of type Map.Entry nor an Array", strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(178, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(178, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(89, strBuilder3.size());
      assertEquals(89, strBuilder3.length());
      assertEquals("', is neither of type Map.Entry nor an Array", strBuilder3.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals("', is neither of type Map.Entry nor an Array", strBuilder4.getNullText());
      assertEquals(89, strBuilder4.length());
      assertEquals(89, strBuilder4.size());
      assertEquals(178, strBuilder4.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(178, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(89, strBuilder5.length());
      assertEquals(89, strBuilder5.size());
      assertEquals("', is neither of type Map.Entry nor an Array", strBuilder5.getNullText());
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertNotNull(strBuilder5);
      assertEquals(44, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("7M3AG");
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(37, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) "7M3AG");
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(37, strBuilder0.capacity());
      assertEquals(10, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(10, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(37, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.replaceAll('W', 'Q');
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(37, strBuilder0.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(37, strBuilder2.capacity());
      assertEquals(10, strBuilder2.length());
      assertEquals(10, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(0.0F);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.setLength(2361);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4722, strBuilder0.capacity());
      assertEquals(2361, strBuilder0.length());
      assertEquals(2361, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(4722, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(2361, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2361, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.replaceAll("Invalid offset: ", "Invalid offset: ");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4722, strBuilder0.capacity());
      assertEquals(2361, strBuilder0.length());
      assertEquals(2361, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(4722, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(2361, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2361, strBuilder2.size());
      assertEquals(4722, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(2361, strBuilder3.size());
      assertEquals(2361, strBuilder3.length());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      boolean boolean1 = strBuilder0.contains("");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4722, strBuilder0.capacity());
      assertEquals(2361, strBuilder0.length());
      assertEquals(2361, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = strBuilder0.equals((Object) strBuilder3);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4722, strBuilder0.capacity());
      assertEquals(2361, strBuilder0.length());
      assertEquals(2361, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(4722, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(2361, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2361, strBuilder2.size());
      assertEquals(4722, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(2361, strBuilder3.size());
      assertEquals(2361, strBuilder3.length());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      StrBuilder strBuilder4 = strBuilder3.append((CharSequence) strBuilder1);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4722, strBuilder0.capacity());
      assertEquals(4722, strBuilder0.length());
      assertEquals(4722, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4722, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(4722, strBuilder1.size());
      assertEquals(4722, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(4722, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(4722, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(4722, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(4722, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(4722, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(4722, strBuilder3.size());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(4722, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(4722, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(4722, strBuilder4.size());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertNotNull(strBuilder4);
      
      int int0 = 179;
      StrBuilder strBuilder5 = strBuilder0.deleteAll('');
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4722, strBuilder0.capacity());
      assertEquals(4722, strBuilder0.length());
      assertEquals(4722, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(4722, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertEquals(4722, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(4722, strBuilder5.size());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = new StrBuilder(179);
      assertFalse(strBuilder6.isNotEmpty());
      assertEquals(0, strBuilder6.size());
      assertEquals(179, strBuilder6.capacity());
      assertEquals(0, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder6.isEmpty());
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertNotNull(strBuilder6);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln(strBuilder6, 2361, Integer.MIN_VALUE);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      assertEquals(2, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("i|QS");
      assertEquals("i|QS", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.equals((Object) strBuilder1);
      assertEquals(2, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertTrue(boolean0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("xihnv!zR/Sq|>d}jGO");
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.length());
      assertEquals(50, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.length());
      assertEquals(50, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(50, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(103);
      assertEquals(103, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(103, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(103, charBuffer0.remaining());
      assertEquals(103, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(charBuffer0);
      assertNull(strBuilder0.getNullText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(121, strBuilder0.size());
      assertEquals(121, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(121, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(121, strBuilder1.size());
      assertEquals(242, strBuilder1.capacity());
      assertEquals(103, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(103, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(103, charBuffer0.remaining());
      assertEquals(103, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(121, strBuilder2.size());
      assertEquals(242, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(121, strBuilder2.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.appendln(101);
      assertNull(strBuilder0.getNullText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(125, strBuilder0.size());
      assertEquals(125, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(242, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(125, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(125, strBuilder3.size());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.setLength(103);
      assertNull(strBuilder0.getNullText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(103, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(103, strBuilder0.length());
      assertEquals(103, strBuilder3.size());
      assertEquals(103, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(242, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(242, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(103, strBuilder4.length());
      assertEquals(103, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder1.append(false);
      assertNull(strBuilder0.getNullText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(108, strBuilder0.length());
      assertEquals(108, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(108, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(108, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(242, strBuilder1.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(108, strBuilder5.length());
      assertEquals(108, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(242, strBuilder5.capacity());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder4.appendSeparator("xihnv!zR/Sq|>d}jGO", 1641);
      assertNull(strBuilder0.getNullText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(126, strBuilder0.size());
      assertEquals(126, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(242, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(126, strBuilder3.size());
      assertEquals(126, strBuilder3.length());
      assertEquals(126, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(242, strBuilder4.capacity());
      assertEquals(126, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(242, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(126, strBuilder6.size());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(126, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertNotNull(strBuilder6);
      
      ArrayDeque<StringWriter> arrayDeque0 = new ArrayDeque<StringWriter>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      StrBuilder strBuilder7 = strBuilder0.replaceFirst('t', 't');
      assertNull(strBuilder0.getNullText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(126, strBuilder0.size());
      assertEquals(126, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals(126, strBuilder7.size());
      assertEquals(126, strBuilder7.length());
      assertEquals(242, strBuilder7.capacity());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder3);
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = strBuilder4.appendSeparator('t', 't');
      assertEquals(127, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(127, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(242, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(127, strBuilder3.size());
      assertEquals(127, strBuilder3.length());
      assertEquals(127, strBuilder4.length());
      assertEquals(127, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(242, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertTrue(strBuilder8.isNotEmpty());
      assertEquals(127, strBuilder8.size());
      assertEquals(242, strBuilder8.capacity());
      assertEquals(127, strBuilder8.length());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder5);
      assertNotNull(strBuilder8);
      
      StrBuilder strBuilder9 = strBuilder8.appendln(1310L);
      assertNull(strBuilder0.getNullText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(132, strBuilder0.length());
      assertEquals(132, strBuilder0.size());
      assertEquals(132, strBuilder3.size());
      assertEquals(132, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(242, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(242, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(132, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(132, strBuilder4.length());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertEquals(132, strBuilder8.size());
      assertEquals(132, strBuilder8.length());
      assertTrue(strBuilder8.isNotEmpty());
      assertEquals(242, strBuilder8.capacity());
      assertNull(strBuilder9.getNullText());
      assertTrue(strBuilder9.isNotEmpty());
      assertEquals(242, strBuilder9.capacity());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(132, strBuilder9.size());
      assertEquals(132, strBuilder9.length());
      assertFalse(strBuilder9.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder9);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder9);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder5);
      assertNotNull(strBuilder9);
      
      StrBuilder strBuilder10 = strBuilder2.deleteAll('t');
      assertEquals(131, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(131, strBuilder0.size());
      assertEquals(131, strBuilder1.size());
      assertEquals(131, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(242, strBuilder1.capacity());
      assertEquals(103, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(103, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(103, charBuffer0.remaining());
      assertEquals(103, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(131, strBuilder2.length());
      assertEquals(242, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(131, strBuilder2.size());
      assertEquals(131, strBuilder10.length());
      assertEquals(131, strBuilder10.size());
      assertFalse(strBuilder10.isEmpty());
      assertTrue(strBuilder10.isNotEmpty());
      assertNull(strBuilder10.getNullText());
      assertEquals(242, strBuilder10.capacity());
      assertNull(strBuilder10.getNewLineText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder2, strBuilder10);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder4);
      assertNotNull(strBuilder10);
      
      int int0 = strBuilder0.indexOf("xihnv!zR/Sq|>d}jGO", (-736));
      assertEquals(131, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(131, strBuilder0.size());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertEquals(0, int0);
      
      boolean boolean0 = strBuilder2.equals(strBuilder10);
      assertEquals(131, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(131, strBuilder0.size());
      assertEquals(131, strBuilder1.size());
      assertEquals(131, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(242, strBuilder1.capacity());
      assertEquals(103, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(103, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(103, charBuffer0.remaining());
      assertEquals(103, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(131, strBuilder2.length());
      assertEquals(242, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(131, strBuilder2.size());
      assertEquals(131, strBuilder10.length());
      assertEquals(131, strBuilder10.size());
      assertFalse(strBuilder10.isEmpty());
      assertTrue(strBuilder10.isNotEmpty());
      assertNull(strBuilder10.getNullText());
      assertEquals(242, strBuilder10.capacity());
      assertNull(strBuilder10.getNewLineText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder2, strBuilder10);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder4);
      assertTrue(boolean0);
      
      StrBuilder strBuilder11 = strBuilder10.append((StringBuffer) null, 97, 187);
      assertEquals(131, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(131, strBuilder0.size());
      assertEquals(131, strBuilder1.size());
      assertEquals(131, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(242, strBuilder1.capacity());
      assertEquals(103, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(103, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(103, charBuffer0.remaining());
      assertEquals(103, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(131, strBuilder2.length());
      assertEquals(242, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(131, strBuilder2.size());
      assertEquals(131, strBuilder10.length());
      assertEquals(131, strBuilder10.size());
      assertFalse(strBuilder10.isEmpty());
      assertTrue(strBuilder10.isNotEmpty());
      assertNull(strBuilder10.getNullText());
      assertEquals(242, strBuilder10.capacity());
      assertNull(strBuilder10.getNewLineText());
      assertEquals(131, strBuilder11.length());
      assertEquals(131, strBuilder11.size());
      assertEquals(242, strBuilder11.capacity());
      assertFalse(strBuilder11.isEmpty());
      assertTrue(strBuilder11.isNotEmpty());
      assertNull(strBuilder11.getNewLineText());
      assertNull(strBuilder11.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder11);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder2, strBuilder10);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder11);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder11);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder11, strBuilder0);
      assertSame(strBuilder11, strBuilder3);
      assertSame(strBuilder11, strBuilder8);
      assertSame(strBuilder11, strBuilder1);
      assertSame(strBuilder11, strBuilder5);
      assertSame(strBuilder11, strBuilder6);
      assertSame(strBuilder11, strBuilder2);
      assertSame(strBuilder11, strBuilder9);
      assertSame(strBuilder11, strBuilder7);
      assertSame(strBuilder11, strBuilder10);
      assertSame(strBuilder11, strBuilder4);
      assertNotNull(strBuilder11);
      
      StringBuilder stringBuilder0 = strBuilder8.toStringBuilder();
      assertEquals("xihnv!zR/Sq|>d}jGO\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000falsexihnv!zR/Sq|>d}jGO1310\n", stringBuilder0.toString());
      assertEquals(131, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(131, strBuilder0.size());
      assertEquals(131, strBuilder3.size());
      assertEquals(131, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(242, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(242, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(131, strBuilder4.length());
      assertEquals(131, strBuilder4.size());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertEquals(131, strBuilder8.size());
      assertEquals(131, strBuilder8.length());
      assertTrue(strBuilder8.isNotEmpty());
      assertEquals(242, strBuilder8.capacity());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder10);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder11);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder10);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder9);
      assertSame(strBuilder4, strBuilder11);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder8, strBuilder11);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder9);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder10);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder5);
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder12 = strBuilder11.appendNull();
      assertEquals(131, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(131, strBuilder0.size());
      assertNull(strBuilder12.getNewLineText());
      assertNull(strBuilder12.getNullText());
      assertEquals(131, strBuilder12.length());
      assertTrue(strBuilder12.isNotEmpty());
      assertEquals(131, strBuilder12.size());
      assertEquals(242, strBuilder12.capacity());
      assertFalse(strBuilder12.isEmpty());
      assertEquals(131, strBuilder1.size());
      assertEquals(131, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(242, strBuilder1.capacity());
      assertEquals(103, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(103, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(103, charBuffer0.remaining());
      assertEquals(103, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(131, strBuilder2.length());
      assertEquals(242, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(131, strBuilder2.size());
      assertEquals(131, strBuilder10.length());
      assertEquals(131, strBuilder10.size());
      assertFalse(strBuilder10.isEmpty());
      assertTrue(strBuilder10.isNotEmpty());
      assertNull(strBuilder10.getNullText());
      assertEquals(242, strBuilder10.capacity());
      assertNull(strBuilder10.getNewLineText());
      assertEquals(131, strBuilder11.length());
      assertEquals(131, strBuilder11.size());
      assertEquals(242, strBuilder11.capacity());
      assertFalse(strBuilder11.isEmpty());
      assertTrue(strBuilder11.isNotEmpty());
      assertNull(strBuilder11.getNewLineText());
      assertNull(strBuilder11.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder12);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder12, strBuilder8);
      assertSame(strBuilder12, strBuilder9);
      assertSame(strBuilder12, strBuilder0);
      assertSame(strBuilder12, strBuilder6);
      assertSame(strBuilder12, strBuilder2);
      assertSame(strBuilder12, strBuilder10);
      assertSame(strBuilder12, strBuilder11);
      assertSame(strBuilder12, strBuilder4);
      assertSame(strBuilder12, strBuilder3);
      assertSame(strBuilder12, strBuilder7);
      assertSame(strBuilder12, strBuilder5);
      assertSame(strBuilder12, strBuilder1);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder12);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder11);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder10);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder12);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder11);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder12);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder11);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder11, strBuilder0);
      assertSame(strBuilder11, strBuilder3);
      assertSame(strBuilder11, strBuilder8);
      assertSame(strBuilder11, strBuilder1);
      assertSame(strBuilder11, strBuilder5);
      assertSame(strBuilder11, strBuilder6);
      assertSame(strBuilder11, strBuilder2);
      assertSame(strBuilder11, strBuilder9);
      assertSame(strBuilder11, strBuilder7);
      assertSame(strBuilder11, strBuilder10);
      assertSame(strBuilder11, strBuilder12);
      assertSame(strBuilder11, strBuilder4);
      assertNotNull(strBuilder12);
      
      Reader reader0 = strBuilder8.asReader();
      assertEquals(131, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(131, strBuilder0.size());
      assertTrue(reader0.ready());
      assertTrue(reader0.markSupported());
      assertEquals(131, strBuilder3.size());
      assertEquals(131, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(242, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(242, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(131, strBuilder4.length());
      assertEquals(131, strBuilder4.size());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertEquals(131, strBuilder8.size());
      assertEquals(131, strBuilder8.length());
      assertTrue(strBuilder8.isNotEmpty());
      assertEquals(242, strBuilder8.capacity());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder12);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder10);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder11);
      assertSame(strBuilder3, strBuilder12);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder12);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder10);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder9);
      assertSame(strBuilder4, strBuilder11);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder8, strBuilder11);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder12);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder9);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder10);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder5);
      assertNotNull(reader0);
      
      StrBuilder strBuilder13 = new StrBuilder();
      assertEquals(0, strBuilder13.size());
      assertFalse(strBuilder13.isNotEmpty());
      assertNull(strBuilder13.getNewLineText());
      assertNull(strBuilder13.getNullText());
      assertEquals(32, strBuilder13.capacity());
      assertTrue(strBuilder13.isEmpty());
      assertEquals(0, strBuilder13.length());
      assertFalse(strBuilder13.equals((Object)strBuilder6));
      assertFalse(strBuilder13.equals((Object)strBuilder5));
      assertFalse(strBuilder13.equals((Object)strBuilder0));
      assertFalse(strBuilder13.equals((Object)strBuilder3));
      assertFalse(strBuilder13.equals((Object)strBuilder9));
      assertFalse(strBuilder13.equals((Object)strBuilder2));
      assertFalse(strBuilder13.equals((Object)strBuilder8));
      assertFalse(strBuilder13.equals((Object)strBuilder1));
      assertFalse(strBuilder13.equals((Object)strBuilder7));
      assertFalse(strBuilder13.equals((Object)strBuilder10));
      assertFalse(strBuilder13.equals((Object)strBuilder11));
      assertFalse(strBuilder13.equals((Object)strBuilder4));
      assertFalse(strBuilder13.equals((Object)strBuilder12));
      assertNotNull(strBuilder13);
      
      int int1 = strBuilder6.lastIndexOf((String) null, 97);
      assertEquals(131, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(131, strBuilder0.size());
      assertEquals(131, strBuilder3.size());
      assertEquals(131, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(242, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(242, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(131, strBuilder4.length());
      assertEquals(131, strBuilder4.size());
      assertEquals(131, strBuilder6.size());
      assertEquals(242, strBuilder6.capacity());
      assertEquals(131, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder13);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder12);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder11);
      assertNotSame(strBuilder3, strBuilder13);
      assertSame(strBuilder3, strBuilder12);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder10);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder12);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder9);
      assertSame(strBuilder4, strBuilder11);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder10);
      assertSame(strBuilder4, strBuilder8);
      assertNotSame(strBuilder4, strBuilder13);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder9);
      assertSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder13);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder10);
      assertSame(strBuilder6, strBuilder11);
      assertSame(strBuilder6, strBuilder12);
      assertEquals((-1), int1);
      assertFalse(strBuilder0.equals((Object)strBuilder13));
      assertFalse(int1 == int0);
      assertFalse(strBuilder3.equals((Object)strBuilder13));
      assertFalse(strBuilder4.equals((Object)strBuilder13));
      assertFalse(strBuilder6.equals((Object)strBuilder13));
      
      String string0 = strBuilder13.toString();
      assertEquals(0, strBuilder13.size());
      assertFalse(strBuilder13.isNotEmpty());
      assertNull(strBuilder13.getNewLineText());
      assertNull(strBuilder13.getNullText());
      assertEquals(32, strBuilder13.capacity());
      assertTrue(strBuilder13.isEmpty());
      assertEquals(0, strBuilder13.length());
      assertNotSame(strBuilder13, strBuilder6);
      assertNotSame(strBuilder13, strBuilder5);
      assertNotSame(strBuilder13, strBuilder0);
      assertNotSame(strBuilder13, strBuilder3);
      assertNotSame(strBuilder13, strBuilder9);
      assertNotSame(strBuilder13, strBuilder2);
      assertNotSame(strBuilder13, strBuilder8);
      assertNotSame(strBuilder13, strBuilder1);
      assertNotSame(strBuilder13, strBuilder7);
      assertNotSame(strBuilder13, strBuilder10);
      assertNotSame(strBuilder13, strBuilder11);
      assertNotSame(strBuilder13, strBuilder4);
      assertNotSame(strBuilder13, strBuilder12);
      assertEquals("", string0);
      assertFalse(strBuilder13.equals((Object)strBuilder6));
      assertFalse(strBuilder13.equals((Object)strBuilder5));
      assertFalse(strBuilder13.equals((Object)strBuilder0));
      assertFalse(strBuilder13.equals((Object)strBuilder3));
      assertFalse(strBuilder13.equals((Object)strBuilder9));
      assertFalse(strBuilder13.equals((Object)strBuilder2));
      assertFalse(strBuilder13.equals((Object)strBuilder8));
      assertFalse(strBuilder13.equals((Object)strBuilder1));
      assertFalse(strBuilder13.equals((Object)strBuilder7));
      assertFalse(strBuilder13.equals((Object)strBuilder10));
      assertFalse(strBuilder13.equals((Object)strBuilder11));
      assertFalse(strBuilder13.equals((Object)strBuilder4));
      assertFalse(strBuilder13.equals((Object)strBuilder12));
      assertNotNull(string0);
      
      StrBuilder strBuilder14 = strBuilder7.deleteAll("xihnv!zR/Sq|>d}jGO");
      assertEquals(95, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(95, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(95, strBuilder14.size());
      assertNull(strBuilder14.getNullText());
      assertTrue(strBuilder14.isNotEmpty());
      assertEquals(242, strBuilder14.capacity());
      assertEquals(95, strBuilder14.length());
      assertNull(strBuilder14.getNewLineText());
      assertFalse(strBuilder14.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals(95, strBuilder7.size());
      assertEquals(242, strBuilder7.capacity());
      assertEquals(95, strBuilder7.length());
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder13);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder12);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder14);
      assertSame(strBuilder14, strBuilder3);
      assertSame(strBuilder14, strBuilder4);
      assertSame(strBuilder14, strBuilder12);
      assertSame(strBuilder14, strBuilder1);
      assertSame(strBuilder14, strBuilder8);
      assertNotSame(strBuilder14, strBuilder13);
      assertSame(strBuilder14, strBuilder0);
      assertSame(strBuilder14, strBuilder2);
      assertSame(strBuilder14, strBuilder10);
      assertSame(strBuilder14, strBuilder9);
      assertSame(strBuilder14, strBuilder11);
      assertSame(strBuilder14, strBuilder5);
      assertSame(strBuilder14, strBuilder6);
      assertSame(strBuilder14, strBuilder7);
      assertSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder13);
      assertSame(strBuilder7, strBuilder11);
      assertSame(strBuilder7, strBuilder12);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder9);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder10);
      assertSame(strBuilder7, strBuilder8);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder14);
      assertSame(strBuilder7, strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder13));
      assertFalse(strBuilder14.equals((Object)strBuilder13));
      assertFalse(strBuilder7.equals((Object)strBuilder13));
      assertNotNull(strBuilder14);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append("");
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendln((-1765.1));
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(8, strBuilder1.size());
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(8, strBuilder2.size());
      assertEquals(8, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.append((-881));
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(12, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(12, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(12, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(12, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(12, strBuilder2.size());
      assertEquals(12, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(12, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(12, strBuilder3.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.appendFixedWidthPadRight((Object) strBuilder0, 32, 'E');
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(44, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(44, strBuilder0.size());
      assertEquals(88, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(44, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(44, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(88, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(88, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(44, strBuilder2.size());
      assertEquals(44, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(44, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(88, strBuilder3.capacity());
      assertEquals(44, strBuilder3.length());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(44, strBuilder4.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(44, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(88, strBuilder4.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder2.replaceFirst("VMz'V!$W\n/oS,fm", "A,]->E{gW[I=");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(44, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(44, strBuilder0.size());
      assertEquals(88, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(44, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(44, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(88, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(88, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(44, strBuilder2.size());
      assertEquals(44, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(88, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertEquals(44, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(44, strBuilder5.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertNotNull(strBuilder5);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder("=72AY");
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.setNewLineText("=72AY");
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.capacity());
      assertEquals("=72AY", strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(37, strBuilder1.capacity());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertEquals("=72AY", strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = 116;
      int int1 = strBuilder0.lastIndexOf("=72AY", 116);
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.capacity());
      assertEquals("=72AY", strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StrBuilder strBuilder2 = strBuilder1.append('M');
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.capacity());
      assertEquals("=72AY", strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(37, strBuilder1.capacity());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertEquals("=72AY", strBuilder1.getNewLineText());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(37, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals("=72AY", strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder[] strBuilderArray0 = new StrBuilder[3];
      StrBuilder strBuilder3 = new StrBuilder();
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      
      strBuilderArray0[0] = strBuilder3;
      StrBuilder strBuilder4 = new StrBuilder("=72AY");
      assertEquals(37, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(5, strBuilder4.length());
      assertEquals(5, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotNull(strBuilder4);
      
      strBuilderArray0[1] = strBuilder4;
      strBuilderArray0[2] = strBuilder1;
      StrBuilder strBuilder5 = strBuilder1.appendAll(strBuilderArray0);
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.capacity());
      assertEquals("=72AY", strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(22, strBuilder0.length());
      assertEquals(22, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(37, strBuilder1.capacity());
      assertEquals(22, strBuilder1.size());
      assertEquals(22, strBuilder1.length());
      assertEquals("=72AY", strBuilder1.getNewLineText());
      assertEquals(37, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(22, strBuilder5.size());
      assertEquals(22, strBuilder5.length());
      assertEquals("=72AY", strBuilder5.getNewLineText());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertNotNull(strBuilder5);
      assertEquals(3, strBuilderArray0.length);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        stringBuilder0.insert(0, (CharSequence) strBuilder4, 16, 116);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 16, end 116, s.length() 5
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = new StrBuilder("");
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      strBuilder1.size = 101;
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(101, strBuilder1.length());
      assertEquals(101, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder1.reverse();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(997);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(997, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(116);
      assertEquals(116, strBuilder0.length());
      assertEquals(997, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(116, strBuilder0.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(116, strBuilder1.size());
      assertEquals(997, strBuilder1.capacity());
      assertEquals(116, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(116, strBuilder0.length());
      assertEquals(997, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(116, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      StrBuilder strBuilder2 = strBuilder0.trim();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(997, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertEquals(997, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = new StrBuilder();
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      StrBuilder strBuilder4 = strBuilder1.append((Object) null);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(997, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(997, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(997, strBuilder4.capacity());
      assertEquals(0, strBuilder4.size());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertTrue(strBuilder0.equals((Object)strBuilder3));
      assertTrue(strBuilder1.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertNotNull(strBuilder4);
      
      char[] charArray0 = strBuilder1.toCharArray();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(997, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(997, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertTrue(strBuilder0.equals((Object)strBuilder3));
      assertTrue(strBuilder1.equals((Object)strBuilder3));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendAll((Object[]) null);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(1, strBuilder3.length());
      assertEquals(1, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder0.replaceFirst((String) null, (String) null);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder4.length());
      assertEquals(1, strBuilder4.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder0.appendSeparator('v', 'v');
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(2, strBuilder5.length());
      assertEquals(2, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertNotNull(strBuilder5);
      
      String string0 = strBuilder4.rightString(2);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder4.length());
      assertEquals(2, strBuilder4.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertEquals("\nv", string0);
      assertNotNull(string0);
      
      String string1 = strBuilder1.build();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertEquals("\nv", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = strBuilder4.equalsIgnoreCase(strBuilder4);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder4.length());
      assertEquals(2, strBuilder4.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("xihnv!zR/Sq|>d}jGO");
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(50, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(103);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(103, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(103, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(103, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(103, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(charBuffer0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(121, strBuilder0.size());
      assertEquals(121, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(121, strBuilder1.size());
      assertEquals(121, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(242, strBuilder1.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(103, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(103, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(103, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(103, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(121, strBuilder2.size());
      assertEquals(121, strBuilder2.length());
      assertEquals(242, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.appendln(101);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(125, strBuilder0.size());
      assertEquals(125, strBuilder0.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(242, strBuilder3.capacity());
      assertEquals(125, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(125, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.setLength(103);
      assertEquals(103, strBuilder0.size());
      assertEquals(103, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(242, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(103, strBuilder3.length());
      assertEquals(103, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(242, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(103, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(103, strBuilder4.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder1.append(false);
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(108, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(108, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(108, strBuilder1.size());
      assertEquals(242, strBuilder1.capacity());
      assertEquals(108, strBuilder5.size());
      assertEquals(242, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(108, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder4.appendSeparator("xihnv!zR/Sq|>d}jGO", 1641);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(126, strBuilder0.size());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(126, strBuilder0.length());
      assertEquals(126, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(242, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(126, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(126, strBuilder4.size());
      assertEquals(126, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(242, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(242, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(126, strBuilder6.size());
      assertEquals(126, strBuilder6.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertNotNull(strBuilder6);
      
      ArrayDeque<StringWriter> arrayDeque0 = new ArrayDeque<StringWriter>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Iterator<StringWriter> iterator0 = arrayDeque0.descendingIterator();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      StrBuilder strBuilder7 = strBuilder0.replaceFirst('t', 't');
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(126, strBuilder0.size());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(126, strBuilder0.length());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(242, strBuilder7.capacity());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(126, strBuilder7.size());
      assertEquals(126, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder1);
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = strBuilder4.appendSeparator('t', 't');
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(127, strBuilder0.size());
      assertEquals(127, strBuilder0.length());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(127, strBuilder3.length());
      assertEquals(127, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(242, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(127, strBuilder4.size());
      assertEquals(242, strBuilder4.capacity());
      assertEquals(127, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(242, strBuilder8.capacity());
      assertFalse(strBuilder8.isEmpty());
      assertTrue(strBuilder8.isNotEmpty());
      assertNull(strBuilder8.getNullText());
      assertEquals(127, strBuilder8.length());
      assertEquals(127, strBuilder8.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder7);
      assertNotNull(strBuilder8);
      
      StrBuilder strBuilder9 = strBuilder8.appendln(1310L);
      assertEquals(132, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(132, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(132, strBuilder3.size());
      assertEquals(132, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(242, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(132, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(242, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(132, strBuilder4.size());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(242, strBuilder8.capacity());
      assertFalse(strBuilder8.isEmpty());
      assertTrue(strBuilder8.isNotEmpty());
      assertNull(strBuilder8.getNullText());
      assertEquals(132, strBuilder8.size());
      assertEquals(132, strBuilder8.length());
      assertEquals(132, strBuilder9.length());
      assertEquals(132, strBuilder9.size());
      assertTrue(strBuilder9.isNotEmpty());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(242, strBuilder9.capacity());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder9);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder9);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder0);
      assertNotNull(strBuilder9);
      
      StrBuilder strBuilder10 = strBuilder2.deleteAll('t');
      assertEquals(131, strBuilder0.size());
      assertEquals(131, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(131, strBuilder1.size());
      assertEquals(131, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(242, strBuilder1.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(103, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(103, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(103, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(103, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(242, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(131, strBuilder2.size());
      assertEquals(131, strBuilder2.length());
      assertEquals(131, strBuilder10.size());
      assertEquals(131, strBuilder10.length());
      assertEquals(242, strBuilder10.capacity());
      assertNull(strBuilder10.getNewLineText());
      assertTrue(strBuilder10.isNotEmpty());
      assertFalse(strBuilder10.isEmpty());
      assertNull(strBuilder10.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder10);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder5);
      assertNotNull(strBuilder10);
      
      int int0 = strBuilder0.indexOf("xihnv!zR/Sq|>d}jGO", (-736));
      assertEquals(131, strBuilder0.size());
      assertEquals(131, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertEquals(0, int0);
      
      boolean boolean0 = strBuilder2.equals(strBuilder10);
      assertEquals(131, strBuilder0.size());
      assertEquals(131, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(131, strBuilder1.size());
      assertEquals(131, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(242, strBuilder1.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(103, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(103, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(103, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(103, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(242, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(131, strBuilder2.size());
      assertEquals(131, strBuilder2.length());
      assertEquals(131, strBuilder10.size());
      assertEquals(131, strBuilder10.length());
      assertEquals(242, strBuilder10.capacity());
      assertNull(strBuilder10.getNewLineText());
      assertTrue(strBuilder10.isNotEmpty());
      assertFalse(strBuilder10.isEmpty());
      assertNull(strBuilder10.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder10);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder5);
      assertTrue(boolean0);
      
      StrBuilder strBuilder11 = strBuilder6.appendFixedWidthPadLeft(1641, 97, '!');
      assertEquals(228, strBuilder11.length());
      assertEquals(228, strBuilder11.size());
      assertNull(strBuilder11.getNullText());
      assertNull(strBuilder11.getNewLineText());
      assertTrue(strBuilder11.isNotEmpty());
      assertFalse(strBuilder11.isEmpty());
      assertEquals(242, strBuilder11.capacity());
      assertEquals(228, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(228, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(242, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(228, strBuilder3.size());
      assertEquals(228, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(242, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(228, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(242, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(228, strBuilder4.size());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(228, strBuilder6.size());
      assertEquals(228, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertEquals(242, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertSame(strBuilder11, strBuilder1);
      assertSame(strBuilder11, strBuilder0);
      assertSame(strBuilder11, strBuilder5);
      assertSame(strBuilder11, strBuilder8);
      assertSame(strBuilder11, strBuilder9);
      assertSame(strBuilder11, strBuilder6);
      assertSame(strBuilder11, strBuilder3);
      assertSame(strBuilder11, strBuilder10);
      assertSame(strBuilder11, strBuilder4);
      assertSame(strBuilder11, strBuilder7);
      assertSame(strBuilder11, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder11);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder10);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder11);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder9);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder10);
      assertSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder10);
      assertSame(strBuilder6, strBuilder11);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder9);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder4);
      assertNotNull(strBuilder11);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("bFyN(o#(ye");
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("%%,_cZ46CQP,}F:YO6M");
      assertNull(strBuilder1.getNullText());
      assertEquals(51, strBuilder1.capacity());
      assertEquals(19, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(19, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendSeparator("wXzk?Ve&[P%.%hA", 34);
      assertNull(strBuilder1.getNullText());
      assertEquals(51, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(34, strBuilder1.length());
      assertEquals(34, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(51, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(34, strBuilder2.length());
      assertEquals(34, strBuilder2.size());
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.appendFixedWidthPadLeft((Object) null, 44, '~');
      assertNull(strBuilder1.getNullText());
      assertEquals(78, strBuilder1.length());
      assertEquals(78, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(156, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(78, strBuilder3.length());
      assertEquals(78, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(156, strBuilder3.capacity());
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder2.appendln(false);
      assertNull(strBuilder1.getNullText());
      assertEquals(84, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(84, strBuilder1.length());
      assertEquals(156, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(156, strBuilder2.capacity());
      assertEquals(84, strBuilder2.length());
      assertEquals(84, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(156, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(84, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(84, strBuilder4.size());
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotNull(strBuilder4);
      
      int int0 = strBuilder4.lastIndexOf("wXzk?Ve&[P%.%hA");
      assertNull(strBuilder1.getNullText());
      assertEquals(84, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(84, strBuilder1.length());
      assertEquals(156, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(156, strBuilder2.capacity());
      assertEquals(84, strBuilder2.length());
      assertEquals(84, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(156, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(84, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(84, strBuilder4.size());
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertEquals(19, int0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      LinkedHashSet<StrBuilder> linkedHashSet0 = new LinkedHashSet<StrBuilder>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(strBuilder0));
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = '$';
      charArray0[2] = '{';
      charArray0[3] = '$';
      charArray0[4] = 'J';
      charArray0[0] = '$';
      StrBuilder strBuilder2 = strBuilder1.appendSeparator("", "");
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.appendln(charArray0);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder3.length());
      assertEquals(7, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertArrayEquals(new char[] {'$', '$', '{', '$', 'J', '\u0000'}, charArray0);
      assertNotNull(strBuilder3);
      assertEquals(6, charArray0.length);
      
      boolean boolean0 = linkedHashSet0.add(strBuilder1);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertTrue(boolean0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(linkedHashSet0.contains(strBuilder3));
      assertTrue(linkedHashSet0.contains(strBuilder1));
      
      ArrayList<StrBuilder> arrayList0 = new ArrayList<StrBuilder>(linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(linkedHashSet0.contains(strBuilder3));
      assertTrue(linkedHashSet0.contains(strBuilder1));
      assertTrue(arrayList0.contains(strBuilder1));
      assertFalse(arrayList0.contains(strBuilder3));
      
      boolean boolean1 = arrayList0.add(strBuilder0);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertTrue(boolean1);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedHashSet0.contains(strBuilder3));
      assertTrue(linkedHashSet0.contains(strBuilder1));
      assertTrue(arrayList0.contains(strBuilder3));
      
      StrBuilder strBuilder4 = strBuilder0.appendWithSeparators((Iterable<?>) arrayList0, "3#xTisj?");
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(30, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(30, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(30, strBuilder4.length());
      assertEquals(30, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      assertFalse(linkedHashSet0.contains(strBuilder4));
      assertTrue(linkedHashSet0.contains(strBuilder1));
      assertTrue(arrayList0.contains(strBuilder4));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      Writer writer0 = strBuilder0.asWriter();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(writer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(strBuilder1);
      assertEquals(1, charArray0.length);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderWriter0.equals((Object)writer0));
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      String string0 = strBuilder0.substring(0, 46);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals("\u0000\n", string0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder3 = strBuilder2.appendWithSeparators(objectArray0, "\u0000\n");
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      assertEquals(0, objectArray0.length);
      
      char char0 = '!';
      StrBuilder strBuilder4 = new StrBuilder(46);
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(46, strBuilder4.capacity());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertTrue(strBuilder4.isEmpty());
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotNull(strBuilder4);
      
      Reader reader0 = strBuilder4.asReader();
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(46, strBuilder4.capacity());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertTrue(strBuilder4.isEmpty());
      assertFalse(reader0.ready());
      assertTrue(reader0.markSupported());
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotNull(reader0);
      
      // Undeclared exception!
      try { 
        strBuilder4.getChars(380, 0, charArray0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(13);
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer(13);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0);
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(13, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      Writer writer0 = strBuilder0.asWriter();
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(writer0);
      
      StrBuilder strBuilder2 = strBuilder0.append(0L);
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertEquals(13, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.reverse();
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(13, strBuilder3.capacity());
      assertEquals(2, strBuilder3.size());
      assertEquals(2, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      writer0.write("DmKL/");
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.capacity());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.length());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      Writer writer0 = strBuilder0.asWriter();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(writer0);
      
      StrBuilder strBuilder1 = strBuilder0.append('H');
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendln("", 0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(2, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendFixedWidthPadLeft(4, 21, 'H');
      assertEquals(23, strBuilder0.size());
      assertEquals(23, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(23, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(23, strBuilder1.length());
      assertEquals(23, strBuilder2.size());
      assertEquals(23, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(23, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(23, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = new StrBuilder("2!@5w]");
      assertEquals(6, strBuilder4.length());
      assertEquals(6, strBuilder4.size());
      assertEquals(38, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotNull(strBuilder4);
      
      int int0 = strBuilder4.lastIndexOf("2!@5w]");
      assertEquals(6, strBuilder4.length());
      assertEquals(6, strBuilder4.size());
      assertEquals(38, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      assertEquals(0, int0);
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      
      boolean boolean0 = strBuilder3.contains('4');
      assertEquals(23, strBuilder0.size());
      assertEquals(23, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(23, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(23, strBuilder1.length());
      assertEquals(23, strBuilder2.size());
      assertEquals(23, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(23, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(23, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      
      StrBuilder strBuilder5 = strBuilder4.deleteFirst("");
      assertEquals(6, strBuilder4.length());
      assertEquals(6, strBuilder4.size());
      assertEquals(38, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(6, strBuilder5.length());
      assertEquals(6, strBuilder5.size());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(38, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder1);
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertNotNull(strBuilder5);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(boolean0);
      
      StrBuilder strBuilder1 = new StrBuilder("(bJPq(zAg+8I~pGj'");
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(50, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder1.lastIndexOf("(bJPq(zAg+8I~pGj'", 482);
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(50, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNotSame(strBuilder1, strBuilder0);
      assertEquals(0, int0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = 2836;
      // Undeclared exception!
      try { 
        strBuilder0.append("-?3nan`N}y", (-248), 2836);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.lastIndexOf("");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[2] = 'v';
      charArray0[3] = '|';
      charArray0[4] = 'a';
      charArray0[5] = 'R';
      charArray0[6] = '}';
      charArray0[7] = 'o';
      strBuilder1.size = (-1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals((-1), strBuilder0.length());
      assertEquals((-1), strBuilder0.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals((-1), strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals((-1), strBuilder1.length());
      
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be va:'");
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertEquals(51, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("length must be va:'");
      assertNull(strBuilder1.getNewLineText());
      assertEquals(51, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(19, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(19, strBuilder1.length());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(51, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(19, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(19, strBuilder1.length());
      assertEquals("length must be va:'", stringWriter0.toString());
      assertEquals("length must be va:'", stringWriter1.toString());
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(stringWriter1);
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertNull(strBuilder1.getNewLineText());
      assertEquals(51, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(19, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(19, strBuilder1.length());
      assertEquals("length must be va:'", stringWriter0.toString());
      assertEquals("length must be va:'", stringWriter1.toString());
      assertEquals("length must be va:'", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(stringBuffer0, 6, 6);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(51, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(25, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(25, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals("length must be va:'", stringWriter0.toString());
      assertEquals("length must be va:'", stringWriter1.toString());
      assertEquals("length must be va:'", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      assertEquals(51, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(25, strBuilder2.size());
      assertEquals(25, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be va:'");
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(51, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = 6;
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(19, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder1.length());
      assertEquals(19, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(19, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.insert(6, false);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder2.length());
      assertEquals(48, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(24, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder1.size());
      assertEquals(48, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(24, strBuilder1.length());
      assertEquals("lengthfalse must be va:'", stringWriter0.toString());
      assertEquals("lengthfalse must be va:'", stringWriter1.toString());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder1.size());
      assertEquals(48, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(24, strBuilder1.length());
      assertEquals("lengthfalse must be va:'", stringWriter0.toString());
      assertEquals("lengthfalse must be va:'", stringWriter1.toString());
      assertEquals("lengthfalse must be va:'", stringBuffer0.toString());
      assertEquals(24, stringBuffer0.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder3 = strBuilder2.append(stringBuffer0, 6, 6);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(30, strBuilder0.size());
      assertEquals(30, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(30, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(30, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(48, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(30, strBuilder2.size());
      assertEquals(30, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals("lengthfalse must be va:'", stringWriter0.toString());
      assertEquals("lengthfalse must be va:'", stringWriter1.toString());
      assertEquals("lengthfalse must be va:'", stringBuffer0.toString());
      assertEquals(24, stringBuffer0.length());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(30, strBuilder3.length());
      assertEquals(48, strBuilder3.capacity());
      assertEquals(30, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      StringBuilder stringBuilder0 = strBuilder0.toStringBuilder();
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(30, strBuilder0.size());
      assertEquals(30, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals("lengthfalse must be va:'false ", stringBuilder0.toString());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder4 = strBuilder0.appendNull();
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(30, strBuilder0.size());
      assertEquals(30, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(30, strBuilder4.length());
      assertEquals(30, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(48, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNotNull(strBuilder4);
      
      stringWriter0.flush();
      assertEquals("lengthfalse must be va:'", stringWriter0.toString());
      assertSame(stringWriter0, stringWriter1);
      
      // Undeclared exception!
      try { 
        strBuilder3.subSequence((-1020), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1020
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      TreeSet<StringReader> treeSet0 = new TreeSet<StringReader>();
      assertNotNull(treeSet0);
      
      StringReader stringReader0 = treeSet0.pollFirst();
      assertNull(stringReader0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(3);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.setLength(3);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.deleteAll((String) null);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder3.size());
      assertEquals(3, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(3, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder4 = strBuilder3.append(charBuffer0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(6, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(6, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(3, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.limit());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(6, strBuilder4.length());
      assertEquals(6, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertNotNull(strBuilder4);
      
      CharBuffer charBuffer1 = CharBuffer.allocate(1326);
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(1326, charBuffer1.remaining());
      assertEquals(0, charBuffer1.position());
      assertEquals(1326, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1326, charBuffer1.capacity());
      assertEquals(1326, charBuffer1.length());
      assertFalse(charBuffer1.isReadOnly());
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      
      StrBuilder strBuilder5 = strBuilder3.replace(3, 204, "");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder3.size());
      assertEquals(3, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(3, strBuilder5.size());
      assertEquals(3, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder2.deleteFirst('d');
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(3, strBuilder6.length());
      assertEquals(3, strBuilder6.size());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertNotNull(strBuilder6);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      TreeSet<StringReader> treeSet0 = new TreeSet<StringReader>();
      assertNotNull(treeSet0);
      
      StringReader stringReader0 = treeSet0.pollFirst();
      assertNull(stringReader0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(3);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.setLength(3);
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = new StrBuilder("");
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.deleteAll((String) null);
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(3, strBuilder4.length());
      assertEquals(3, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotNull(strBuilder4);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      assertEquals(3, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder5 = strBuilder4.append(charBuffer0);
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(6, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(3, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000", charBuffer0.toString());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(6, strBuilder5.length());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(6, strBuilder5.size());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertNotNull(strBuilder5);
      
      CharBuffer charBuffer1 = CharBuffer.allocate(1326);
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(1326, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertEquals(1326, charBuffer1.limit());
      assertEquals(1326, charBuffer1.capacity());
      assertEquals(1326, charBuffer1.remaining());
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder6 = strBuilder4.replace(4, 204, "");
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(4, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(4, strBuilder6.length());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(4, strBuilder6.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder2.ensureCapacity(3);
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder2.size());
      assertEquals(4, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder7.getNullText());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(32, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(4, strBuilder7.length());
      assertEquals(4, strBuilder7.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = strBuilder1.append(1344L);
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(8, strBuilder1.length());
      assertEquals(32, strBuilder8.capacity());
      assertTrue(strBuilder8.isNotEmpty());
      assertEquals(8, strBuilder8.length());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(8, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertFalse(strBuilder8.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder7);
      assertNotSame(strBuilder8, strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertNotNull(strBuilder8);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((-2418L));
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|GUFTNP#;UI#cv9_<");
      assertFalse(boolean0);
      
      String string0 = null;
      StrBuilder strBuilder2 = strBuilder0.minimizeCapacity();
      assertEquals(5, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(5, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.append((String) null);
      assertEquals(5, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(5, strBuilder3.capacity());
      assertEquals(5, strBuilder3.size());
      assertEquals(5, strBuilder3.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StringBuffer stringBuffer0 = new StringBuffer(45);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder3.append(stringBuffer0, 24, 24);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) "";
      StrBuilder strBuilder0 = new StrBuilder("5p}<[zZ+}\"");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("../", 482);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertEquals((-1), int0);
      
      int int1 = strBuilder0.lastIndexOf('g', (-1));
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder0.readFrom(strBuilder_StrBuilderReader0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(0, int0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll("");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.trim();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader1 = strBuilder0.new StrBuilderReader();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader1.markSupported());
      assertFalse(strBuilder_StrBuilderReader1.ready());
      assertFalse(strBuilder_StrBuilderReader1.equals((Object)strBuilder_StrBuilderReader0));
      assertNotNull(strBuilder_StrBuilderReader1);
      
      long long0 = strBuilder_StrBuilderReader0.skip(0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder_StrBuilderReader0, strBuilder_StrBuilderReader1);
      assertEquals(0L, long0);
      assertFalse(strBuilder_StrBuilderReader0.equals((Object)strBuilder_StrBuilderReader1));
      
      StrBuilder strBuilder3 = strBuilder1.setNullText("");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = new StrBuilder("");
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder3.append((Object) strBuilder4);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.size());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertTrue(strBuilder0.equals((Object)strBuilder4));
      assertTrue(strBuilder1.equals((Object)strBuilder4));
      assertTrue(strBuilder3.equals((Object)strBuilder4));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertNotNull(strBuilder5);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertTrue(strBuilder0.equals((Object)strBuilder4));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) "";
      StrBuilder strBuilder0 = new StrBuilder(154);
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(154, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf('P', 154);
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(154, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      Writer writer0 = strBuilder0.asWriter();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(writer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
      assertEquals(2, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(strBuilder1);
      assertEquals(1, charArray0.length);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(2, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder_StrBuilderWriter0.equals((Object)writer0));
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder2 = new StrBuilder(".R");
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(34, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.append((-1.0F));
      assertNull(strBuilder2.getNewLineText());
      assertEquals(34, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertEquals(6, strBuilder3.length());
      assertEquals(6, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(34, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      char[] charArray1 = strBuilder2.toCharArray(1, 70);
      assertNull(strBuilder2.getNewLineText());
      assertEquals(34, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(charArray1, charArray0);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'R', '-', '1', '.', '0'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(5, charArray1.length);
      
      StrBuilder strBuilder4 = strBuilder1.insert(0, ")I(o%b");
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(8, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(8, strBuilder4.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(8, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charArray0, charArray1);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(strBuilder4);
      assertEquals(1, charArray0.length);
      
      StrBuilder strBuilder5 = strBuilder1.deleteFirst('T');
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(8, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(8, strBuilder5.length());
      assertEquals(8, strBuilder5.size());
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(charArray0, charArray1);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(strBuilder5);
      assertEquals(1, charArray0.length);
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(8, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(charArray0, charArray1);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder(".R");
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray(1, 70);
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertArrayEquals(new char[] {'R'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      String string0 = strBuilder0.leftString((-3521));
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(34, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder1.append(strBuilder0, 70, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setNewLineText("");
      assertEquals("", strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals("", strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendSeparator("Z<Dl^(<UZV4'zjY9C,");
      assertEquals("", strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals("", strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals("", strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      String string0 = ".";
      StrBuilder strBuilder3 = strBuilder0.append((StringBuilder) null, (-1), (-1));
      assertEquals("", strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder3.length());
      assertEquals("", strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.appendFixedWidthPadRight((Object) null, (-1), '>');
      assertEquals("", strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder3.length());
      assertEquals("", strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertEquals("", strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertNotNull(strBuilder4);
      
      LinkedHashSet<String> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<String>((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      Writer writer0 = strBuilder0.asWriter();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(writer0);
      
      StrBuilder strBuilder1 = strBuilder0.append('H');
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendln("", 0, 0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendFixedWidthPadLeft(4, 21, 'H');
      assertEquals(23, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(23, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(23, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(23, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(23, strBuilder2.size());
      assertEquals(23, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(23, strBuilder3.length());
      assertEquals(23, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      char[] charArray1 = strBuilder2.getChars((char[]) null);
      assertEquals(23, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(23, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(23, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(23, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(23, strBuilder2.size());
      assertEquals(23, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(23, charArray1.length);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder3.new StrBuilderReader();
      assertEquals(23, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(23, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(23, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(23, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(23, strBuilder2.size());
      assertEquals(23, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(23, strBuilder3.length());
      assertEquals(23, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0);
      assertEquals(23, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(23, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(23, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(23, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(23, strBuilder2.size());
      assertEquals(23, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(23, strBuilder3.length());
      assertEquals(23, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(charArray0, charArray1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(0, int0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder1.isEmpty();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(boolean0);
      
      boolean boolean1 = strBuilder0.isNotEmpty();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(997);
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(997, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(116);
      assertEquals(116, strBuilder0.length());
      assertEquals(116, strBuilder0.size());
      assertEquals(997, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(116, strBuilder1.length());
      assertEquals(116, strBuilder1.size());
      assertEquals(997, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder1.midString(997, (-3049));
      assertEquals(116, strBuilder0.length());
      assertEquals(116, strBuilder0.size());
      assertEquals(997, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(116, strBuilder1.length());
      assertEquals(116, strBuilder1.size());
      assertEquals(997, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 108;
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      // Undeclared exception!
      try { 
        strBuilder1.append(strBuilder2, 0, (-3));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("");
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendln(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.trim();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder2.appendln(0.0F);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(4, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(4, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(4, strBuilder4.size());
      assertEquals(4, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotNull(strBuilder4);
      
      boolean boolean0 = strBuilder0.isEmpty();
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      
      String string0 = strBuilder0.midString(101, 101);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertEquals("", string0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.size();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, int0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll('\'', '\'');
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append(0.0F);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      // Undeclared exception!
      try { 
        strBuilder1.getChars(76, (-2455), charArray0, (-1082));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2455
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((String) null, (String) null);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      strBuilder0.buffer = null;
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator("Y}A1ia;|SW", (String) null);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder2.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read((char[]) null, 83, 576);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll("");
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder("");
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.ensureCapacity((-1567));
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StrBuilder strBuilder4 = strBuilder2.appendFixedWidthPadRight(object0, (-430), '(');
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.size());
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder2.deleteAll("");
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(0, strBuilder5.length());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder5.equals((Object)strBuilder0));
      assertTrue(strBuilder5.equals((Object)strBuilder1));
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder2.replaceFirst("", "");
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder6.isEmpty());
      assertFalse(strBuilder6.isNotEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertEquals(0, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(0, strBuilder6.size());
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder4);
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder6.equals((Object)strBuilder1));
      assertTrue(strBuilder6.equals((Object)strBuilder0));
      assertNotNull(strBuilder6);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("a5");
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('>', 256);
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertEquals(34, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder2 = strBuilder0.appendln(0.0F);
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(7, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(34, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.deleteFirst("a5");
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder3.size());
      assertEquals(5, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(34, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      boolean boolean1 = strBuilder3.equals(strBuilder0);
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder3.size());
      assertEquals(5, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(34, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = strBuilder0.indexOf('>');
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.trim();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder2.new StrBuilderReader();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      long long0 = strBuilder_StrBuilderReader0.skip((-1L));
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(0L, long0);
      
      StrBuilder strBuilder3 = strBuilder2.setNullText((String) null);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.append((Object) strBuilder2);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNotNull(strBuilder4);
      
      char[] charArray0 = strBuilder4.toCharArray();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.setNullText((String) null);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendNull();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.append((Object) null);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      Writer writer0 = strBuilder0.asWriter();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(writer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(strBuilder1);
      assertEquals(1, charArray0.length);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderWriter0.equals((Object)writer0));
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      String string0 = strBuilder0.substring(0, 46);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertEquals("\u0000\n", string0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder3 = strBuilder2.appendWithSeparators(objectArray0, "\u0000\n");
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      assertEquals(0, objectArray0.length);
      
      StrBuilder strBuilder4 = new StrBuilder(46);
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(46, strBuilder4.capacity());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      
      // Undeclared exception!
      try { 
        strBuilder2.setCharAt(0, '!');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#V");
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertEquals(35, int0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      char[] charArray0 = new char[7];
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      Reader reader0 = strBuilder1.asReader();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertTrue(reader0.markSupported());
      assertTrue(reader0.ready());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(reader0, strBuilder_StrBuilderReader0);
      assertFalse(reader0.equals((Object)strBuilder_StrBuilderReader0));
      assertNotNull(reader0);
      
      charArray0[0] = 'S';
      charArray0[1] = 'f';
      charArray0[2] = '/';
      charArray0[3] = 'l';
      charArray0[4] = 'w';
      charArray0[5] = '6';
      strBuilder_StrBuilderWriter0.write((-1234));
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      
      charArray0[6] = '(';
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertArrayEquals(new char[] {'S', 'f', '/', 'l', 'w', '6', '('}, charArray0);
      assertEquals(7, charArray0.length);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln(stringBuffer0, (-1118), (-1118));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((StrBuilder) null);
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder1.appendln(strBuilder0, 17, 17);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StringBuilder stringBuilder0 = new StringBuilder("W}><8{pJ;*Q\"");
      assertEquals("W}><8{pJ;*Q\"", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      assertEquals("W}><8{pJ;*Q\"nYY", stringBuilder0.toString());
      assertEquals("W}><8{pJ;*Q\"nYY", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertArrayEquals(new char[] {'n', 'Y', 'Y'}, charArray0);
      assertNotNull(stringBuilder1);
      assertEquals(3, charArray0.length);
      
      StringBuilder stringBuilder2 = stringBuilder1.append((-2465));
      assertEquals("W}><8{pJ;*Q\"nYY-2465", stringBuilder0.toString());
      assertEquals("W}><8{pJ;*Q\"nYY-2465", stringBuilder1.toString());
      assertEquals("W}><8{pJ;*Q\"nYY-2465", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertArrayEquals(new char[] {'n', 'Y', 'Y'}, charArray0);
      assertNotNull(stringBuilder2);
      assertEquals(3, charArray0.length);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuilder1, 32, (-2465));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)28;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)58, (byte) (-115), (byte)44, (byte)28}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      StrBuilder strBuilder0 = new StrBuilder("5O(og4d$/I`L*KuMal");
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertEquals(51, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf((String) null);
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertEquals(51, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals((-1), int0);
      
      int int1 = 101;
      char char0 = 'v';
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('v');
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder0.size());
      assertEquals(51, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(51, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(20, strBuilder1.size());
      assertEquals(20, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder1.toString();
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder0.size());
      assertEquals(51, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(51, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(20, strBuilder1.size());
      assertEquals(20, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("5O(og4d$/I`L*KuMalv", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendTo((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("k*tq");
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.build();
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals("k*tq", string0);
      assertNotNull(string0);
      
      int int0 = strBuilder0.indexOf('&');
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((Object) "k*tq");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(36, strBuilder1.capacity());
      assertEquals(9, strBuilder1.length());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.replaceAll("k*tq", "org.apache.commons.lang3.textSrBuilder$StrBuilderReader");
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(115, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(115, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(124, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(115, strBuilder2.size());
      assertEquals(115, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(124, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendln(1.0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(119, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(124, strBuilder0.capacity());
      assertEquals(119, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(119, strBuilder2.size());
      assertEquals(119, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(124, strBuilder2.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(119, strBuilder3.length());
      assertEquals(119, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(124, strBuilder3.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.setNewLineText("?OC#jJh_K}Vq2~");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(119, strBuilder0.length());
      assertEquals(124, strBuilder0.capacity());
      assertEquals("?OC#jJh_K}Vq2~", strBuilder0.getNewLineText());
      assertEquals(119, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals("?OC#jJh_K}Vq2~", strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(119, strBuilder2.size());
      assertEquals(119, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(124, strBuilder2.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(119, strBuilder3.length());
      assertEquals("?OC#jJh_K}Vq2~", strBuilder3.getNewLineText());
      assertEquals(119, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(124, strBuilder3.capacity());
      assertEquals(119, strBuilder4.size());
      assertEquals(124, strBuilder4.capacity());
      assertEquals("?OC#jJh_K}Vq2~", strBuilder4.getNewLineText());
      assertEquals(119, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertNotNull(strBuilder4);
      
      // Undeclared exception!
      try { 
        strBuilder2.replace(750, 44, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      Writer writer0 = strBuilder0.asWriter();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(writer0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      
      CharBuffer charBuffer1 = CharBuffer.allocate(0);
      assertFalse(charBuffer1.isDirect());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.length());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      
      StrBuilder strBuilder1 = strBuilder0.append(charBuffer1, 0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(charBuffer1.isDirect());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.length());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charBuffer1, charBuffer0);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder("/3^<3ydV_");
      assertEquals(42, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(10, strBuilder2.size());
      assertEquals(10, strBuilder2.length());
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      int int0 = strBuilder0.lastIndexOf(":{G>v*+G&@;H_c[?", 0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertEquals((-1), int0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendAll((Object[]) null);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder2.new StrBuilderWriter();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.write((String) null, 1494, (-2001));
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.clear();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendln(strBuilder0, 0, 0);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(1, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = new StrBuilder(0);
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder1.setLength(0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder5.isEmpty());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertTrue(strBuilder0.equals((Object)strBuilder4));
      assertTrue(strBuilder1.equals((Object)strBuilder4));
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder3.append(false);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder2.size());
      assertEquals(5, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(5, strBuilder3.length());
      assertEquals(5, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(5, strBuilder6.length());
      assertEquals(5, strBuilder6.size());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertNotNull(strBuilder6);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("@p}<zZt}\"");
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertEquals(9, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertEquals(9, strBuilder0.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(41, strBuilder1.capacity());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(9, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.setLength(2);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(41, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(41, strBuilder2.capacity());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.ensureCapacity(256);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(512, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(512, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(512, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder3.size());
      assertEquals(2, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(512, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      int int0 = strBuilder0.lastIndexOf("Ris!Aw95!8KnoZ;Y7", 1414);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(512, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertEquals((-1), int0);
      
      StringBuilder stringBuilder0 = new StringBuilder(18);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((-1184));
      assertEquals("-1184", stringBuilder0.toString());
      assertEquals("-1184", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      // Undeclared exception!
      try { 
        stringBuilder1.replace(1414, 2, "...");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      Writer writer0 = strBuilder0.asWriter();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(writer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(strBuilder1);
      assertEquals(1, charArray0.length);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderWriter0.equals((Object)writer0));
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder2 = strBuilder1.ensureCapacity(0);
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(strBuilder2);
      assertEquals(1, charArray0.length);
      
      String string0 = strBuilder0.substring(0, 324);
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals("\u0000\n", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder3 = strBuilder2.appendWithSeparators(objectArray0, "\u0000\n");
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(2, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(2, strBuilder3.length());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(strBuilder3);
      assertEquals(1, charArray0.length);
      assertEquals(0, objectArray0.length);
      
      StrBuilder strBuilder4 = new StrBuilder(324);
      assertEquals(324, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertTrue(strBuilder4.isEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder2.setCharAt(0, '!');
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(2, strBuilder5.length());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(2, strBuilder5.size());
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(strBuilder5);
      assertEquals(1, charArray0.length);
      
      PipedReader pipedReader0 = new PipedReader(324);
      assertNotNull(pipedReader0);
      
      try { 
        strBuilder3.readFrom(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[8];
      charArray0[1] = 'c';
      charArray0[3] = 'c';
      charArray0[5] = 'J';
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      charArray0[6] = 'K';
      charArray0[7] = '7';
      StrBuilder strBuilder2 = strBuilder0.append(charArray0, 0, 0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertArrayEquals(new char[] {'\u0000', 'c', '\u0000', 'c', '\u0000', 'J', 'K', '7'}, charArray0);
      assertNotNull(strBuilder2);
      assertEquals(8, charArray0.length);
      
      String string0 = strBuilder0.midString(0, 0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder3 = strBuilder0.appendSeparator('[', 0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder3.length());
      assertEquals(1, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder2.appendSeparator('|', '\u0000');
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(2, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(2, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertArrayEquals(new char[] {'\u0000', 'c', '\u0000', 'c', '\u0000', 'J', 'K', '7'}, charArray0);
      assertNotNull(strBuilder4);
      assertEquals(8, charArray0.length);
      
      int int0 = strBuilder0.lastIndexOf('u');
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertEquals((-1), int0);
      
      StrBuilder strBuilder5 = strBuilder2.appendAll((Iterator<?>) null);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(32, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(2, strBuilder5.length());
      assertEquals(2, strBuilder5.size());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertArrayEquals(new char[] {'\u0000', 'c', '\u0000', 'c', '\u0000', 'J', 'K', '7'}, charArray0);
      assertNotNull(strBuilder5);
      assertEquals(8, charArray0.length);
      
      StrBuilder strBuilder6 = strBuilder5.insert(0, (long) (-1));
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder2.size());
      assertEquals(4, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(32, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(4, strBuilder5.length());
      assertEquals(4, strBuilder5.size());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(4, strBuilder6.size());
      assertEquals(4, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertArrayEquals(new char[] {'\u0000', 'c', '\u0000', 'c', '\u0000', 'J', 'K', '7'}, charArray0);
      assertNotNull(strBuilder6);
      assertEquals(8, charArray0.length);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 2, 4033);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 4033
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("k*tq");
      assertEquals(4, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.build();
      assertEquals(4, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertEquals("k*tq", string0);
      assertNotNull(string0);
      
      int int0 = strBuilder0.indexOf('&');
      assertEquals(4, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertEquals((-1), int0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      strBuilder0.appendTo(mockPrintWriter0);
      assertEquals(4, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("k*tq", "org.apache.commons.lang3.textSrBuilder$StrBuilderReader");
      assertEquals(57, strBuilder0.size());
      assertEquals(114, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(57, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(57, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(114, strBuilder1.capacity());
      assertEquals(57, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder1.replace(750, 44, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      boolean boolean0 = strBuilder_StrBuilderTokenizer0.hasPrevious();
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator(' ', 322);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char char0 = '|';
      char char1 = '8';
      char char2 = '>';
      StrBuilder strBuilder2 = strBuilder1.appendSeparator('8', '>');
      assertEquals(2, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(2, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      char char3 = 'u';
      int int0 = strBuilder1.lastIndexOf('8');
      assertEquals(2, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(1, int0);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(int0));
      
      Iterator<Integer> iterator0 = arrayDeque0.iterator();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(iterator0);
      assertFalse(arrayDeque0.contains(int0));
      
      StrBuilder strBuilder3 = strBuilder0.appendAll(iterator0);
      assertEquals(2, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(2, strBuilder3.length());
      assertEquals(2, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      assertFalse(arrayDeque0.contains(int0));
      
      // Undeclared exception!
      try { 
        strBuilder1.insert(108, 693L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 108
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "2*W8";
      StrBuilder strBuilder0 = new StrBuilder("2*W8");
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight((-881), Integer.MAX_VALUE, ']');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 36
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("2*W8");
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(36, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      long long0 = strBuilder_StrBuilderReader0.skip((-1L));
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0L, long0);
      
      StrBuilder strBuilder2 = strBuilder0.setNullText("2*W8");
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("2*W8", strBuilder0.getNullText());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(4, strBuilder2.length());
      assertEquals(4, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(36, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals("2*W8", strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.append((Object) "2*W8");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("2*W8", strBuilder0.getNullText());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(8, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(8, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(36, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals("2*W8", strBuilder2.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals("2*W8", strBuilder3.getNullText());
      assertEquals(8, strBuilder3.size());
      assertEquals(8, strBuilder3.length());
      assertEquals(36, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("2*W8", strBuilder0.getNullText());
      assertEquals(36, strBuilder0.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertArrayEquals(new char[] {'2', '*', 'W', '8', '2', '*', 'W', '8'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(8, charArray0.length);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("2*W8", strBuilder0.getNullText());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(36, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals("2*W8", strBuilder1.getNullText());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 4, 4);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("2*W8", strBuilder0.getNullText());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(36, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals("2*W8", strBuilder1.getNullText());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'2', '*', 'W', '8', '2', '*', 'W', '8'}, charArray0);
      assertNotNull(list0);
      assertFalse(list0.contains("2*W8"));
      assertEquals(8, charArray0.length);
      
      int int0 = strBuilder_StrBuilderReader0.read(charArray0, 4, 4);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("2*W8", strBuilder0.getNullText());
      assertEquals(36, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'2', '*', 'W', '8', '2', '*', 'W', '8'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      IntStream intStream0 = strBuilder0.codePoints();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(intStream0);
      
      String string0 = "";
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("", "");
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char char0 = 'l';
      boolean boolean0 = strBuilder0.contains('l');
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertFalse(boolean0);
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(stringBuffer0);
      
      String string1 = "Cannot store ";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringBuffer0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      StringBuffer stringBuffer1 = stringBuffer0.reverse();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertSame(strBuilder0, strBuilder1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      
      // Undeclared exception!
      try { 
        stringBuffer0.append((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      Writer writer0 = strBuilder0.asWriter();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(writer0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.length());
      assertEquals("\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      
      CharBuffer charBuffer1 = CharBuffer.allocate(0);
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertTrue(charBuffer1.hasArray());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      
      StrBuilder strBuilder1 = strBuilder0.append(charBuffer1, 0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertTrue(charBuffer1.hasArray());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charBuffer1, charBuffer0);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.indexOf("y&e,`5e]apl");
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int0);
      
      int int1 = StrBuilder.CAPACITY;
      assertEquals(32, int1);
      assertFalse(int1 == int0);
      
      char[] charArray1 = strBuilder1.toCharArray();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertTrue(charBuffer1.hasArray());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charBuffer1, charBuffer0);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(charArray1, charArray0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      
      String string0 = strBuilder1.midString(550, 0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertTrue(charBuffer1.hasArray());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charBuffer1, charBuffer0);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("", string0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(710);
      assertEquals(710, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(710, 3163, 'l');
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3163, strBuilder0.length());
      assertEquals(3163, strBuilder0.size());
      assertEquals(6326, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3163, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3163, strBuilder1.length());
      assertEquals(6326, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.contains("");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3163, strBuilder0.length());
      assertEquals(3163, strBuilder0.size());
      assertEquals(6326, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertTrue(boolean0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3163, strBuilder0.length());
      assertEquals(3163, strBuilder0.size());
      assertEquals(6326, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3163, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3163, strBuilder1.length());
      assertEquals(6326, strBuilder1.capacity());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      String string0 = strBuilder_StrBuilderTokenizer0.next();
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3163, strBuilder0.length());
      assertEquals(3163, strBuilder0.size());
      assertEquals(6326, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3163, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3163, strBuilder1.length());
      assertEquals(6326, strBuilder1.capacity());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) string0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3163, strBuilder0.length());
      assertEquals(3163, strBuilder0.size());
      assertEquals(6326, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3163, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3163, strBuilder1.length());
      assertEquals(6326, strBuilder1.capacity());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(3163, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(3163, charBuffer0.limit());
      assertEquals(3163, charBuffer0.capacity());
      assertEquals(3163, charBuffer0.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(charBuffer0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6326, strBuilder0.length());
      assertEquals(6326, strBuilder0.size());
      assertEquals(6326, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(6326, strBuilder1.size());
      assertEquals(6326, strBuilder1.length());
      assertEquals(6326, strBuilder1.capacity());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(3163, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(3163, charBuffer0.limit());
      assertEquals(3163, charBuffer0.capacity());
      assertEquals(3163, charBuffer0.length());
      assertEquals(6326, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(6326, strBuilder2.size());
      assertEquals(6326, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder("k6\" OQ-zMY#!|8ehg^");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replace(5, 31, "k6\" OQ-zMY#!|8ehg^");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(23, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(23, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(50, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(23, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(23, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      boolean boolean1 = strBuilder0.endsWith("k6\" OQ-zMY#!|8ehg^");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(23, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(23, strBuilder0.length());
      assertSame(strBuilder0, strBuilder1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(31));
      
      Integer integer0 = new Integer((-808));
      assertEquals((-808), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean2 = arrayList0.add(integer0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(arrayList0.contains(5));
      assertTrue(arrayList0.contains((-808)));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)42;
      StrBuilder strBuilder2 = new StrBuilder();
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = new StrBuilder((byte)16);
      assertEquals(16, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = new StrBuilder(19);
      assertTrue(strBuilder4.isEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(19, strBuilder4.capacity());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotNull(strBuilder4);
      
      boolean boolean3 = strBuilder3.equalsIgnoreCase(strBuilder4);
      assertEquals(16, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder4.isEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(19, strBuilder4.capacity());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      
      int int0 = strBuilder1.lastIndexOf("org.apache.commons.lang3.ArrayUtils");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(23, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(23, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(50, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(23, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(23, strBuilder1.size());
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertEquals((-1), int0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, 'J');
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = strBuilder0.lastIndexOf("*ku P}(&1vVpW", 321);
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder0.readFrom(strBuilder_StrBuilderReader0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(0, int0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'x';
      charArray0[1] = 'F';
      charArray0[2] = 'b';
      charArray0[3] = 'L';
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'x', 'F', 'b', 'L'}, charArray0);
      assertNotNull(strBuilder1);
      assertEquals(4, charArray0.length);
      
      // Undeclared exception!
      try { 
        strBuilder0.substring(3194, (-2425));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      LinkedHashSet<StrBuilder> linkedHashSet0 = new LinkedHashSet<StrBuilder>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(strBuilder0));
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = '$';
      charArray0[2] = '{';
      charArray0[3] = '$';
      charArray0[4] = 'J';
      charArray0[5] = '$';
      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(7, strBuilder1.size());
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder2.length());
      assertEquals(7, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertArrayEquals(new char[] {'>', '$', '{', '$', 'J', '$'}, charArray0);
      assertNotNull(strBuilder2);
      assertEquals(6, charArray0.length);
      
      boolean boolean0 = linkedHashSet0.add(strBuilder1);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(7, strBuilder1.size());
      assertEquals(7, strBuilder1.length());
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertTrue(boolean0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(linkedHashSet0.contains(strBuilder0));
      assertTrue(linkedHashSet0.contains(strBuilder1));
      
      ArrayList<StrBuilder> arrayList0 = new ArrayList<StrBuilder>(linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(linkedHashSet0.contains(strBuilder0));
      assertTrue(linkedHashSet0.contains(strBuilder1));
      assertTrue(arrayList0.contains(strBuilder1));
      assertFalse(arrayList0.contains(strBuilder0));
      
      StrBuilder strBuilder3 = strBuilder0.appendWithSeparators((Iterable<?>) arrayList0, "3#xTisj?");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(7, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(7, strBuilder3.size());
      assertEquals(7, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      assertTrue(linkedHashSet0.contains(strBuilder1));
      assertTrue(arrayList0.contains(strBuilder1));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1568);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(1568, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append((StringBuffer) null, (-7), 5);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln("", 5, 25);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(strBuilder1);
      assertEquals(0, charArray0.length);
      
      // Undeclared exception!
      try { 
        strBuilder1.appendln("", (-1689), (-1689));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null, 3155, 3);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendln(3155);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(5, strBuilder2.size());
      assertEquals(5, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[0];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(2, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("i|QS");
      assertEquals("i|QS", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[5];
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) strBuilder0;
      objectArray0[1] = (Object) '\u0000';
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "i|QS");
      assertEquals(34, strBuilder0.size());
      assertEquals(34, strBuilder0.length());
      assertEquals(68, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder1.size());
      assertEquals(34, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(68, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(2, objectArray0.length);
      
      StrBuilder strBuilder2 = strBuilder0.append(1L);
      assertEquals(35, strBuilder0.size());
      assertEquals(35, strBuilder0.length());
      assertEquals(68, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(68, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(35, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(35, strBuilder2.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.appendFixedWidthPadLeft(2, 4145, '&');
      assertEquals(4180, strBuilder0.length());
      assertEquals(8360, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4180, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(8360, strBuilder3.capacity());
      assertEquals(4180, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(4180, strBuilder3.size());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder0.append((StringBuffer) null, 2, (-3164));
      assertEquals(4180, strBuilder0.length());
      assertEquals(8360, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4180, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(4180, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(4180, strBuilder4.length());
      assertEquals(8360, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNotNull(strBuilder4);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Sv!zR/Sq|>d}jGO");
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.substring(0, 0);
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder1 = new StrBuilder("Sv!zR/Sq|>d}jGO");
      assertEquals(15, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(15, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(47, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder1);
      assertEquals(15, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(15, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(47, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals("Sv!zR/Sq|>d}jGO", stringBuffer0.toString());
      assertEquals(15, stringBuffer0.length());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.appendln(stringBuffer0, 0, 0);
      assertEquals(16, strBuilder1.size());
      assertEquals(16, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(47, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals("Sv!zR/Sq|>d}jGO", stringBuffer0.toString());
      assertEquals(15, stringBuffer0.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(47, strBuilder2.capacity());
      assertEquals(16, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(16, strBuilder2.size());
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        strBuilder0.readFrom((Readable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln("Te Array ust not be null");
      assertEquals(25, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(25, strBuilder0.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(25, strBuilder1.size());
      assertEquals(25, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.contains("Te Array ust not be null");
      assertEquals(25, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(25, strBuilder0.size());
      assertSame(strBuilder0, strBuilder1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      strBuilder0.appendTo(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotSame(strBuilder0, strBuilder1);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.flush();
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotSame(strBuilder0, strBuilder1);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(102);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.limit());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(102, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(charBuffer0);
      assertEquals(204, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(102, strBuilder0.size());
      assertEquals(102, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(102, strBuilder1.size());
      assertEquals(102, strBuilder1.length());
      assertEquals(204, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.limit());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(204, strBuilder2.capacity());
      assertEquals(102, strBuilder2.size());
      assertEquals(102, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      strBuilder0.size = 0;
      assertTrue(strBuilder0.isEmpty());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      strBuilder0.size = 0;
      assertTrue(strBuilder0.isEmpty());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder3 = strBuilder0.ensureCapacity(102);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(204, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      String string0 = strBuilder3.substring(0, 0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(204, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder3.new StrBuilderTokenizer();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(204, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder4 = strBuilder2.append("", (Object[]) null);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(204, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.limit());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(204, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(204, strBuilder4.capacity());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder4.minimizeCapacity();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.limit());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(102, charBuffer0.remaining());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder3.append("", 0, 0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.capacity());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(0, strBuilder6.capacity());
      assertTrue(strBuilder6.isEmpty());
      assertFalse(strBuilder6.isNotEmpty());
      assertEquals(0, strBuilder6.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder4.replaceAll((String) null, "");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.limit());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(102, charBuffer0.remaining());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertEquals(0, strBuilder7.capacity());
      assertTrue(strBuilder7.isEmpty());
      assertFalse(strBuilder7.isNotEmpty());
      assertEquals(0, strBuilder7.length());
      assertEquals(0, strBuilder7.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = strBuilder1.deleteAll('_');
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder8.size());
      assertEquals(0, strBuilder8.length());
      assertNull(strBuilder8.getNullText());
      assertFalse(strBuilder8.isNotEmpty());
      assertTrue(strBuilder8.isEmpty());
      assertEquals(0, strBuilder8.capacity());
      assertNull(strBuilder8.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder1);
      assertNotNull(strBuilder8);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) "";
      StrBuilder strBuilder0 = new StrBuilder("5Sv!zR/Sq|>d}jGO");
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(16, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(9);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.length());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(9, strBuilder1.size());
      assertEquals(9, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.ensureCapacity((-1391));
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.length());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(48, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(9, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(9, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      int int0 = strBuilder0.lastIndexOf("...", 486);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.length());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals((-1), int0);
      
      StrBuilder strBuilder3 = strBuilder1.append((StringBuilder) null);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.length());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(9, strBuilder1.size());
      assertEquals(9, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(9, strBuilder3.size());
      assertEquals(9, strBuilder3.length());
      assertEquals(48, strBuilder3.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      TreeSet<StringReader> treeSet0 = new TreeSet<StringReader>();
      assertNotNull(treeSet0);
      
      StringReader stringReader0 = treeSet0.pollFirst();
      assertNull(stringReader0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(3);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.setLength(3);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = new StrBuilder("");
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      
      boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertTrue(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      
      StrBuilder strBuilder4 = strBuilder0.appendNull();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(3, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(3, strBuilder4.length());
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotNull(strBuilder4);
      
      String string0 = strBuilder2.leftString(3);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder3);
      assertEquals("3\n\u0000", string0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("xihnv!zR/Sq|>-zMY#!|8ehg^");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(57, strBuilder0.capacity());
      assertEquals(25, strBuilder0.length());
      assertEquals(25, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll("xihnv!zR/Sq|>-zMY#!|8ehg^");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(57, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(57, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(103);
      assertEquals(103, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(103, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(103, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(103, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder0.appendln(101);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertEquals(57, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(4, strBuilder2.size());
      assertEquals(57, strBuilder2.capacity());
      assertEquals(4, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.setLength(103);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(103, strBuilder0.length());
      assertEquals(103, strBuilder0.size());
      assertEquals(206, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(103, strBuilder2.length());
      assertEquals(103, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(206, strBuilder2.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(206, strBuilder3.capacity());
      assertEquals(103, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(103, strBuilder3.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      // Undeclared exception!
      try { 
        strBuilder3.charAt(103);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 103
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.reset();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      int int0 = StrBuilder.CAPACITY;
      assertEquals(32, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-24);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-24)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int1 = StrBuilder.CAPACITY;
      assertEquals(32, int1);
      assertTrue(int1 == int0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder0.substring(0, 101);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = '>';
      charArray0[2] = '.';
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'.', '>', '.'}, charArray0);
      assertArrayEquals(new char[] {'.', '>', '.'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      
      StrBuilder strBuilder2 = strBuilder0.replaceFirst("", "");
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderReader0, 101, 'U');
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(202, strBuilder0.capacity());
      assertEquals(101, strBuilder0.length());
      assertEquals(101, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(101, strBuilder3.size());
      assertEquals(101, strBuilder3.length());
      assertEquals(202, strBuilder3.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(101, strBuilder1.length());
      assertEquals(202, strBuilder1.capacity());
      assertEquals(101, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNotNull(strBuilder3);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      boolean boolean0 = strBuilder_StrBuilderTokenizer0.hasPrevious();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(boolean0);
      
      boolean boolean1 = strBuilder0.startsWith("");
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'S';
      charArray0[1] = 'M';
      charArray0[2] = 'V';
      charArray0[3] = '\"';
      charArray0[4] = 'N';
      charArray0[5] = 'N';
      charArray0[6] = '+';
      // Undeclared exception!
      try { 
        strBuilder0.getChars((-1236), 9, charArray0, 321);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1236
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid length: ");
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder("8,");
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = "\\dF-i-H5zQZLd=+\"4C)";
      StrBuilder strBuilder1 = new StrBuilder("dF-i-H5zQZLd=+\"4C)");
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertEquals(50, strBuilder1.capacity());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      int int0 = 5;
      int int1 = 5;
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1, 5, 5);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertEquals(50, strBuilder1.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(7, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(7, strBuilder2.size());
      assertEquals(34, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.append((-56));
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertEquals(50, strBuilder1.capacity());
      assertEquals(10, strBuilder2.size());
      assertEquals(10, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(34, strBuilder2.capacity());
      assertEquals(10, strBuilder3.size());
      assertEquals(10, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(34, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      int int2 = 3286;
      StrBuilder strBuilder4 = new StrBuilder(3286);
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(3286, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotNull(strBuilder4);
      
      char char0 = '6';
      StrBuilder strBuilder5 = strBuilder4.deleteFirst('6');
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(3286, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isNotEmpty());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(3286, strBuilder5.capacity());
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(0, strBuilder5.size());
      assertTrue(strBuilder5.isEmpty());
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertNotNull(strBuilder5);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder4, (-1), 906);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.reset();
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((-1));
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.setLength(23);
      assertEquals(23, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(23, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(23, strBuilder1.length());
      assertEquals(23, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(23, strBuilder2.length());
      assertEquals(23, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendSeparator("Aborting to protect against StackOverflowError - output of one loop is the input of another", 23);
      assertNull(strBuilder0.getNullText());
      assertEquals(228, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(114, strBuilder0.length());
      assertEquals(114, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(228, strBuilder1.capacity());
      assertEquals(114, strBuilder1.length());
      assertEquals(114, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(228, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(114, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(114, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(114, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(114, strBuilder3.length());
      assertEquals(228, strBuilder3.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.append(strBuilder2, 23, 23);
      assertEquals(137, strBuilder0.length());
      assertEquals(137, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(228, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(228, strBuilder1.capacity());
      assertEquals(137, strBuilder1.size());
      assertEquals(137, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(228, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(137, strBuilder2.length());
      assertEquals(137, strBuilder2.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(137, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(137, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(228, strBuilder3.capacity());
      assertEquals(228, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(137, strBuilder4.length());
      assertEquals(137, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNotNull(strBuilder4);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[2];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "|QS");
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.length());
      assertEquals(6, strBuilder1.capacity());
      assertEquals(3, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(2, objectArray0.length);
      
      StrBuilder strBuilder2 = strBuilder0.replaceFirst('X', 'X');
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder2.capacity());
      assertEquals(3, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.deleteAll('^');
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder3.size());
      assertEquals(3, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(6, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      int int0 = strBuilder3.indexOf("_D@S", 2);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder3.size());
      assertEquals(3, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(6, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals((-1), int0);
      
      boolean boolean0 = strBuilder2.equals(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder2.capacity());
      assertEquals(3, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertTrue(boolean0);
      
      StrBuilder strBuilder4 = strBuilder0.replaceAll("|QS", "_D@S");
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.capacity());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(6, strBuilder4.capacity());
      assertEquals(4, strBuilder4.size());
      assertEquals(4, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertNotNull(strBuilder4);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("k*tq");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.build();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertEquals("k*tq", string0);
      assertNotNull(string0);
      
      int int0 = strBuilder0.indexOf('&');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("k*tq", "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader");
      assertEquals(57, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(57, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(114, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(114, strBuilder1.capacity());
      assertEquals(57, strBuilder1.size());
      assertEquals(57, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder1.replace(750, 44, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder1 = strBuilder0.append(true);
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator("", 70);
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(4, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(4, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      ArrayDeque<StringWriter> arrayDeque0 = new ArrayDeque<StringWriter>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Iterator<StringWriter> iterator0 = arrayDeque0.descendingIterator();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      StrBuilder strBuilder3 = new StrBuilder();
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.replaceFirst('9', 'y');
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertTrue(strBuilder4.isEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(0, strBuilder4.length());
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder0.appendSeparator('Y', '=');
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(5, strBuilder5.size());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder0.deleteAll(')');
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder6.size());
      assertEquals(5, strBuilder6.length());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(32, strBuilder6.capacity());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertNotNull(strBuilder6);
      
      int int0 = strBuilder6.indexOf("", 1);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder6.size());
      assertEquals(5, strBuilder6.length());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(32, strBuilder6.capacity());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertEquals(1, int0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      
      StrBuilder strBuilder7 = new StrBuilder();
      assertFalse(strBuilder7.isNotEmpty());
      assertEquals(0, strBuilder7.size());
      assertEquals(0, strBuilder7.length());
      assertEquals(32, strBuilder7.capacity());
      assertTrue(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertTrue(strBuilder7.equals((Object)strBuilder3));
      assertTrue(strBuilder7.equals((Object)strBuilder4));
      assertNotNull(strBuilder7);
      
      boolean boolean0 = strBuilder7.equals(strBuilder6);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder6.size());
      assertEquals(5, strBuilder6.length());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(32, strBuilder6.capacity());
      assertFalse(strBuilder7.isNotEmpty());
      assertEquals(0, strBuilder7.size());
      assertEquals(0, strBuilder7.length());
      assertEquals(32, strBuilder7.capacity());
      assertTrue(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder1);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder7));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertTrue(strBuilder7.equals((Object)strBuilder3));
      assertTrue(strBuilder7.equals((Object)strBuilder4));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      Writer writer0 = strBuilder0.asWriter();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(writer0);
      
      StrBuilder strBuilder1 = strBuilder0.append('H');
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String[] stringArray0 = new String[0];
      StrBuilder strBuilder2 = strBuilder0.appendAll(stringArray0);
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      assertEquals(0, stringArray0.length);
      
      StrBuilder strBuilder3 = strBuilder2.replaceAll("org.apache.commons.lang3.text.StrBuilder", "org.apache.commons.lang3.text.StrBuilder");
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertEquals(1, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      assertEquals(0, stringArray0.length);
      
      StrBuilder strBuilder4 = strBuilder2.deleteFirst("org.apache.commons.lang3.text.StrBuilder");
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(1, strBuilder4.length());
      assertEquals(1, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertNotNull(strBuilder4);
      assertEquals(0, stringArray0.length);
      
      StrBuilder strBuilder5 = strBuilder2.appendSeparator("");
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(1, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(1, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertNotNull(strBuilder5);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = strBuilder0.contains('H');
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[8];
      charArray0[1] = 'c';
      charArray0[3] = 'c';
      charArray0[4] = 'c';
      charArray0[5] = 'J';
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0);
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      charArray0[6] = 'K';
      charArray0[7] = '7';
      StrBuilder strBuilder2 = strBuilder0.append(charArray0, 0, 0);
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertArrayEquals(new char[] {'\u0000', 'c', '\u0000', 'c', 'c', 'J', 'K', '7'}, charArray0);
      assertNotNull(strBuilder2);
      assertEquals(8, charArray0.length);
      
      String string0 = strBuilder0.midString(0, 0);
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder3 = strBuilder0.appendSeparator('[', 0);
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder3.length());
      assertEquals(1, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder2.appendSeparator('|', 'c');
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(2, strBuilder4.size());
      assertEquals(2, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertArrayEquals(new char[] {'\u0000', 'c', '\u0000', 'c', 'c', 'J', 'K', '7'}, charArray0);
      assertNotNull(strBuilder4);
      assertEquals(8, charArray0.length);
      
      int int0 = strBuilder0.lastIndexOf('u');
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertEquals((-1), int0);
      
      StrBuilder strBuilder5 = strBuilder2.appendAll((Iterator<?>) null);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(2, strBuilder5.length());
      assertEquals(2, strBuilder5.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertArrayEquals(new char[] {'\u0000', 'c', '\u0000', 'c', 'c', 'J', 'K', '7'}, charArray0);
      assertNotNull(strBuilder5);
      assertEquals(8, charArray0.length);
      
      StrBuilder strBuilder6 = strBuilder5.insert(0, (long) (-1));
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(4, strBuilder6.size());
      assertEquals(4, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, strBuilder2.length());
      assertEquals(4, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(4, strBuilder5.length());
      assertEquals(4, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertArrayEquals(new char[] {'\u0000', 'c', '\u0000', 'c', 'c', 'J', 'K', '7'}, charArray0);
      assertNotNull(strBuilder6);
      assertEquals(8, charArray0.length);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, (-5), 4033);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 4033
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      // Undeclared exception!
      try { 
        strBuilder0.equalsIgnoreCase((StrBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(10);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("3#xTisj?", "3#xTisj?");
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(10, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      LinkedHashSet<StrBuilder> linkedHashSet0 = new LinkedHashSet<StrBuilder>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(strBuilder0));
      
      HashSet<StrBuilder> hashSet0 = new HashSet<StrBuilder>(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      assertFalse(linkedHashSet0.contains(strBuilder0));
      assertFalse(hashSet0.contains(strBuilder0));
      
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = strBuilder0.getChars((char[]) null);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      
      int int0 = strBuilder1.lastIndexOf(" g7.4)#h");
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(10, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) "";
      StrBuilder strBuilder0 = new StrBuilder("5Sv!zR/Sq|>d}jGO");
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(9);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(9, strBuilder1.size());
      assertEquals(9, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(48, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      StrBuilder strBuilder2 = strBuilder1.insert(2, charArray0);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(10, strBuilder1.length());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(10, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(10, strBuilder2.length());
      assertEquals(10, strBuilder2.size());
      assertEquals(48, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertArrayEquals(new char[] {'8'}, charArray0);
      assertNotNull(strBuilder2);
      assertEquals(1, charArray0.length);
      
      StrBuilder strBuilder3 = strBuilder0.ensureCapacity(67);
      assertEquals(134, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(134, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(10, strBuilder3.size());
      assertEquals(10, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      int int0 = strBuilder0.lastIndexOf("...", 486);
      assertEquals(134, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int0);
      
      int int1 = strBuilder1.lastIndexOf('p', 88);
      assertEquals(134, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(10, strBuilder1.length());
      assertEquals(10, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(134, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[1] = 'c';
      charArray0[3] = 'c';
      charArray0[4] = 'c';
      charArray0[5] = 'J';
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      charArray0[6] = 'K';
      charArray0[7] = '7';
      StrBuilder strBuilder2 = strBuilder0.append(charArray0, 0, 0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertArrayEquals(new char[] {'M', 'c', '\u0000', 'c', 'c', 'J', 'K', '7'}, charArray0);
      assertNotNull(strBuilder2);
      assertEquals(8, charArray0.length);
      
      String string0 = strBuilder0.midString(0, 0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder3 = new StrBuilder();
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.appendSeparator('[', 0);
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotNull(strBuilder4);
      
      int int0 = strBuilder0.lastIndexOf('u');
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertEquals((-1), int0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      
      StrBuilder strBuilder5 = strBuilder2.appendAll((Iterator<?>) null);
      assertEquals(1, strBuilder5.size());
      assertEquals(1, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertArrayEquals(new char[] {'M', 'c', '\u0000', 'c', 'c', 'J', 'K', '7'}, charArray0);
      assertNotNull(strBuilder5);
      assertEquals(8, charArray0.length);
      
      StrBuilder strBuilder6 = strBuilder5.insert(0, (long) (-1));
      assertEquals(3, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(3, strBuilder5.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(3, strBuilder6.size());
      assertEquals(3, strBuilder6.length());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertArrayEquals(new char[] {'M', 'c', '\u0000', 'c', 'c', 'J', 'K', '7'}, charArray0);
      assertNotNull(strBuilder6);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendAll((Iterator<?>) null);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.startsWith("");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertTrue(boolean0);
      
      StrBuilder strBuilder2 = strBuilder0.appendln('T');
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(1.6260405F);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(10, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(10, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(10, strBuilder2.size());
      assertEquals(10, strBuilder2.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      int int0 = strBuilder0.lastIndexOf("");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(10, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(9, int0);
      
      int int1 = strBuilder1.lastIndexOf('3', 9);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(10, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.setNullText("");
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      
      CharBuffer charBuffer1 = CharBuffer.allocate(4);
      assertEquals(4, charBuffer1.length());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertEquals(4, charBuffer1.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(4, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertEquals(4, charBuffer1.capacity());
      assertEquals("\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      
      int int0 = StrBuilder.CAPACITY;
      assertEquals(32, int0);
      
      StrBuilder strBuilder0 = new StrBuilder((-480));
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      TreeSet<StringReader> treeSet0 = new TreeSet<StringReader>();
      assertNotNull(treeSet0);
      
      Iterator<StringReader> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      StrBuilder strBuilder1 = new StrBuilder(4);
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(4, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendNull();
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(4, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(4, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.appendFixedWidthPadRight((Object) null, 3155, 'N');
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3155, strBuilder0.size());
      assertEquals(6310, strBuilder0.capacity());
      assertEquals(3155, strBuilder0.length());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(6310, strBuilder3.capacity());
      assertEquals(3155, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(3155, strBuilder3.size());
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.setNullText("");
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(4, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(4, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertTrue(strBuilder4.isEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotNull(strBuilder4);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder("k6\" OQ-zMY#!|8ehg^");
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replace(5, 31, "k6\" OQ-zMY#!|8ehg^");
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(23, strBuilder0.size());
      assertEquals(23, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(23, strBuilder1.size());
      assertEquals(23, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(50, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      boolean boolean1 = strBuilder0.endsWith("k6\" OQ-zMY#!|8ehg^");
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(23, strBuilder0.size());
      assertEquals(23, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(5));
      
      Integer integer0 = new Integer((-808));
      assertEquals((-808), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean2 = arrayList0.add(integer0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(arrayList0.contains(5));
      assertTrue(arrayList0.contains(integer0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte)60;
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new byte[] {(byte)16, (byte)48, (byte)13, (byte)26, (byte)42, (byte) (-63), (byte)60}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>(arrayList0);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains(5));
      assertTrue(arrayList1.contains(integer0));
      assertFalse(arrayList0.contains(5));
      assertTrue(arrayList0.contains(integer0));
      
      StrBuilder strBuilder2 = strBuilder1.appendln("_G>_[y", (Object[]) null);
      assertEquals(50, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(30, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(30, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(30, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(30, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder1.size());
      assertEquals(30, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(50, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.appendAll((Iterable<?>) arrayList1);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(58, strBuilder0.size());
      assertEquals(58, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(116, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(116, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(58, strBuilder3.size());
      assertEquals(58, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(58, strBuilder1.size());
      assertEquals(58, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(116, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(arrayList1, arrayList0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(arrayList0, arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertNotNull(strBuilder3);
      assertFalse(arrayList1.contains(5));
      assertTrue(arrayList1.contains(integer0));
      assertFalse(arrayList0.contains(5));
      assertTrue(arrayList0.contains(integer0));
      
      int int0 = strBuilder3.length();
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(58, strBuilder0.size());
      assertEquals(58, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(116, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(116, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(58, strBuilder3.size());
      assertEquals(58, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(58, strBuilder1.size());
      assertEquals(58, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(116, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(arrayList1, arrayList0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(arrayList0, arrayList1);
      assertEquals(58, int0);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(arrayList1.contains(5));
      assertTrue(arrayList1.contains(integer0));
      assertFalse(arrayList0.contains(5));
      assertTrue(arrayList0.contains(integer0));
      
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(arrayList0, arrayList1);
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(arrayList0.contains(5));
      assertTrue(arrayList0.contains(integer0));
      
      StrBuilder strBuilder4 = strBuilder0.append(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(116, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(116, strBuilder0.size());
      assertEquals(116, strBuilder0.length());
      assertEquals(116, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(116, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(116, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(116, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(116, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(116, strBuilder4.length());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNotNull(strBuilder4);
      
      // Undeclared exception!
      try { 
        strBuilder3.insert(4825, '');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 4825
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("8");
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.substring(0, 0);
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("8");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(33, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.appendln(stringBuffer0, 0, 0);
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(33, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(33, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.reverse();
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(33, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(1, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertEquals(33, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      String string1 = strBuilder2.rightString(0);
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(33, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(33, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(33, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      String string2 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(33, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(33, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertTrue(boolean0);
      
      boolean boolean1 = strBuilder0.endsWith("\n");
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder1 = new StrBuilder(2);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StringBuilder stringBuilder0 = new StringBuilder(" in an array of ");
      assertEquals(" in an array of ", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(2);
      assertEquals(" in an array of 2", stringBuilder0.toString());
      assertEquals(" in an array of 2", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.append(stringBuilder1, 0, 2);
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(" in an array of 2", stringBuilder0.toString());
      assertEquals(" in an array of 2", stringBuilder1.toString());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      assertFalse(vector0.contains(" in an array of "));
      
      boolean boolean1 = vector0.add("~_ Pb'");
      assertEquals(10, vector0.capacity());
      assertEquals("[~_ Pb']", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(vector0.contains(" in an array of "));
      assertTrue(vector0.contains("~_ Pb'"));
      
      StrBuilder strBuilder3 = strBuilder1.appendAll((Iterable<?>) vector0);
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder1.size());
      assertEquals(8, strBuilder1.length());
      assertEquals(16, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[~_ Pb']", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(8, strBuilder3.length());
      assertEquals(16, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(8, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      assertFalse(vector0.contains(" in an array of "));
      assertTrue(vector0.contains("~_ Pb'"));
      
      StrBuilder strBuilder4 = strBuilder3.replaceAll('U', 'l');
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder1.size());
      assertEquals(8, strBuilder1.length());
      assertEquals(16, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[~_ Pb']", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(8, strBuilder3.length());
      assertEquals(16, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(8, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(16, strBuilder4.capacity());
      assertEquals(8, strBuilder4.length());
      assertEquals(8, strBuilder4.size());
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotNull(strBuilder4);
      assertFalse(vector0.contains(" in an array of "));
      assertTrue(vector0.contains("~_ Pb'"));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((Object) strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.deleteFirst("|KT6bcw[Jip`?W6h@~");
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.deleteCharAt(0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = new StrBuilder('f');
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertEquals(102, strBuilder4.capacity());
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertNotNull(strBuilder4);
      
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder5 = strBuilder4.appendWithSeparators(objectArray0, "");
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertEquals(102, strBuilder4.capacity());
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(102, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertTrue(strBuilder5.isEmpty());
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder0);
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertTrue(strBuilder5.equals((Object)strBuilder0));
      assertTrue(strBuilder5.equals((Object)strBuilder3));
      assertTrue(strBuilder5.equals((Object)strBuilder1));
      assertNotNull(strBuilder5);
      assertEquals(0, objectArray0.length);
      
      StrBuilder strBuilder6 = strBuilder0.append((Object) strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(0, strBuilder6.size());
      assertEquals(0, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertTrue(strBuilder0.equals((Object)strBuilder4));
      assertTrue(strBuilder0.equals((Object)strBuilder5));
      assertTrue(strBuilder6.equals((Object)strBuilder5));
      assertTrue(strBuilder6.equals((Object)strBuilder4));
      assertNotNull(strBuilder6);
      
      boolean boolean0 = strBuilder1.endsWith("org.apache.cWja~O%");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertFalse(boolean0);
      assertTrue(strBuilder0.equals((Object)strBuilder4));
      assertTrue(strBuilder0.equals((Object)strBuilder5));
      assertTrue(strBuilder1.equals((Object)strBuilder5));
      assertTrue(strBuilder1.equals((Object)strBuilder4));
      
      StrBuilder strBuilder7 = strBuilder0.trim();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(32, strBuilder7.capacity());
      assertTrue(strBuilder7.isEmpty());
      assertEquals(0, strBuilder7.length());
      assertEquals(0, strBuilder7.size());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder4);
      assertTrue(strBuilder0.equals((Object)strBuilder4));
      assertTrue(strBuilder0.equals((Object)strBuilder5));
      assertTrue(strBuilder7.equals((Object)strBuilder4));
      assertTrue(strBuilder7.equals((Object)strBuilder5));
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = strBuilder0.deleteFirst("|KT6bcw[Jip`?W6h@~");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(32, strBuilder8.capacity());
      assertEquals(0, strBuilder8.length());
      assertEquals(0, strBuilder8.size());
      assertFalse(strBuilder8.isNotEmpty());
      assertTrue(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder4);
      assertNotSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder1);
      assertTrue(strBuilder0.equals((Object)strBuilder4));
      assertTrue(strBuilder0.equals((Object)strBuilder5));
      assertTrue(strBuilder8.equals((Object)strBuilder5));
      assertTrue(strBuilder8.equals((Object)strBuilder4));
      assertNotNull(strBuilder8);
      
      StrBuilder strBuilder9 = new StrBuilder("|KT6bcw[Jip`?W6h@~");
      assertEquals(50, strBuilder9.capacity());
      assertNull(strBuilder9.getNullText());
      assertTrue(strBuilder9.isNotEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(18, strBuilder9.length());
      assertEquals(18, strBuilder9.size());
      assertFalse(strBuilder9.equals((Object)strBuilder2));
      assertFalse(strBuilder9.equals((Object)strBuilder1));
      assertFalse(strBuilder9.equals((Object)strBuilder0));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertNotNull(strBuilder9);
      
      strBuilder5.hashCode();
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertEquals(102, strBuilder4.capacity());
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(102, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertTrue(strBuilder5.isEmpty());
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder9);
      assertNotSame(strBuilder4, strBuilder8);
      assertNotSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder7);
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder7);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder9);
      assertNotSame(strBuilder5, strBuilder8);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder6);
      assertTrue(strBuilder4.equals((Object)strBuilder6));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertTrue(strBuilder4.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder9));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder8));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertTrue(strBuilder5.equals((Object)strBuilder6));
      assertTrue(strBuilder5.equals((Object)strBuilder8));
      assertTrue(strBuilder5.equals((Object)strBuilder7));
      assertTrue(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder9));
      assertTrue(strBuilder5.equals((Object)strBuilder3));
      assertTrue(strBuilder5.equals((Object)strBuilder1));
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("", 8);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendFixedWidthPadLeft((Object) "", 8, '(');
      assertEquals(8, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.size());
      assertEquals(8, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(8, strBuilder2.size());
      assertEquals(8, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendln(false);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(14, strBuilder1.size());
      assertEquals(14, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(14, strBuilder2.size());
      assertEquals(14, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(14, strBuilder3.length());
      assertEquals(14, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder0.replaceFirst('b', 'u');
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(14, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(14, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertNotNull(strBuilder4);
      
      int int0 = strBuilder4.indexOf("", 117);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(14, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(14, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertEquals((-1), int0);
      
      StrBuilder strBuilder5 = new StrBuilder("");
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.size());
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isEmpty());
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertNotNull(strBuilder5);
      
      boolean boolean0 = strBuilder0.equals(strBuilder5);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.size());
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder2);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = (-29);
      StrBuilder strBuilder0 = new StrBuilder((-29));
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.toCharArray((-29), (-29));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -29
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.toCharArray(4, 1879);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.minimizeCapacity();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertTrue(boolean0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder1.equals((Object)strBuilder2));
      
      StrBuilder strBuilder3 = strBuilder0.trim();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.appendFixedWidthPadRight(42, 115, 'r');
      assertEquals(230, strBuilder0.capacity());
      assertEquals(115, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(115, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(230, strBuilder3.capacity());
      assertEquals(115, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(115, strBuilder3.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(230, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(115, strBuilder4.length());
      assertEquals(115, strBuilder4.size());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotNull(strBuilder4);
      
      // Undeclared exception!
      try { 
        strBuilder1.append((CharSequence) strBuilder3, 4624, (-2066));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(3);
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.append(false);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(7, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(7, strBuilder2.length());
      assertEquals(7, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendln((long) 3);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(9, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(9, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(9, strBuilder2.length());
      assertEquals(9, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(9, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(9, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      char[] charArray0 = new char[10];
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[4] = '~';
      charArray0[5] = 's';
      charArray0[6] = 'D';
      charArray0[2] = '7';
      charArray0[8] = 'S';
      StrBuilder strBuilder4 = new StrBuilder('X');
      assertEquals(0, strBuilder4.length());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.size());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(88, strBuilder4.capacity());
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      
      boolean boolean0 = strBuilder0.startsWith("x aB\"Stgg(3'");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      
      String string0 = strBuilder1.midString(3, 5);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(9, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(9, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertEquals("alse3", string0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertNotNull(string0);
      
      StrBuilder strBuilder5 = strBuilder1.appendFixedWidthPadRight((-1418), 3, 't');
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(12, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(12, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(12, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(12, strBuilder1.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(12, strBuilder5.length());
      assertEquals(12, strBuilder5.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertNotNull(strBuilder5);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      TreeSet<StringReader> treeSet0 = new TreeSet<StringReader>();
      assertNotNull(treeSet0);
      
      StringReader stringReader0 = treeSet0.pollFirst();
      assertNull(stringReader0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(3);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.setLength(3);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3, strBuilder2.length());
      assertEquals(3, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.append(false);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(8, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(8, strBuilder3.length());
      assertEquals(8, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = 'X';
      charArray0[2] = 'F';
      charArray0[3] = 'J';
      charArray0[4] = '~';
      charArray0[5] = '|';
      charArray0[6] = 'D';
      charArray0[7] = '*';
      charArray0[8] = 'S';
      StrBuilder strBuilder4 = strBuilder3.append(charArray0, 3, 3);
      assertEquals(11, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(11, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(11, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(11, strBuilder1.size());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(11, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(11, strBuilder3.size());
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertArrayEquals(new char[] {':', 'X', 'F', 'J', '~', '|', 'D', '*', 'S'}, charArray0);
      assertNotNull(strBuilder4);
      assertEquals(9, charArray0.length);
      
      StrBuilder strBuilder5 = new StrBuilder("");
      assertTrue(strBuilder5.isEmpty());
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertNotNull(strBuilder5);
      
      StringBuilder stringBuilder0 = new StringBuilder("m* %<=^$");
      assertEquals("m* %<=^$", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "");
      assertEquals("m* %<=^$", stringBuilder0.toString());
      assertEquals("m* %<=^$", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder1.append(5);
      assertEquals("m* %<=^$5", stringBuilder0.toString());
      assertEquals("m* %<=^$5", stringBuilder1.toString());
      assertEquals("m* %<=^$5", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotNull(stringBuilder2);
      
      StringBuilder stringBuilder3 = stringBuilder2.append(11L);
      assertEquals("m* %<=^$511", stringBuilder0.toString());
      assertEquals("m* %<=^$511", stringBuilder1.toString());
      assertEquals("m* %<=^$511", stringBuilder2.toString());
      assertEquals("m* %<=^$511", stringBuilder3.toString());
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertNotNull(stringBuilder3);
      
      boolean boolean0 = strBuilder0.startsWith("x aB\"Stgg(3'");
      assertEquals(32, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(11, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      
      String string0 = strBuilder1.midString(3, 5);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(11, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(11, strBuilder1.size());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder5);
      assertEquals("false", string0);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertNotNull(string0);
      
      StrBuilder strBuilder6 = strBuilder2.appendFixedWidthPadRight((-1418), 3, 't');
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(14, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(14, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(14, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(14, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(14, strBuilder6.size());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(14, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertNotNull(strBuilder6);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      TreeSet<StringReader> treeSet0 = new TreeSet<StringReader>();
      assertNotNull(treeSet0);
      
      StringReader stringReader0 = treeSet0.pollFirst();
      assertNull(stringReader0);
      
      StringReader stringReader1 = treeSet0.pollLast();
      assertNull(stringReader1);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(1);
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.setLength(1);
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      strBuilder1.size = 1312;
      assertEquals(1312, strBuilder0.length());
      assertEquals(1312, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(1312, strBuilder1.length());
      assertEquals(1312, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder2.readFrom((Readable) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder(156);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(156, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      StrBuilder strBuilder1 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
      assertEquals(92, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(60, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(60, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();
      assertEquals(92, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(60, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(60, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer", stringBuilder0.toString());
      assertNotSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator((String) null);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(156, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(156, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      StringBuffer stringBuffer0 = new StringBuffer(1);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder3 = strBuilder2.append(stringBuffer0);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(156, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(156, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(156, strBuilder3.capacity());
      assertFalse(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder2.trim();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(156, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(156, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(156, strBuilder4.capacity());
      assertEquals(0, strBuilder4.size());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotNull(strBuilder4);
      
      strBuilder0.hashCode();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(156, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      
      int int0 = strBuilder0.length();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(156, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertEquals(0, int0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      
      StrBuilder strBuilder5 = strBuilder0.append((CharSequence) stringBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(60, strBuilder0.size());
      assertEquals(60, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(156, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(92, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(60, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(60, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer", stringBuilder0.toString());
      assertEquals(156, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(60, strBuilder5.size());
      assertEquals(60, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder3));
      assertTrue(strBuilder1.equals((Object)strBuilder4));
      assertTrue(strBuilder1.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder5.equals((Object)strBuilder1));
      assertNotNull(strBuilder5);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder6 = strBuilder5.insert(0, charArray0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(60, strBuilder0.size());
      assertEquals(60, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(156, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(92, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(60, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(60, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer", stringBuilder0.toString());
      assertEquals(156, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(60, strBuilder5.size());
      assertEquals(60, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(156, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertEquals(60, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(60, strBuilder6.size());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder1);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder3));
      assertTrue(strBuilder1.equals((Object)strBuilder4));
      assertTrue(strBuilder1.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder1.equals((Object)strBuilder5));
      assertTrue(strBuilder5.equals((Object)strBuilder1));
      assertTrue(strBuilder6.equals((Object)strBuilder1));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(strBuilder6);
      assertEquals(0, charArray0.length);
      
      StrBuilder strBuilder7 = strBuilder6.clear();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(156, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(92, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(60, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(60, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer", stringBuilder0.toString());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(156, strBuilder5.capacity());
      assertEquals(0, strBuilder5.length());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder6.isNotEmpty());
      assertEquals(156, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(0, strBuilder6.size());
      assertEquals(0, strBuilder6.length());
      assertTrue(strBuilder6.isEmpty());
      assertTrue(strBuilder7.isEmpty());
      assertEquals(0, strBuilder7.length());
      assertEquals(0, strBuilder7.size());
      assertFalse(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(156, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder5, strBuilder7);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(strBuilder7);
      assertEquals(0, charArray0.length);
      
      String string0 = strBuilder1.substring(0);
      assertEquals(92, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(60, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(60, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder2);
      assertEquals("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer", string0);
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertNotNull(string0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(156);
      assertEquals(0L, long0);
      
      StrBuilder strBuilder8 = strBuilder1.appendln((Object) stringReader0);
      assertEquals(92, strBuilder8.length());
      assertEquals(92, strBuilder8.size());
      assertTrue(strBuilder8.isNotEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(92, strBuilder8.capacity());
      assertNull(strBuilder8.getNullText());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(92, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(92, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(92, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNotSame(strBuilder8, strBuilder3);
      assertNotSame(strBuilder8, strBuilder5);
      assertNotSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder6);
      assertNotSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder4);
      assertNotSame(strBuilder8, strBuilder7);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder2);
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertNotNull(strBuilder8);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(97);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.setLength(97);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(194, strBuilder0.capacity());
      assertEquals(97, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(97, strBuilder0.size());
      assertEquals(97, strBuilder1.size());
      assertEquals(97, strBuilder1.length());
      assertEquals(194, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(97, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(97, strBuilder2.size());
      assertEquals(194, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.append(false);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(194, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(102, strBuilder0.size());
      assertEquals(102, strBuilder0.length());
      assertEquals(194, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(102, strBuilder1.length());
      assertEquals(102, strBuilder1.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(194, strBuilder2.capacity());
      assertEquals(102, strBuilder2.size());
      assertEquals(102, strBuilder2.length());
      assertEquals(194, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(102, strBuilder3.size());
      assertEquals(102, strBuilder3.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = new StrBuilder("");
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder4.minimizeCapacity();
      assertEquals(0, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(0, strBuilder5.capacity());
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder3);
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertNotNull(strBuilder5);
      
      strBuilder0.hashCode();
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(194, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(102, strBuilder0.size());
      assertEquals(102, strBuilder0.length());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-47));
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      Writer writer0 = strBuilder0.asWriter();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(writer0);
      
      StrBuilder strBuilder1 = strBuilder0.append('6');
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      strBuilder1.hashCode();
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      TreeSet<StringReader> treeSet0 = new TreeSet<StringReader>();
      assertNotNull(treeSet0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(3);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.setLength(3);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.append(false);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(8, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8, strBuilder1.size());
      assertEquals(8, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(8, strBuilder3.size());
      assertEquals(8, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder0.appendSeparator((String) null, 3);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(8, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(8, strBuilder4.length());
      assertEquals(8, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder0.replaceFirst('u', 'u');
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(8, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(8, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(8, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder5.insert(3, 1637.55903781024);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(24, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(24, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(24, strBuilder6.length());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(24, strBuilder6.size());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertNotNull(strBuilder6);
      
      boolean boolean0 = strBuilder2.contains('u');
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(24, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(24, strBuilder2.length());
      assertEquals(24, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(boolean0);
      
      int int0 = strBuilder2.indexOf('u', 3);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(24, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(24, strBuilder2.length());
      assertEquals(24, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[1] = 'c';
      charArray0[3] = 'v';
      charArray0[4] = 'v';
      charArray0[5] = 'J';
      charArray0[6] = 'K';
      charArray0[7] = '7';
      StrBuilder strBuilder1 = strBuilder0.append(charArray0, 0, 0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'M', 'c', '\u0000', 'v', 'v', 'J', 'K', '7'}, charArray0);
      assertNotNull(strBuilder1);
      assertEquals(8, charArray0.length);
      
      String string0 = strBuilder0.midString(0, 0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendSeparator('[', 0);
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      int int0 = strBuilder0.lastIndexOf('u');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertEquals((-1), int0);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder0.equals((Object)strBuilder3));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(49);
      assertEquals(49, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[12];
      charArray0[1] = 'v';
      StrBuilder strBuilder1 = new StrBuilder("Threshold must not be negative");
      assertNull(strBuilder1.getNullText());
      assertEquals(30, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(30, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(62, strBuilder1.capacity());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertEquals(49, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(30, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(30, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(62, strBuilder1.capacity());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(97);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.setLength(97);
      assertEquals(194, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(97, strBuilder0.size());
      assertEquals(97, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(97, strBuilder1.length());
      assertEquals(97, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(194, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(97, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(194, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(97, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.append(false);
      assertEquals(102, strBuilder0.size());
      assertEquals(102, strBuilder0.length());
      assertEquals(194, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(102, strBuilder1.length());
      assertEquals(102, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(194, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(194, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(102, strBuilder2.size());
      assertEquals(102, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(102, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(194, strBuilder3.capacity());
      assertEquals(102, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.appendSeparator("t&Ho\"ui5GkiZ.m", 97);
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder0.length());
      assertEquals(194, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(117, strBuilder1.length());
      assertEquals(117, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(194, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(117, strBuilder4.length());
      assertEquals(117, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(194, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = new StrBuilder("=wk=V[");
      assertNull(strBuilder5.getNewLineText());
      assertEquals(6, strBuilder5.length());
      assertEquals(6, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(38, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder5.replaceFirst('u', 'u');
      assertNull(strBuilder5.getNewLineText());
      assertEquals(6, strBuilder5.length());
      assertEquals(6, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(38, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(6, strBuilder6.size());
      assertEquals(6, strBuilder6.length());
      assertEquals(38, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder1);
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertNotNull(strBuilder6);
      
      boolean boolean0 = strBuilder2.contains('4');
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder0.length());
      assertEquals(194, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(117, strBuilder1.length());
      assertEquals(117, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(194, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(194, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(117, strBuilder2.size());
      assertEquals(117, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      
      int int0 = strBuilder0.indexOf('u', 2259);
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder0.length());
      assertEquals(194, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertEquals((-1), int0);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(384);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(384, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      Writer writer0 = strBuilder0.asWriter();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(384, strBuilder0.capacity());
      assertNotNull(writer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln("", 0, 0);
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(384, strBuilder0.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(384, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder1.leftString(384);
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(384, strBuilder0.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(384, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder2 = strBuilder0.append((long) 0);
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(384, strBuilder0.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(384, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.setNewLineText("");
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(384, strBuilder0.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(384, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertEquals("", strBuilder2.getNewLineText());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder3.size());
      assertEquals(2, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(384, strBuilder3.capacity());
      assertEquals("", strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.appendFixedWidthPadLeft(4, 21, 'H');
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(384, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(384, strBuilder1.capacity());
      assertEquals(23, strBuilder1.size());
      assertEquals(23, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals("", strBuilder1.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals("", strBuilder4.getNewLineText());
      assertEquals(23, strBuilder4.length());
      assertEquals(23, strBuilder4.size());
      assertEquals(384, strBuilder4.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertNotNull(strBuilder4);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertEquals("H", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = strBuilder1.getChars((char[]) null);
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(384, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(384, strBuilder1.capacity());
      assertEquals(23, strBuilder1.size());
      assertEquals(23, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals("", strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(23, charArray1.length);
      
      int int0 = strBuilder0.lastIndexOf("w-'uLE6}oTg1A");
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(384, strBuilder0.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertEquals((-1), int0);
      
      StrBuilder strBuilder5 = strBuilder3.append(',');
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(384, strBuilder0.capacity());
      assertEquals(24, strBuilder2.length());
      assertEquals(24, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(384, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals("", strBuilder2.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(24, strBuilder3.length());
      assertEquals(384, strBuilder3.capacity());
      assertEquals("", strBuilder3.getNewLineText());
      assertEquals(24, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(24, strBuilder5.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals("", strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(384, strBuilder5.capacity());
      assertEquals(24, strBuilder5.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertNotNull(strBuilder5);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(384, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(384, strBuilder1.capacity());
      assertEquals(24, strBuilder1.size());
      assertEquals(24, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals("", strBuilder1.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 0, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '~';
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("2!G9Zs72zK'rOm^^)D");
      assertEquals(50, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith("2!G9Zs72zK'rOm^^)D");
      assertEquals(50, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertTrue(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder(2);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'D';
      charArray0[1] = '/';
      StrBuilder strBuilder1 = strBuilder0.appendNull();
      assertEquals(50, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(50, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder0.leftString(2);
      assertEquals(50, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertSame(strBuilder0, strBuilder1);
      assertEquals("2!", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = 56;
      String string0 = strBuilder0.midString((-33), 66);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert((-33), ".peuZ\"8op");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -33
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(32);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer(4);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.reverse();
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer1 = new StringBuffer(4);
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotNull(stringBuffer1);
      
      IntStream intStream0 = stringBuffer1.chars();
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertNotSame(stringBuffer1, stringBuffer0);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotNull(intStream0);
      
      StrBuilder strBuilder3 = strBuilder1.append((CharSequence) null, 4, 1687);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.trim();
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isNotEmpty());
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = new StrBuilder();
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertTrue(strBuilder5.equals((Object)strBuilder1));
      assertTrue(strBuilder5.equals((Object)strBuilder0));
      assertTrue(strBuilder5.equals((Object)strBuilder3));
      assertNotNull(strBuilder5);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(4, (Object) strBuilder5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 4
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'e <sOH''^");
      assertFalse(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("", 2152, 1218);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder(156);
      assertEquals(156, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer", (String) null);
      assertEquals(156, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(156, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();
      assertEquals(156, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(156, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals("", stringBuilder0.toString());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator((String) null);
      assertEquals(156, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(156, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.trim();
      assertEquals(156, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(156, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(156, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      strBuilder0.hashCode();
      assertEquals(156, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      
      int int0 = strBuilder0.length();
      assertEquals(156, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertEquals(0, int0);
      
      StrBuilder strBuilder4 = strBuilder0.append((CharSequence) stringBuilder0);
      assertEquals(156, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(156, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals("", stringBuilder0.toString());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(156, strBuilder4.capacity());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertNotNull(strBuilder4);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder5 = strBuilder4.insert(0, charArray0);
      assertEquals(156, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(156, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals("", stringBuilder0.toString());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(156, strBuilder4.capacity());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isNotEmpty());
      assertFalse(strBuilder5.isNotEmpty());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(156, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(0, strBuilder5.size());
      assertEquals(0, strBuilder5.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(strBuilder5);
      assertEquals(0, charArray0.length);
      
      String string0 = strBuilder1.substring(0);
      assertEquals(156, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(156, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertEquals("", string0);
      assertNotNull(string0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(156);
      assertEquals(0L, long0);
      
      StrBuilder strBuilder6 = strBuilder1.appendln((Object) stringReader0);
      assertEquals(156, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(32, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(32, strBuilder6.size());
      assertEquals(156, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.size());
      assertEquals(32, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(156, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertNotNull(strBuilder6);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("2*W8");
      assertNull(strBuilder0.getNullText());
      assertEquals(36, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertEquals(36, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertNull(strBuilder0.getNullText());
      assertEquals(36, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(36, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.setNullText("2*W8");
      assertEquals(36, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertEquals("2*W8", strBuilder0.getNullText());
      assertEquals(4, strBuilder2.length());
      assertEquals(4, strBuilder2.size());
      assertEquals(36, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals("2*W8", strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertEquals(36, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertEquals("2*W8", strBuilder0.getNullText());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals("2*W8", strBuilder1.getNullText());
      assertEquals(36, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        strBuilder1.append((String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("xih valid");
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(9, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("xih valid");
      assertEquals(9, strBuilder1.size());
      assertEquals(9, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(41, strBuilder1.capacity());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(103);
      assertEquals(103, charBuffer0.remaining());
      assertEquals(103, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(103, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(103, charBuffer0.length());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(charBuffer0);
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(224, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(112, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(112, strBuilder1.size());
      assertEquals(103, charBuffer0.remaining());
      assertEquals(103, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(103, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(103, charBuffer0.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(224, strBuilder2.capacity());
      assertEquals(112, strBuilder2.length());
      assertEquals(112, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.appendln(101);
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(13, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(13, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(41, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.setLength(103);
      assertEquals(103, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(103, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(206, strBuilder0.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(206, strBuilder3.capacity());
      assertEquals(103, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(103, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(206, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(103, strBuilder4.size());
      assertEquals(103, strBuilder4.length());
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder1.append(false);
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(224, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(117, strBuilder1.size());
      assertEquals(117, strBuilder1.length());
      assertNull(strBuilder5.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(224, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(117, strBuilder5.length());
      assertEquals(117, strBuilder5.size());
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder4.appendSeparator("xih valid", 1641);
      assertEquals(112, strBuilder0.length());
      assertEquals(112, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(206, strBuilder0.capacity());
      assertEquals(112, strBuilder3.size());
      assertEquals(112, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(206, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(206, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(112, strBuilder4.length());
      assertEquals(112, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(112, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertEquals(112, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(206, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder6.append("htB:Km");
      assertEquals(118, strBuilder0.length());
      assertEquals(118, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(206, strBuilder0.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(206, strBuilder3.capacity());
      assertEquals(118, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(118, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(206, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(118, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(118, strBuilder4.size());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(118, strBuilder6.length());
      assertEquals(206, strBuilder6.capacity());
      assertEquals(118, strBuilder6.size());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertEquals(118, strBuilder7.length());
      assertEquals(118, strBuilder7.size());
      assertEquals(206, strBuilder7.capacity());
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder7);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder2);
      assertSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertNotNull(strBuilder7);
      
      ArrayDeque<StringWriter> arrayDeque0 = new ArrayDeque<StringWriter>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Iterator<StringWriter> iterator0 = arrayDeque0.descendingIterator();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(iterator0);
      
      StrBuilder strBuilder8 = strBuilder0.replaceFirst('t', 't');
      assertEquals(118, strBuilder0.length());
      assertEquals(118, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(206, strBuilder0.capacity());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertEquals(206, strBuilder8.capacity());
      assertTrue(strBuilder8.isNotEmpty());
      assertEquals(118, strBuilder8.size());
      assertEquals(118, strBuilder8.length());
      assertFalse(strBuilder8.isEmpty());
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder8, strBuilder2);
      assertNotSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder6);
      assertNotSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertNotNull(strBuilder8);
      
      StrBuilder strBuilder9 = new StrBuilder((String) null);
      assertEquals(32, strBuilder9.capacity());
      assertTrue(strBuilder9.isEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertEquals(0, strBuilder9.size());
      assertFalse(strBuilder9.isNotEmpty());
      assertEquals(0, strBuilder9.length());
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder0));
      assertFalse(strBuilder9.equals((Object)strBuilder2));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertFalse(strBuilder9.equals((Object)strBuilder1));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertNotNull(strBuilder9);
      
      StrBuilder strBuilder10 = strBuilder2.deleteAll('t');
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(224, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(117, strBuilder1.size());
      assertEquals(117, strBuilder1.length());
      assertEquals(103, charBuffer0.remaining());
      assertEquals(103, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(103, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(103, charBuffer0.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(224, strBuilder2.capacity());
      assertEquals(117, strBuilder2.size());
      assertEquals(117, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder10.getNewLineText());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(224, strBuilder10.capacity());
      assertTrue(strBuilder10.isNotEmpty());
      assertNull(strBuilder10.getNullText());
      assertEquals(117, strBuilder10.length());
      assertEquals(117, strBuilder10.size());
      assertNotSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder10);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder10);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder9);
      assertNotSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder5);
      assertNotSame(strBuilder10, strBuilder6);
      assertNotSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder1);
      assertNotSame(strBuilder10, strBuilder0);
      assertNotSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder2);
      assertNotSame(strBuilder10, strBuilder3);
      assertNotSame(strBuilder10, strBuilder8);
      assertFalse(strBuilder1.equals((Object)strBuilder9));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder8));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder8));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder9));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder10.equals((Object)strBuilder7));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder10.equals((Object)strBuilder9));
      assertFalse(strBuilder10.equals((Object)strBuilder0));
      assertFalse(strBuilder10.equals((Object)strBuilder4));
      assertFalse(strBuilder10.equals((Object)strBuilder3));
      assertFalse(strBuilder10.equals((Object)strBuilder8));
      assertNotNull(strBuilder10);
      
      int int0 = strBuilder0.indexOf("xih valid", (-736));
      assertEquals(118, strBuilder0.length());
      assertEquals(118, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(206, strBuilder0.capacity());
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder9);
      assertEquals(0, int0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder10));
      assertFalse(strBuilder0.equals((Object)strBuilder9));
      
      boolean boolean0 = strBuilder2.equals(strBuilder10);
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(224, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(117, strBuilder1.size());
      assertEquals(117, strBuilder1.length());
      assertEquals(103, charBuffer0.remaining());
      assertEquals(103, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(103, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(103, charBuffer0.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(224, strBuilder2.capacity());
      assertEquals(117, strBuilder2.size());
      assertEquals(117, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder10.getNewLineText());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(224, strBuilder10.capacity());
      assertTrue(strBuilder10.isNotEmpty());
      assertNull(strBuilder10.getNullText());
      assertEquals(117, strBuilder10.length());
      assertEquals(117, strBuilder10.size());
      assertNotSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder10);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder10);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder9);
      assertNotSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder5);
      assertNotSame(strBuilder10, strBuilder6);
      assertNotSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder1);
      assertNotSame(strBuilder10, strBuilder0);
      assertNotSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder2);
      assertNotSame(strBuilder10, strBuilder3);
      assertNotSame(strBuilder10, strBuilder8);
      assertTrue(boolean0);
      assertFalse(strBuilder1.equals((Object)strBuilder9));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder8));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder8));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder9));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder10.equals((Object)strBuilder7));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder10.equals((Object)strBuilder9));
      assertFalse(strBuilder10.equals((Object)strBuilder0));
      assertFalse(strBuilder10.equals((Object)strBuilder4));
      assertFalse(strBuilder10.equals((Object)strBuilder3));
      assertFalse(strBuilder10.equals((Object)strBuilder8));
      
      StrBuilder strBuilder11 = strBuilder3.append((char[]) null);
      assertEquals(206, strBuilder11.capacity());
      assertEquals(118, strBuilder11.size());
      assertEquals(118, strBuilder11.length());
      assertNull(strBuilder11.getNewLineText());
      assertTrue(strBuilder11.isNotEmpty());
      assertNull(strBuilder11.getNullText());
      assertFalse(strBuilder11.isEmpty());
      assertEquals(118, strBuilder0.length());
      assertEquals(118, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(206, strBuilder0.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(206, strBuilder3.capacity());
      assertEquals(118, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(118, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder11, strBuilder8);
      assertNotSame(strBuilder11, strBuilder9);
      assertNotSame(strBuilder11, strBuilder10);
      assertNotSame(strBuilder11, strBuilder2);
      assertNotSame(strBuilder11, strBuilder1);
      assertSame(strBuilder11, strBuilder3);
      assertSame(strBuilder11, strBuilder0);
      assertSame(strBuilder11, strBuilder4);
      assertSame(strBuilder11, strBuilder6);
      assertSame(strBuilder11, strBuilder7);
      assertNotSame(strBuilder11, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder11);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder8);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder11);
      assertNotSame(strBuilder3, strBuilder9);
      assertNotSame(strBuilder3, strBuilder10);
      assertFalse(strBuilder11.equals((Object)strBuilder9));
      assertFalse(strBuilder11.equals((Object)strBuilder10));
      assertFalse(strBuilder11.equals((Object)strBuilder2));
      assertFalse(strBuilder11.equals((Object)strBuilder1));
      assertFalse(strBuilder11.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder10));
      assertFalse(strBuilder0.equals((Object)strBuilder9));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder9));
      assertFalse(strBuilder3.equals((Object)strBuilder10));
      assertNotNull(strBuilder11);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      Writer writer0 = strBuilder0.asWriter();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(writer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((StringBuilder) null, (-989), 1418);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertSame(strBuilder0, strBuilder1);
      assertArrayEquals(new char[] {'\n'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      StrBuilder strBuilder2 = strBuilder0.trim();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-277));
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("3#xTisj?", "3#xTisj?");
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      strBuilder1.hashCode();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      int int0 = strBuilder0.size();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be va:'");
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.length());
      assertEquals(51, strBuilder0.capacity());
      assertEquals(19, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.capacity());
      assertEquals(19, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(19, strBuilder1.size());
      assertEquals(19, strBuilder1.length());
      assertEquals(19, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.insert(6, false);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(24, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(24, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(48, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(24, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(24, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals("lengthfalse must be va:'", stringWriter0.toString());
      assertEquals("lengthfalse must be va:'", stringWriter1.toString());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(24, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(24, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals("lengthfalse must be va:'", stringWriter0.toString());
      assertEquals("lengthfalse must be va:'", stringWriter1.toString());
      assertEquals(24, stringBuffer0.length());
      assertEquals("lengthfalse must be va:'", stringBuffer0.toString());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder3 = strBuilder2.append(stringBuffer0, 6, 6);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(30, strBuilder0.length());
      assertEquals(30, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(30, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(30, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(30, strBuilder2.length());
      assertEquals(30, strBuilder2.size());
      assertEquals(48, strBuilder2.capacity());
      assertEquals("lengthfalse must be va:'", stringWriter0.toString());
      assertEquals("lengthfalse must be va:'", stringWriter1.toString());
      assertEquals(24, stringBuffer0.length());
      assertEquals("lengthfalse must be va:'", stringBuffer0.toString());
      assertEquals(30, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(48, strBuilder3.capacity());
      assertEquals(30, strBuilder3.length());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      StringBuilder stringBuilder0 = strBuilder0.toStringBuilder();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(30, strBuilder0.length());
      assertEquals(30, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("lengthfalse must be va:'false ", stringBuilder0.toString());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder4 = strBuilder0.appendNull();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(30, strBuilder0.length());
      assertEquals(30, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(30, strBuilder4.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(48, strBuilder4.capacity());
      assertEquals(30, strBuilder4.length());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertNotNull(strBuilder4);
      
      stringWriter0.flush();
      assertEquals("lengthfalse must be va:'", stringWriter0.toString());
      assertSame(stringWriter0, stringWriter1);
      
      StrBuilder strBuilder5 = new StrBuilder();
      assertEquals(0, strBuilder5.length());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.size());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertNotNull(strBuilder5);
      
      int int0 = strBuilder3.lastIndexOf("length must be va:'", 32);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(30, strBuilder0.length());
      assertEquals(30, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(30, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(30, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(30, strBuilder2.length());
      assertEquals(30, strBuilder2.size());
      assertEquals(48, strBuilder2.capacity());
      assertEquals("lengthfalse must be va:'", stringWriter0.toString());
      assertEquals("lengthfalse must be va:'", stringWriter1.toString());
      assertEquals(24, stringBuffer0.length());
      assertEquals("lengthfalse must be va:'", stringBuffer0.toString());
      assertEquals(30, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(48, strBuilder3.capacity());
      assertEquals(30, strBuilder3.length());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertEquals((-1), int0);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      
      String string0 = strBuilder1.toString();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(30, strBuilder0.length());
      assertEquals(30, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(30, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(30, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertEquals("lengthfalse must be va:'false ", string0);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertNotNull(string0);
      
      StrBuilder strBuilder6 = strBuilder1.deleteAll("");
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(30, strBuilder0.length());
      assertEquals(30, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(30, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(30, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(30, strBuilder6.length());
      assertEquals(30, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(48, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertNotNull(strBuilder6);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("5N(o#(ye");
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(40, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith("");
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(40, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(boolean0);
      
      StringBuilder stringBuilder0 = strBuilder0.toStringBuilder();
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(40, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals("5N(o#(ye", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((CharBuffer) null);
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(40, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(40, strBuilder1.capacity());
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      boolean boolean0 = strBuilder_StrBuilderTokenizer0.hasPrevious();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(boolean0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      
      StrBuilder strBuilder1 = new StrBuilder("Yz*8s(hf1BkVo[A");
      assertEquals(15, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(47, strBuilder1.capacity());
      assertEquals(15, strBuilder1.size());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll("");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(102);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.limit());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder3 = strBuilder2.append((CharBuffer) null);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      int int0 = 1326;
      CharBuffer charBuffer1 = CharBuffer.allocate(101);
      assertEquals(101, charBuffer1.remaining());
      assertEquals(101, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(101, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertEquals(101, charBuffer1.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      
      StrBuilder strBuilder4 = new StrBuilder("");
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isNotEmpty());
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotNull(strBuilder4);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter1 = strBuilder1.new StrBuilderWriter();
      assertEquals(15, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(47, strBuilder1.capacity());
      assertEquals(15, strBuilder1.size());
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder_StrBuilderWriter1.equals((Object)strBuilder_StrBuilderWriter0));
      assertNotNull(strBuilder_StrBuilderWriter1);
      
      // Undeclared exception!
      try { 
        strBuilder3.replace(0, (-3548), "On7#q43{9[[yN8m\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      Writer writer0 = strBuilder0.asWriter();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(writer0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(charBuffer0, 0, 0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringWriter1.toString());
      assertSame(strBuilder0, strBuilder1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringWriter1.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = stringBuffer0.appendCodePoint(0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("\u0000", stringWriter0.toString());
      assertEquals("\u0000", stringWriter1.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("\u0000", stringBuffer0.toString());
      assertEquals(1, stringBuffer1.length());
      assertEquals("\u0000", stringBuffer1.toString());
      assertSame(strBuilder0, strBuilder1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, 2794);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      assertNull(strBuilder0.getNullText());
      assertEquals(52, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder1.length());
      assertEquals(20, strBuilder1.size());
      assertEquals(20, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.insert(6, false);
      assertEquals(25, strBuilder0.length());
      assertEquals(25, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(25, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(25, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) strBuilder1);
      assertEquals(25, strBuilder0.length());
      assertEquals(25, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(50, strBuilder1.capacity());
      assertEquals(25, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(25, strBuilder1.size());
      assertEquals("lengthfalse must be valid", stringWriter0.toString());
      assertEquals("lengthfalse must be valid", stringWriter1.toString());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertEquals(25, strBuilder0.length());
      assertEquals(25, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(50, strBuilder1.capacity());
      assertEquals(25, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(25, strBuilder1.size());
      assertEquals("lengthfalse must be valid", stringWriter0.toString());
      assertEquals("lengthfalse must be valid", stringWriter1.toString());
      assertEquals(25, stringBuffer0.length());
      assertEquals("lengthfalse must be valid", stringBuffer0.toString());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringBuffer0);
      
      int int0 = 34;
      // Undeclared exception!
      try { 
        strBuilder2.append(stringBuffer0, 6, 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be va:'");
      assertEquals(51, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("length must be va:'");
      assertNull(strBuilder1.getNewLineText());
      assertEquals(51, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(19, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(19, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.insert(6, false);
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertEquals(51, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNullText());
      assertEquals(51, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(24, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(24, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertNull(strBuilder1.getNewLineText());
      assertEquals(51, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(19, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(19, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      boolean boolean0 = strBuilder_StrBuilderTokenizer0.hasNext();
      assertNull(strBuilder1.getNewLineText());
      assertEquals(51, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(19, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(19, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertTrue(boolean0);
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(258);
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(258, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("y1X/8");
      assertEquals("y1X/8", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) stringBuffer0);
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(258, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(258, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.minimizeCapacity();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.setLength(23);
      assertEquals(23, strBuilder0.size());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(23, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(46, strBuilder1.capacity());
      assertEquals(23, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(23, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(46, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(23, strBuilder3.size());
      assertEquals(23, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder2.appendSeparator("\r", 23);
      assertEquals(24, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(24, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(46, strBuilder2.capacity());
      assertEquals(24, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(46, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(24, strBuilder4.size());
      assertEquals(24, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder1.append(23);
      assertEquals(46, strBuilder0.capacity());
      assertEquals(26, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(26, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(46, strBuilder1.capacity());
      assertEquals(26, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(26, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(26, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(26, strBuilder5.length());
      assertEquals(46, strBuilder5.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertNotNull(strBuilder5);
      
      strBuilder5.buffer = charArray0;
      assertEquals(26, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(26, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(5, strBuilder0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(26, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(26, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(5, strBuilder1.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(26, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(5, strBuilder5.capacity());
      assertEquals(26, strBuilder5.length());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(26, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(26, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(5, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(26, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(26, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(5, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(5, int0);
      assertArrayEquals(new char[] {'Y', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      // Undeclared exception!
      try { 
        strBuilder3.appendln(stringBuffer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln('f');
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.insert(0, true);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(6, strBuilder3.size());
      assertEquals(6, strBuilder3.length());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      
      boolean boolean0 = strBuilder2.endsWith("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertFalse(boolean0);
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      
      StrBuilder strBuilder4 = strBuilder0.trim();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(5, strBuilder4.size());
      assertEquals(5, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[1] = '%';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      StrBuilder strBuilder5 = strBuilder0.appendln(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(11, strBuilder1.size());
      assertEquals(11, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(11, strBuilder5.size());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(11, strBuilder5.length());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertNotNull(strBuilder5);
      
      charArray0[6] = 'f';
      strBuilder4.getChars(0, 2, charArray0, 2);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(11, strBuilder4.size());
      assertEquals(11, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertArrayEquals(new char[] {'f', '%', 't', 'r', 'f', '\u0000', 'f'}, charArray0);
      assertEquals(7, charArray0.length);
      
      boolean boolean1 = strBuilder1.equals(strBuilder4);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(11, strBuilder1.size());
      assertEquals(11, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(11, strBuilder4.size());
      assertEquals(11, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertTrue(boolean1);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      int int1 = 0;
      // Undeclared exception!
      strBuilder0.appendPadding(41470, '\'');
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-17));
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("y1X/8");
      assertEquals("y1X/8", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[5];
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      charArray0[0] = 'Y';
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(0, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder1.appendTo(stringBuilder0);
      assertEquals(0, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals("y1X/8", stringBuilder0.toString());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, (-4668), 2746);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 2746
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      char[] charArray0 = new char[22];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = '\u0081';
      charArray0[3] = 'r';
      charArray0[11] = 'h';
      StringBuffer stringBuffer1 = stringBuffer0.append(charArray0);
      assertEquals(22, stringBuffer0.length());
      assertEquals("ZZ\u0081r\u0000\u0000\u0000\u0000\u0000\u0000\u0000h\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringBuffer0.toString());
      assertEquals("ZZ\u0081r\u0000\u0000\u0000\u0000\u0000\u0000\u0000h\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringBuffer1.toString());
      assertEquals(22, stringBuffer1.length());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(22, charArray0.length);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((StringBuilder) null);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'h';
      // Undeclared exception!
      try { 
        strBuilder0.insert((-696), charArray1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -696
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(13);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(13, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.ensureCapacity((-1391));
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(13, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(13, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder("...");
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(3, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(35, strBuilder2.capacity());
      assertEquals(3, strBuilder2.length());
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      int int0 = strBuilder2.lastIndexOf("", 13);
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(3, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(35, strBuilder2.capacity());
      assertEquals(3, strBuilder2.length());
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertEquals(2, int0);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      
      StrBuilder strBuilder3 = strBuilder2.append((StringBuilder) null);
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(3, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(35, strBuilder2.capacity());
      assertEquals(3, strBuilder2.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(35, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(3, strBuilder3.length());
      assertEquals(3, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(32);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setNewLineText("s=B),Wv3p=|.I");
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals("s=B),Wv3p=|.I", strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals("s=B),Wv3p=|.I", strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StringBuffer stringBuffer0 = new StringBuffer(4);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      int int0 = (-696);
      int int1 = 56;
      String string0 = strBuilder0.midString(4, 56);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals("s=B),Wv3p=|.I", strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int2 = (-971);
      // Undeclared exception!
      try { 
        strBuilder0.insert(32, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 32
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(102);
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(charBuffer0);
      assertEquals(204, strBuilder0.capacity());
      assertEquals(102, strBuilder0.size());
      assertEquals(102, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(102, strBuilder1.length());
      assertEquals(204, strBuilder1.capacity());
      assertEquals(102, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(102, strBuilder2.size());
      assertEquals(102, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(204, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      CharBuffer charBuffer1 = CharBuffer.allocate(16);
      assertEquals(16, charBuffer1.remaining());
      assertEquals(16, charBuffer1.capacity());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(16, charBuffer1.length());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(16, charBuffer1.limit());
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      
      StrBuilder strBuilder3 = strBuilder0.ensureCapacity(102);
      assertEquals(204, strBuilder0.capacity());
      assertEquals(102, strBuilder0.size());
      assertEquals(102, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(102, strBuilder3.length());
      assertEquals(204, strBuilder3.capacity());
      assertEquals(102, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      String string0 = strBuilder3.substring(0, 102);
      assertEquals(204, strBuilder0.capacity());
      assertEquals(102, strBuilder0.size());
      assertEquals(102, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(102, strBuilder3.length());
      assertEquals(204, strBuilder3.capacity());
      assertEquals(102, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder3.new StrBuilderTokenizer();
      assertEquals(204, strBuilder0.capacity());
      assertEquals(102, strBuilder0.size());
      assertEquals(102, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(102, strBuilder3.length());
      assertEquals(204, strBuilder3.capacity());
      assertEquals(102, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder4 = new StrBuilder(102);
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(102, strBuilder4.capacity());
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder2.setCharAt('!', '7');
      assertEquals(204, strBuilder0.capacity());
      assertEquals(102, strBuilder0.size());
      assertEquals(102, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(102, strBuilder1.length());
      assertEquals(204, strBuilder1.capacity());
      assertEquals(102, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(102, strBuilder2.size());
      assertEquals(102, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(204, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(102, strBuilder5.size());
      assertEquals(102, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(204, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(charBuffer0, charBuffer1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertNotNull(strBuilder5);
      
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      Writer writer0 = strBuilder0.asWriter();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(writer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(strBuilder1);
      assertEquals(1, charArray0.length);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderWriter0.equals((Object)writer0));
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder2 = strBuilder1.ensureCapacity(0);
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(strBuilder2);
      assertEquals(1, charArray0.length);
      
      String string0 = strBuilder0.substring(0, 324);
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals("\u0000\n", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder3 = new StrBuilder(324);
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertEquals(324, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder2.setCharAt(0, '!');
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(2, strBuilder4.length());
      assertEquals(2, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(strBuilder4);
      assertEquals(1, charArray0.length);
      
      StringReader stringReader0 = new StringReader("\u0000\n");
      assertNotNull(stringReader0);
      
      boolean boolean0 = strBuilder3.equals((Object) stringReader0);
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertEquals(324, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder4);
      assertFalse(boolean0);
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendSeparator('&', 3614);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = new StrBuilder("");
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.appendln((double) 3614);
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(7, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(7, strBuilder3.length());
      assertEquals(7, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(7, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder2.append(strBuilder3);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(9, strBuilder1.length());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(9, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(9, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(7, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(7, strBuilder3.length());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(9, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(9, strBuilder5.length());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertNotNull(strBuilder5);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) strBuilder1;
      StrBuilder strBuilder6 = strBuilder5.appendWithSeparators(objectArray0, (String) null);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(18, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(18, strBuilder2.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(7, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(7, strBuilder3.length());
      assertEquals(18, strBuilder5.length());
      assertEquals(18, strBuilder5.size());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(18, strBuilder6.size());
      assertEquals(18, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertNotNull(strBuilder6);
      assertEquals(1, objectArray0.length);
      
      int int0 = StrBuilder.CAPACITY;
      assertEquals(32, int0);
      
      StrBuilder strBuilder7 = strBuilder0.deleteFirst('t');
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(18, strBuilder7.length());
      assertEquals(18, strBuilder7.size());
      assertNull(strBuilder7.getNewLineText());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertNotNull(strBuilder7);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = 't';
      charArray0[2] = '&';
      charArray0[3] = '&';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.length());
      assertEquals("&t&&", charBuffer0.toString());
      assertEquals(4, charBuffer0.limit());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(4, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertArrayEquals(new char[] {'&', 't', '&', '&'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(4, charArray0.length);
      
      CharBuffer charBuffer1 = CharBuffer.allocate(3614);
      assertEquals(3614, charBuffer1.remaining());
      assertEquals(3614, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(3614, charBuffer1.length());
      assertEquals(3614, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      
      StrBuilder strBuilder8 = strBuilder6.append(charBuffer1, 32, 50);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(136, strBuilder0.capacity());
      assertEquals(68, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(68, strBuilder0.size());
      assertEquals(3614, charBuffer1.remaining());
      assertEquals(3614, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(3614, charBuffer1.length());
      assertEquals(3614, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(68, strBuilder1.size());
      assertEquals(136, strBuilder1.capacity());
      assertEquals(68, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertTrue(strBuilder8.isNotEmpty());
      assertNull(strBuilder8.getNullText());
      assertEquals(136, strBuilder8.capacity());
      assertEquals(68, strBuilder8.length());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(68, strBuilder8.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(136, strBuilder2.capacity());
      assertEquals(68, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(68, strBuilder2.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(7, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(7, strBuilder3.length());
      assertEquals(136, strBuilder5.capacity());
      assertEquals(68, strBuilder5.size());
      assertEquals(68, strBuilder5.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(68, strBuilder6.size());
      assertEquals(68, strBuilder6.length());
      assertEquals(136, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(charBuffer1, charBuffer0);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder8, strBuilder5);
      assertNotSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder7);
      assertNotSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder7);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder8);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder7);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder8);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder7));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertNotNull(strBuilder8);
      assertEquals(1, objectArray0.length);
      
      int int1 = strBuilder0.indexOf("s\"nMrms");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(136, strBuilder0.capacity());
      assertEquals(68, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(68, strBuilder0.size());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertEquals((-1), int1);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(int1 == int0);
      
      int int2 = StrBuilder.CAPACITY;
      assertEquals(32, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      StrBuilder strBuilder9 = new StrBuilder("...JmWP'[*Q[6x;A]V]");
      assertEquals(19, strBuilder9.length());
      assertNull(strBuilder9.getNullText());
      assertEquals(51, strBuilder9.capacity());
      assertTrue(strBuilder9.isNotEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(19, strBuilder9.size());
      assertFalse(strBuilder9.equals((Object)strBuilder1));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder0));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder2));
      assertNotNull(strBuilder9);
      
      char[] charArray1 = strBuilder9.toCharArray();
      assertEquals(19, strBuilder9.length());
      assertNull(strBuilder9.getNullText());
      assertEquals(51, strBuilder9.capacity());
      assertTrue(strBuilder9.isNotEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(19, strBuilder9.size());
      assertNotSame(strBuilder9, strBuilder1);
      assertNotSame(strBuilder9, strBuilder7);
      assertNotSame(strBuilder9, strBuilder0);
      assertNotSame(strBuilder9, strBuilder8);
      assertNotSame(strBuilder9, strBuilder5);
      assertNotSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder3);
      assertNotSame(strBuilder9, strBuilder2);
      assertNotSame(charArray1, charArray0);
      assertFalse(strBuilder9.equals((Object)strBuilder1));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder0));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(19, charArray1.length);
      
      String string0 = strBuilder2.midString(32, 3614);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(136, strBuilder0.capacity());
      assertEquals(68, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(68, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(68, strBuilder1.size());
      assertEquals(136, strBuilder1.capacity());
      assertEquals(68, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(136, strBuilder2.capacity());
      assertEquals(68, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(68, strBuilder2.length());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder2, strBuilder3);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder9));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder9));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder9));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder("bFyN(o#(ye");
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) "bFyN(o#(ye", 34, '~');
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(44, strBuilder0.length());
      assertEquals(44, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(88, strBuilder0.capacity());
      assertEquals(88, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(44, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(44, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll("bFyN(o#(ye");
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(34, strBuilder0.length());
      assertEquals(34, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(88, strBuilder0.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(34, strBuilder2.length());
      assertEquals(34, strBuilder2.size());
      assertEquals(88, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.append((CharSequence) strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(68, strBuilder0.length());
      assertEquals(88, strBuilder0.capacity());
      assertEquals(68, strBuilder0.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(68, strBuilder2.size());
      assertEquals(68, strBuilder2.length());
      assertEquals(88, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(68, strBuilder3.size());
      assertEquals(68, strBuilder3.length());
      assertEquals(88, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = strBuilder0.toStringBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln('f');
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendln((Object) strBuilder0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.deleteFirst("|KT6bcw[Jip`?W6h@~");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5, strBuilder2.size());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(5, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(5, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder0.deleteCharAt(0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(4, strBuilder4.size());
      assertEquals(4, strBuilder4.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = new StrBuilder('f');
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(102, strBuilder5.capacity());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.size());
      assertEquals(0, strBuilder5.length());
      assertTrue(strBuilder5.isEmpty());
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertNotNull(strBuilder5);
      
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder6 = strBuilder5.appendWithSeparators(objectArray0, "");
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(102, strBuilder5.capacity());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.size());
      assertEquals(0, strBuilder5.length());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isNotEmpty());
      assertEquals(0, strBuilder6.size());
      assertEquals(0, strBuilder6.length());
      assertEquals(102, strBuilder6.capacity());
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder4);
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertNotNull(strBuilder6);
      assertEquals(0, objectArray0.length);
      
      StrBuilder strBuilder7 = strBuilder1.append((Object) strBuilder0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(8, strBuilder1.length());
      assertEquals(8, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(8, strBuilder7.size());
      assertNull(strBuilder7.getNullText());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(32, strBuilder7.capacity());
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertNotNull(strBuilder7);
      
      StringBuilder stringBuilder0 = strBuilder2.toStringBuilder();
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(8, strBuilder1.length());
      assertEquals(8, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(8, strBuilder2.length());
      assertEquals("\nf\n\n\nf\n\n", stringBuilder0.toString());
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertNotNull(stringBuilder0);
      
      boolean boolean0 = strBuilder2.endsWith("org.apache.commons.lang3.text.SrBulder$StrBuilderTokenizer");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(8, strBuilder1.length());
      assertEquals(8, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(8, strBuilder2.length());
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder5);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      
      StrBuilder strBuilder8 = strBuilder0.trim();
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder8.isNotEmpty());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(32, strBuilder8.capacity());
      assertEquals(5, strBuilder8.size());
      assertEquals(5, strBuilder8.length());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder8, strBuilder3);
      assertNotSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertNotNull(strBuilder8);
      
      StrBuilder strBuilder9 = strBuilder1.deleteFirst("|KT6bcw[Jip`?W6h@~");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder9.getNullText());
      assertEquals(5, strBuilder9.length());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(5, strBuilder9.size());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(32, strBuilder9.capacity());
      assertTrue(strBuilder9.isNotEmpty());
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder9);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder9, strBuilder1);
      assertNotSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder8);
      assertNotSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertNotNull(strBuilder9);
      
      StrBuilder strBuilder10 = new StrBuilder("|KT6bcw[Jip`?W6h@~");
      assertEquals(18, strBuilder10.size());
      assertNull(strBuilder10.getNullText());
      assertTrue(strBuilder10.isNotEmpty());
      assertFalse(strBuilder10.isEmpty());
      assertNull(strBuilder10.getNewLineText());
      assertEquals(18, strBuilder10.length());
      assertEquals(50, strBuilder10.capacity());
      assertFalse(strBuilder10.equals((Object)strBuilder5));
      assertFalse(strBuilder10.equals((Object)strBuilder2));
      assertFalse(strBuilder10.equals((Object)strBuilder9));
      assertFalse(strBuilder10.equals((Object)strBuilder1));
      assertFalse(strBuilder10.equals((Object)strBuilder8));
      assertFalse(strBuilder10.equals((Object)strBuilder7));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder10.equals((Object)strBuilder4));
      assertFalse(strBuilder10.equals((Object)strBuilder0));
      assertFalse(strBuilder10.equals((Object)strBuilder3));
      assertNotNull(strBuilder10);
      
      String string0 = strBuilder10.leftString(0);
      assertEquals(18, strBuilder10.size());
      assertNull(strBuilder10.getNullText());
      assertTrue(strBuilder10.isNotEmpty());
      assertFalse(strBuilder10.isEmpty());
      assertNull(strBuilder10.getNewLineText());
      assertEquals(18, strBuilder10.length());
      assertEquals(50, strBuilder10.capacity());
      assertNotSame(strBuilder10, strBuilder5);
      assertNotSame(strBuilder10, strBuilder2);
      assertNotSame(strBuilder10, strBuilder9);
      assertNotSame(strBuilder10, strBuilder1);
      assertNotSame(strBuilder10, strBuilder8);
      assertNotSame(strBuilder10, strBuilder7);
      assertNotSame(strBuilder10, strBuilder6);
      assertNotSame(strBuilder10, strBuilder4);
      assertNotSame(strBuilder10, strBuilder0);
      assertNotSame(strBuilder10, strBuilder3);
      assertEquals("", string0);
      assertFalse(strBuilder10.equals((Object)strBuilder5));
      assertFalse(strBuilder10.equals((Object)strBuilder2));
      assertFalse(strBuilder10.equals((Object)strBuilder9));
      assertFalse(strBuilder10.equals((Object)strBuilder1));
      assertFalse(strBuilder10.equals((Object)strBuilder8));
      assertFalse(strBuilder10.equals((Object)strBuilder7));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder10.equals((Object)strBuilder4));
      assertFalse(strBuilder10.equals((Object)strBuilder0));
      assertFalse(strBuilder10.equals((Object)strBuilder3));
      assertNotNull(string0);
      
      strBuilder3.appendTo(strBuilder8);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(10, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(10, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(10, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(10, strBuilder2.length());
      assertEquals(10, strBuilder3.size());
      assertEquals(10, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertTrue(strBuilder8.isNotEmpty());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(32, strBuilder8.capacity());
      assertEquals(10, strBuilder8.length());
      assertEquals(10, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder9);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder8);
      assertNotSame(strBuilder2, strBuilder10);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder7);
      assertNotSame(strBuilder3, strBuilder10);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder8, strBuilder3);
      assertNotSame(strBuilder8, strBuilder6);
      assertNotSame(strBuilder8, strBuilder10);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder9);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder10));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder10));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder10));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder10));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder10));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("", 109);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.replaceFirst('U', '-');
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      boolean boolean0 = strBuilder1.contains('U');
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertFalse(boolean0);
      
      StrBuilder strBuilder3 = new StrBuilder(109);
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(109, strBuilder3.capacity());
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      int int0 = strBuilder3.indexOf('(', (-844));
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(109, strBuilder3.capacity());
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertEquals((-1), int0);
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      TreeSet<StringReader> treeSet0 = new TreeSet<StringReader>();
      assertNotNull(treeSet0);
      
      StringReader stringReader0 = treeSet0.pollFirst();
      assertNull(stringReader0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(3);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.setLength(3);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = new StrBuilder("t^");
      assertEquals(2, strBuilder3.length());
      assertEquals(2, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(34, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.deleteAll((String) null);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder4.size());
      assertEquals(3, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotNull(strBuilder4);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(3, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder5 = strBuilder4.append(charBuffer0);
      assertEquals(6, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(6, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(6, strBuilder4.size());
      assertEquals(6, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(3, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(6, strBuilder5.size());
      assertEquals(6, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertNotNull(strBuilder5);
      
      CharBuffer charBuffer1 = CharBuffer.allocate(1326);
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(1326, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertEquals(1326, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1326, charBuffer1.remaining());
      assertEquals(1326, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertTrue(charBuffer1.hasArray());
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(6, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder6 = strBuilder4.replace(4, 204, "t^");
      assertEquals(6, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(6, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(6, strBuilder4.size());
      assertEquals(6, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(6, strBuilder6.size());
      assertEquals(6, strBuilder6.length());
      assertEquals(32, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder2.ensureCapacity(3);
      assertEquals(6, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(6, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(6, strBuilder7.size());
      assertNull(strBuilder7.getNullText());
      assertEquals(6, strBuilder7.length());
      assertEquals(32, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertTrue(strBuilder7.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = strBuilder7.deleteFirst('d');
      assertEquals(6, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(6, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(6, strBuilder7.size());
      assertNull(strBuilder7.getNullText());
      assertEquals(6, strBuilder7.length());
      assertEquals(32, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertTrue(strBuilder7.isNotEmpty());
      assertTrue(strBuilder8.isNotEmpty());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(6, strBuilder8.size());
      assertEquals(6, strBuilder8.length());
      assertEquals(32, strBuilder8.capacity());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder7, strBuilder8);
      assertNotSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertNotNull(strBuilder8);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.clear();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.insert(0, "startIndex must be valid");
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(24, strBuilder3.size());
      assertEquals(24, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.setLength(0);
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder4.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder2.replace(0, 1, "xWk7ymJEYKc(");
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(12, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(12, strBuilder0.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(12, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(12, strBuilder2.length());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(12, strBuilder5.size());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(12, strBuilder5.length());
      assertEquals(32, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertNotNull(strBuilder5);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      TreeSet<StringReader> treeSet0 = new TreeSet<StringReader>();
      assertNotNull(treeSet0);
      
      StringReader stringReader0 = treeSet0.pollFirst();
      assertNull(stringReader0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(3);
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.setLength(3);
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(3, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.append(false);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(8, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(8, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = new StrBuilder("");
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder1.deleteAll((String) null);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(8, strBuilder5.size());
      assertEquals(8, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertNotNull(strBuilder5);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(3, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder6 = strBuilder5.append(charBuffer0);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder1.size());
      assertEquals(11, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(11, strBuilder5.length());
      assertEquals(11, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(3, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(11, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(11, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertNotNull(strBuilder6);
      
      int int0 = 0;
      CharBuffer charBuffer1 = CharBuffer.allocate(1326);
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(1326, charBuffer1.capacity());
      assertEquals(1326, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertEquals(1326, charBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(1326, charBuffer1.remaining());
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      
      StrBuilder strBuilder7 = new StrBuilder((String) null);
      assertNull(strBuilder7.getNewLineText());
      assertEquals(0, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertEquals(32, strBuilder7.capacity());
      assertTrue(strBuilder7.isEmpty());
      assertEquals(0, strBuilder7.size());
      assertFalse(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertTrue(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertNotNull(strBuilder7);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder7.new StrBuilderWriter();
      assertNull(strBuilder7.getNewLineText());
      assertEquals(0, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertEquals(32, strBuilder7.capacity());
      assertTrue(strBuilder7.isEmpty());
      assertEquals(0, strBuilder7.size());
      assertFalse(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertTrue(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder8 = strBuilder5.replace(4, 204, ", Length: ");
      assertEquals(14, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(14, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(14, strBuilder1.length());
      assertEquals(14, strBuilder5.size());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(14, strBuilder5.length());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder8.getNullText());
      assertEquals(14, strBuilder8.length());
      assertEquals(14, strBuilder8.size());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(32, strBuilder8.capacity());
      assertTrue(strBuilder8.isNotEmpty());
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder5, strBuilder7);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder8);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder2);
      assertNotSame(strBuilder8, strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder7));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertNotNull(strBuilder8);
      
      StrBuilder strBuilder9 = strBuilder2.ensureCapacity(102);
      assertEquals(204, strBuilder9.capacity());
      assertEquals(14, strBuilder9.size());
      assertEquals(14, strBuilder9.length());
      assertNull(strBuilder9.getNewLineText());
      assertTrue(strBuilder9.isNotEmpty());
      assertNull(strBuilder9.getNullText());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(14, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(204, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(14, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(14, strBuilder1.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(14, strBuilder2.length());
      assertEquals(14, strBuilder2.size());
      assertEquals(204, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder8);
      assertNotSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder9);
      assertNotSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertNotNull(strBuilder9);
      
      // Undeclared exception!
      try { 
        strBuilder2.substring(1326, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendln(97);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(3, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(3, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.setLength(115);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(115, strBuilder0.size());
      assertEquals(230, strBuilder0.capacity());
      assertEquals(115, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(115, strBuilder2.size());
      assertEquals(115, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(230, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(115, strBuilder3.size());
      assertEquals(230, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(115, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = new StrBuilder((String) null);
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertFalse(strBuilder4.isNotEmpty());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder4.append(false);
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(5, strBuilder4.length());
      assertEquals(5, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(5, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(5, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder3);
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder2.appendSeparator((String) null, 114);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(115, strBuilder0.size());
      assertEquals(230, strBuilder0.capacity());
      assertEquals(115, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(115, strBuilder2.size());
      assertEquals(115, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(230, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(230, strBuilder6.capacity());
      assertEquals(115, strBuilder6.length());
      assertEquals(115, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertNotNull(strBuilder6);
      
      ArrayDeque<StringWriter> arrayDeque0 = new ArrayDeque<StringWriter>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      ArrayDeque<StringWriter> arrayDeque1 = new ArrayDeque<StringWriter>(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(arrayDeque1);
      
      Iterator<StringWriter> iterator0 = arrayDeque1.descendingIterator();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(iterator0);
      
      StrBuilder strBuilder7 = strBuilder3.appendAll(iterator0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(115, strBuilder0.size());
      assertEquals(230, strBuilder0.capacity());
      assertEquals(115, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(115, strBuilder2.size());
      assertEquals(115, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(230, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(115, strBuilder3.size());
      assertEquals(230, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(115, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertEquals(230, strBuilder7.capacity());
      assertEquals(115, strBuilder7.size());
      assertEquals(115, strBuilder7.length());
      assertTrue(strBuilder7.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = strBuilder4.replaceFirst('t', 't');
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(5, strBuilder4.length());
      assertEquals(5, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(5, strBuilder8.length());
      assertNull(strBuilder8.getNullText());
      assertEquals(5, strBuilder8.size());
      assertNull(strBuilder8.getNewLineText());
      assertTrue(strBuilder8.isNotEmpty());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(32, strBuilder8.capacity());
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder8);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder7);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder6);
      assertNotSame(strBuilder8, strBuilder3);
      assertNotSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder4);
      assertNotSame(strBuilder8, strBuilder2);
      assertNotSame(strBuilder8, strBuilder7);
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertNotNull(strBuilder8);
      
      StrBuilder strBuilder9 = strBuilder5.appendSeparator('t', 't');
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(6, strBuilder4.size());
      assertEquals(6, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(6, strBuilder5.size());
      assertEquals(6, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(6, strBuilder9.size());
      assertEquals(6, strBuilder9.length());
      assertNull(strBuilder9.getNewLineText());
      assertTrue(strBuilder9.isNotEmpty());
      assertNull(strBuilder9.getNullText());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(32, strBuilder9.capacity());
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder9);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder7);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder8);
      assertSame(strBuilder5, strBuilder9);
      assertNotSame(strBuilder5, strBuilder7);
      assertNotSame(strBuilder9, strBuilder1);
      assertNotSame(strBuilder9, strBuilder3);
      assertNotSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder8);
      assertNotSame(strBuilder9, strBuilder7);
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder6));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder1));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder0));
      assertFalse(strBuilder9.equals((Object)strBuilder2));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertNotNull(strBuilder9);
      
      StrBuilder strBuilder10 = strBuilder8.deleteAll('Q');
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(6, strBuilder4.size());
      assertEquals(6, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder8.getNullText());
      assertEquals(6, strBuilder8.size());
      assertEquals(6, strBuilder8.length());
      assertNull(strBuilder8.getNewLineText());
      assertTrue(strBuilder8.isNotEmpty());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(32, strBuilder8.capacity());
      assertEquals(6, strBuilder10.length());
      assertNull(strBuilder10.getNewLineText());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(32, strBuilder10.capacity());
      assertTrue(strBuilder10.isNotEmpty());
      assertEquals(6, strBuilder10.size());
      assertNull(strBuilder10.getNullText());
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder9);
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder10);
      assertNotSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder7);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder6);
      assertNotSame(strBuilder8, strBuilder3);
      assertNotSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder10);
      assertSame(strBuilder8, strBuilder4);
      assertNotSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder9);
      assertNotSame(strBuilder8, strBuilder7);
      assertNotSame(strBuilder10, strBuilder1);
      assertNotSame(strBuilder10, strBuilder7);
      assertNotSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder5);
      assertNotSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder4);
      assertNotSame(strBuilder10, strBuilder0);
      assertNotSame(strBuilder10, strBuilder3);
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder10.equals((Object)strBuilder1));
      assertFalse(strBuilder10.equals((Object)strBuilder7));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder10.equals((Object)strBuilder2));
      assertFalse(strBuilder10.equals((Object)strBuilder0));
      assertFalse(strBuilder10.equals((Object)strBuilder3));
      assertNotNull(strBuilder10);
      
      int int0 = strBuilder4.indexOf((String) null, 97);
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(6, strBuilder4.size());
      assertEquals(6, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder9);
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder10);
      assertNotSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder7);
      assertNotSame(strBuilder4, strBuilder3);
      assertEquals((-1), int0);
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      
      boolean boolean0 = strBuilder7.equals(strBuilder10);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(115, strBuilder0.size());
      assertEquals(230, strBuilder0.capacity());
      assertEquals(115, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(115, strBuilder2.size());
      assertEquals(115, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(230, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(115, strBuilder3.size());
      assertEquals(230, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(115, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(6, strBuilder4.size());
      assertEquals(6, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertEquals(230, strBuilder7.capacity());
      assertEquals(115, strBuilder7.size());
      assertEquals(115, strBuilder7.length());
      assertTrue(strBuilder7.isNotEmpty());
      assertNull(strBuilder8.getNullText());
      assertEquals(6, strBuilder8.size());
      assertEquals(6, strBuilder8.length());
      assertNull(strBuilder8.getNewLineText());
      assertTrue(strBuilder8.isNotEmpty());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(32, strBuilder8.capacity());
      assertEquals(6, strBuilder10.length());
      assertNull(strBuilder10.getNewLineText());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(32, strBuilder10.capacity());
      assertTrue(strBuilder10.isNotEmpty());
      assertEquals(6, strBuilder10.size());
      assertNull(strBuilder10.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder2, strBuilder8);
      assertNotSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder10);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder8);
      assertNotSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder10);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder9);
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder10);
      assertNotSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder7);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder8);
      assertNotSame(strBuilder7, strBuilder9);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder10);
      assertNotSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder6);
      assertNotSame(strBuilder8, strBuilder3);
      assertNotSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder10);
      assertSame(strBuilder8, strBuilder4);
      assertNotSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder9);
      assertNotSame(strBuilder8, strBuilder7);
      assertNotSame(strBuilder10, strBuilder1);
      assertNotSame(strBuilder10, strBuilder7);
      assertNotSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder5);
      assertNotSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder4);
      assertNotSame(strBuilder10, strBuilder0);
      assertNotSame(strBuilder10, strBuilder3);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder0.equals((Object)strBuilder9));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder10));
      assertFalse(strBuilder2.equals((Object)strBuilder8));
      assertFalse(strBuilder2.equals((Object)strBuilder9));
      assertFalse(strBuilder2.equals((Object)strBuilder10));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder8));
      assertFalse(strBuilder3.equals((Object)strBuilder9));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder10));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(strBuilder7.equals((Object)strBuilder8));
      assertFalse(strBuilder7.equals((Object)strBuilder9));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder10));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder10.equals((Object)strBuilder1));
      assertFalse(strBuilder10.equals((Object)strBuilder7));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder10.equals((Object)strBuilder2));
      assertFalse(strBuilder10.equals((Object)strBuilder0));
      assertFalse(strBuilder10.equals((Object)strBuilder3));
      
      String string0 = strBuilder4.toString();
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(6, strBuilder4.size());
      assertEquals(6, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder9);
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder10);
      assertNotSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder7);
      assertNotSame(strBuilder4, strBuilder3);
      assertEquals("falset", string0);
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(41);
      assertEquals(41, strBuilder0.length());
      assertEquals(41, strBuilder0.size());
      assertEquals(82, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(82, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(41, strBuilder1.length());
      assertEquals(41, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append(true);
      assertEquals(45, strBuilder0.length());
      assertEquals(45, strBuilder0.size());
      assertEquals(82, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(82, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(45, strBuilder2.size());
      assertEquals(45, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendSeparator((String) null, 41);
      assertEquals(45, strBuilder0.length());
      assertEquals(45, strBuilder0.size());
      assertEquals(82, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(82, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(45, strBuilder2.size());
      assertEquals(45, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(45, strBuilder3.size());
      assertEquals(45, strBuilder3.length());
      assertEquals(82, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendAll((Object[]) null);
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.replaceFirst((String) null, (String) null);
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder0.appendln("~+P*^{kmYQn^:e-", (Object[]) null);
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(17, strBuilder4.length());
      assertEquals(17, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder0.appendSeparator('v', 'v');
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(18, strBuilder5.length());
      assertEquals(18, strBuilder5.size());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertNotNull(strBuilder5);
      
      String string0 = strBuilder3.rightString(2);
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(18, strBuilder3.size());
      assertEquals(18, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertEquals("\nv", string0);
      assertNotNull(string0);
      
      String string1 = strBuilder1.build();
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertEquals("~+P*^{kmYQn^:e-\nv", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = strBuilder3.equalsIgnoreCase(strBuilder3);
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(18, strBuilder3.size());
      assertEquals(18, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("xihnv!zR/Sq|>d}jGO");
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(50, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(18, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(102);
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.length());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(102, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(charBuffer0);
      assertEquals(120, strBuilder0.size());
      assertEquals(120, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(240, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(120, strBuilder1.size());
      assertEquals(120, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.length());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(102, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(120, strBuilder2.size());
      assertEquals(240, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(120, strBuilder2.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.appendAll((Object[]) null);
      assertEquals(120, strBuilder0.size());
      assertEquals(120, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(240, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(120, strBuilder1.size());
      assertEquals(120, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(120, strBuilder3.length());
      assertEquals(120, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(240, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.replaceFirst("J,m", (String) null);
      assertEquals(120, strBuilder0.size());
      assertEquals(120, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(240, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(120, strBuilder1.size());
      assertEquals(120, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(120, strBuilder4.size());
      assertEquals(120, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(240, strBuilder4.capacity());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder3.appendSeparator('D', '[');
      assertEquals(121, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(121, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(240, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(121, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(121, strBuilder1.size());
      assertEquals(121, strBuilder3.size());
      assertEquals(121, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(240, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(121, strBuilder5.size());
      assertEquals(121, strBuilder5.length());
      assertEquals(240, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertNotNull(strBuilder5);
      
      String string0 = strBuilder3.rightString(31);
      assertEquals(121, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(121, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(240, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(121, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(121, strBuilder1.size());
      assertEquals(121, strBuilder3.size());
      assertEquals(121, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(240, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000D", string0);
      assertNotNull(string0);
      
      String string1 = strBuilder0.build();
      assertEquals(121, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(121, strBuilder0.size());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertEquals("xihnv!zR/Sq|>d}jGO\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000D", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StrBuilder strBuilder6 = strBuilder1.minimizeCapacity();
      assertEquals(121, strBuilder0.length());
      assertEquals(121, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(121, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(121, strBuilder1.capacity());
      assertEquals(121, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(121, strBuilder1.size());
      assertEquals(121, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(121, strBuilder6.size());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(121, strBuilder6.capacity());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder4);
      assertNotNull(strBuilder6);
      
      boolean boolean0 = strBuilder2.equalsIgnoreCase(strBuilder0);
      assertEquals(121, strBuilder0.length());
      assertEquals(121, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(121, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(121, strBuilder1.capacity());
      assertEquals(121, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(121, strBuilder1.size());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.length());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(102, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(121, strBuilder2.length());
      assertEquals(121, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(121, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      boolean boolean0 = strBuilder2.equals(strBuilder0);
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertTrue(boolean0);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      
      StrBuilder strBuilder3 = strBuilder2.append((char[]) null, 53, 2115);
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      // Undeclared exception!
      try { 
        strBuilder2.substring((-434), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -434
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder1 = new StrBuilder((String) null);
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertTrue(boolean0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.leftString(28);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals((-1), int0);
      
      int int1 = 31;
      int int2 = strBuilder0.lastIndexOf("", (-277));
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string1 = strBuilder0.toString();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StringBuilder stringBuilder1 = new StringBuilder((CharSequence) "");
      assertEquals("", stringBuilder1.toString());
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertNotNull(stringBuilder1);
      
      // Undeclared exception!
      try { 
        stringBuilder0.delete((-1), 4509);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains("");
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll("");
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      TreeSet<StringReader> treeSet0 = new TreeSet<StringReader>();
      assertNotNull(treeSet0);
      
      PriorityQueue<StringReader> priorityQueue0 = new PriorityQueue<StringReader>((SortedSet<? extends StringReader>) treeSet0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      StrBuilder strBuilder3 = strBuilder2.appendAll((Iterable<?>) priorityQueue0);
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, priorityQueue0.size());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder0.equals((Object)strBuilder3));
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder3));
      assertNotNull(strBuilder_StrBuilderReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      // Undeclared exception!
      try { 
        strBuilder1.subSequence(108, 1554);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1554
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("xihnv!zR/Sq|>d}jGO");
      assertEquals(18, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertEquals(50, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "xihnv!zR/Sq|>d}jGO";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "xihnv!zR/Sq|>d}jGO";
      stringArray0[4] = "xihnv!zR/Sq|>d}jGO";
      stringArray0[5] = "xihnv!zR/Sq|>d}jGO";
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = "xihnv!zR/Sq|>d}jGO";
      StrBuilder strBuilder1 = strBuilder0.appendAll(stringArray0);
      assertEquals(108, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(108, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(108, strBuilder0.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(108, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(108, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(108, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(9, stringArray0.length);
      
      StrBuilder strBuilder2 = strBuilder0.delete(95, 824);
      assertEquals(108, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(95, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(95, strBuilder0.length());
      assertEquals(95, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(95, strBuilder2.length());
      assertEquals(108, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.trim();
      assertEquals(108, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(95, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(95, strBuilder0.length());
      assertEquals(95, strBuilder1.size());
      assertEquals(95, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(108, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(108, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(95, strBuilder3.size());
      assertEquals(95, strBuilder3.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      assertEquals(9, stringArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      // Undeclared exception!
      try { 
        strBuilder3.appendln(charArray0, 89, 105);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 105
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(0, objectArray0.length);
      
      boolean boolean0 = strBuilder0.endsWith("");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertSame(strBuilder0, strBuilder1);
      assertTrue(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder(97);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.appendln(stringBuilder0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals("", stringBuilder0.toString());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("@p}<zZt}\"");
      assertEquals(9, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(9, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'b';
      charArray0[1] = '[';
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("@p}<zZt}\"", (int) '[');
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertEquals(41, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.append('i');
      assertEquals(41, strBuilder0.capacity());
      assertEquals(19, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(19, strBuilder1.length());
      assertEquals(41, strBuilder1.capacity());
      assertEquals(19, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(19, strBuilder2.length());
      assertEquals(41, strBuilder2.capacity());
      assertEquals(19, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = new StrBuilder();
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertEquals(41, strBuilder0.capacity());
      assertEquals(19, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(19, strBuilder1.length());
      assertEquals(41, strBuilder1.capacity());
      assertEquals(19, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertNotNull(strBuilder_StrBuilderReader0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader1 = strBuilder1.new StrBuilderReader();
      assertEquals(41, strBuilder0.capacity());
      assertEquals(19, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(19, strBuilder1.length());
      assertEquals(41, strBuilder1.capacity());
      assertEquals(19, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder_StrBuilderReader1.markSupported());
      assertTrue(strBuilder_StrBuilderReader1.ready());
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder_StrBuilderReader1.equals((Object)strBuilder_StrBuilderReader0));
      assertNotNull(strBuilder_StrBuilderReader1);
      
      StrBuilder strBuilder4 = strBuilder1.appendSeparator('`', 2743);
      assertEquals(41, strBuilder0.capacity());
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(41, strBuilder1.capacity());
      assertEquals(20, strBuilder1.length());
      assertEquals(20, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(20, strBuilder4.size());
      assertEquals(20, strBuilder4.length());
      assertEquals(41, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotNull(strBuilder4);
      
      int int0 = strBuilder_StrBuilderReader1.read(charArray0);
      assertEquals(41, strBuilder0.capacity());
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(41, strBuilder1.capacity());
      assertEquals(20, strBuilder1.length());
      assertEquals(20, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder_StrBuilderReader1.markSupported());
      assertTrue(strBuilder_StrBuilderReader1.ready());
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder_StrBuilderReader1, strBuilder_StrBuilderReader0);
      assertEquals(4, int0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder_StrBuilderReader1.equals((Object)strBuilder_StrBuilderReader0));
      assertArrayEquals(new char[] {'@', 'p', '}', '<'}, charArray0);
      assertEquals(4, charArray0.length);
      
      // Undeclared exception!
      strBuilder0.readFrom(strBuilder_StrBuilderReader1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(boolean0);
      
      boolean boolean1 = strBuilder_StrBuilderReader0.ready();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[0];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(0, int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.reset();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      int int0 = StrBuilder.CAPACITY;
      assertEquals(32, int0);
      
      int int1 = StrBuilder.CAPACITY;
      assertEquals(32, int1);
      assertTrue(int1 == int0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder0.substring(0, 101);
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertSame(strBuilder0, strBuilder1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      String string1 = strBuilder2.substring(0, 0);
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertEquals("", string1);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int2 = strBuilder_StrBuilderReader0.read();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int2);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean0 = strBuilder2.equals((Object) "");
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertFalse(boolean0);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      
      TreeSet<StringReader> treeSet0 = new TreeSet<StringReader>();
      assertNotNull(treeSet0);
      
      StringReader stringReader0 = treeSet0.pollFirst();
      assertNull(stringReader0);
      
      Iterator<StringReader> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      StrBuilder strBuilder3 = strBuilder1.appendWithSeparators(iterator0, "a<t[VYw4=mmFP(N#A2G");
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.append(116);
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder4.size());
      assertEquals(3, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader1 = strBuilder0.new StrBuilderReader();
      assertTrue(strBuilder_StrBuilderReader1.ready());
      assertTrue(strBuilder_StrBuilderReader1.markSupported());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder_StrBuilderReader1.equals((Object)strBuilder_StrBuilderReader0));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertNotNull(strBuilder_StrBuilderReader1);
      
      char[] charArray0 = new char[0];
      int int3 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder_StrBuilderReader0, strBuilder_StrBuilderReader1);
      assertEquals(0, int3);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder_StrBuilderReader0.equals((Object)strBuilder_StrBuilderReader1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      // Undeclared exception!
      try { 
        strBuilder2.readFrom((Readable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains("");
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll("");
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = 'D';
      charArray0[2] = 'J';
      charArray0[3] = '~';
      charArray0[4] = '}';
      charArray0[5] = 'C';
      charArray0[6] = '?';
      charArray0[7] = '&';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charBuffer0.position());
      assertEquals("&DJ~}C?&", charBuffer0.toString());
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(8, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(8, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertArrayEquals(new char[] {'&', 'D', 'J', '~', '}', 'C', '?', '&'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(8, charArray0.length);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = new StrBuilder();
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.append(charArray0, 0, 0);
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertFalse(strBuilder4.isNotEmpty());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertArrayEquals(new char[] {'&', 'D', 'J', '~', '}', 'C', '?', '&'}, charArray0);
      assertNotNull(strBuilder4);
      assertEquals(8, charArray0.length);
      
      char[] charArray1 = strBuilder2.getChars(charArray0);
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder3));
      assertTrue(strBuilder2.equals((Object)strBuilder4));
      assertArrayEquals(new char[] {'&', 'D', 'J', '~', '}', 'C', '?', '&'}, charArray1);
      assertArrayEquals(new char[] {'&', 'D', 'J', '~', '}', 'C', '?', '&'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray1.length);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNull();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder1.insert(2258, (-3012L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2258
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'A'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int int1 = strBuilder0.readFrom(strBuilder_StrBuilderReader0);
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StrBuilder strBuilder1 = strBuilder0.append('A');
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("A", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      Writer writer0 = strBuilder0.asWriter();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(writer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(strBuilder1);
      assertEquals(1, charArray0.length);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = new StrBuilder("Gv");
      assertEquals(34, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(2, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(2, strBuilder3.size());
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      CharSequence charSequence0 = strBuilder0.subSequence(0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals("", charSequence0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(3, 3, 'S');
      assertEquals(3, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(3, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      StrBuilder strBuilder2 = strBuilder0.insert(3, charArray0);
      assertEquals(6, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertArrayEquals(new char[] {'S', 'S', 'S'}, charArray0);
      assertNotNull(strBuilder2);
      assertEquals(3, charArray0.length);
      
      StrBuilder strBuilder3 = strBuilder1.appendSeparator("7:0lw0k[eN3!TBB+");
      assertEquals(22, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(22, strBuilder0.length());
      assertEquals(22, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(22, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(22, strBuilder3.size());
      assertEquals(22, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(2, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("i|QS");
      assertEquals("i|QS", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[2] = 'n';
      StringBuilder stringBuilder1 = stringBuilder0.append((int) 'Y');
      assertEquals("i|QS89", stringBuilder0.toString());
      assertEquals("i|QS89", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuilder1, 0, 2);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.capacity());
      assertEquals("i|QS89", stringBuilder0.toString());
      assertEquals("i|QS89", stringBuilder1.toString());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.insert(2, charArray0);
      assertEquals(14, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(7, strBuilder2.size());
      assertEquals(7, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(14, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertArrayEquals(new char[] {'Y', '\u0000', 'n', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strBuilder2);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      TreeSet<StringReader> treeSet0 = new TreeSet<StringReader>();
      assertNotNull(treeSet0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(32);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.length());
      assertEquals(32, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.length());
      assertEquals(32, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.length());
      assertEquals(32, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.length());
      assertEquals(32, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder2 = strBuilder0.insert(32, charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.length());
      assertEquals(32, strBuilder0.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.size());
      assertEquals(32, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(strBuilder2);
      assertEquals(0, charArray0.length);
      
      StrBuilder strBuilder3 = strBuilder2.deleteFirst('{');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.length());
      assertEquals(32, strBuilder0.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.size());
      assertEquals(32, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(32, strBuilder3.size());
      assertEquals(32, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(strBuilder3);
      assertEquals(0, charArray0.length);
      
      StrBuilder strBuilder4 = strBuilder2.reverse();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.length());
      assertEquals(32, strBuilder0.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.size());
      assertEquals(32, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder4.size());
      assertEquals(32, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(strBuilder4);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) null);
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.minimizeCapacity();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.setLength(0);
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.appendSeparator("I2R]N: ", 63);
      assertEquals(7, strBuilder0.size());
      assertEquals(14, strBuilder0.capacity());
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(14, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(7, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(7, strBuilder3.size());
      assertEquals(7, strBuilder4.size());
      assertEquals(7, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(14, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder3.append(0);
      assertEquals(8, strBuilder0.length());
      assertEquals(14, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(14, strBuilder3.capacity());
      assertEquals(8, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(8, strBuilder3.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(14, strBuilder5.capacity());
      assertEquals(8, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(8, strBuilder5.length());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder5.trim();
      assertEquals(8, strBuilder0.length());
      assertEquals(14, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(14, strBuilder3.capacity());
      assertEquals(8, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(8, strBuilder3.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(14, strBuilder5.capacity());
      assertEquals(8, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(8, strBuilder5.length());
      assertEquals(8, strBuilder6.length());
      assertEquals(14, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(8, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertNotNull(strBuilder6);
      
      TreeSet<StringBuffer> treeSet0 = new TreeSet<StringBuffer>();
      assertNotNull(treeSet0);
      
      StrBuilder strBuilder7 = strBuilder5.appendAll((Iterable<?>) treeSet0);
      assertEquals(8, strBuilder0.length());
      assertEquals(14, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(14, strBuilder3.capacity());
      assertEquals(8, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(8, strBuilder3.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(14, strBuilder5.capacity());
      assertEquals(8, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(8, strBuilder5.length());
      assertEquals(14, strBuilder7.capacity());
      assertEquals(8, strBuilder7.size());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(8, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder7);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder6);
      assertNotNull(strBuilder7);
      
      int int0 = strBuilder2.indexOf("ho(UcdwwL T 5V\"{X");
      assertEquals(8, strBuilder0.length());
      assertEquals(14, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(8, strBuilder1.size());
      assertEquals(8, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(14, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(14, strBuilder2.capacity());
      assertEquals(8, strBuilder2.size());
      assertEquals(8, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertEquals((-1), int0);
      
      int int1 = StrBuilder.CAPACITY;
      assertEquals(32, int1);
      assertFalse(int1 == int0);
      
      char[] charArray0 = strBuilder7.toCharArray();
      assertEquals(8, strBuilder0.length());
      assertEquals(14, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(14, strBuilder3.capacity());
      assertEquals(8, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(8, strBuilder3.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(14, strBuilder5.capacity());
      assertEquals(8, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(8, strBuilder5.length());
      assertEquals(14, strBuilder7.capacity());
      assertEquals(8, strBuilder7.size());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(8, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder7);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder6);
      assertArrayEquals(new char[] {'I', '2', 'R', ']', 'N', ':', ' ', '0'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(8, charArray0.length);
      
      String string0 = strBuilder1.midString((-1), 1926);
      assertEquals(8, strBuilder0.length());
      assertEquals(14, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(8, strBuilder1.size());
      assertEquals(8, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(14, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("I2R]N: 0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.midString(0, 0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.lastIndexOf('u');
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotSame(strBuilder0, strBuilder1);
      assertEquals((-1), int0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1269));
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf('\'');
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1), int0);
      
      int int1 = strBuilder0.capacity();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, int1);
      assertFalse(int1 == int0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      Writer writer0 = strBuilder0.asWriter();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(writer0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.capacity());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      
      CharBuffer charBuffer1 = CharBuffer.allocate(4);
      assertEquals(4, charBuffer1.remaining());
      assertEquals(4, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(4, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertEquals(4, charBuffer1.length());
      assertEquals("\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      
      StrBuilder strBuilder1 = strBuilder0.append(charBuffer1, 4, 0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, charBuffer1.remaining());
      assertEquals(4, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(4, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertEquals(4, charBuffer1.length());
      assertEquals("\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charBuffer1, charBuffer0);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder(21);
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(21, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.appendln((long) 0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(2, strBuilder3.size());
      assertEquals(2, strBuilder3.length());
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      
      boolean boolean0 = strBuilder1.equals(strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, charBuffer1.remaining());
      assertEquals(4, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(4, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertEquals(4, charBuffer1.length());
      assertEquals("\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(2, strBuilder3.size());
      assertEquals(2, strBuilder3.length());
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charBuffer1, charBuffer0);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertTrue(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      
      String string0 = strBuilder3.midString(21, 0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(2, strBuilder3.size());
      assertEquals(2, strBuilder3.length());
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertEquals("", string0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.leftString(26);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder1 = new StrBuilder("3f9Kw7\"Q~Ci*YC,5[m");
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(50, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(50, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendSeparator('&', 3614);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = new StrBuilder("");
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.appendln((double) 3614);
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(7, strBuilder3.length());
      assertEquals(7, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(7, strBuilder4.size());
      assertEquals(7, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder2.append(strBuilder3);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertEquals(9, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(9, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(9, strBuilder2.size());
      assertEquals(9, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(7, strBuilder3.length());
      assertEquals(7, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(9, strBuilder5.size());
      assertEquals(9, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertNotNull(strBuilder5);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) strBuilder1;
      StrBuilder strBuilder6 = strBuilder5.appendWithSeparators(objectArray0, (String) null);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.size());
      assertEquals(18, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder2.length());
      assertEquals(18, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(7, strBuilder3.length());
      assertEquals(7, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(18, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(18, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(18, strBuilder6.length());
      assertEquals(18, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertNotNull(strBuilder6);
      assertEquals(1, objectArray0.length);
      
      int int0 = StrBuilder.CAPACITY;
      assertEquals(32, int0);
      
      StrBuilder strBuilder7 = strBuilder0.deleteFirst('t');
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(18, strBuilder7.size());
      assertEquals(18, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertEquals(32, strBuilder7.capacity());
      assertTrue(strBuilder7.isNotEmpty());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = strBuilder2.append((-927L));
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(22, strBuilder0.size());
      assertEquals(22, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(22, strBuilder1.size());
      assertEquals(22, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(22, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(22, strBuilder2.size());
      assertNull(strBuilder8.getNewLineText());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNullText());
      assertEquals(22, strBuilder8.length());
      assertEquals(22, strBuilder8.size());
      assertEquals(32, strBuilder8.capacity());
      assertTrue(strBuilder8.isNotEmpty());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder8);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder5);
      assertNotSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertNotNull(strBuilder8);
      
      StrBuilder strBuilder9 = new StrBuilder();
      assertEquals(32, strBuilder9.capacity());
      assertTrue(strBuilder9.isEmpty());
      assertEquals(0, strBuilder9.size());
      assertEquals(0, strBuilder9.length());
      assertFalse(strBuilder9.isNotEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder1));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder0));
      assertFalse(strBuilder9.equals((Object)strBuilder2));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertNotNull(strBuilder9);
      
      StrBuilder strBuilder10 = strBuilder6.appendFixedWidthPadRight((Object) null, 32, '~');
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(54, strBuilder0.size());
      assertEquals(108, strBuilder0.capacity());
      assertEquals(54, strBuilder0.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(54, strBuilder1.size());
      assertEquals(54, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(108, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(108, strBuilder2.capacity());
      assertEquals(54, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(54, strBuilder2.size());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(7, strBuilder3.length());
      assertEquals(7, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(54, strBuilder5.size());
      assertEquals(108, strBuilder5.capacity());
      assertEquals(54, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(108, strBuilder6.capacity());
      assertEquals(54, strBuilder6.length());
      assertEquals(54, strBuilder6.size());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder10.getNullText());
      assertTrue(strBuilder10.isNotEmpty());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(54, strBuilder10.size());
      assertEquals(54, strBuilder10.length());
      assertNull(strBuilder10.getNewLineText());
      assertEquals(108, strBuilder10.capacity());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder9);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder10);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder9);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder10);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder8);
      assertNotSame(strBuilder3, strBuilder7);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder10);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder7);
      assertNotSame(strBuilder5, strBuilder9);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder8);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder10);
      assertNotSame(strBuilder6, strBuilder9);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder2);
      assertNotSame(strBuilder10, strBuilder9);
      assertNotSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder5);
      assertNotSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder9));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder9));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder9));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder9));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder8));
      assertFalse(strBuilder3.equals((Object)strBuilder7));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder9));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder9));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder10.equals((Object)strBuilder3));
      assertFalse(strBuilder10.equals((Object)strBuilder9));
      assertFalse(strBuilder10.equals((Object)strBuilder4));
      assertNotNull(strBuilder10);
      assertEquals(1, objectArray0.length);
      
      StrBuilder strBuilder11 = strBuilder0.append(strBuilder10);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(108, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(108, strBuilder0.capacity());
      assertEquals(108, strBuilder0.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(108, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(108, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(108, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(108, strBuilder2.size());
      assertEquals(108, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(108, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(7, strBuilder3.length());
      assertEquals(7, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(108, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(108, strBuilder5.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(108, strBuilder5.size());
      assertEquals(108, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(108, strBuilder6.size());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(108, strBuilder6.length());
      assertNull(strBuilder10.getNullText());
      assertTrue(strBuilder10.isNotEmpty());
      assertEquals(108, strBuilder10.size());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(108, strBuilder10.length());
      assertNull(strBuilder10.getNewLineText());
      assertEquals(108, strBuilder10.capacity());
      assertNull(strBuilder11.getNullText());
      assertFalse(strBuilder11.isEmpty());
      assertEquals(108, strBuilder11.capacity());
      assertNull(strBuilder11.getNewLineText());
      assertEquals(108, strBuilder11.size());
      assertTrue(strBuilder11.isNotEmpty());
      assertEquals(108, strBuilder11.length());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder9);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder11);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder10);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder11);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder3, strBuilder11);
      assertNotSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder9);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder10);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder8);
      assertNotSame(strBuilder3, strBuilder7);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder11);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder10);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder7);
      assertNotSame(strBuilder5, strBuilder9);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder8);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder10);
      assertNotSame(strBuilder6, strBuilder9);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder11);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder2);
      assertNotSame(strBuilder10, strBuilder9);
      assertNotSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder5);
      assertNotSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder11);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder11, strBuilder1);
      assertSame(strBuilder11, strBuilder8);
      assertSame(strBuilder11, strBuilder7);
      assertNotSame(strBuilder11, strBuilder4);
      assertNotSame(strBuilder11, strBuilder9);
      assertSame(strBuilder11, strBuilder6);
      assertSame(strBuilder11, strBuilder10);
      assertSame(strBuilder11, strBuilder5);
      assertNotSame(strBuilder11, strBuilder3);
      assertSame(strBuilder11, strBuilder0);
      assertSame(strBuilder11, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder9));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder9));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder9));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder9));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder10));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder8));
      assertFalse(strBuilder3.equals((Object)strBuilder7));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder9));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder9));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder10.equals((Object)strBuilder3));
      assertFalse(strBuilder10.equals((Object)strBuilder9));
      assertFalse(strBuilder10.equals((Object)strBuilder4));
      assertFalse(strBuilder11.equals((Object)strBuilder4));
      assertFalse(strBuilder11.equals((Object)strBuilder9));
      assertFalse(strBuilder11.equals((Object)strBuilder3));
      assertNotNull(strBuilder11);
      assertEquals(1, objectArray0.length);
      
      StrBuilder strBuilder12 = strBuilder4.deleteAll("");
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(7, strBuilder3.length());
      assertEquals(7, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(7, strBuilder4.size());
      assertEquals(7, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(7, strBuilder12.size());
      assertTrue(strBuilder12.isNotEmpty());
      assertEquals(32, strBuilder12.capacity());
      assertNull(strBuilder12.getNullText());
      assertFalse(strBuilder12.isEmpty());
      assertNull(strBuilder12.getNewLineText());
      assertEquals(7, strBuilder12.length());
      assertNotSame(strBuilder3, strBuilder11);
      assertSame(strBuilder3, strBuilder12);
      assertNotSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder9);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder10);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder8);
      assertNotSame(strBuilder3, strBuilder7);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder12);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder9);
      assertNotSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder8);
      assertNotSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder11);
      assertNotSame(strBuilder4, strBuilder10);
      assertNotSame(strBuilder4, strBuilder7);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder12, strBuilder7);
      assertNotSame(strBuilder12, strBuilder10);
      assertNotSame(strBuilder12, strBuilder1);
      assertNotSame(strBuilder12, strBuilder8);
      assertNotSame(strBuilder12, strBuilder5);
      assertNotSame(strBuilder12, strBuilder0);
      assertSame(strBuilder12, strBuilder3);
      assertNotSame(strBuilder12, strBuilder11);
      assertNotSame(strBuilder12, strBuilder6);
      assertSame(strBuilder12, strBuilder4);
      assertNotSame(strBuilder12, strBuilder9);
      assertNotSame(strBuilder12, strBuilder2);
      assertFalse(strBuilder3.equals((Object)strBuilder11));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder9));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder10));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder8));
      assertFalse(strBuilder3.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder9));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertFalse(strBuilder4.equals((Object)strBuilder8));
      assertFalse(strBuilder4.equals((Object)strBuilder11));
      assertFalse(strBuilder4.equals((Object)strBuilder10));
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder12.equals((Object)strBuilder7));
      assertFalse(strBuilder12.equals((Object)strBuilder10));
      assertFalse(strBuilder12.equals((Object)strBuilder1));
      assertFalse(strBuilder12.equals((Object)strBuilder8));
      assertFalse(strBuilder12.equals((Object)strBuilder5));
      assertFalse(strBuilder12.equals((Object)strBuilder0));
      assertFalse(strBuilder12.equals((Object)strBuilder6));
      assertFalse(strBuilder12.equals((Object)strBuilder11));
      assertFalse(strBuilder12.equals((Object)strBuilder9));
      assertFalse(strBuilder12.equals((Object)strBuilder2));
      assertNotNull(strBuilder12);
      
      String[] stringArray0 = new String[0];
      StrBuilder strBuilder13 = strBuilder11.appendAll(stringArray0);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(108, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(108, strBuilder0.capacity());
      assertEquals(108, strBuilder0.size());
      assertEquals(108, strBuilder13.capacity());
      assertFalse(strBuilder13.isEmpty());
      assertNull(strBuilder13.getNullText());
      assertEquals(108, strBuilder13.length());
      assertNull(strBuilder13.getNewLineText());
      assertEquals(108, strBuilder13.size());
      assertTrue(strBuilder13.isNotEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(108, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(108, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(108, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(108, strBuilder2.size());
      assertEquals(108, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(108, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(7, strBuilder3.length());
      assertEquals(7, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(108, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(108, strBuilder5.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(108, strBuilder5.size());
      assertEquals(108, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(108, strBuilder6.size());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(108, strBuilder6.length());
      assertNull(strBuilder10.getNullText());
      assertTrue(strBuilder10.isNotEmpty());
      assertEquals(108, strBuilder10.size());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(108, strBuilder10.length());
      assertNull(strBuilder10.getNewLineText());
      assertEquals(108, strBuilder10.capacity());
      assertNull(strBuilder11.getNullText());
      assertFalse(strBuilder11.isEmpty());
      assertEquals(108, strBuilder11.capacity());
      assertNull(strBuilder11.getNewLineText());
      assertEquals(108, strBuilder11.size());
      assertTrue(strBuilder11.isNotEmpty());
      assertEquals(108, strBuilder11.length());
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder12);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder13);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder13, strBuilder0);
      assertSame(strBuilder13, strBuilder2);
      assertNotSame(strBuilder13, strBuilder3);
      assertSame(strBuilder13, strBuilder10);
      assertSame(strBuilder13, strBuilder8);
      assertSame(strBuilder13, strBuilder7);
      assertSame(strBuilder13, strBuilder1);
      assertNotSame(strBuilder13, strBuilder4);
      assertSame(strBuilder13, strBuilder5);
      assertNotSame(strBuilder13, strBuilder9);
      assertSame(strBuilder13, strBuilder6);
      assertSame(strBuilder13, strBuilder11);
      assertNotSame(strBuilder13, strBuilder12);
      assertSame(strBuilder1, strBuilder13);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder9);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder11);
      assertNotSame(strBuilder1, strBuilder12);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder13);
      assertSame(strBuilder2, strBuilder10);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder9);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder11);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder12);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder3, strBuilder11);
      assertSame(strBuilder3, strBuilder12);
      assertNotSame(strBuilder3, strBuilder9);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder10);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder13);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder8);
      assertNotSame(strBuilder3, strBuilder7);
      assertNotSame(strBuilder5, strBuilder12);
      assertSame(strBuilder5, strBuilder7);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder9);
      assertSame(strBuilder5, strBuilder8);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder11);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder10);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder13);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder12);
      assertNotSame(strBuilder6, strBuilder9);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder10);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder13);
      assertSame(strBuilder6, strBuilder11);
      assertSame(strBuilder10, strBuilder13);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder5);
      assertNotSame(strBuilder10, strBuilder12);
      assertSame(strBuilder10, strBuilder11);
      assertSame(strBuilder10, strBuilder8);
      assertNotSame(strBuilder10, strBuilder9);
      assertNotSame(strBuilder10, strBuilder3);
      assertNotSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder11, strBuilder8);
      assertSame(strBuilder11, strBuilder7);
      assertNotSame(strBuilder11, strBuilder9);
      assertSame(strBuilder11, strBuilder5);
      assertNotSame(strBuilder11, strBuilder3);
      assertSame(strBuilder11, strBuilder2);
      assertNotSame(strBuilder11, strBuilder12);
      assertSame(strBuilder11, strBuilder1);
      assertSame(strBuilder11, strBuilder13);
      assertNotSame(strBuilder11, strBuilder4);
      assertSame(strBuilder11, strBuilder6);
      assertSame(strBuilder11, strBuilder10);
      assertSame(strBuilder11, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder12));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder9));
      assertFalse(strBuilder13.equals((Object)strBuilder3));
      assertFalse(strBuilder13.equals((Object)strBuilder9));
      assertFalse(strBuilder13.equals((Object)strBuilder4));
      assertFalse(strBuilder13.equals((Object)strBuilder12));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder9));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder12));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder9));
      assertFalse(strBuilder2.equals((Object)strBuilder12));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder11));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder9));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder10));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder8));
      assertFalse(strBuilder3.equals((Object)strBuilder7));
      assertFalse(strBuilder5.equals((Object)strBuilder12));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder9));
      assertFalse(strBuilder6.equals((Object)strBuilder12));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder9));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder10.equals((Object)strBuilder3));
      assertFalse(strBuilder10.equals((Object)strBuilder9));
      assertFalse(strBuilder10.equals((Object)strBuilder4));
      assertFalse(strBuilder10.equals((Object)strBuilder12));
      assertFalse(strBuilder11.equals((Object)strBuilder4));
      assertFalse(strBuilder11.equals((Object)strBuilder9));
      assertFalse(strBuilder11.equals((Object)strBuilder3));
      assertFalse(strBuilder11.equals((Object)strBuilder12));
      assertNotNull(strBuilder13);
      assertEquals(0, stringArray0.length);
      assertEquals(1, objectArray0.length);
      
      // Undeclared exception!
      try { 
        strBuilder0.delete((-2684), 1022);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2684
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      int int0 = StrBuilder.CAPACITY;
      assertEquals(32, int0);
      
      StrBuilder strBuilder0 = new StrBuilder(117);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) null, 117, '~');
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(117, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.capacity());
      assertEquals(117, strBuilder1.size());
      assertEquals(117, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(117, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(117, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.capacity());
      assertEquals(117, strBuilder1.size());
      assertEquals(117, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(117, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(117, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(117, strBuilder2.size());
      assertEquals(117, strBuilder2.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendNewLine();
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(118, strBuilder0.length());
      assertEquals(118, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(236, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(236, strBuilder1.capacity());
      assertEquals(118, strBuilder1.size());
      assertEquals(118, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(236, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(118, strBuilder2.size());
      assertEquals(118, strBuilder2.length());
      assertEquals(236, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(118, strBuilder3.length());
      assertEquals(118, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder2.appendFixedWidthPadLeft(117, 117, '~');
      assertEquals(235, strBuilder0.length());
      assertEquals(235, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(236, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(236, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(235, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(235, strBuilder1.size());
      assertEquals(235, strBuilder2.length());
      assertEquals(235, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(236, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(235, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(235, strBuilder4.length());
      assertEquals(236, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertNotNull(strBuilder4);
      
      int int1 = strBuilder4.length();
      assertEquals(235, strBuilder0.length());
      assertEquals(235, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(236, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(236, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(235, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(235, strBuilder1.size());
      assertEquals(235, strBuilder2.length());
      assertEquals(235, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(236, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(235, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(235, strBuilder4.length());
      assertEquals(236, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertEquals(235, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.midString(0, 0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder1.insert(347, (float) 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 347
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(0.0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.minimizeCapacity();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.capacity());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(3, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3, strBuilder2.length());
      assertEquals(3, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendSeparator('G', 53);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(4, strBuilder2.size());
      assertEquals(4, strBuilder2.length());
      assertEquals(8, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNullText());
      assertEquals(8, strBuilder3.capacity());
      assertEquals(4, strBuilder3.size());
      assertEquals(4, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder2.replaceFirst('G', '8');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(4, strBuilder2.size());
      assertEquals(4, strBuilder2.length());
      assertEquals(8, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(8, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals(4, strBuilder4.size());
      assertEquals(4, strBuilder4.length());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = new StrBuilder("");
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertFalse(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = new StrBuilder(1505);
      assertNull(strBuilder6.getNewLineText());
      assertEquals(1505, strBuilder6.capacity());
      assertTrue(strBuilder6.isEmpty());
      assertFalse(strBuilder6.isNotEmpty());
      assertEquals(0, strBuilder6.size());
      assertEquals(0, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertTrue(strBuilder6.equals((Object)strBuilder5));
      assertNotNull(strBuilder6);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "Invalid offset: ";
      objectArray0[2] = (Object) strBuilder1;
      objectArray0[3] = (Object) strBuilder6;
      objectArray0[4] = (Object) "Invalid offset: ";
      objectArray0[5] = (Object) strBuilder2;
      objectArray0[6] = (Object) strBuilder1;
      StrBuilder strBuilder7 = strBuilder6.appendln("Invalid offset: ", objectArray0);
      assertNull(strBuilder6.getNewLineText());
      assertEquals(1505, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(17, strBuilder6.size());
      assertEquals(17, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(1505, strBuilder7.capacity());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(17, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(17, strBuilder7.size());
      assertNull(strBuilder7.getNullText());
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder4);
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertNotNull(strBuilder7);
      assertEquals(7, objectArray0.length);
      
      StrBuilder strBuilder8 = strBuilder1.appendPadding(53, 's');
      assertEquals(57, strBuilder8.size());
      assertEquals(57, strBuilder8.length());
      assertNull(strBuilder8.getNullText());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(114, strBuilder8.capacity());
      assertTrue(strBuilder8.isNotEmpty());
      assertEquals(57, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(57, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(114, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(57, strBuilder1.length());
      assertEquals(57, strBuilder1.size());
      assertEquals(114, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNotSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder4);
      assertNotSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder3);
      assertNotSame(strBuilder8, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertNotNull(strBuilder8);
      
      StrBuilder strBuilder9 = strBuilder2.appendSeparator('{', 53);
      assertEquals(58, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(58, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(114, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(58, strBuilder9.size());
      assertEquals(58, strBuilder9.length());
      assertTrue(strBuilder9.isNotEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertEquals(114, strBuilder9.capacity());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(58, strBuilder1.length());
      assertEquals(58, strBuilder1.size());
      assertEquals(114, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(114, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(58, strBuilder2.size());
      assertEquals(58, strBuilder2.length());
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder9, strBuilder3);
      assertNotSame(strBuilder9, strBuilder7);
      assertNotSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder0);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder9);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder2, strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertNotNull(strBuilder9);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder6.insert(419, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 419
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Object varargs must not be null";
      objectArray0[1] = (Object) strBuilder0;
      objectArray0[2] = (Object) "Object varargs must not be null";
      objectArray0[3] = (Object) strBuilder0;
      objectArray0[4] = (Object) strBuilder0;
      StrBuilder strBuilder1 = strBuilder0.append("Object varargs must not be null", objectArray0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(31, strBuilder0.size());
      assertEquals(31, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(31, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(31, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(5, objectArray0.length);
      
      StrBuilder strBuilder2 = strBuilder0.replaceFirst('b', 'Y');
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(31, strBuilder0.size());
      assertEquals(31, strBuilder0.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(31, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(31, strBuilder2.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('@', 'G');
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = "CjHv[Jt!xK*x ";
      StrBuilder strBuilder2 = new StrBuilder("CjHv[Jt!xK*x ");
      assertEquals(14, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(14, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(46, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "CjHv[Jt!xK*x ";
      StrBuilder strBuilder3 = strBuilder1.appendln("CjHv[Jt!xK*x ", objectArray0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(15, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(15, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(15, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      assertEquals(1, objectArray0.length);
      
      StrBuilder strBuilder4 = strBuilder1.appendPadding((-1835), 'G');
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(15, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(15, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(15, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder2.appendSeparator('G', 1505);
      assertEquals(15, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(15, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(46, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(46, strBuilder5.capacity());
      assertEquals(15, strBuilder5.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(15, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder1);
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = new StrBuilder("CjHv[Jt!xK*x ");
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(14, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(46, strBuilder6.capacity());
      assertEquals(14, strBuilder6.length());
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder0.deleteCharAt(0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(14, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertEquals(14, strBuilder7.size());
      assertEquals(32, strBuilder7.capacity());
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = new StrBuilder(31);
      assertTrue(strBuilder8.isEmpty());
      assertFalse(strBuilder8.isNotEmpty());
      assertNull(strBuilder8.getNullText());
      assertEquals(0, strBuilder8.size());
      assertEquals(0, strBuilder8.length());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(31, strBuilder8.capacity());
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertNotNull(strBuilder8);
      
      boolean boolean0 = strBuilder0.endsWith("zt$e4uoG");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      
      StrBuilder strBuilder9 = strBuilder6.trim();
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(13, strBuilder6.size());
      assertEquals(13, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(46, strBuilder6.capacity());
      assertNull(strBuilder9.getNewLineText());
      assertTrue(strBuilder9.isNotEmpty());
      assertEquals(13, strBuilder9.length());
      assertNull(strBuilder9.getNullText());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(13, strBuilder9.size());
      assertEquals(46, strBuilder9.capacity());
      assertNotSame(strBuilder6, strBuilder8);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder9);
      assertNotSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder9, strBuilder8);
      assertNotSame(strBuilder9, strBuilder3);
      assertNotSame(strBuilder9, strBuilder5);
      assertNotSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder1);
      assertNotSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder0);
      assertNotSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder6);
      assertFalse(strBuilder6.equals((Object)strBuilder8));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertFalse(strBuilder9.equals((Object)strBuilder1));
      assertFalse(strBuilder9.equals((Object)strBuilder2));
      assertFalse(strBuilder9.equals((Object)strBuilder0));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertNotNull(strBuilder9);
      
      StrBuilder strBuilder10 = strBuilder1.deleteFirst((String) null);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(14, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder10.isNotEmpty());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(14, strBuilder10.length());
      assertEquals(14, strBuilder10.size());
      assertNull(strBuilder10.getNewLineText());
      assertNull(strBuilder10.getNullText());
      assertEquals(32, strBuilder10.capacity());
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder10);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder10);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder10, strBuilder4);
      assertNotSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder1);
      assertNotSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder0);
      assertNotSame(strBuilder10, strBuilder5);
      assertNotSame(strBuilder10, strBuilder2);
      assertNotSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder9));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder8));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder9));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder10.equals((Object)strBuilder8));
      assertFalse(strBuilder10.equals((Object)strBuilder5));
      assertFalse(strBuilder10.equals((Object)strBuilder2));
      assertFalse(strBuilder10.equals((Object)strBuilder9));
      assertNotNull(strBuilder10);
      
      StrBuilder strBuilder11 = new StrBuilder((String) null);
      assertFalse(strBuilder11.isNotEmpty());
      assertEquals(0, strBuilder11.length());
      assertNull(strBuilder11.getNullText());
      assertEquals(0, strBuilder11.size());
      assertNull(strBuilder11.getNewLineText());
      assertTrue(strBuilder11.isEmpty());
      assertEquals(32, strBuilder11.capacity());
      assertFalse(strBuilder11.equals((Object)strBuilder10));
      assertFalse(strBuilder11.equals((Object)strBuilder7));
      assertFalse(strBuilder11.equals((Object)strBuilder3));
      assertFalse(strBuilder11.equals((Object)strBuilder5));
      assertFalse(strBuilder11.equals((Object)strBuilder0));
      assertTrue(strBuilder11.equals((Object)strBuilder8));
      assertFalse(strBuilder11.equals((Object)strBuilder9));
      assertFalse(strBuilder11.equals((Object)strBuilder1));
      assertFalse(strBuilder11.equals((Object)strBuilder4));
      assertFalse(strBuilder11.equals((Object)strBuilder2));
      assertFalse(strBuilder11.equals((Object)strBuilder6));
      assertNotNull(strBuilder11);
      
      String string1 = strBuilder11.leftString(0);
      assertFalse(strBuilder11.isNotEmpty());
      assertEquals(0, strBuilder11.length());
      assertNull(strBuilder11.getNullText());
      assertEquals(0, strBuilder11.size());
      assertNull(strBuilder11.getNewLineText());
      assertTrue(strBuilder11.isEmpty());
      assertEquals(32, strBuilder11.capacity());
      assertNotSame(strBuilder11, strBuilder10);
      assertNotSame(strBuilder11, strBuilder7);
      assertNotSame(strBuilder11, strBuilder3);
      assertNotSame(strBuilder11, strBuilder5);
      assertNotSame(strBuilder11, strBuilder0);
      assertNotSame(strBuilder11, strBuilder9);
      assertNotSame(strBuilder11, strBuilder1);
      assertNotSame(strBuilder11, strBuilder4);
      assertNotSame(strBuilder11, strBuilder2);
      assertNotSame(strBuilder11, strBuilder8);
      assertNotSame(strBuilder11, strBuilder6);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(strBuilder11.equals((Object)strBuilder10));
      assertFalse(strBuilder11.equals((Object)strBuilder7));
      assertFalse(strBuilder11.equals((Object)strBuilder3));
      assertFalse(strBuilder11.equals((Object)strBuilder5));
      assertFalse(strBuilder11.equals((Object)strBuilder0));
      assertTrue(strBuilder11.equals((Object)strBuilder8));
      assertFalse(strBuilder11.equals((Object)strBuilder9));
      assertFalse(strBuilder11.equals((Object)strBuilder1));
      assertFalse(strBuilder11.equals((Object)strBuilder4));
      assertFalse(strBuilder11.equals((Object)strBuilder2));
      assertFalse(strBuilder11.equals((Object)strBuilder6));
      assertNotNull(string1);
      
      String string2 = "";
      StringBuilder stringBuilder0 = new StringBuilder("");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder10.appendln(stringBuilder0, 0, 115);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder2 = strBuilder1.appendWithSeparators(objectArray0, "");
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      assertEquals(0, objectArray0.length);
      
      StrBuilder strBuilder3 = strBuilder0.appendNull();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.delete(0, 0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNotNull(strBuilder4);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "");
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(0, objectArray0.length);
      
      boolean boolean0 = true;
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = 97;
      // Undeclared exception!
      try { 
        stringBuilder0.replace(97, 97, "Invalid offset: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) null);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.minimizeCapacity();
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.setLength(0);
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.appendSeparator("I2R]N: ", 63);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(14, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(7, strBuilder3.length());
      assertEquals(7, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(7, strBuilder4.length());
      assertEquals(7, strBuilder4.size());
      assertEquals(14, strBuilder4.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder4.appendln(0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.length());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(9, strBuilder3.size());
      assertEquals(14, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(9, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(14, strBuilder4.capacity());
      assertEquals(9, strBuilder4.length());
      assertEquals(9, strBuilder4.size());
      assertNull(strBuilder5.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(14, strBuilder5.capacity());
      assertEquals(9, strBuilder5.size());
      assertEquals(9, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder5.setLength(2744);
      assertEquals(2744, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5488, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2744, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(2744, strBuilder3.size());
      assertEquals(2744, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(5488, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(5488, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(2744, strBuilder4.size());
      assertEquals(2744, strBuilder4.length());
      assertNull(strBuilder5.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(2744, strBuilder5.length());
      assertEquals(2744, strBuilder5.size());
      assertEquals(5488, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(5488, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(2744, strBuilder6.size());
      assertEquals(2744, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder1.append(true);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5488, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2748, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2748, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5488, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2748, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2748, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder7.getNullText());
      assertEquals(5488, strBuilder7.capacity());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(2748, strBuilder7.size());
      assertEquals(2748, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = strBuilder7.appendSeparator("I2R]N: ", 1091);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5488, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2755, strBuilder0.size());
      assertEquals(2755, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5488, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2755, strBuilder1.size());
      assertEquals(2755, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder7.getNullText());
      assertEquals(5488, strBuilder7.capacity());
      assertTrue(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(2755, strBuilder7.length());
      assertEquals(2755, strBuilder7.size());
      assertNull(strBuilder8.getNullText());
      assertTrue(strBuilder8.isNotEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(5488, strBuilder8.capacity());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(2755, strBuilder8.size());
      assertEquals(2755, strBuilder8.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder8);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      assertNotNull(strBuilder8);
      
      StrBuilder strBuilder9 = strBuilder0.replaceFirst('.', '.');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5488, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2755, strBuilder0.size());
      assertEquals(2755, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2755, strBuilder9.size());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(2755, strBuilder9.length());
      assertTrue(strBuilder9.isNotEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(5488, strBuilder9.capacity());
      assertNull(strBuilder9.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder8);
      assertNotNull(strBuilder9);
      
      boolean boolean0 = strBuilder6.contains('.');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5488, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2755, strBuilder0.size());
      assertEquals(2755, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(2755, strBuilder3.size());
      assertEquals(2755, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(5488, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(5488, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(2755, strBuilder4.size());
      assertEquals(2755, strBuilder4.length());
      assertNull(strBuilder5.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(2755, strBuilder5.size());
      assertEquals(2755, strBuilder5.length());
      assertEquals(5488, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(5488, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(2755, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(2755, strBuilder6.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder9);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder8);
      assertSame(strBuilder5, strBuilder9);
      assertSame(strBuilder5, strBuilder7);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder9);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertFalse(boolean0);
      
      int int0 = strBuilder8.indexOf('u', 377);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5488, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2755, strBuilder0.size());
      assertEquals(2755, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5488, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2755, strBuilder1.size());
      assertEquals(2755, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder7.getNullText());
      assertEquals(5488, strBuilder7.capacity());
      assertTrue(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(2755, strBuilder7.length());
      assertEquals(2755, strBuilder7.size());
      assertNull(strBuilder8.getNullText());
      assertTrue(strBuilder8.isNotEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(5488, strBuilder8.capacity());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(2755, strBuilder8.size());
      assertEquals(2755, strBuilder8.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder8);
      assertSame(strBuilder7, strBuilder9);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder8, strBuilder9);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      assertEquals(2746, int0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      TreeSet<StringReader> treeSet0 = new TreeSet<StringReader>();
      assertNotNull(treeSet0);
      
      StringReader stringReader0 = treeSet0.pollFirst();
      assertNull(stringReader0);
      
      Iterator<StringReader> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(iterator0, (String) null);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.append(1699);
      assertEquals(4, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(4, strBuilder2.size());
      assertEquals(4, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder2.new StrBuilderReader();
      assertEquals(4, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(4, strBuilder2.size());
      assertEquals(4, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ';';
      charArray0[1] = 'X';
      charArray0[2] = 'T';
      charArray0[3] = ';';
      charArray0[4] = 'X';
      charArray0[5] = 'X';
      charArray0[6] = 'X';
      charArray0[7] = 'T';
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(4, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(4, strBuilder2.size());
      assertEquals(4, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'1', '6', '9', '9', 'X', 'X', 'X', 'T'}, charArray0);
      assertEquals(8, charArray0.length);
      
      // Undeclared exception!
      try { 
        strBuilder1.readFrom((Readable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("R");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('q');
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2, strBuilder1.size());
      assertEquals(33, strBuilder1.capacity());
      assertEquals(2, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append((StringBuffer) null);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(33, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendSeparator('&', 3614);
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(2, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = new StrBuilder("");
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.appendln((-1904.2));
      assertEquals(8, strBuilder3.size());
      assertEquals(8, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(8, strBuilder4.length());
      assertEquals(8, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder2.append(strBuilder3);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(10, strBuilder2.size());
      assertEquals(10, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(8, strBuilder3.size());
      assertEquals(8, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(10, strBuilder5.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(10, strBuilder5.size());
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertNotNull(strBuilder5);
      
      int int0 = strBuilder0.indexOf("t%ueNHF");
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertEquals((-1), int0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      
      StrBuilder strBuilder6 = strBuilder0.deleteFirst('t');
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(10, strBuilder6.length());
      assertEquals(10, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder6.appendSeparator('U');
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(11, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(11, strBuilder6.size());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(11, strBuilder7.length());
      assertEquals(32, strBuilder7.capacity());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(11, strBuilder7.size());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = strBuilder2.append((-927L));
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(15, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(15, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(15, strBuilder2.size());
      assertEquals(15, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder8.capacity());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertEquals(15, strBuilder8.size());
      assertEquals(15, strBuilder8.length());
      assertTrue(strBuilder8.isNotEmpty());
      assertFalse(strBuilder8.isEmpty());
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder2);
      assertNotSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertNotNull(strBuilder8);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '&';
      StrBuilder strBuilder9 = strBuilder3.appendPadding((-1), 'H');
      assertEquals(8, strBuilder3.size());
      assertEquals(8, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder9.getNullText());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertTrue(strBuilder9.isNotEmpty());
      assertEquals(32, strBuilder9.capacity());
      assertEquals(8, strBuilder9.length());
      assertEquals(8, strBuilder9.size());
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder8);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder7);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder0);
      assertNotSame(strBuilder9, strBuilder1);
      assertNotSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder3);
      assertNotSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder8);
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder8));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder7));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder9.equals((Object)strBuilder2));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder0));
      assertFalse(strBuilder9.equals((Object)strBuilder1));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertNotNull(strBuilder9);
      
      int int1 = (-1203);
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-1), (-1203));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder("");
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendAll((Object[]) null);
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = new StrBuilder();
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.size());
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder4.replaceFirst("", "");
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertTrue(strBuilder5.equals((Object)strBuilder1));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertTrue(strBuilder5.equals((Object)strBuilder3));
      assertTrue(strBuilder5.equals((Object)strBuilder0));
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder2.appendSeparator('r', 'r');
      assertEquals(32, strBuilder2.capacity());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(1, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(1, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertNotNull(strBuilder6);
      
      String string0 = strBuilder3.rightString(5);
      assertEquals(32, strBuilder2.capacity());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder0);
      assertEquals("r", string0);
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(string0);
      
      String string1 = strBuilder0.build();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder6);
      assertEquals("", string1);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertTrue(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StrBuilder strBuilder7 = new StrBuilder("r");
      assertEquals(1, strBuilder7.size());
      assertEquals(1, strBuilder7.length());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(33, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertTrue(strBuilder7.equals((Object)strBuilder3));
      assertTrue(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertTrue(strBuilder7.equals((Object)strBuilder2));
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = strBuilder1.minimizeCapacity();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder8.isNotEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertEquals(0, strBuilder8.size());
      assertTrue(strBuilder8.isEmpty());
      assertEquals(0, strBuilder8.length());
      assertEquals(0, strBuilder8.capacity());
      assertNotSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder8, strBuilder5);
      assertNotSame(strBuilder8, strBuilder2);
      assertNotSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder7);
      assertNotSame(strBuilder8, strBuilder3);
      assertNotSame(strBuilder8, strBuilder6);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertTrue(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertTrue(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertTrue(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertTrue(strBuilder8.equals((Object)strBuilder5));
      assertTrue(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertNotNull(strBuilder8);
      
      boolean boolean0 = strBuilder7.equalsIgnoreCase(strBuilder5);
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(1, strBuilder7.size());
      assertEquals(1, strBuilder7.length());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(33, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertNotSame(strBuilder4, strBuilder7);
      assertNotSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder8);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder7);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder8);
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder8);
      assertNotSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder2);
      assertFalse(boolean0);
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertTrue(strBuilder4.equals((Object)strBuilder8));
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertTrue(strBuilder5.equals((Object)strBuilder1));
      assertTrue(strBuilder5.equals((Object)strBuilder8));
      assertFalse(strBuilder5.equals((Object)strBuilder6));
      assertFalse(strBuilder5.equals((Object)strBuilder7));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertTrue(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertTrue(strBuilder7.equals((Object)strBuilder3));
      assertTrue(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertTrue(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder8));
      
      StrBuilder strBuilder9 = strBuilder3.appendPadding(5, 'v');
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(6, strBuilder3.size());
      assertEquals(6, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder9.getNullText());
      assertTrue(strBuilder9.isNotEmpty());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(32, strBuilder9.capacity());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(6, strBuilder9.length());
      assertEquals(6, strBuilder9.size());
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder9);
      assertNotSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder3, strBuilder8);
      assertNotSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder9);
      assertNotSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder7);
      assertNotSame(strBuilder9, strBuilder0);
      assertNotSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder3);
      assertNotSame(strBuilder9, strBuilder1);
      assertNotSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder6);
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder8));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder8));
      assertFalse(strBuilder3.equals((Object)strBuilder7));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder0));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder1));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertNotNull(strBuilder9);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = "";
      StrBuilder strBuilder1 = new StrBuilder("");
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append((CharSequence) "");
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.minimizeCapacity();
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertTrue(strBuilder1.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        strBuilder1.setCharAt(2587, '&');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2587
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrTokenizer");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.length());
      assertEquals(42, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(74, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('n');
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.size());
      assertEquals(41, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(74, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(74, strBuilder1.capacity());
      assertEquals(41, strBuilder1.length());
      assertEquals(41, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char char0 = 'f';
      StrBuilder strBuilder1 = strBuilder0.appendln('f');
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendln((Object) strBuilder0);
      assertEquals(5, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(5, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.deleteFirst("|KT6bcw[Jip`?W6h@~");
      assertEquals(5, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(5, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(5, strBuilder3.length());
      assertEquals(5, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      int int0 = 0;
      StrBuilder strBuilder4 = strBuilder0.deleteCharAt(0);
      assertEquals(4, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(4, strBuilder4.size());
      assertEquals(4, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertNotNull(strBuilder4);
      
      String string0 = "org.apache.commons.lang3.text.SrBulder$StrBuilderTokenizer";
      StrBuilder strBuilder5 = new StrBuilder('f');
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertTrue(strBuilder5.isEmpty());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(102, strBuilder5.capacity());
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertNotNull(strBuilder5);
      
      boolean boolean0 = strBuilder2.endsWith("org.apache.commons.lang3.text.SrBulder$StrBuilderTokenizer");
      assertEquals(4, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder2.size());
      assertEquals(4, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder5);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      
      StrBuilder strBuilder6 = strBuilder0.trim();
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder6.size());
      assertEquals(1, strBuilder6.length());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder1.deleteFirst("|KT6bcw[Jip`?W6h@~");
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertEquals(32, strBuilder7.capacity());
      assertEquals(1, strBuilder7.size());
      assertEquals(1, strBuilder7.length());
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = new StrBuilder("|KT6bcw[Jip`?W6h@~");
      assertEquals(18, strBuilder8.size());
      assertEquals(18, strBuilder8.length());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertFalse(strBuilder8.isEmpty());
      assertTrue(strBuilder8.isNotEmpty());
      assertEquals(50, strBuilder8.capacity());
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertNotNull(strBuilder8);
      
      String string1 = strBuilder8.leftString(0);
      assertEquals(18, strBuilder8.size());
      assertEquals(18, strBuilder8.length());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertFalse(strBuilder8.isEmpty());
      assertTrue(strBuilder8.isNotEmpty());
      assertEquals(50, strBuilder8.capacity());
      assertNotSame(strBuilder8, strBuilder4);
      assertNotSame(strBuilder8, strBuilder5);
      assertNotSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder3);
      assertNotSame(strBuilder8, strBuilder2);
      assertNotSame(strBuilder8, strBuilder7);
      assertNotSame(strBuilder8, strBuilder6);
      assertNotSame(strBuilder8, strBuilder0);
      assertEquals("", string1);
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) strBuilder8;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) strBuilder2;
      objectArray0[4] = (Object) strBuilder7;
      objectArray0[5] = (Object) strBuilder3;
      objectArray0[6] = (Object) strBuilder7;
      objectArray0[7] = (Object) strBuilder2;
      StrBuilder strBuilder9 = strBuilder6.appendWithSeparators(objectArray0, "");
      assertEquals(1472, strBuilder0.size());
      assertEquals(1472, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1472, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1472, strBuilder9.length());
      assertEquals(1472, strBuilder9.size());
      assertNull(strBuilder9.getNullText());
      assertTrue(strBuilder9.isNotEmpty());
      assertEquals(1472, strBuilder9.capacity());
      assertNull(strBuilder9.getNewLineText());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(1472, strBuilder6.size());
      assertEquals(1472, strBuilder6.length());
      assertEquals(1472, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder3);
      assertNotSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder9);
      assertSame(strBuilder6, strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder8));
      assertNotNull(strBuilder9);
      assertEquals(8, objectArray0.length);
      
      int int1 = StrBuilder.CAPACITY;
      assertEquals(32, int1);
      assertFalse(int1 == int0);
      
      StrBuilder strBuilder10 = strBuilder0.deleteFirst('t');
      assertEquals(1471, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1472, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1471, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder10.isNotEmpty());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(1471, strBuilder10.size());
      assertNull(strBuilder10.getNewLineText());
      assertNull(strBuilder10.getNullText());
      assertEquals(1471, strBuilder10.length());
      assertEquals(1472, strBuilder10.capacity());
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder6);
      assertNotSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder10.equals((Object)strBuilder8));
      assertFalse(strBuilder10.equals((Object)strBuilder5));
      assertNotNull(strBuilder10);
      
      StrBuilder strBuilder11 = strBuilder7.append(0L);
      assertEquals(1472, strBuilder0.size());
      assertEquals(1472, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1472, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1472, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(1472, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1472, strBuilder1.size());
      assertEquals(1472, strBuilder11.size());
      assertNull(strBuilder11.getNewLineText());
      assertFalse(strBuilder11.isEmpty());
      assertNull(strBuilder11.getNullText());
      assertEquals(1472, strBuilder11.length());
      assertEquals(1472, strBuilder11.capacity());
      assertTrue(strBuilder11.isNotEmpty());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertEquals(1472, strBuilder7.length());
      assertEquals(1472, strBuilder7.capacity());
      assertEquals(1472, strBuilder7.size());
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder11);
      assertNotSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder11, strBuilder6);
      assertNotSame(strBuilder11, strBuilder5);
      assertSame(strBuilder11, strBuilder3);
      assertSame(strBuilder11, strBuilder10);
      assertNotSame(strBuilder11, strBuilder8);
      assertSame(strBuilder11, strBuilder4);
      assertSame(strBuilder11, strBuilder9);
      assertSame(strBuilder11, strBuilder7);
      assertSame(strBuilder11, strBuilder1);
      assertSame(strBuilder11, strBuilder2);
      assertSame(strBuilder11, strBuilder0);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder10);
      assertSame(strBuilder7, strBuilder9);
      assertNotSame(strBuilder7, strBuilder8);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder11);
      assertSame(strBuilder7, strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder8));
      assertFalse(strBuilder11.equals((Object)strBuilder5));
      assertFalse(strBuilder11.equals((Object)strBuilder8));
      assertFalse(strBuilder7.equals((Object)strBuilder8));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertNotNull(strBuilder11);
      
      int int2 = (-1203);
      char[] charArray0 = new char[1];
      StringBuilder[] stringBuilderArray0 = new StringBuilder[9];
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      stringBuilderArray0[0] = stringBuilder0;
      StringBuilder stringBuilder1 = null;
      try {
        stringBuilder1 = new StringBuilder((-1203));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-17));
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("y1X/8");
      assertEquals("y1X/8", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) stringBuffer0);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.minimizeCapacity();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.setLength(23);
      assertEquals(46, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(23, strBuilder0.size());
      assertEquals(23, strBuilder0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(23, strBuilder1.size());
      assertEquals(23, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(46, strBuilder3.capacity());
      assertEquals(23, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(23, strBuilder3.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder2.appendSeparator("\r", 23);
      assertEquals(46, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(46, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(24, strBuilder2.size());
      assertEquals(24, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(24, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(46, strBuilder4.capacity());
      assertEquals(24, strBuilder4.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder1.append(23);
      assertEquals(46, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(26, strBuilder0.size());
      assertEquals(26, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(26, strBuilder1.length());
      assertEquals(46, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(26, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(26, strBuilder5.length());
      assertEquals(46, strBuilder5.capacity());
      assertEquals(26, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertNotNull(strBuilder5);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(46, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(26, strBuilder0.size());
      assertEquals(26, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(46, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(26, strBuilder0.size());
      assertEquals(26, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertEquals(5, int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      StrBuilder strBuilder6 = new StrBuilder();
      assertEquals(0, strBuilder6.size());
      assertEquals(0, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isNotEmpty());
      assertTrue(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertNotNull(strBuilder6);
      
      int int1 = strBuilder6.readFrom(strBuilder_StrBuilderReader0);
      assertEquals(46, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(26, strBuilder0.size());
      assertEquals(26, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNull(strBuilder6.getNullText());
      assertEquals(21, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(21, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder0);
      assertEquals(21, int1);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-44));
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("y1X/8");
      assertEquals("y1X/8", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) stringBuffer0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.minimizeCapacity();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.setLength(23);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(23, strBuilder1.size());
      assertEquals(23, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(23, strBuilder3.length());
      assertEquals(23, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(46, strBuilder3.capacity());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder2.appendSeparator("\r", 23);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(24, strBuilder2.length());
      assertEquals(24, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(46, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(46, strBuilder4.capacity());
      assertEquals(24, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(24, strBuilder4.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder1.append(23);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(26, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(26, strBuilder0.size());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(26, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(26, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(26, strBuilder5.length());
      assertEquals(46, strBuilder5.capacity());
      assertEquals(26, strBuilder5.size());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertNotNull(strBuilder5);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(26, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(26, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(26, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(26, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(5, int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      // Undeclared exception!
      strBuilder4.readFrom(strBuilder_StrBuilderReader0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder0 = new StrBuilder("i.5");
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.length());
      assertEquals(35, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, "6C~gMYrz#");
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.length());
      assertEquals(35, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(35, strBuilder1.capacity());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.reverse();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.length());
      assertEquals(35, strBuilder0.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(35, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("2!G9Zs72zK'rOm^^)D");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith("2!G9Zs72zK'rOm^^)D");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertTrue(boolean0);
      
      int int0 = 2;
      StringBuilder stringBuilder0 = new StringBuilder(2);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'D';
      charArray0[1] = '/';
      charArray0[2] = 'a';
      charArray0[3] = 't';
      // Undeclared exception!
      try { 
        stringBuilder0.insert(2, charArray0, 746, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("2!G9Zs72zK'rOm^^)D");
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      StringBuilder stringBuilder0 = new StringBuilder("m* %<=^$");
      assertEquals("m* %<=^$", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) strBuilder0);
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals("m* %<=^$2!G9Zs72zK'rOm^^)D", stringBuilder0.toString());
      assertEquals("m* %<=^$2!G9Zs72zK'rOm^^)D", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder1.append((-1920));
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals("m* %<=^$2!G9Zs72zK'rOm^^)D-1920", stringBuilder0.toString());
      assertEquals("m* %<=^$2!G9Zs72zK'rOm^^)D-1920", stringBuilder1.toString());
      assertEquals("m* %<=^$2!G9Zs72zK'rOm^^)D-1920", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotNull(stringBuilder2);
      
      StringBuilder stringBuilder3 = stringBuilder2.append((long) (-1920));
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals("m* %<=^$2!G9Zs72zK'rOm^^)D-1920-1920", stringBuilder0.toString());
      assertEquals("m* %<=^$2!G9Zs72zK'rOm^^)D-1920-1920", stringBuilder1.toString());
      assertEquals("m* %<=^$2!G9Zs72zK'rOm^^)D-1920-1920", stringBuilder2.toString());
      assertEquals("m* %<=^$2!G9Zs72zK'rOm^^)D-1920-1920", stringBuilder3.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertNotNull(stringBuilder3);
      
      boolean boolean0 = strBuilder0.startsWith("]JJz`:");
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("The Array must not be null");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(26, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(58, strBuilder0.capacity());
      assertEquals(26, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((String) null);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(27, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(58, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(27, strBuilder0.size());
      assertEquals(58, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(27, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(27, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder1.contains("end < start");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(27, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(58, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(27, strBuilder0.size());
      assertEquals(58, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(27, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(27, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("2!G9Zs72zK'rOm^^)D");
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith("2!G9Zs72zK'rOm^^)D");
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder(2);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '/';
      StrBuilder strBuilder1 = strBuilder0.appendNull();
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(50, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.size());
      assertEquals(18, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder0.leftString(2);
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertEquals("2!", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("xihnv!zR/Sq|>d}jGO");
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(18, strBuilder1.size());
      assertEquals(18, strBuilder1.length());
      assertEquals(50, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(102);
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.length());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(charBuffer0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(120, strBuilder0.size());
      assertEquals(120, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(240, strBuilder0.capacity());
      assertEquals(240, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(120, strBuilder1.size());
      assertEquals(120, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.length());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(120, strBuilder2.length());
      assertEquals(120, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(240, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.appendln(101);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(124, strBuilder0.size());
      assertEquals(240, strBuilder0.capacity());
      assertEquals(124, strBuilder0.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(124, strBuilder3.size());
      assertEquals(124, strBuilder3.length());
      assertEquals(240, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.setLength(102);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(102, strBuilder0.length());
      assertEquals(102, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(240, strBuilder0.capacity());
      assertEquals(102, strBuilder3.size());
      assertEquals(102, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(240, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(240, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(102, strBuilder4.size());
      assertEquals(102, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder1.append(false);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(240, strBuilder0.capacity());
      assertEquals(107, strBuilder0.size());
      assertEquals(107, strBuilder0.length());
      assertEquals(240, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(107, strBuilder1.size());
      assertEquals(107, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(240, strBuilder5.capacity());
      assertEquals(107, strBuilder5.size());
      assertEquals(107, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder4.appendSeparator("xihnv!zR/Sq|>d}jGO", 1641);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(125, strBuilder0.size());
      assertEquals(125, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(125, strBuilder3.size());
      assertEquals(240, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(125, strBuilder3.length());
      assertEquals(240, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(125, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(125, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(125, strBuilder6.size());
      assertEquals(240, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(125, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertNotNull(strBuilder6);
      
      ArrayDeque<StringWriter> arrayDeque0 = new ArrayDeque<StringWriter>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Iterator<StringWriter> iterator0 = arrayDeque0.descendingIterator();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      StrBuilder strBuilder7 = strBuilder6.appendAll(iterator0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(125, strBuilder0.size());
      assertEquals(125, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(125, strBuilder3.size());
      assertEquals(240, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(125, strBuilder3.length());
      assertEquals(240, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(125, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(125, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(125, strBuilder6.size());
      assertEquals(240, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(125, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(125, strBuilder7.size());
      assertEquals(125, strBuilder7.length());
      assertEquals(240, strBuilder7.capacity());
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder0);
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = strBuilder0.replaceFirst('t', 't');
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(125, strBuilder0.size());
      assertEquals(125, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder8.getNewLineText());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(125, strBuilder8.length());
      assertEquals(125, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertEquals(240, strBuilder8.capacity());
      assertTrue(strBuilder8.isNotEmpty());
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder3);
      assertNotNull(strBuilder8);
      
      StrBuilder strBuilder9 = strBuilder4.appendSeparator('t', 't');
      assertNull(strBuilder0.getNullText());
      assertEquals(126, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(126, strBuilder0.length());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(126, strBuilder3.size());
      assertEquals(126, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(240, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(240, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(126, strBuilder4.size());
      assertEquals(126, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(240, strBuilder9.capacity());
      assertTrue(strBuilder9.isNotEmpty());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder9.getNullText());
      assertEquals(126, strBuilder9.length());
      assertEquals(126, strBuilder9.size());
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder9);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder8);
      assertNotNull(strBuilder9);
      
      StrBuilder strBuilder10 = strBuilder2.deleteAll('t');
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(125, strBuilder0.size());
      assertEquals(125, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(240, strBuilder0.capacity());
      assertEquals(240, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(125, strBuilder1.size());
      assertEquals(125, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.length());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(240, strBuilder2.capacity());
      assertEquals(125, strBuilder2.length());
      assertEquals(125, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder10.isNotEmpty());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(125, strBuilder10.size());
      assertEquals(240, strBuilder10.capacity());
      assertEquals(125, strBuilder10.length());
      assertNull(strBuilder10.getNewLineText());
      assertNull(strBuilder10.getNullText());
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder10);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder0);
      assertNotNull(strBuilder10);
      
      int int0 = strBuilder0.indexOf("xihnv!zR/Sq|>d}jGO", (-736));
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(125, strBuilder0.size());
      assertEquals(125, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(240, strBuilder0.capacity());
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertEquals(0, int0);
      
      boolean boolean0 = strBuilder7.equals(strBuilder10);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(125, strBuilder0.size());
      assertEquals(125, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(240, strBuilder0.capacity());
      assertEquals(240, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(125, strBuilder1.size());
      assertEquals(125, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.length());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(240, strBuilder2.capacity());
      assertEquals(125, strBuilder2.length());
      assertEquals(125, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(125, strBuilder3.size());
      assertEquals(240, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(125, strBuilder3.length());
      assertEquals(240, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(125, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(125, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(125, strBuilder6.size());
      assertEquals(240, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(125, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(125, strBuilder7.size());
      assertEquals(125, strBuilder7.length());
      assertEquals(240, strBuilder7.capacity());
      assertTrue(strBuilder10.isNotEmpty());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(125, strBuilder10.size());
      assertEquals(240, strBuilder10.capacity());
      assertEquals(125, strBuilder10.length());
      assertNull(strBuilder10.getNewLineText());
      assertNull(strBuilder10.getNullText());
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder10);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder10);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder10);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder9);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder9);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder10);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder8);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder9);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder10);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("grs9)2+uI");
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder("grs9)2+uI");
      assertEquals(41, strBuilder2.capacity());
      assertEquals(9, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(9, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.deleteAll('r');
      assertEquals(41, strBuilder2.capacity());
      assertEquals(8, strBuilder2.size());
      assertEquals(8, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(8, strBuilder3.size());
      assertEquals(41, strBuilder3.capacity());
      assertEquals(8, strBuilder3.length());
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(41, strBuilder2.capacity());
      assertEquals(8, strBuilder2.size());
      assertEquals(8, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Eawt");
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll("Eawt");
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(36, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(77);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(77, charBuffer0.length());
      assertEquals(77, charBuffer0.limit());
      assertEquals(77, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(77, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(charBuffer0);
      assertEquals(154, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(77, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(77, strBuilder0.length());
      assertEquals(154, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(77, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(77, strBuilder1.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(77, charBuffer0.length());
      assertEquals(77, charBuffer0.limit());
      assertEquals(77, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(77, charBuffer0.remaining());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(77, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(77, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(154, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.appendln(77);
      assertEquals(154, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(80, strBuilder0.size());
      assertEquals(80, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(80, strBuilder3.length());
      assertEquals(80, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(154, strBuilder3.capacity());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.setLength(77);
      assertEquals(154, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(77, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(77, strBuilder0.length());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(77, strBuilder3.length());
      assertEquals(77, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(154, strBuilder3.capacity());
      assertEquals(154, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(77, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(77, strBuilder4.size());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertNotNull(strBuilder4);
      
      LinkedList<StrBuilder> linkedList0 = new LinkedList<StrBuilder>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(strBuilder3));
      
      StrBuilder strBuilder5 = strBuilder4.appendAll((Iterable<?>) linkedList0);
      assertEquals(154, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(77, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(77, strBuilder0.length());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(77, strBuilder3.length());
      assertEquals(77, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(154, strBuilder3.capacity());
      assertEquals(154, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(77, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(77, strBuilder4.size());
      assertEquals(0, linkedList0.size());
      assertEquals(154, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(77, strBuilder5.size());
      assertEquals(77, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertNotNull(strBuilder5);
      assertFalse(linkedList0.contains(strBuilder5));
      
      StrBuilder strBuilder6 = strBuilder4.appendSeparator("Eawt", 1641);
      assertEquals(154, strBuilder0.capacity());
      assertEquals(81, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(81, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(81, strBuilder3.length());
      assertEquals(81, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(154, strBuilder3.capacity());
      assertEquals(81, strBuilder4.size());
      assertEquals(154, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(81, strBuilder4.length());
      assertEquals(81, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(81, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(154, strBuilder6.capacity());
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertNotNull(strBuilder6);
      
      ArrayDeque<StringWriter> arrayDeque0 = new ArrayDeque<StringWriter>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      StrBuilder strBuilder7 = strBuilder0.replaceFirst('t', 't');
      assertEquals(154, strBuilder0.capacity());
      assertEquals(81, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(81, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(81, strBuilder7.length());
      assertEquals(81, strBuilder7.size());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(154, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder4);
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = strBuilder2.deleteAll('t');
      assertEquals(154, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(80, strBuilder0.size());
      assertEquals(80, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(154, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(80, strBuilder1.size());
      assertEquals(80, strBuilder1.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(77, charBuffer0.length());
      assertEquals(77, charBuffer0.limit());
      assertEquals(77, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(77, charBuffer0.remaining());
      assertEquals(80, strBuilder2.size());
      assertEquals(80, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(154, strBuilder2.capacity());
      assertNull(strBuilder8.getNewLineText());
      assertTrue(strBuilder8.isNotEmpty());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNullText());
      assertEquals(80, strBuilder8.size());
      assertEquals(154, strBuilder8.capacity());
      assertEquals(80, strBuilder8.length());
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder1);
      assertNotNull(strBuilder8);
      
      int int0 = strBuilder0.indexOf("Eawt", 77);
      assertEquals(154, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(80, strBuilder0.size());
      assertEquals(80, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertEquals((-1), int0);
      
      boolean boolean0 = strBuilder2.equals(strBuilder8);
      assertEquals(154, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(80, strBuilder0.size());
      assertEquals(80, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(154, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(80, strBuilder1.size());
      assertEquals(80, strBuilder1.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(77, charBuffer0.length());
      assertEquals(77, charBuffer0.limit());
      assertEquals(77, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(77, charBuffer0.remaining());
      assertEquals(80, strBuilder2.size());
      assertEquals(80, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(154, strBuilder2.capacity());
      assertNull(strBuilder8.getNewLineText());
      assertTrue(strBuilder8.isNotEmpty());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNullText());
      assertEquals(80, strBuilder8.size());
      assertEquals(154, strBuilder8.capacity());
      assertEquals(80, strBuilder8.length());
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder1);
      assertTrue(boolean0);
      
      StrBuilder strBuilder9 = strBuilder4.replaceAll("8!!e<=gjNi", "8!!e<=gjNi");
      assertEquals(154, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(80, strBuilder0.size());
      assertEquals(80, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(80, strBuilder3.length());
      assertEquals(80, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(154, strBuilder3.capacity());
      assertEquals(154, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(80, strBuilder4.size());
      assertEquals(80, strBuilder4.length());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(80, strBuilder9.size());
      assertEquals(80, strBuilder9.length());
      assertNull(strBuilder9.getNullText());
      assertTrue(strBuilder9.isNotEmpty());
      assertEquals(154, strBuilder9.capacity());
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder9);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder0);
      assertNotNull(strBuilder9);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      StrBuilder strBuilder2 = strBuilder1.append(charArray0);
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(1, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertArrayEquals(new char[] {'/'}, charArray0);
      assertNotNull(strBuilder2);
      assertEquals(1, charArray0.length);
      
      boolean boolean0 = strBuilder2.startsWith((String) null);
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(1, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(boolean0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertArrayEquals(new char[] {'/'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("No#(ye");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertEquals(38, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith("C");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertEquals(38, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('@', 'G');
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = "CjHv[Jt!xK*x ";
      StrBuilder strBuilder2 = new StrBuilder("CjHv[Jt!xK*x ");
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(14, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(14, strBuilder2.size());
      assertEquals(46, strBuilder2.capacity());
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "CjHv[Jt!xK*x ";
      StrBuilder strBuilder3 = strBuilder1.appendln("CjHv[Jt!xK*x ", objectArray0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(15, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(15, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(15, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(15, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      assertEquals(1, objectArray0.length);
      
      StrBuilder strBuilder4 = strBuilder1.appendPadding((-1835), 'G');
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(15, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(15, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(15, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(15, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder2.appendSeparator('G', 1505);
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(15, strBuilder2.size());
      assertEquals(15, strBuilder2.length());
      assertEquals(46, strBuilder2.capacity());
      assertEquals(15, strBuilder5.size());
      assertEquals(15, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(46, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder4);
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = new StrBuilder("CjHv[Jt!xK*x ");
      assertEquals(46, strBuilder6.capacity());
      assertEquals(14, strBuilder6.length());
      assertEquals(14, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder0.deleteCharAt(0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertFalse(strBuilder7.isEmpty());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(32, strBuilder7.capacity());
      assertEquals(14, strBuilder7.size());
      assertEquals(14, strBuilder7.length());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = new StrBuilder(31);
      assertEquals(31, strBuilder8.capacity());
      assertEquals(0, strBuilder8.length());
      assertEquals(0, strBuilder8.size());
      assertFalse(strBuilder8.isNotEmpty());
      assertTrue(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertNotNull(strBuilder8);
      
      boolean boolean0 = strBuilder0.endsWith("zt$e4uoG");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder6);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      
      StrBuilder strBuilder9 = strBuilder6.trim();
      assertEquals(46, strBuilder6.capacity());
      assertEquals(13, strBuilder6.length());
      assertEquals(13, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertTrue(strBuilder9.isNotEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertEquals(46, strBuilder9.capacity());
      assertEquals(13, strBuilder9.length());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(13, strBuilder9.size());
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder9);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder8);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder9, strBuilder8);
      assertNotSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder7);
      assertNotSame(strBuilder9, strBuilder3);
      assertNotSame(strBuilder9, strBuilder5);
      assertNotSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder0);
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder7));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder8));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder1));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder2));
      assertFalse(strBuilder9.equals((Object)strBuilder0));
      assertNotNull(strBuilder9);
      
      StrBuilder strBuilder10 = strBuilder1.deleteFirst((String) null);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(14, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(14, strBuilder1.length());
      assertNull(strBuilder10.getNewLineText());
      assertTrue(strBuilder10.isNotEmpty());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(14, strBuilder10.size());
      assertNull(strBuilder10.getNullText());
      assertEquals(32, strBuilder10.capacity());
      assertEquals(14, strBuilder10.length());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder10);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder9);
      assertNotSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder0);
      assertNotSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder4);
      assertNotSame(strBuilder10, strBuilder8);
      assertNotSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder7);
      assertNotSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder0.equals((Object)strBuilder9));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder9));
      assertFalse(strBuilder1.equals((Object)strBuilder8));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder10.equals((Object)strBuilder2));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder10.equals((Object)strBuilder8));
      assertFalse(strBuilder10.equals((Object)strBuilder9));
      assertFalse(strBuilder10.equals((Object)strBuilder5));
      assertNotNull(strBuilder10);
      
      StrBuilder strBuilder11 = new StrBuilder((String) null);
      assertFalse(strBuilder11.isNotEmpty());
      assertEquals(0, strBuilder11.length());
      assertEquals(0, strBuilder11.size());
      assertTrue(strBuilder11.isEmpty());
      assertEquals(32, strBuilder11.capacity());
      assertNull(strBuilder11.getNewLineText());
      assertNull(strBuilder11.getNullText());
      assertFalse(strBuilder11.equals((Object)strBuilder9));
      assertFalse(strBuilder11.equals((Object)strBuilder1));
      assertFalse(strBuilder11.equals((Object)strBuilder2));
      assertTrue(strBuilder11.equals((Object)strBuilder8));
      assertFalse(strBuilder11.equals((Object)strBuilder0));
      assertFalse(strBuilder11.equals((Object)strBuilder7));
      assertFalse(strBuilder11.equals((Object)strBuilder3));
      assertFalse(strBuilder11.equals((Object)strBuilder10));
      assertFalse(strBuilder11.equals((Object)strBuilder5));
      assertFalse(strBuilder11.equals((Object)strBuilder6));
      assertFalse(strBuilder11.equals((Object)strBuilder4));
      assertNotNull(strBuilder11);
      
      String string1 = strBuilder11.leftString(0);
      assertFalse(strBuilder11.isNotEmpty());
      assertEquals(0, strBuilder11.length());
      assertEquals(0, strBuilder11.size());
      assertTrue(strBuilder11.isEmpty());
      assertEquals(32, strBuilder11.capacity());
      assertNull(strBuilder11.getNewLineText());
      assertNull(strBuilder11.getNullText());
      assertNotSame(strBuilder11, strBuilder9);
      assertNotSame(strBuilder11, strBuilder8);
      assertNotSame(strBuilder11, strBuilder1);
      assertNotSame(strBuilder11, strBuilder2);
      assertNotSame(strBuilder11, strBuilder0);
      assertNotSame(strBuilder11, strBuilder7);
      assertNotSame(strBuilder11, strBuilder3);
      assertNotSame(strBuilder11, strBuilder10);
      assertNotSame(strBuilder11, strBuilder5);
      assertNotSame(strBuilder11, strBuilder6);
      assertNotSame(strBuilder11, strBuilder4);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(strBuilder11.equals((Object)strBuilder9));
      assertFalse(strBuilder11.equals((Object)strBuilder1));
      assertFalse(strBuilder11.equals((Object)strBuilder2));
      assertTrue(strBuilder11.equals((Object)strBuilder8));
      assertFalse(strBuilder11.equals((Object)strBuilder0));
      assertFalse(strBuilder11.equals((Object)strBuilder7));
      assertFalse(strBuilder11.equals((Object)strBuilder3));
      assertFalse(strBuilder11.equals((Object)strBuilder10));
      assertFalse(strBuilder11.equals((Object)strBuilder5));
      assertFalse(strBuilder11.equals((Object)strBuilder6));
      assertFalse(strBuilder11.equals((Object)strBuilder4));
      assertNotNull(string1);
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      Writer writer0 = strBuilder0.asWriter();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(writer0);
      
      StrBuilder strBuilder1 = strBuilder0.append('H');
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.append(strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertEquals(1, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = new StrBuilder("");
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder4.appendWithSeparators((Object[]) null, ",3/Yh=_E0uS}HDI<");
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(0, strBuilder5.length());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertNotNull(strBuilder5);
      
      int int0 = StrBuilder.CAPACITY;
      assertEquals(32, int0);
      
      StrBuilder strBuilder6 = strBuilder5.deleteFirst('i');
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(0, strBuilder5.length());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(0, strBuilder6.size());
      assertFalse(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(0, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isEmpty());
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertTrue(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder3.append((-927L));
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(5, strBuilder3.size());
      assertEquals(5, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder7.getNewLineText());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(32, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertEquals(5, strBuilder7.size());
      assertEquals(5, strBuilder7.length());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertTrue(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder5));
      assertTrue(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertNotNull(strBuilder7);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-1203), 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendSeparator('&', 3614);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = new StrBuilder("");
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.appendln((-1904.2));
      assertEquals(32, strBuilder3.capacity());
      assertEquals(8, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(8, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(8, strBuilder4.size());
      assertEquals(8, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder2.append(strBuilder3);
      assertEquals(10, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(10, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(10, strBuilder2.length());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(8, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(8, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(10, strBuilder5.length());
      assertEquals(10, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertNotNull(strBuilder5);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) strBuilder1;
      StrBuilder strBuilder6 = strBuilder5.appendWithSeparators(objectArray0, (String) null);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder1.size());
      assertEquals(20, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(20, strBuilder2.length());
      assertEquals(20, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(8, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(8, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(20, strBuilder5.length());
      assertEquals(20, strBuilder5.size());
      assertEquals(32, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(20, strBuilder6.length());
      assertEquals(20, strBuilder6.size());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertNotNull(strBuilder6);
      assertEquals(1, objectArray0.length);
      
      int int0 = StrBuilder.CAPACITY;
      assertEquals(32, int0);
      
      StrBuilder strBuilder7 = strBuilder0.deleteFirst('t');
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertTrue(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals(32, strBuilder7.capacity());
      assertEquals(20, strBuilder7.size());
      assertEquals(20, strBuilder7.length());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = strBuilder2.append((-927L));
      assertEquals(24, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(24, strBuilder1.size());
      assertEquals(24, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(24, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(24, strBuilder2.size());
      assertEquals(24, strBuilder8.size());
      assertEquals(24, strBuilder8.length());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(32, strBuilder8.capacity());
      assertTrue(strBuilder8.isNotEmpty());
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder2);
      assertNotSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertNotNull(strBuilder8);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '&';
      int int1 = (-1203);
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 32, (-1203));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("xihnv!zR/Sq|>d}jGO");
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.size());
      assertEquals(18, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = 102;
      CharBuffer charBuffer0 = CharBuffer.allocate(102);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.limit());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(charBuffer0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(240, strBuilder0.capacity());
      assertEquals(120, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(120, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(240, strBuilder1.capacity());
      assertEquals(120, strBuilder1.size());
      assertEquals(120, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.limit());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(240, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(120, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(120, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      int int1 = 101;
      StrBuilder strBuilder3 = strBuilder0.appendln(101);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(124, strBuilder0.length());
      assertEquals(240, strBuilder0.capacity());
      assertEquals(124, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(124, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(240, strBuilder3.capacity());
      assertEquals(124, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.setLength(102);
      assertEquals(102, strBuilder0.length());
      assertEquals(102, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(102, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(240, strBuilder3.capacity());
      assertEquals(102, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(240, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(102, strBuilder4.size());
      assertEquals(102, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder1.append(false);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(107, strBuilder0.size());
      assertEquals(240, strBuilder0.capacity());
      assertEquals(107, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(240, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(107, strBuilder1.size());
      assertEquals(107, strBuilder1.length());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(240, strBuilder5.capacity());
      assertEquals(107, strBuilder5.size());
      assertEquals(107, strBuilder5.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertNotNull(strBuilder5);
      
      char char0 = 'n';
      StringBuilder stringBuilder0 = new StringBuilder(strBuilder5);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(107, strBuilder0.size());
      assertEquals(240, strBuilder0.capacity());
      assertEquals(107, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(240, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(107, strBuilder1.size());
      assertEquals(107, strBuilder1.length());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(240, strBuilder5.capacity());
      assertEquals(107, strBuilder5.size());
      assertEquals(107, strBuilder5.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals("xihnv!zR/Sq|>d}jGO\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000false", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-3528), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3528
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-17));
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("y1X/8");
      assertEquals("y1X/8", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("y1X/8", (-736));
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      ArrayDeque<StringWriter> arrayDeque0 = new ArrayDeque<StringWriter>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Iterator<StringWriter> iterator0 = arrayDeque0.descendingIterator();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(iterator0);
      
      ArrayDeque<Integer> arrayDeque1 = new ArrayDeque<Integer>();
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque1.contains((-736)));
      
      Iterator<Integer> iterator1 = arrayDeque1.iterator();
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNotNull(iterator1);
      assertFalse(arrayDeque1.contains((-736)));
      
      StrBuilder strBuilder2 = strBuilder1.appendAll(iterator1);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      assertFalse(arrayDeque1.contains((-736)));
      
      StrBuilder strBuilder3 = strBuilder2.replaceFirst('k', '-');
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      assertFalse(arrayDeque1.contains((-736)));
      
      StrBuilder strBuilder4 = strBuilder3.deleteAll('!');
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertNotNull(strBuilder4);
      assertFalse(arrayDeque1.contains((-736)));
      
      int int0 = strBuilder0.indexOf("y1X/8", (-255));
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertEquals((-1), int0);
      
      boolean boolean0 = strBuilder2.equals(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertTrue(boolean0);
      assertFalse(arrayDeque1.contains((-736)));
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      int int0 = (-17);
      String string0 = "U{^1g#?^TH@=w[";
      StrBuilder strBuilder0 = new StrBuilder("U{^1g#?^TH@=w[");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int1 = (-1429);
      StrBuilder strBuilder1 = new StrBuilder((-1429));
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      char char0 = '\"';
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder1, 0, '\"');
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(46, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(14, strBuilder2.length());
      assertEquals(14, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.append("");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertEquals(46, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(14, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(14, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      StringBuilder stringBuilder0 = new StringBuilder("U{^1g#?^TH@=w[");
      assertEquals("U{^1g#?^TH@=w[", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(0);
      assertEquals("U{^1g#?^TH@=w[0", stringBuilder0.toString());
      assertEquals("U{^1g#?^TH@=w[0", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      int int2 = 1752;
      // Undeclared exception!
      try { 
        stringBuilder1.delete((-17), 1752);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -17
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("gPCApRV'^FF");
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('`', '8');
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(43, strBuilder1.capacity());
      assertEquals(11, strBuilder1.size());
      assertEquals(11, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder("CjHv[Jt!xK*x ");
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(46, strBuilder2.capacity());
      assertEquals(14, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(14, strBuilder2.length());
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) strBuilder_StrBuilderReader0;
      objectArray0[1] = (Object) "CjHv[Jt!xK*x ";
      objectArray0[2] = (Object) strBuilder2;
      objectArray0[3] = (Object) strBuilder1;
      objectArray0[4] = (Object) "Invalid offset: ";
      StrBuilder strBuilder3 = strBuilder0.appendln("Invalid offset: ", objectArray0);
      assertEquals(28, strBuilder0.length());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(28, strBuilder0.size());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(28, strBuilder3.size());
      assertEquals(28, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(43, strBuilder3.capacity());
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      assertEquals(5, objectArray0.length);
      
      StrBuilder strBuilder4 = strBuilder2.appendPadding(1, '}');
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(15, strBuilder2.size());
      assertEquals(46, strBuilder2.capacity());
      assertEquals(15, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(46, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(15, strBuilder4.size());
      assertEquals(15, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder1.appendSeparator('9', 1505);
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(29, strBuilder0.size());
      assertEquals(29, strBuilder0.length());
      assertEquals(43, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(29, strBuilder1.size());
      assertEquals(29, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(43, strBuilder5.capacity());
      assertEquals(29, strBuilder5.length());
      assertEquals(29, strBuilder5.size());
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertNotNull(strBuilder5);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = '`';
      charArray0[2] = 'G';
      charArray0[3] = '8';
      charArray0[4] = '}';
      // Undeclared exception!
      try { 
        strBuilder2.insert((-1), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.reset();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      long long0 = strBuilder_StrBuilderReader0.skip((-629L));
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(0L, long0);
      
      long long1 = strBuilder_StrBuilderReader0.skip((-1908L));
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      
      String string0 = strBuilder0.rightString((-521));
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      TreeSet<StringBuffer> treeSet0 = new TreeSet<StringBuffer>();
      assertNotNull(treeSet0);
      
      StrBuilder strBuilder0 = new StrBuilder((-1857));
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendAll((Iterable<?>) treeSet0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt((-1857), '.');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1857
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(102);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(102, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(charBuffer0);
      assertEquals(102, strBuilder0.length());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(102, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(102, strBuilder1.length());
      assertEquals(204, strBuilder1.capacity());
      assertEquals(102, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(102, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(102, strBuilder2.length());
      assertEquals(102, strBuilder2.size());
      assertEquals(204, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      strBuilder0.size = 0;
      assertEquals(204, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      CharBuffer charBuffer1 = CharBuffer.allocate(16);
      assertEquals(16, charBuffer1.capacity());
      assertEquals(16, charBuffer1.remaining());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(16, charBuffer1.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(16, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      
      strBuilder0.size = 0;
      assertEquals(204, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(204, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder3 = strBuilder0.ensureCapacity(102);
      assertEquals(204, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(204, strBuilder3.capacity());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      String string1 = strBuilder3.substring(0, 0);
      assertEquals(204, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(204, strBuilder3.capacity());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = '!';
      charArray0[2] = 'w';
      charArray0[3] = '!';
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder3.new StrBuilderTokenizer();
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(204, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(204, strBuilder3.capacity());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isEmpty());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder4 = new StrBuilder((-4821));
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      
      // Undeclared exception!
      try { 
        strBuilder2.setCharAt((-4821), '7');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -4821
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln("The Array must not be null");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(27, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(27, strBuilder0.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.size());
      assertEquals(27, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.contains("");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(27, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(27, strBuilder0.length());
      assertSame(strBuilder0, strBuilder1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.replaceFirst('b', '!');
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder2.length());
      assertEquals(1, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      boolean boolean0 = strBuilder1.endsWith("e<><[,");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1975));
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(108, 'i');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 108
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(32);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'R';
      charArray0[1] = 'E';
      charArray0[2] = 'n';
      charArray0[3] = 'r';
      charArray0[4] = 'h';
      StringBuffer stringBuffer1 = stringBuffer0.append(charArray0);
      assertEquals(5, stringBuffer0.length());
      assertEquals("REnrh", stringBuffer0.toString());
      assertEquals(5, stringBuffer1.length());
      assertEquals("REnrh", stringBuffer1.toString());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertArrayEquals(new char[] {'R', 'E', 'n', 'r', 'h'}, charArray0);
      assertNotNull(stringBuffer1);
      assertEquals(5, charArray0.length);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 4, (-696));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(32);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'n';
      charArray0[3] = 'r';
      charArray0[4] = 'h';
      StringBuffer stringBuffer1 = stringBuffer0.append(charArray0);
      assertEquals("RRnrh", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
      assertEquals(5, stringBuffer1.length());
      assertEquals("RRnrh", stringBuffer1.toString());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertArrayEquals(new char[] {'R', 'R', 'n', 'r', 'h'}, charArray0);
      assertNotNull(stringBuffer1);
      assertEquals(5, charArray0.length);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 4, (-696));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("Index: ");
      assertEquals("Index: ", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) stringBuilder0;
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "^");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(1, objectArray0.length);
      
      StrBuilder strBuilder2 = strBuilder0.reverse();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(7, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(7, strBuilder2.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.replaceAll((String) null, (String) null);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      strBuilder_StrBuilderReader0.reset();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      int int0 = StrBuilder.CAPACITY;
      assertEquals(32, int0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((StringBuilder) null, 324, 2002);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.trim();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      String string0 = strBuilder0.substring(0, 101);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder3 = new StrBuilder();
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      String string1 = strBuilder3.substring(0, 0);
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertEquals("", string1);
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = strBuilder_StrBuilderReader0.read();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int1);
      assertTrue(strBuilder0.equals((Object)strBuilder3));
      assertFalse(int1 == int0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader1 = strBuilder0.new StrBuilderReader();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader1.markSupported());
      assertFalse(strBuilder_StrBuilderReader1.ready());
      assertTrue(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder_StrBuilderReader1.equals((Object)strBuilder_StrBuilderReader0));
      assertNotNull(strBuilder_StrBuilderReader1);
      
      char[] charArray0 = new char[0];
      int int2 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder_StrBuilderReader0, strBuilder_StrBuilderReader1);
      assertEquals(0, int2);
      assertTrue(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder_StrBuilderReader0.equals((Object)strBuilder_StrBuilderReader1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      String string2 = strBuilder1.getNewLineText();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertTrue(strBuilder0.equals((Object)strBuilder3));
      assertTrue(strBuilder1.equals((Object)strBuilder3));
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) null);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.minimizeCapacity();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.setLength(0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      int int0 = 63;
      StrBuilder strBuilder4 = strBuilder3.appendSeparator("I2R]N: ", 63);
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(14, strBuilder0.capacity());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(14, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(7, strBuilder3.size());
      assertEquals(7, strBuilder3.length());
      assertEquals(7, strBuilder4.size());
      assertEquals(7, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(14, strBuilder4.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder3.append(0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(14, strBuilder0.capacity());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(14, strBuilder3.capacity());
      assertEquals(8, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(8, strBuilder3.length());
      assertEquals(8, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(8, strBuilder5.size());
      assertEquals(14, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder5.trim();
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(14, strBuilder0.capacity());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(14, strBuilder3.capacity());
      assertEquals(8, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(8, strBuilder3.length());
      assertEquals(8, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(8, strBuilder5.size());
      assertEquals(14, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(8, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(14, strBuilder6.capacity());
      assertEquals(8, strBuilder6.size());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertNotNull(strBuilder6);
      
      TreeSet<StringBuffer> treeSet0 = new TreeSet<StringBuffer>();
      assertNotNull(treeSet0);
      
      StrBuilder strBuilder7 = strBuilder5.appendAll((Iterable<?>) treeSet0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(14, strBuilder0.capacity());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(14, strBuilder3.capacity());
      assertEquals(8, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(8, strBuilder3.length());
      assertEquals(8, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(8, strBuilder5.size());
      assertEquals(14, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(14, strBuilder7.capacity());
      assertEquals(8, strBuilder7.size());
      assertNull(strBuilder7.getNullText());
      assertEquals(8, strBuilder7.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder7);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder5);
      assertNotNull(strBuilder7);
      
      char char0 = '^';
      int int1 = strBuilder2.indexOf("ho(UcdwwL T 5V\"{X");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(14, strBuilder0.capacity());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(14, strBuilder1.capacity());
      assertEquals(8, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(8, strBuilder2.length());
      assertEquals(8, strBuilder2.size());
      assertEquals(14, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      StrBuilder strBuilder8 = strBuilder3.append(0.0F);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(11, strBuilder0.size());
      assertEquals(14, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(11, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(14, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(11, strBuilder3.size());
      assertEquals(14, strBuilder8.capacity());
      assertTrue(strBuilder8.isNotEmpty());
      assertEquals(11, strBuilder8.size());
      assertNull(strBuilder8.getNewLineText());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(11, strBuilder8.length());
      assertNull(strBuilder8.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder2);
      assertNotNull(strBuilder8);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert((-340), '^');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -340
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.replaceFirst((String) null, (String) null);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.append(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder0.appendSeparator('r', 'r');
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder4.size());
      assertEquals(1, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertNotNull(strBuilder4);
      
      String string0 = strBuilder2.rightString(2);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals("r", string0);
      assertNotNull(string0);
      
      String string1 = strBuilder1.build();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("r", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StrBuilder strBuilder5 = new StrBuilder("'w>Z(T");
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(6, strBuilder5.length());
      assertEquals(6, strBuilder5.size());
      assertEquals(38, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder5.minimizeCapacity();
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(6, strBuilder5.length());
      assertEquals(6, strBuilder5.size());
      assertEquals(6, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(6, strBuilder6.size());
      assertEquals(6, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(6, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder3);
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertNotNull(strBuilder6);
      
      boolean boolean0 = strBuilder2.equalsIgnoreCase(strBuilder5);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(6, strBuilder5.length());
      assertEquals(6, strBuilder5.size());
      assertEquals(6, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder2);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      
      StrBuilder strBuilder7 = strBuilder5.minimizeCapacity();
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(6, strBuilder5.length());
      assertEquals(6, strBuilder5.size());
      assertEquals(6, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(6, strBuilder7.size());
      assertEquals(6, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals(6, strBuilder7.capacity());
      assertTrue(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder7);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder0);
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertNotNull(strBuilder7);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) null);
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      strBuilder1.size = 101;
      assertEquals(101, strBuilder0.size());
      assertEquals(101, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(101, strBuilder1.size());
      assertEquals(101, strBuilder1.length());
      
      StrBuilder strBuilder2 = strBuilder1.minimizeCapacity();
      assertEquals(101, strBuilder0.size());
      assertEquals(101, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(101, strBuilder1.size());
      assertEquals(101, strBuilder1.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(101, strBuilder2.length());
      assertEquals(101, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.setLength(0);
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.appendSeparator("I2R]N: ", 63);
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(7, strBuilder3.size());
      assertEquals(7, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(7, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(7, strBuilder4.length());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder4.appendln("I2R]N: ");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(15, strBuilder3.size());
      assertEquals(15, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(15, strBuilder4.size());
      assertEquals(15, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(15, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(15, strBuilder5.size());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder3.append(0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(16, strBuilder3.length());
      assertEquals(16, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(16, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertEquals(16, strBuilder6.size());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertNotNull(strBuilder6);
      
      TreeSet<StringBuffer> treeSet0 = new TreeSet<StringBuffer>();
      assertNotNull(treeSet0);
      
      StrBuilder strBuilder7 = strBuilder6.appendAll((Iterable<?>) treeSet0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(16, strBuilder3.length());
      assertEquals(16, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(16, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertEquals(16, strBuilder6.size());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(32, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(16, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(16, strBuilder7.size());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder3);
      assertNotNull(strBuilder7);
      
      char char0 = '^';
      // Undeclared exception!
      try { 
        strBuilder0.insert((-340), '^');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -340
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('b', '!');
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = "2!G9Zs72zK'rOm^^)D";
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals((-1), int0);
      
      int int1 = 31;
      strBuilder_StrBuilderReader0.mark(31);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      String string1 = null;
      int int2 = strBuilder0.lastIndexOf((String) null, (-1));
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string2 = strBuilder0.toString();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      Writer writer0 = strBuilder0.asWriter();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(writer0);
      
      StrBuilder strBuilder1 = strBuilder0.append('H');
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendln("", 0, 0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      String string0 = strBuilder2.leftString(0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder3 = strBuilder2.appendFixedWidthPadLeft(4, 21, 'H');
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(23, strBuilder0.size());
      assertEquals(23, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(23, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(23, strBuilder1.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(23, strBuilder2.length());
      assertEquals(23, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(23, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(23, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.remaining());
      assertEquals("H", charBuffer0.toString());
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = strBuilder2.getChars((char[]) null);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(23, strBuilder0.size());
      assertEquals(23, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(23, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(23, strBuilder1.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(23, strBuilder2.length());
      assertEquals(23, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(23, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      assertEquals(2, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("i|QS");
      assertEquals("i|QS", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = strBuilder0.getChars((char[]) null);
      assertEquals(2, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(102);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(102, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(charBuffer0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(102, strBuilder0.length());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(102, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(102, strBuilder1.length());
      assertEquals(204, strBuilder1.capacity());
      assertEquals(102, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(102, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(204, strBuilder2.capacity());
      assertEquals(102, strBuilder2.size());
      assertEquals(102, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(102, strBuilder0.length());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(102, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder3 = strBuilder0.ensureCapacity(102);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(102, strBuilder0.length());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(102, strBuilder0.size());
      assertEquals(204, strBuilder3.capacity());
      assertEquals(102, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(102, strBuilder3.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      String string0 = strBuilder3.substring(0, 102);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(102, strBuilder0.length());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(102, strBuilder0.size());
      assertEquals(204, strBuilder3.capacity());
      assertEquals(102, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(102, strBuilder3.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = '!';
      charArray0[2] = 'w';
      charArray0[3] = '!';
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder3.new StrBuilderTokenizer();
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(102, strBuilder0.length());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(102, strBuilder0.size());
      assertEquals(204, strBuilder3.capacity());
      assertEquals(102, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(102, strBuilder3.length());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone();
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(102, strBuilder0.length());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(102, strBuilder0.size());
      assertEquals(204, strBuilder3.capacity());
      assertEquals(102, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(102, strBuilder3.length());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      
      StrBuilder strBuilder4 = strBuilder2.append("", (Object[]) null);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(102, strBuilder0.length());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(102, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(102, strBuilder1.length());
      assertEquals(204, strBuilder1.capacity());
      assertEquals(102, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(102, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(204, strBuilder2.capacity());
      assertEquals(102, strBuilder2.size());
      assertEquals(102, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(102, strBuilder4.size());
      assertEquals(102, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(204, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertNotNull(strBuilder4);
      
      // Undeclared exception!
      try { 
        strBuilder3.append("", 0, 102);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '{';
      charArray0[1] = 'B';
      charArray0[2] = 'R';
      charArray0[3] = '6';
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      charArray0[4] = 'n';
      charArray0[5] = '?';
      int int0 = (-1416);
      int int1 = 65;
      StrBuilder strBuilder2 = strBuilder0.deleteFirst('Y');
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      // Undeclared exception!
      try { 
        strBuilder1.append(strBuilder0, 39, (-1416));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.reset();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      char[] charArray0 = new char[2];
      charArray0[1] = '9';
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((-1));
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.setLength(23);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(23, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(23, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(23, strBuilder1.length());
      assertEquals(23, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(23, strBuilder2.size());
      assertEquals(23, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.append(false);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(28, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(28, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(28, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(28, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder3.getNullText());
      assertEquals(28, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(28, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder2.appendSeparator("Aborting to protect against StackOverflowError - output of one loop is the input of another", 23);
      assertEquals(238, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(119, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(119, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(119, strBuilder1.length());
      assertEquals(238, strBuilder1.capacity());
      assertEquals(119, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(119, strBuilder2.size());
      assertEquals(119, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(238, strBuilder2.capacity());
      assertEquals(119, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(119, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(238, strBuilder4.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder2.replaceFirst('6', 'a');
      assertEquals(238, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(119, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(119, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(119, strBuilder1.length());
      assertEquals(238, strBuilder1.capacity());
      assertEquals(119, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(119, strBuilder2.size());
      assertEquals(119, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(238, strBuilder2.capacity());
      assertEquals(238, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(119, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(119, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertNotNull(strBuilder5);
      
      int int1 = strBuilder1.indexOf("", (-2523));
      assertEquals(238, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(119, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(119, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(119, strBuilder1.length());
      assertEquals(238, strBuilder1.capacity());
      assertEquals(119, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = strBuilder1.equals(strBuilder2);
      assertEquals(238, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(119, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(119, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(119, strBuilder1.length());
      assertEquals(238, strBuilder1.capacity());
      assertEquals(119, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(119, strBuilder2.size());
      assertEquals(119, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(238, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("xihnv!zR/Sq|>d}jGO");
      assertEquals(18, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertEquals(18, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(18, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(102);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(charBuffer0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(120, strBuilder0.size());
      assertEquals(120, strBuilder0.length());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(120, strBuilder1.size());
      assertEquals(120, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(240, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.limit());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(240, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(120, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(120, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.appendln(101);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(124, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(124, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(124, strBuilder3.length());
      assertEquals(240, strBuilder3.capacity());
      assertEquals(124, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.setLength(102);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(240, strBuilder0.capacity());
      assertEquals(102, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(102, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(240, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(102, strBuilder3.length());
      assertEquals(102, strBuilder3.size());
      assertEquals(240, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(102, strBuilder4.length());
      assertEquals(102, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder1.append(false);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(240, strBuilder0.capacity());
      assertEquals(107, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(107, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(107, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(107, strBuilder1.size());
      assertEquals(240, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(240, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(107, strBuilder5.size());
      assertEquals(107, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder4.appendSeparator("xihnv!zR/Sq|>d}jGO", 1641);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(125, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(125, strBuilder0.size());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(125, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(240, strBuilder3.capacity());
      assertEquals(125, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(240, strBuilder4.capacity());
      assertEquals(125, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(125, strBuilder4.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(125, strBuilder6.size());
      assertEquals(240, strBuilder6.capacity());
      assertEquals(125, strBuilder6.length());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertNotNull(strBuilder6);
      
      ArrayDeque<StringWriter> arrayDeque0 = new ArrayDeque<StringWriter>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Iterator<StringWriter> iterator0 = arrayDeque0.descendingIterator();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      StrBuilder strBuilder7 = strBuilder6.appendAll(iterator0);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(125, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(125, strBuilder0.size());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(125, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(240, strBuilder3.capacity());
      assertEquals(125, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(240, strBuilder4.capacity());
      assertEquals(125, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(125, strBuilder4.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(125, strBuilder6.size());
      assertEquals(240, strBuilder6.capacity());
      assertEquals(125, strBuilder6.length());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(125, strBuilder7.size());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(125, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertEquals(240, strBuilder7.capacity());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder4);
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = strBuilder0.replaceFirst('t', 't');
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(125, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(125, strBuilder0.size());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(240, strBuilder8.capacity());
      assertFalse(strBuilder8.isEmpty());
      assertTrue(strBuilder8.isNotEmpty());
      assertEquals(125, strBuilder8.size());
      assertEquals(125, strBuilder8.length());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder2);
      assertNotNull(strBuilder8);
      
      StrBuilder strBuilder9 = strBuilder2.deleteAll('t');
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(125, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(125, strBuilder0.size());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(125, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(240, strBuilder1.capacity());
      assertEquals(125, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.limit());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(240, strBuilder2.capacity());
      assertEquals(125, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(125, strBuilder2.size());
      assertEquals(125, strBuilder9.size());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(240, strBuilder9.capacity());
      assertTrue(strBuilder9.isNotEmpty());
      assertEquals(125, strBuilder9.length());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder9.getNullText());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder0);
      assertNotNull(strBuilder9);
      
      int int0 = strBuilder0.indexOf("xihnv!zR/Sq|>d}jGO", (-736));
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(125, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(125, strBuilder0.size());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder8);
      assertEquals(0, int0);
      
      boolean boolean0 = strBuilder7.equals(strBuilder9);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(125, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(125, strBuilder0.size());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(125, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(240, strBuilder1.capacity());
      assertEquals(125, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.limit());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(240, strBuilder2.capacity());
      assertEquals(125, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(125, strBuilder2.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(125, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(240, strBuilder3.capacity());
      assertEquals(125, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(240, strBuilder4.capacity());
      assertEquals(125, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(125, strBuilder4.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(125, strBuilder6.size());
      assertEquals(240, strBuilder6.capacity());
      assertEquals(125, strBuilder6.length());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(125, strBuilder7.size());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(125, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertEquals(240, strBuilder7.capacity());
      assertEquals(125, strBuilder9.size());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(240, strBuilder9.capacity());
      assertTrue(strBuilder9.isNotEmpty());
      assertEquals(125, strBuilder9.length());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder9.getNullText());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder9);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder9);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder8);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder8);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder9);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("");
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      Writer writer0 = strBuilder0.asWriter();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(writer0);
      
      StrBuilder strBuilder1 = strBuilder0.append('H');
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0, 1, 0);
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertNotNull(strBuilder2);
      assertEquals(1, charArray0.length);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("H", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      
      HashSet<CharBuffer> hashSet0 = new HashSet<CharBuffer>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(charBuffer0));
      
      StrBuilder strBuilder3 = strBuilder1.appendAll((Iterable<?>) hashSet0);
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(2, strBuilder3.size());
      assertEquals(2, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      assertFalse(hashSet0.contains(charBuffer0));
      
      int int1 = strBuilder2.readFrom(charBuffer0);
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3, strBuilder2.length());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertEquals(1, charArray0.length);
      
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(1, charBuffer1.capacity());
      assertEquals("H", charBuffer1.toString());
      assertEquals(1, charBuffer1.limit());
      assertEquals(1, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertNotNull(charBuffer1);
      assertEquals(1, charArray0.length);
      
      StrBuilder strBuilder4 = strBuilder0.append((CharBuffer) null, 892, 0);
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(3, strBuilder4.size());
      assertEquals(3, strBuilder4.length());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder2.appendln("}");
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(5, strBuilder5.size());
      assertEquals(5, strBuilder5.length());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertNotNull(strBuilder5);
      assertEquals(1, charArray0.length);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        stringBuffer0.insert(6, (-2751.8324047));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 6
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2048));
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[12];
      charArray0[0] = '}';
      charArray0[1] = 'v';
      charArray0[2] = '6';
      charArray0[3] = 'M';
      charArray0[4] = ',';
      charArray0[5] = '@';
      charArray0[6] = 'Z';
      charArray0[7] = '*';
      charArray0[8] = 'J';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("}v6M,@Z*J\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(12, charBuffer0.capacity());
      assertEquals(12, charBuffer0.length());
      assertEquals(12, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(12, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      assertEquals(12, charArray0.length);
      
      StrBuilder strBuilder1 = new StrBuilder("");
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer1 = charBuffer0.append(',');
      assertEquals("v6M,@Z*J\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(11, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(12, charBuffer0.capacity());
      assertEquals(12, charBuffer0.limit());
      assertEquals(1, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(11, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(12, charBuffer1.limit());
      assertTrue(charBuffer1.hasArray());
      assertEquals(1, charBuffer1.position());
      assertEquals(11, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("v6M,@Z*J\u0000\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertEquals(12, charBuffer1.capacity());
      assertEquals(11, charBuffer1.length());
      assertTrue(charBuffer1.hasRemaining());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      assertEquals(12, charArray0.length);
      
      StrBuilder strBuilder2 = strBuilder1.appendSeparator("Arguments cannot both be null");
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.append(0.0);
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3, strBuilder3.size());
      assertEquals(3, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      
      // Undeclared exception!
      try { 
        strBuilder1.append(charBuffer0, (-801), (-2048));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("@p}<[zZ+}\"");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[4];
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(42, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(4, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(4, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(4, charArray0.length);
      
      // Undeclared exception!
      try { 
        strBuilder1.append(charBuffer0, (-1485), 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(1);
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.setLength(1);
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.append(false);
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(6, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(6, strBuilder3.size());
      assertEquals(6, strBuilder3.length());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.appendSeparator("V", 1);
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(7, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder0.replaceFirst('L', 'L');
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(7, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(7, strBuilder5.length());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder5.appendSeparator("V", 3);
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(8, strBuilder5.length());
      assertEquals(8, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(8, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(8, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = new StrBuilder(1);
      assertEquals(0, strBuilder7.size());
      assertEquals(0, strBuilder7.length());
      assertEquals(1, strBuilder7.capacity());
      assertFalse(strBuilder7.isNotEmpty());
      assertTrue(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertNotNull(strBuilder7);
      
      boolean boolean0 = strBuilder7.contains('~');
      assertEquals(0, strBuilder7.size());
      assertEquals(0, strBuilder7.length());
      assertEquals(1, strBuilder7.capacity());
      assertFalse(strBuilder7.isNotEmpty());
      assertTrue(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder0);
      assertFalse(boolean0);
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      
      int int0 = strBuilder3.indexOf('L', 3);
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(8, strBuilder1.size());
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(8, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(8, strBuilder3.length());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder7);
      assertEquals((-1), int0);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder3.equals((Object)strBuilder7));
      
      StrBuilder strBuilder8 = strBuilder0.appendln(1.0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(12, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder8.length());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(32, strBuilder8.capacity());
      assertEquals(12, strBuilder8.size());
      assertTrue(strBuilder8.isNotEmpty());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNullText());
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder6);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertNotNull(strBuilder8);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      char char0 = '3';
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('3', 423);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(1, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder("org.apache.common.t}\"");
      assertEquals(21, strBuilder2.size());
      assertEquals(21, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(53, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) strBuilder2;
      objectArray0[1] = (Object) "org.apache.common.t}\"";
      StrBuilder strBuilder3 = strBuilder2.appendln("org.apache.common.t}\"", objectArray0);
      assertEquals(43, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(53, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(43, strBuilder2.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(53, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(43, strBuilder3.size());
      assertEquals(43, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      assertEquals(2, objectArray0.length);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        strBuilder2.substring((-434), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -434
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("2!G9Zs72zK'rOm^^)D");
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      StringBuilder stringBuilder0 = new StringBuilder("m* %<=^$");
      assertEquals("m* %<=^$", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("m* %<=^$2!G9Zs72zK'rOm^^)D", stringBuilder0.toString());
      assertEquals("m* %<=^$2!G9Zs72zK'rOm^^)D", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder1.append((-1920));
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("m* %<=^$2!G9Zs72zK'rOm^^)D-1920", stringBuilder0.toString());
      assertEquals("m* %<=^$2!G9Zs72zK'rOm^^)D-1920", stringBuilder1.toString());
      assertEquals("m* %<=^$2!G9Zs72zK'rOm^^)D-1920", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotNull(stringBuilder2);
      
      // Undeclared exception!
      strBuilder0.readFrom(strBuilder_StrBuilderReader0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("...", 482);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals((-1), int0);
      
      StringReader stringReader0 = new StringReader("...");
      assertNotNull(stringReader0);
      
      int int1 = strBuilder0.readFrom(stringReader0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      IntStream intStream0 = strBuilder0.codePoints();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(intStream0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = 'V';
      charArray0[2] = '}';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.remaining());
      assertEquals("fV}\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.length());
      assertEquals(4, charBuffer0.limit());
      assertArrayEquals(new char[] {'f', 'V', '}', '\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(4, charArray0.length);
      
      int int0 = strBuilder0.readFrom(charBuffer0);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(4, charBuffer0.limit());
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'f', 'V', '}', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      charArray0[3] = 'I';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      assertEquals(4, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(4, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertEquals(4, charBuffer1.length());
      assertEquals("fV}I", charBuffer1.toString());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(4, charBuffer1.remaining());
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertArrayEquals(new char[] {'f', 'V', '}', 'I'}, charArray0);
      assertNotNull(charBuffer1);
      assertEquals(4, charArray0.length);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(charBuffer1, 892, Integer.MAX_VALUE);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.readFrom((Readable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("grs9)2+uI");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder("grs9)2+uI");
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(9, strBuilder2.size());
      assertEquals(9, strBuilder2.length());
      assertEquals(41, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(9, strBuilder2.size());
      assertEquals(9, strBuilder2.length());
      assertEquals(41, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertTrue(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      
      StrBuilder strBuilder3 = new StrBuilder("p");
      assertEquals(1, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(33, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      boolean boolean1 = strBuilder3.equals((Object) null);
      assertEquals(1, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(33, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertFalse(boolean1);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(boolean1 == boolean0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(2276);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2276, charBuffer0.remaining());
      assertEquals(2276, charBuffer0.capacity());
      assertEquals(2276, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2276, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      int int0 = strBuilder0.readFrom(charBuffer0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2285, strBuilder0.length());
      assertEquals(2285, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4570, strBuilder0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(2276, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(2276, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2276, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertEquals(2276, int0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      
      StrBuilder strBuilder4 = new StrBuilder(2276);
      assertEquals(2276, strBuilder4.capacity());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isNotEmpty());
      assertTrue(strBuilder4.isEmpty());
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      
      // Undeclared exception!
      try { 
        strBuilder4.appendln(strBuilder3, 2329, 2276);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2529);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2529, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln('X');
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2529, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2529, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = '-';
      charArray0[2] = 'M';
      // Undeclared exception!
      try { 
        strBuilder0.getChars(2529, 2529, charArray0, 943);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2529
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      int int0 = 108;
      StrBuilder strBuilder0 = new StrBuilder(108);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(108, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.minimizeCapacity();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.append(1.0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(3, strBuilder3.size());
      assertEquals(6, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(3, strBuilder3.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder1.new StrBuilderWriter();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.size());
      assertEquals(6, strBuilder1.capacity());
      assertEquals(3, strBuilder1.length());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.write(108);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder1.length());
      assertEquals(6, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      // Undeclared exception!
      try { 
        strBuilder1.getChars(108, 108, charArray0, 98);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 108
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendNewLine();
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.length());
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.clear();
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = new StrBuilder();
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertTrue(strBuilder4.isEmpty());
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertNotNull(strBuilder4);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln(strBuilder4, 0, (-2055));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1975));
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll('.', '.');
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder1.substring((-1975), (-1975));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1975
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      int int0 = 49;
      StrBuilder strBuilder0 = new StrBuilder(49);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(49, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = "mFP'UHwfIM&R";
      StrBuilder strBuilder1 = strBuilder0.setNullText("mFP'UHwfIM&R");
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals("mFP'UHwfIM&R", strBuilder0.getNullText());
      assertEquals(49, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals("mFP'UHwfIM&R", strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(49, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator("end < start", "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
      assertEquals(60, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("mFP'UHwfIM&R", strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(120, strBuilder0.capacity());
      assertEquals(60, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("mFP'UHwfIM&R", strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(60, strBuilder2.length());
      assertEquals(60, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(120, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.appendln(49);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(63, strBuilder0.size());
      assertEquals("mFP'UHwfIM&R", strBuilder0.getNullText());
      assertEquals(63, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(120, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(63, strBuilder3.length());
      assertEquals(63, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(120, strBuilder3.capacity());
      assertEquals("mFP'UHwfIM&R", strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.replaceAll('.', '.');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(63, strBuilder0.size());
      assertEquals("mFP'UHwfIM&R", strBuilder0.getNullText());
      assertEquals(63, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(120, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("mFP'UHwfIM&R", strBuilder1.getNullText());
      assertEquals(63, strBuilder1.size());
      assertEquals(63, strBuilder1.length());
      assertEquals(120, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(63, strBuilder4.size());
      assertEquals("mFP'UHwfIM&R", strBuilder4.getNullText());
      assertEquals(120, strBuilder4.capacity());
      assertEquals(63, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertNotNull(strBuilder4);
      
      int int1 = 34;
      StrBuilder strBuilder5 = new StrBuilder(34);
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.size());
      assertEquals(34, strBuilder5.capacity());
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isEmpty());
      assertFalse(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertNotNull(strBuilder5);
      
      // Undeclared exception!
      try { 
        strBuilder5.substring(1386, 49);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.reset();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      char[] charArray0 = new char[2];
      charArray0[1] = '9';
      int int0 = strBuilder_StrBuilderReader0.read();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals((-1), int0);
      
      int int1 = StrBuilder.CAPACITY;
      assertEquals(32, int1);
      assertFalse(int1 == int0);
      
      String string0 = strBuilder0.substring(0, 101);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray1 = strBuilder0.toCharArray();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      StrBuilder strBuilder1 = strBuilder0.appendln("]$MP+E=Am4[!OCBi");
      assertEquals(17, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(17, strBuilder1.size());
      assertEquals(17, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.clear();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, (-411), 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(66, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 66
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      char[] charArray0 = new char[11];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(11, charBuffer0.remaining());
      assertEquals(11, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(11, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(11, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      assertEquals(11, charArray0.length);
      
      StrBuilder strBuilder0 = new StrBuilder(";0");
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendAll((Object[]) null);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.replaceFirst((String) null, (String) null);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder0.appendSeparator('r', '[');
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(1, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertNotNull(strBuilder4);
      
      String string0 = strBuilder3.rightString(2);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertEquals("[", string0);
      assertNotNull(string0);
      
      String string1 = strBuilder1.build();
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("[", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StrBuilder strBuilder5 = strBuilder1.appendln("'w>Z(T", 2, 2);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(4, strBuilder5.size());
      assertEquals(4, strBuilder5.length());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder2.appendFixedWidthPadLeft(101, (-30), '`');
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(4, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(4, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(4, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(4, strBuilder6.size());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertNotNull(strBuilder6);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.length());
      assertEquals("[rr", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertArrayEquals(new char[] {'[', 'r', 'r'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(3, charArray0.length);
      
      int int0 = 1697;
      CharBuffer charBuffer1 = CharBuffer.allocate(1697);
      assertEquals(1697, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertEquals(1697, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(1697, charBuffer1.length());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1697, charBuffer1.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      
      // Undeclared exception!
      try { 
        strBuilder1.append(charBuffer1, Integer.MAX_VALUE, 1430);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("bFyN(o#(ye");
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("bFyN(o#(ye");
      assertEquals(42, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(10, strBuilder1.length());
      assertEquals(10, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendSeparator("bFyN(o#(ye", 34);
      assertEquals(20, strBuilder1.length());
      assertEquals(42, strBuilder1.capacity());
      assertEquals(20, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(42, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(20, strBuilder2.length());
      assertEquals(20, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendln(false);
      assertEquals(42, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(26, strBuilder1.length());
      assertEquals(26, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(26, strBuilder2.length());
      assertEquals(26, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(42, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(26, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(26, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(42, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      
      int int0 = strBuilder3.lastIndexOf("bFyN(o#(ye");
      assertEquals(42, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(26, strBuilder1.length());
      assertEquals(26, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(26, strBuilder2.length());
      assertEquals(26, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(42, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(26, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(26, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(42, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertEquals(10, int0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      
      StrBuilder strBuilder4 = strBuilder0.append((CharSequence) strBuilder1, 10, 10);
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(42, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(26, strBuilder1.length());
      assertEquals(26, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(20, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(20, strBuilder4.size());
      assertEquals(42, strBuilder4.capacity());
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotNull(strBuilder4);
      
      StringBuffer stringBuffer0 = strBuilder3.toStringBuffer();
      assertEquals(42, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(26, strBuilder1.length());
      assertEquals(26, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(26, strBuilder2.length());
      assertEquals(26, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(42, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(26, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(26, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(42, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(26, stringBuffer0.length());
      assertEquals("bFyN(o#(yebFyN(o#(yefalse\n", stringBuffer0.toString());
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(49);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(49, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.equals((Object) "mFP'UHwfIM&R");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(49, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(boolean0);
      
      char[] charArray0 = new char[12];
      charArray0[0] = '}';
      charArray0[1] = 'v';
      charArray0[2] = '6';
      charArray0[3] = 'M';
      charArray0[4] = ',';
      charArray0[5] = '@';
      charArray0[6] = 'Z';
      charArray0[7] = '*';
      charArray0[8] = 'J';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals("}v6M,@Z*J\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(12, charBuffer0.capacity());
      assertEquals(12, charBuffer0.length());
      assertEquals(12, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(12, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      assertEquals(12, charArray0.length);
      
      StrBuilder strBuilder1 = new StrBuilder("");
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer1 = charBuffer0.append(',');
      assertEquals(11, charBuffer0.remaining());
      assertEquals(1, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(11, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(12, charBuffer0.capacity());
      assertEquals(12, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("v6M,@Z*J\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals("v6M,@Z*J\u0000\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertEquals(12, charBuffer1.capacity());
      assertEquals(11, charBuffer1.length());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(12, charBuffer1.limit());
      assertTrue(charBuffer1.hasArray());
      assertEquals(1, charBuffer1.position());
      assertEquals(11, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      assertEquals(12, charArray0.length);
      
      StrBuilder strBuilder2 = strBuilder1.appendSeparator("Arguments cannot both be null");
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.append(0.0);
      assertEquals(3, strBuilder3.length());
      assertEquals(3, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      
      // Undeclared exception!
      try { 
        strBuilder1.append(charBuffer0, 3, 49);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(696);
      assertEquals(696, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("", "R_<EU}MHZR#JUL1^.");
      assertEquals(696, strBuilder0.capacity());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(696, strBuilder1.capacity());
      assertEquals(17, strBuilder1.size());
      assertEquals(17, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char[] charArray0 = strBuilder1.toCharArray();
      assertEquals(696, strBuilder0.capacity());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(696, strBuilder1.capacity());
      assertEquals(17, strBuilder1.size());
      assertEquals(17, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(charArray0);
      assertEquals(17, charArray0.length);
      
      StrBuilder strBuilder2 = strBuilder0.setNullText("Comparator should not be null.");
      assertEquals(696, strBuilder0.capacity());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("Comparator should not be null.", strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(17, strBuilder2.size());
      assertEquals(696, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals("Comparator should not be null.", strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.appendSeparator("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer", (String) null);
      assertEquals(696, strBuilder0.capacity());
      assertEquals(77, strBuilder0.size());
      assertEquals(77, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("Comparator should not be null.", strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(696, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(77, strBuilder1.size());
      assertEquals(77, strBuilder1.length());
      assertEquals("Comparator should not be null.", strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(77, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(77, strBuilder3.size());
      assertEquals("Comparator should not be null.", strBuilder3.getNullText());
      assertEquals(696, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.appendln(0);
      assertEquals(696, strBuilder0.capacity());
      assertEquals(79, strBuilder0.size());
      assertEquals(79, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("Comparator should not be null.", strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(696, strBuilder1.capacity());
      assertEquals(79, strBuilder1.size());
      assertEquals(79, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals("Comparator should not be null.", strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(79, strBuilder3.length());
      assertEquals(79, strBuilder3.size());
      assertEquals("Comparator should not be null.", strBuilder3.getNullText());
      assertEquals(696, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals("Comparator should not be null.", strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(79, strBuilder4.length());
      assertEquals(79, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(696, strBuilder4.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertNotNull(strBuilder4);
      
      char[] charArray1 = strBuilder3.toCharArray();
      assertEquals(696, strBuilder0.capacity());
      assertEquals(79, strBuilder0.size());
      assertEquals(79, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("Comparator should not be null.", strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(696, strBuilder1.capacity());
      assertEquals(79, strBuilder1.size());
      assertEquals(79, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals("Comparator should not be null.", strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(79, strBuilder3.length());
      assertEquals(79, strBuilder3.size());
      assertEquals("Comparator should not be null.", strBuilder3.getNullText());
      assertEquals(696, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(79, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(102);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(charBuffer0);
      assertEquals(204, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(102, strBuilder0.size());
      assertEquals(102, strBuilder0.length());
      assertEquals(102, strBuilder1.size());
      assertEquals(102, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(204, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(204, strBuilder2.capacity());
      assertEquals(102, strBuilder2.size());
      assertEquals(102, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      strBuilder0.size = 0;
      assertTrue(strBuilder0.isEmpty());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      strBuilder0.size = 0;
      assertTrue(strBuilder0.isEmpty());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder3 = strBuilder0.ensureCapacity(102);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(204, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      String string0 = strBuilder3.substring(0, 0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(204, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = '!';
      charArray0[2] = 'w';
      charArray0[3] = '!';
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder3.new StrBuilderTokenizer();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(204, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder4 = strBuilder2.append("", (Object[]) null);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(204, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(204, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(204, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder3.append("", 0, 0);
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(204, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(204, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder4.replaceAll((String) null, "");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(204, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder6.isNotEmpty());
      assertEquals(0, strBuilder6.size());
      assertEquals(0, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(204, strBuilder6.capacity());
      assertTrue(strBuilder6.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(204, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(102, charBuffer0.remaining());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(204, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(204, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertNotNull(strBuilder6);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("i|QS");
      assertEquals("i|QS", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Object[] objectArray0 = new Object[2];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "i|QS");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertEquals(8, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(4, strBuilder1.length());
      assertEquals(8, strBuilder1.capacity());
      assertEquals(4, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(2, objectArray0.length);
      
      StrBuilder strBuilder2 = strBuilder1.appendSeparator('|', '|');
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(8, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(8, strBuilder1.capacity());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(8, strBuilder2.capacity());
      assertEquals(5, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(5, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      assertEquals(2, objectArray0.length);
      
      StrBuilder strBuilder3 = strBuilder1.reverse();
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(8, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(8, strBuilder1.capacity());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(5, strBuilder3.size());
      assertEquals(8, strBuilder3.capacity());
      assertEquals(5, strBuilder3.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      assertEquals(2, objectArray0.length);
      
      boolean boolean0 = strBuilder2.isEmpty();
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(8, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(8, strBuilder1.capacity());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(8, strBuilder2.capacity());
      assertEquals(5, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(5, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(boolean0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.reset();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      int int0 = StrBuilder.CAPACITY;
      assertEquals(32, int0);
      
      int int1 = StrBuilder.CAPACITY;
      assertEquals(32, int1);
      assertTrue(int1 == int0);
      
      int int2 = 101;
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      char[] charArray0 = null;
      strBuilder_StrBuilderWriter0.write((char[]) null);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder0.delete(32, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("'Du", "'Du");
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("", "I#");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.clear();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.replaceAll("", "startIndex must be valid");
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder2.new StrBuilderWriter();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = 'd';
      charArray0[2] = 'v';
      charArray0[3] = 'S';
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(4, strBuilder2.size());
      assertEquals(4, strBuilder2.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertArrayEquals(new char[] {']', 'd', 'v', 'S'}, charArray0);
      assertEquals(4, charArray0.length);
      
      StrBuilder strBuilder4 = strBuilder0.appendSeparator('d', '4');
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(5, strBuilder4.size());
      assertEquals(5, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = new StrBuilder(']');
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(0, strBuilder5.size());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(93, strBuilder5.capacity());
      assertFalse(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder2.appendSeparator("D>e0L6l9^z", (-1416));
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(5, strBuilder6.length());
      assertEquals(5, strBuilder6.size());
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder6.appendSeparator("NtZk7IvQiD[e54U[^", (String) null);
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(23, strBuilder2.size());
      assertEquals(23, strBuilder2.length());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(23, strBuilder6.length());
      assertEquals(23, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(32, strBuilder7.capacity());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(23, strBuilder7.size());
      assertNull(strBuilder7.getNullText());
      assertEquals(23, strBuilder7.length());
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder5);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertNotNull(strBuilder7);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(102);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(102, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(charBuffer0);
      assertEquals(204, strBuilder0.capacity());
      assertEquals(102, strBuilder0.length());
      assertEquals(102, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(204, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(102, strBuilder1.size());
      assertEquals(102, strBuilder1.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(102, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(102, strBuilder2.size());
      assertEquals(102, strBuilder2.length());
      assertEquals(204, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      strBuilder0.size = 0;
      assertEquals(204, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      
      strBuilder0.size = 0;
      assertEquals(204, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(204, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder3 = strBuilder0.ensureCapacity(102);
      assertEquals(204, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(204, strBuilder3.capacity());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      String string0 = strBuilder3.substring(0, 0);
      assertEquals(204, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(204, strBuilder3.capacity());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = '!';
      charArray0[2] = 'w';
      charArray0[3] = '!';
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder3.new StrBuilderTokenizer();
      assertEquals(204, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(204, strBuilder3.capacity());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone();
      assertEquals(204, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(204, strBuilder3.capacity());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      
      StrBuilder strBuilder4 = strBuilder2.append("", (Object[]) null);
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isNotEmpty());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(204, strBuilder4.capacity());
      assertEquals(204, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(204, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(102, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(204, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder3.append("", 0, 0);
      assertEquals(204, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(204, strBuilder5.capacity());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.length());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(204, strBuilder3.capacity());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertNotNull(strBuilder5);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) "";
      StrBuilder strBuilder0 = new StrBuilder("5SNS");
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("...", 486);
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder0.readFrom(strBuilder_StrBuilderReader0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(0, int0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      strBuilder_StrBuilderReader0.mark(0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'x';
      charArray0[1] = 'F';
      charArray0[2] = 'b';
      charArray0[3] = 'L';
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'x', 'F', 'b', 'L'}, charArray0);
      assertNotNull(strBuilder1);
      assertEquals(4, charArray0.length);
      
      // Undeclared exception!
      try { 
        strBuilder0.substring(3194, (-2425));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(boolean0);
      
      StrBuilder strBuilder1 = new StrBuilder("c");
      assertEquals(33, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = strBuilder1.lastIndexOf("c", 1);
      assertEquals(33, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNotSame(strBuilder1, strBuilder0);
      assertEquals(0, int0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("8");
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.reset();
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(56, int0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(56);
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.setLength(56);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(112, strBuilder0.capacity());
      assertEquals(56, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(56, strBuilder2.size());
      assertEquals(56, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(112, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      int int1 = strBuilder0.indexOf("dTEO!+4yTye&q{G}", 56);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(112, strBuilder0.capacity());
      assertEquals(56, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(98);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(98, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder0;
      objectArray0[1] = (Object) "Invalid length: ";
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      
      objectArray0[2] = (Object) strBuilder_StrBuilderTokenizer1;
      StrBuilder strBuilder2 = strBuilder0.appendln((Object) null);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(98, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(98, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      objectArray0[3] = (Object) strBuilder0;
      StrBuilder strBuilder3 = strBuilder1.append("Invalid length: ", objectArray0);
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(16, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(16, strBuilder1.length());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(16, strBuilder3.length());
      assertEquals(16, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      assertEquals(4, objectArray0.length);
      
      String string0 = strBuilder0.toString();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(98, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertEquals("\n", string0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertNotNull(string0);
      
      HashSet<StringBuffer> hashSet0 = null;
      try {
        hashSet0 = new HashSet<StringBuffer>(98, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[2];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "i|QS");
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.capacity());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.capacity());
      assertEquals(4, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(2, objectArray0.length);
      
      StrBuilder strBuilder2 = strBuilder1.reverse();
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.capacity());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.capacity());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder2.size());
      assertEquals(4, strBuilder2.length());
      assertEquals(8, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      Writer writer0 = strBuilder0.asWriter();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(writer0);
      
      StrBuilder strBuilder1 = strBuilder0.append('H');
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendln("", 0, 0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendFixedWidthPadLeft(4, 21, 'H');
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      assertEquals(23, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(23, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(23, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(23, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(23, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(23, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("H", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      
      CharBuffer charBuffer1 = CharBuffer.allocate(4);
      assertEquals(4, charBuffer1.remaining());
      assertEquals(4, charBuffer1.capacity());
      assertEquals(4, charBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals("\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertEquals(4, charBuffer1.length());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      
      StrBuilder strBuilder4 = strBuilder0.append(charBuffer1, 4, 0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      assertEquals(4, charBuffer1.remaining());
      assertEquals(4, charBuffer1.capacity());
      assertEquals(4, charBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals("\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertEquals(4, charBuffer1.length());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(23, strBuilder4.size());
      assertEquals(23, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(charBuffer1, charBuffer0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = new StrBuilder(21);
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(21, strBuilder5.capacity());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder0.appendln(2984L);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(28, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(28, strBuilder0.length());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(28, strBuilder6.length());
      assertEquals(28, strBuilder6.size());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertNotNull(strBuilder6);
      
      boolean boolean0 = strBuilder4.equals(strBuilder6);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(28, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(28, strBuilder0.length());
      assertEquals(4, charBuffer1.remaining());
      assertEquals(4, charBuffer1.capacity());
      assertEquals(4, charBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals("\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertEquals(4, charBuffer1.length());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(28, strBuilder4.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(28, strBuilder4.length());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(28, strBuilder6.length());
      assertEquals(28, strBuilder6.size());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(charBuffer1, charBuffer0);
      assertNotSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertTrue(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      
      StrBuilder strBuilder7 = strBuilder1.insert(4, true);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.size());
      assertEquals(32, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder1.length());
      assertEquals(32, strBuilder1.size());
      assertEquals(32, strBuilder7.capacity());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(32, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(32, strBuilder7.size());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertNotNull(strBuilder7);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.size();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, int0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll('\'', 'C');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append(0.0F);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(3, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(3, strBuilder2.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      charArray0[3] = '\'';
      // Undeclared exception!
      try { 
        strBuilder1.getChars(76, (-2455), charArray0, (-1082));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2455
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("@p}<zZt}\"");
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[4];
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(9, strBuilder1.length());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(41, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder0.getChars(2, 2, charArray0, 116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln('f');
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.deleteCharAt(0);
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertEquals(1, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder0.insert(0, true);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder4.length());
      assertEquals(5, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      
      boolean boolean0 = strBuilder2.endsWith("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder3);
      assertFalse(boolean0);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      
      StrBuilder strBuilder5 = strBuilder0.trim();
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(4, strBuilder5.size());
      assertEquals(4, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertNotNull(strBuilder5);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[1] = '%';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      strBuilder5.getChars(0, 2, charArray0, 2);
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(4, strBuilder5.size());
      assertEquals(4, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertArrayEquals(new char[] {'f', '%', 't', 'r', 'f', 'f', 'f'}, charArray0);
      assertEquals(7, charArray0.length);
      
      boolean boolean1 = strBuilder1.equals(strBuilder5);
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(4, strBuilder5.size());
      assertEquals(4, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = "@p}<zZt}\"";
      StrBuilder strBuilder0 = new StrBuilder("@p}<zZt}\"");
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'b';
      char char0 = '[';
      charArray0[1] = '[';
      int int0 = 854;
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('@', '@');
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertEquals(41, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(9, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(9, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder1.subSequence(895, (-108));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1003
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder(86565);
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(86565, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder0.subSequence(86513, (-5674));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -92187
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator(')', '%');
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendAll((Object[]) null);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.replaceFirst((String) null, (String) null);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder0.appendSeparator('r', '[');
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder4.size());
      assertEquals(1, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNotNull(strBuilder4);
      
      String string0 = strBuilder3.rightString(2);
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(1, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertEquals("[", string0);
      assertNotNull(string0);
      
      String string1 = strBuilder1.build();
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("[", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StrBuilder strBuilder5 = new StrBuilder("'w>Z(T");
      assertEquals(6, strBuilder5.size());
      assertEquals(6, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(38, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder5.minimizeCapacity();
      assertEquals(6, strBuilder5.size());
      assertEquals(6, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(6, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(6, strBuilder6.size());
      assertEquals(6, strBuilder6.length());
      assertEquals(6, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder1);
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertNotNull(strBuilder6);
      
      boolean boolean0 = strBuilder3.equalsIgnoreCase(strBuilder5);
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(1, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(6, strBuilder5.size());
      assertEquals(6, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(6, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder6);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[18];
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder1.size());
      assertEquals(19, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(18, charArray0.length);
      
      // Undeclared exception!
      try { 
        strBuilder1.substring(1640);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("wX9}D pQ}mLA`E^Yj");
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll('T');
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(17, strBuilder1.size());
      assertEquals(49, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = 9;
      StrBuilder strBuilder2 = new StrBuilder("wX9}D pQ}mLA`E^Yj");
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(17, strBuilder2.length());
      assertEquals(49, strBuilder2.capacity());
      assertEquals(17, strBuilder2.size());
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = new StrBuilder("wX9}D pQ}mLA`E^Yj");
      assertEquals(17, strBuilder3.size());
      assertEquals(17, strBuilder3.length());
      assertEquals(49, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder2.insert(9, 2799L);
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(49, strBuilder2.capacity());
      assertEquals(21, strBuilder2.length());
      assertEquals(21, strBuilder2.size());
      assertEquals(21, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(21, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(49, strBuilder4.capacity());
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotNull(strBuilder4);
      
      String string0 = strBuilder1.substring(1);
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(17, strBuilder1.size());
      assertEquals(49, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("X9}D pQ}mLA`E^Yj", string0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder3));
      assertNotNull(string0);
      
      StringBuilder stringBuilder0 = new StringBuilder(12);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder5 = strBuilder2.append(true);
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(25, strBuilder2.size());
      assertEquals(49, strBuilder2.capacity());
      assertEquals(25, strBuilder2.length());
      assertEquals(49, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(25, strBuilder5.length());
      assertEquals(25, strBuilder5.size());
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder1);
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertNotNull(strBuilder5);
      
      // Undeclared exception!
      try { 
        stringBuilder0.insert(12, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 12
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", (-736));
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.replaceFirst('-', '-');
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      boolean boolean0 = strBuilder1.contains('I');
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) strBuilder2, (-736), (-1545));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(49);
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setNullText("mFP'UHwfIM&R");
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals("mFP'UHwfIM&R", strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(49, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals("mFP'UHwfIM&R", strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendln("mFP'UHwfIM&R", 0, 0);
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("mFP'UHwfIM&R", strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(49, strBuilder2.capacity());
      assertEquals("mFP'UHwfIM&R", strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.appendFixedWidthPadLeft(12, 0, '%');
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("mFP'UHwfIM&R", strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(49, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals("mFP'UHwfIM&R", strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertEquals(49, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1, strBuilder3.size());
      assertEquals(1, strBuilder3.length());
      assertEquals("mFP'UHwfIM&R", strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.append(1);
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("mFP'UHwfIM&R", strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(49, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals("mFP'UHwfIM&R", strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder4.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals("mFP'UHwfIM&R", strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(2, strBuilder4.length());
      assertEquals(49, strBuilder4.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = new StrBuilder("");
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.size());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder3.appendPadding(4, 'm');
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("mFP'UHwfIM&R", strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertEquals(49, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals("mFP'UHwfIM&R", strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(49, strBuilder3.capacity());
      assertEquals(6, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(6, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals("mFP'UHwfIM&R", strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertEquals("mFP'UHwfIM&R", strBuilder6.getNullText());
      assertEquals(49, strBuilder6.capacity());
      assertEquals(6, strBuilder6.size());
      assertEquals(6, strBuilder6.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder3.appendSeparator('j', 48);
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.size());
      assertEquals("mFP'UHwfIM&R", strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder1.size());
      assertEquals(49, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals("mFP'UHwfIM&R", strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(49, strBuilder3.capacity());
      assertEquals(7, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(7, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals("mFP'UHwfIM&R", strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals("mFP'UHwfIM&R", strBuilder7.getNullText());
      assertFalse(strBuilder7.isEmpty());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(49, strBuilder7.capacity());
      assertEquals(7, strBuilder7.size());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(7, strBuilder7.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertNotNull(strBuilder7);
      
      char[] charArray0 = new char[8];
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = '%';
      charArray0[4] = 'j';
      charArray0[5] = 'j';
      charArray0[7] = '%';
      // Undeclared exception!
      try { 
        strBuilder5.insert(48, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 48
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 14, 14);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 14
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '4';
      charArray0[1] = 'Y';
      charArray0[2] = 'a';
      charArray0[3] = 'm';
      charArray0[4] = 'z';
      charArray0[5] = 'P';
      charArray0[6] = 'w';
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, (-1416), (-1416));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -1416
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((-930.29095F));
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(11, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(11, strBuilder1.size());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.deleteFirst((String) null);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(11, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(11, strBuilder1.size());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(11, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(11, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      int int0 = strBuilder1.lastIndexOf((String) null);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(11, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(11, strBuilder1.size());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith("_ZNE`{AT8H t");
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append("L j`Va_P;", 65, (-1497));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(102);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      ArrayDeque<StrBuilder> arrayDeque0 = new ArrayDeque<StrBuilder>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(strBuilder0));
      
      ArrayDeque<StrBuilder> arrayDeque1 = arrayDeque0.clone();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque0.contains(strBuilder0));
      assertFalse(arrayDeque1.contains(strBuilder0));
      
      boolean boolean0 = arrayDeque1.add(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque1.isEmpty());
      assertEquals(1, arrayDeque1.size());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertTrue(boolean0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque0.contains(strBuilder0));
      assertTrue(arrayDeque1.contains(strBuilder0));
      
      Spliterator<StrBuilder> spliterator0 = arrayDeque1.spliterator();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque1.isEmpty());
      assertEquals(1, arrayDeque1.size());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(spliterator0);
      assertFalse(arrayDeque0.contains(strBuilder0));
      assertTrue(arrayDeque1.contains(strBuilder0));
      
      StrBuilder strBuilder1 = arrayDeque1.pop();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(102, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(strBuilder1);
      assertFalse(arrayDeque0.contains(strBuilder1));
      assertFalse(arrayDeque1.contains(strBuilder1));
      
      StrBuilder strBuilder2 = strBuilder0.appendWithSeparators((Iterable<?>) arrayDeque1, "Sfg<O7qHvb^LaGiH");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(102, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(strBuilder2);
      assertFalse(arrayDeque0.contains(strBuilder1));
      assertFalse(arrayDeque1.contains(strBuilder1));
      
      boolean boolean1 = strBuilder2.startsWith("end < start");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(102, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(boolean1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayDeque0.contains(strBuilder1));
      assertFalse(arrayDeque1.contains(strBuilder1));
      
      StrBuilder strBuilder3 = strBuilder2.appendln("Sfg<O7qHvb^LaGiH");
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(102, strBuilder2.capacity());
      assertEquals(17, strBuilder2.length());
      assertEquals(17, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(102, strBuilder3.capacity());
      assertEquals(17, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(17, strBuilder3.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(strBuilder3);
      assertFalse(arrayDeque0.contains(strBuilder1));
      assertFalse(arrayDeque1.contains(strBuilder1));
      
      StringBuffer stringBuffer0 = new StringBuffer("Arguments cannot both be null");
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals(29, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder4 = strBuilder0.appendSeparator("Sfg<O7qHvb^LaGiH");
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.size());
      assertEquals(33, strBuilder0.length());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(102, strBuilder4.capacity());
      assertEquals(33, strBuilder4.size());
      assertEquals(33, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = new StrBuilder("Invalid length: ");
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(16, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(16, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(48, strBuilder5.capacity());
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder5.append(stringBuffer0);
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals(29, stringBuffer0.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(45, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(48, strBuilder5.capacity());
      assertEquals(45, strBuilder5.length());
      assertEquals(48, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(45, strBuilder6.length());
      assertEquals(45, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder2);
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder1.appendSeparator("Invalid length: ", "Sfg<O7qHvb^LaGiH");
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(102, strBuilder1.capacity());
      assertEquals(49, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(49, strBuilder1.size());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(102, strBuilder7.capacity());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(49, strBuilder7.size());
      assertEquals(49, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertNotNull(strBuilder7);
      assertFalse(arrayDeque0.contains(strBuilder1));
      assertFalse(arrayDeque1.contains(strBuilder1));
      
      StrBuilder strBuilder8 = strBuilder3.appendln(102);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(53, strBuilder0.size());
      assertEquals(53, strBuilder0.length());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(102, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(53, strBuilder2.length());
      assertEquals(53, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(53, strBuilder3.length());
      assertEquals(53, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(102, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(102, strBuilder8.capacity());
      assertTrue(strBuilder8.isNotEmpty());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(53, strBuilder8.size());
      assertEquals(53, strBuilder8.length());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder8);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder6);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder3);
      assertNotSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertNotNull(strBuilder8);
      assertFalse(arrayDeque0.contains(strBuilder1));
      assertFalse(arrayDeque1.contains(strBuilder1));
      
      StrBuilder strBuilder9 = strBuilder7.append("length must be valid");
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(73, strBuilder1.length());
      assertEquals(73, strBuilder1.size());
      assertEquals(102, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(102, strBuilder7.capacity());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(73, strBuilder7.size());
      assertEquals(73, strBuilder7.length());
      assertEquals(73, strBuilder9.length());
      assertEquals(73, strBuilder9.size());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertEquals(102, strBuilder9.capacity());
      assertFalse(strBuilder9.isEmpty());
      assertTrue(strBuilder9.isNotEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder9);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder8);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder9);
      assertNotSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder1);
      assertNotSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder2);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertNotNull(strBuilder9);
      assertFalse(arrayDeque0.contains(strBuilder1));
      assertFalse(arrayDeque1.contains(strBuilder1));
      
      Object[] objectArray0 = new Object[9];
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(73, strBuilder1.length());
      assertEquals(73, strBuilder1.size());
      assertEquals(102, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertFalse(arrayDeque0.contains(strBuilder1));
      assertFalse(arrayDeque1.contains(strBuilder1));
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(73, strBuilder1.length());
      assertEquals(73, strBuilder1.size());
      assertEquals(102, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder9);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertFalse(arrayDeque0.contains(strBuilder1));
      assertFalse(arrayDeque1.contains(strBuilder1));
      
      objectArray0[0] = (Object) strBuilder_StrBuilderTokenizer1;
      objectArray0[1] = (Object) "cTZ*:N";
      objectArray0[2] = (Object) arrayDeque1;
      objectArray0[3] = (Object) strBuilder1;
      objectArray0[4] = (Object) strBuilder0;
      objectArray0[5] = (Object) strBuilder8;
      objectArray0[6] = (Object) "set() is unsupported";
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone();
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(73, strBuilder1.length());
      assertEquals(73, strBuilder1.size());
      assertEquals(102, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer2.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer2.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer2.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer2.isIgnoreEmptyTokens());
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer2);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder9);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder_StrBuilderTokenizer2, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer2, strBuilder_StrBuilderTokenizer0);
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder_StrBuilderTokenizer2.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer2.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotNull(strBuilder_StrBuilderTokenizer2);
      assertFalse(arrayDeque0.contains(strBuilder1));
      assertFalse(arrayDeque1.contains(strBuilder1));
      
      objectArray0[7] = (Object) strBuilder_StrBuilderTokenizer2;
      objectArray0[8] = (Object) arrayDeque0;
      StrBuilder strBuilder10 = strBuilder1.append("set() is unsupported", objectArray0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(93, strBuilder1.length());
      assertEquals(93, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(102, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder10.isNotEmpty());
      assertEquals(93, strBuilder10.length());
      assertNull(strBuilder10.getNewLineText());
      assertNull(strBuilder10.getNullText());
      assertEquals(102, strBuilder10.capacity());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(93, strBuilder10.size());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder9);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder1);
      assertNotSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder9);
      assertNotSame(strBuilder10, strBuilder6);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder10.equals((Object)strBuilder5));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertNotNull(strBuilder10);
      assertFalse(arrayDeque0.contains(strBuilder1));
      assertFalse(arrayDeque1.contains(strBuilder1));
      assertEquals(9, objectArray0.length);
      
      // Undeclared exception!
      try { 
        strBuilder8.append("", 118, 118);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("01u=p/'yQvs%~MmY");
      assertEquals(16, strBuilder1.size());
      assertEquals(16, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder1.size());
      assertEquals(16, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln('f');
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.deleteCharAt(0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertEquals(1, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder0.insert(0, true);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder4.size());
      assertEquals(5, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      
      boolean boolean0 = strBuilder2.endsWith("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertFalse(boolean0);
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      
      StrBuilder strBuilder5 = strBuilder0.trim();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(4, strBuilder5.size());
      assertEquals(4, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertNotNull(strBuilder5);
      
      boolean boolean1 = strBuilder1.equals(strBuilder5);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder1.size());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(4, strBuilder5.size());
      assertEquals(4, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder2);
      assertTrue(boolean1);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(boolean1 == boolean0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder3.new StrBuilderReader();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(4, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(4, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.close();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(4, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(4, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      StringBuffer stringBuffer0 = new StringBuffer(441);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      Writer writer0 = strBuilder0.asWriter();
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(writer0);
      
      StrBuilder strBuilder2 = strBuilder0.append('H');
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.appendln(charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(4, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder3.length());
      assertEquals(4, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertNotNull(strBuilder3);
      assertEquals(1, charArray0.length);
      
      StrBuilder strBuilder4 = strBuilder3.appendPadding(0, '[');
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(4, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder3.length());
      assertEquals(4, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(4, strBuilder4.length());
      assertEquals(4, strBuilder4.size());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertNotNull(strBuilder4);
      assertEquals(1, charArray0.length);
      
      StrBuilder strBuilder5 = strBuilder0.append(1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(5, strBuilder5.size());
      assertEquals(5, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = new StrBuilder("Gv");
      assertNull(strBuilder6.getNullText());
      assertEquals(34, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(2, strBuilder6.size());
      assertEquals(2, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder3.ensureCapacity(3195);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(6390, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertEquals(6390, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(6390, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(5, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(5, strBuilder7.size());
      assertEquals(5, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(6390, strBuilder7.capacity());
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder6);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertNotNull(strBuilder7);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder(26);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(26, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setNewLineText("");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(26, strBuilder0.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals("", strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(26, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(997);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(997, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(116);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(116, strBuilder0.length());
      assertEquals(116, strBuilder0.size());
      assertEquals(997, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(997, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(116, strBuilder1.length());
      assertEquals(116, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder1.midString(997, (-3041));
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(116, strBuilder0.length());
      assertEquals(116, strBuilder0.size());
      assertEquals(997, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(997, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(116, strBuilder1.length());
      assertEquals(116, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.append(strBuilder2, 0, 0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(116, strBuilder0.length());
      assertEquals(116, strBuilder0.size());
      assertEquals(997, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(997, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(116, strBuilder1.length());
      assertEquals(116, strBuilder1.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(116, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(997, strBuilder3.capacity());
      assertEquals(116, strBuilder3.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.append((-7L));
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(118, strBuilder0.length());
      assertEquals(118, strBuilder0.size());
      assertEquals(997, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(997, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(118, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(118, strBuilder1.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(118, strBuilder3.length());
      assertEquals(118, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(997, strBuilder3.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(118, strBuilder4.length());
      assertEquals(118, strBuilder4.size());
      assertEquals(997, strBuilder4.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder4.setNewLineText("");
      assertEquals("", strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(118, strBuilder0.length());
      assertEquals(118, strBuilder0.size());
      assertEquals(997, strBuilder0.capacity());
      assertEquals("", strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(997, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(118, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(118, strBuilder1.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(118, strBuilder3.length());
      assertEquals(118, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals("", strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(997, strBuilder3.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals("", strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(118, strBuilder4.length());
      assertEquals(118, strBuilder4.size());
      assertEquals(997, strBuilder4.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(118, strBuilder5.length());
      assertEquals(118, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals("", strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(997, strBuilder5.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder4.appendln(false);
      assertEquals(123, strBuilder0.size());
      assertEquals("", strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(123, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(997, strBuilder0.capacity());
      assertEquals(123, strBuilder1.length());
      assertEquals("", strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(123, strBuilder1.size());
      assertEquals(997, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(123, strBuilder3.size());
      assertEquals(123, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals("", strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(997, strBuilder3.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals("", strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(123, strBuilder4.size());
      assertEquals(123, strBuilder4.length());
      assertEquals(997, strBuilder4.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(123, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertEquals("", strBuilder6.getNewLineText());
      assertEquals(997, strBuilder6.capacity());
      assertEquals(123, strBuilder6.size());
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertNotNull(strBuilder6);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln(strBuilder1, 108, 1510);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("@p}<zZt}\"");
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[4];
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, stringBuffer0.length());
      assertEquals("@p}<zZt}\"", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      charArray0[0] = 'b';
      charArray0[1] = '[';
      charArray0[2] = '2';
      char char0 = '4';
      // Undeclared exception!
      try { 
        strBuilder0.insert(13, 0.0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 13
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder((String) null);
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = new StrBuilder();
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(0, strBuilder4.length());
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      
      boolean boolean0 = strBuilder4.equalsIgnoreCase(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(0, strBuilder4.length());
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      assertTrue(boolean0);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder0.equals((Object)strBuilder3));
      assertTrue(strBuilder0.equals((Object)strBuilder4));
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      
      StringBuffer stringBuffer0 = strBuilder3.toStringBuffer();
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder4);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder4));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder4));
      assertNotNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      boolean boolean0 = strBuilder_StrBuilderTokenizer0.hasPrevious();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(boolean0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = strBuilder0.new StrBuilderTokenizer();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotNull(strBuilder_StrBuilderTokenizer1);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      boolean boolean0 = strBuilder_StrBuilderTokenizer0.hasPrevious();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(boolean0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer2.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer2.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer2.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer2.nextIndex());
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer2);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer2, strBuilder_StrBuilderTokenizer0);
      assertNotSame(strBuilder_StrBuilderTokenizer2, strBuilder_StrBuilderTokenizer1);
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer2.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertFalse(strBuilder_StrBuilderTokenizer2.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertNotNull(strBuilder_StrBuilderTokenizer2);
      
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = strBuilder0.append("", objectArray0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(0, objectArray0.length);
      
      boolean boolean1 = strBuilder1.startsWith("");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("xihnv!zR/Sq|>d}jGO");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.length());
      assertEquals(50, strBuilder1.capacity());
      assertEquals(18, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendln(380.894F);
      assertEquals(26, strBuilder0.size());
      assertEquals(26, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(26, strBuilder1.size());
      assertEquals(50, strBuilder1.capacity());
      assertEquals(26, strBuilder1.length());
      assertEquals(50, strBuilder2.capacity());
      assertEquals(26, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(26, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(102);
      assertEquals(102, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(102, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(102, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder3 = strBuilder1.append(charBuffer0);
      assertEquals(256, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(128, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(128, strBuilder0.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(128, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(128, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(256, strBuilder1.capacity());
      assertEquals(102, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(102, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(102, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(128, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(256, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(128, strBuilder3.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      strBuilder0.size = 0;
      assertTrue(strBuilder0.isEmpty());
      assertEquals(256, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      
      strBuilder0.size = 0;
      assertTrue(strBuilder0.isEmpty());
      assertEquals(256, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(256, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder4 = strBuilder0.ensureCapacity(102);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(256, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(256, strBuilder4.capacity());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNotNull(strBuilder4);
      
      String string0 = strBuilder4.substring(0, 0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(256, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(256, strBuilder4.capacity());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder5 = strBuilder3.deleteAll('Y');
      assertTrue(strBuilder0.isEmpty());
      assertEquals(256, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(256, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(102, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(102, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(102, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(256, strBuilder3.capacity());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertEquals(256, strBuilder5.capacity());
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = new StrBuilder();
      assertFalse(strBuilder6.isNotEmpty());
      assertEquals(0, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder6.isEmpty());
      assertEquals(0, strBuilder6.length());
      assertTrue(strBuilder6.equals((Object)strBuilder4));
      assertTrue(strBuilder6.equals((Object)strBuilder5));
      assertTrue(strBuilder6.equals((Object)strBuilder2));
      assertTrue(strBuilder6.equals((Object)strBuilder1));
      assertTrue(strBuilder6.equals((Object)strBuilder0));
      assertTrue(strBuilder6.equals((Object)strBuilder3));
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder6.appendln(2112.272348232859);
      assertEquals(18, strBuilder6.size());
      assertEquals(18, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertEquals(32, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(18, strBuilder7.size());
      assertEquals(18, strBuilder7.length());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(32, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder1);
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = strBuilder0.append(1888);
      assertEquals(256, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder8.length());
      assertEquals(256, strBuilder8.capacity());
      assertNull(strBuilder8.getNullText());
      assertTrue(strBuilder8.isNotEmpty());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(4, strBuilder8.size());
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder2);
      assertNotSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertNotNull(strBuilder8);
      
      StrBuilder strBuilder9 = strBuilder7.deleteAll((String) null);
      assertEquals(18, strBuilder6.size());
      assertEquals(18, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertEquals(32, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(18, strBuilder7.size());
      assertEquals(18, strBuilder7.length());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(32, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals(18, strBuilder9.size());
      assertEquals(18, strBuilder9.length());
      assertTrue(strBuilder9.isNotEmpty());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(32, strBuilder9.capacity());
      assertNull(strBuilder9.getNullText());
      assertNull(strBuilder9.getNewLineText());
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder8);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder9);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder8);
      assertNotSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder9);
      assertSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder1);
      assertNotSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder0);
      assertNotSame(strBuilder9, strBuilder5);
      assertNotSame(strBuilder9, strBuilder3);
      assertNotSame(strBuilder9, strBuilder8);
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder8));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder8));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder9.equals((Object)strBuilder2));
      assertFalse(strBuilder9.equals((Object)strBuilder1));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertFalse(strBuilder9.equals((Object)strBuilder0));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertNotNull(strBuilder9);
      
      String string1 = strBuilder4.midString(1696, 4);
      assertEquals(256, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(256, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(4, strBuilder4.length());
      assertEquals(4, strBuilder4.size());
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder9);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder8);
      assertEquals("", string1);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder9));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder9));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StrBuilder strBuilder10 = strBuilder4.appendln(6);
      assertEquals(256, strBuilder10.capacity());
      assertNull(strBuilder10.getNewLineText());
      assertTrue(strBuilder10.isNotEmpty());
      assertNull(strBuilder10.getNullText());
      assertEquals(6, strBuilder10.size());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(6, strBuilder10.length());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertEquals(256, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(256, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(6, strBuilder4.length());
      assertEquals(6, strBuilder4.size());
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder5);
      assertNotSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder2);
      assertNotSame(strBuilder10, strBuilder7);
      assertNotSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder8);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder10);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder9);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder8);
      assertFalse(strBuilder10.equals((Object)strBuilder9));
      assertFalse(strBuilder10.equals((Object)strBuilder7));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder9));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder9));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertNotNull(strBuilder10);
      
      char char0 = 'S';
      StrBuilder strBuilder11 = strBuilder10.appendFixedWidthPadRight((Object) strBuilder0, 102, 'S');
      assertEquals(256, strBuilder10.capacity());
      assertNull(strBuilder10.getNewLineText());
      assertEquals(108, strBuilder10.size());
      assertTrue(strBuilder10.isNotEmpty());
      assertEquals(108, strBuilder10.length());
      assertNull(strBuilder10.getNullText());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(256, strBuilder0.capacity());
      assertEquals(108, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(108, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(256, strBuilder11.capacity());
      assertNull(strBuilder11.getNewLineText());
      assertEquals(108, strBuilder11.length());
      assertFalse(strBuilder11.isEmpty());
      assertTrue(strBuilder11.isNotEmpty());
      assertEquals(108, strBuilder11.size());
      assertNull(strBuilder11.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(108, strBuilder4.length());
      assertEquals(256, strBuilder4.capacity());
      assertEquals(108, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder11);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder5);
      assertNotSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder2);
      assertNotSame(strBuilder10, strBuilder7);
      assertNotSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder8);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder11, strBuilder0);
      assertSame(strBuilder11, strBuilder3);
      assertSame(strBuilder11, strBuilder10);
      assertSame(strBuilder11, strBuilder1);
      assertSame(strBuilder11, strBuilder4);
      assertNotSame(strBuilder11, strBuilder7);
      assertNotSame(strBuilder11, strBuilder9);
      assertSame(strBuilder11, strBuilder2);
      assertSame(strBuilder11, strBuilder5);
      assertSame(strBuilder11, strBuilder8);
      assertNotSame(strBuilder11, strBuilder6);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder11);
      assertSame(strBuilder4, strBuilder10);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder9);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder8);
      assertFalse(strBuilder10.equals((Object)strBuilder9));
      assertFalse(strBuilder10.equals((Object)strBuilder7));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder9));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder11.equals((Object)strBuilder7));
      assertFalse(strBuilder11.equals((Object)strBuilder9));
      assertFalse(strBuilder11.equals((Object)strBuilder6));
      assertFalse(strBuilder4.equals((Object)strBuilder9));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertNotNull(strBuilder11);
      
      String string2 = strBuilder1.rightString(117);
      assertEquals(256, strBuilder0.capacity());
      assertEquals(108, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(108, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(256, strBuilder1.capacity());
      assertEquals(108, strBuilder1.length());
      assertEquals(108, strBuilder1.size());
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder11);
      assertNotSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder6);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder9));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder9));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      StringBuffer stringBuffer0 = new StringBuffer("p>r\"_]R^99f");
      assertEquals("p>r\"_]R^99f", stringBuffer0.toString());
      assertEquals(11, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder6.insert(32, (Object) stringBuffer0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 32
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-17));
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("y1X/8");
      assertEquals("y1X/8", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = 'J';
      charArray0[2] = 'n';
      charArray0[3] = 'O';
      charArray0[4] = 'O';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      assertEquals("y1X/8YJnOO", stringBuilder0.toString());
      assertEquals("y1X/8YJnOO", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertArrayEquals(new char[] {'Y', 'J', 'n', 'O', 'O'}, charArray0);
      assertNotNull(stringBuilder1);
      assertEquals(5, charArray0.length);
      
      StringBuilder stringBuilder2 = new StringBuilder("y1X/8");
      assertEquals("y1X/8", stringBuilder2.toString());
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder1));
      assertNotNull(stringBuilder2);
      
      StringBuilder stringBuilder3 = stringBuilder2.append(true);
      assertEquals("y1X/8true", stringBuilder2.toString());
      assertEquals("y1X/8true", stringBuilder3.toString());
      assertNotSame(stringBuilder2, stringBuilder0);
      assertNotSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertNotSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertNotSame(stringBuilder3, stringBuilder0);
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder1));
      assertFalse(stringBuilder3.equals((Object)stringBuilder1));
      assertFalse(stringBuilder3.equals((Object)stringBuilder0));
      assertNotNull(stringBuilder3);
      
      StringBuilder stringBuilder4 = stringBuilder2.append('O');
      assertEquals("y1X/8trueO", stringBuilder2.toString());
      assertEquals("y1X/8trueO", stringBuilder4.toString());
      assertSame(stringBuilder2, stringBuilder4);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertNotSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertNotSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder3);
      assertNotSame(stringBuilder4, stringBuilder0);
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder1));
      assertFalse(stringBuilder4.equals((Object)stringBuilder1));
      assertFalse(stringBuilder4.equals((Object)stringBuilder0));
      assertNotNull(stringBuilder4);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuilder3, 0, 48);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(2, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(2, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder1 = new StrBuilder(2);
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(2, strBuilder1.capacity());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(2);
      assertEquals("2", stringBuilder0.toString());
      assertEquals("2", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder1.append(stringBuilder1, 0, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((-1204L));
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      Writer writer0 = strBuilder0.asWriter();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(writer0);
      
      strBuilder0.appendTo(writer0);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(12, strBuilder0.size());
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.append(321);
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(15, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(15, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(15, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(15, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln('f');
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendln((Object) strBuilder0);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(5, strBuilder2.size());
      assertEquals(5, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.deleteFirst("|KT6bcw[Jip`?W6h@~");
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(5, strBuilder2.size());
      assertEquals(5, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(5, strBuilder3.size());
      assertEquals(5, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder0.deleteCharAt(0);
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(4, strBuilder4.length());
      assertEquals(4, strBuilder4.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = new StrBuilder('f');
      assertEquals(102, strBuilder5.capacity());
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.length());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertNotNull(strBuilder5);
      
      boolean boolean0 = strBuilder2.endsWith("org.apache.commons.lang3.text.SrBulder$StrBuilderTokenizer");
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(4, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(4, strBuilder2.length());
      assertEquals(4, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      
      StrBuilder strBuilder6 = strBuilder0.trim();
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(1, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(1, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertNotNull(strBuilder6);
      
      boolean boolean1 = strBuilder1.equals(strBuilder6);
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(1, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(1, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertTrue(boolean1);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(boolean1 == boolean0);
      
      StrBuilder strBuilder7 = strBuilder1.deleteFirst("|KT6bcw[Jip`?W6h@~");
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(32, strBuilder7.capacity());
      assertEquals(1, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(1, strBuilder7.size());
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = new StrBuilder("|KT6bcw[Jip`?W6h@~");
      assertNull(strBuilder8.getNullText());
      assertEquals(50, strBuilder8.capacity());
      assertNull(strBuilder8.getNewLineText());
      assertTrue(strBuilder8.isNotEmpty());
      assertEquals(18, strBuilder8.length());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(18, strBuilder8.size());
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertNotNull(strBuilder8);
      
      String string0 = strBuilder8.leftString(0);
      assertNull(strBuilder8.getNullText());
      assertEquals(50, strBuilder8.capacity());
      assertNull(strBuilder8.getNewLineText());
      assertTrue(strBuilder8.isNotEmpty());
      assertEquals(18, strBuilder8.length());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(18, strBuilder8.size());
      assertNotSame(strBuilder8, strBuilder6);
      assertNotSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder7);
      assertNotSame(strBuilder8, strBuilder5);
      assertNotSame(strBuilder8, strBuilder3);
      assertNotSame(strBuilder8, strBuilder2);
      assertNotSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder4);
      assertEquals("", string0);
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertNotNull(string0);
      
      strBuilder3.appendTo(strBuilder6);
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(2, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(2, strBuilder3.length());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(2, strBuilder6.length());
      assertEquals(2, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder8);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder8));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder8));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder8));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder8));
      
      StrBuilder strBuilder9 = strBuilder2.appendln((long) 0);
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(4, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(4, strBuilder2.length());
      assertEquals(4, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertEquals(4, strBuilder9.size());
      assertEquals(4, strBuilder9.length());
      assertTrue(strBuilder9.isNotEmpty());
      assertEquals(32, strBuilder9.capacity());
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder8);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder8));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertNotNull(strBuilder9);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1));
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.delete(2554, 64);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder2 = strBuilder1.appendWithSeparators(objectArray0, "");
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      assertEquals(0, objectArray0.length);
      
      StrBuilder strBuilder3 = strBuilder0.appendNull();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.delete(0, 108);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertNotNull(strBuilder4);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.reset();
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      TreeSet<StringBuffer> treeSet0 = new TreeSet<StringBuffer>();
      assertNotNull(treeSet0);
      
      StrBuilder strBuilder1 = strBuilder0.appendAll((Iterable<?>) treeSet0);
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) null);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.minimizeCapacity();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.setLength(0);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.capacity());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.appendSeparator("I2R]N: ", 63);
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder3.capacity());
      assertEquals(7, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(7, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(14, strBuilder4.capacity());
      assertEquals(7, strBuilder4.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(7, strBuilder4.length());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder3.append(0);
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.size());
      assertEquals(14, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder3.capacity());
      assertEquals(8, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(8, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(8, strBuilder5.size());
      assertEquals(14, strBuilder5.capacity());
      assertEquals(8, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertNotNull(strBuilder5);
      
      TreeSet<StringBuffer> treeSet0 = new TreeSet<StringBuffer>();
      assertNotNull(treeSet0);
      
      StrBuilder strBuilder6 = strBuilder5.appendAll((Iterable<?>) treeSet0);
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.size());
      assertEquals(14, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder3.capacity());
      assertEquals(8, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(8, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(8, strBuilder5.size());
      assertEquals(14, strBuilder5.capacity());
      assertEquals(8, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(14, strBuilder6.capacity());
      assertEquals(8, strBuilder6.size());
      assertEquals(8, strBuilder6.length());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertNotNull(strBuilder6);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert((-340), '^');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -340
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(11);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(true);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(11, strBuilder1.capacity());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.setNullText("2*8");
      assertEquals("2*8", strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals("2*8", strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("d=DN_");
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(37, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      char[] charArray0 = strBuilder1.toCharArray();
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(37, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNotSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertArrayEquals(new char[] {'d', '=', 'D', 'N', '_'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.clear();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      String string0 = strBuilder2.midString(0, 0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder3 = strBuilder0.insert(0, "startIndex must be valid");
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder3.length());
      assertEquals(24, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.setLength(0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.size());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertNotNull(strBuilder4);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.clear();
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.insert(0, "startIndex must be valid");
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(24, strBuilder3.size());
      assertEquals(24, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.setLength(0);
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertNotNull(strBuilder4);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("");
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      StrBuilder strBuilder1 = strBuilder0.appendAll(locale_CategoryArray0);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(0, locale_CategoryArray0.length);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("xihnv!zR/Sq|>d}jGO");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(103);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(103, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(103, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(103, charBuffer0.capacity());
      assertEquals(103, charBuffer0.length());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(charBuffer0);
      assertEquals(121, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(121, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(242, strBuilder0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(103, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(103, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(103, charBuffer0.capacity());
      assertEquals(103, charBuffer0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(242, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(121, strBuilder1.length());
      assertEquals(121, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendln(101);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(125, strBuilder0.size());
      assertEquals(242, strBuilder0.capacity());
      assertEquals(125, strBuilder0.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(125, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(125, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(242, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(charBuffer0, 340, 340);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("c\"TR9.");
      assertEquals(38, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(6, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(1.6260405F);
      assertEquals(38, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(38, strBuilder1.capacity());
      assertEquals(16, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(16, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      int int0 = strBuilder0.lastIndexOf("c\"TR9.");
      assertEquals(38, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertEquals(0, int0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(charBuffer0, 0, (-1098));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String string0 = "@p}<zZt}\"";
      StrBuilder strBuilder0 = new StrBuilder("@p}<zZt}\"");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
      assertEquals(9, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'b';
      charArray0[1] = '[';
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("@p}<zZt}\"", 854);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(18, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(41, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.replaceFirst('@', '@');
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(18, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(41, strBuilder1.capacity());
      assertEquals(18, strBuilder2.length());
      assertEquals(18, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(41, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '[';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray1);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals("[", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'['}, charArray1);
      assertNotNull(charBuffer0);
      assertEquals(1, charArray1.length);
      
      int int0 = 9;
      // Undeclared exception!
      try { 
        strBuilder2.append(charBuffer0, 854, 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(1143);
      assertEquals(1143, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1143, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1143, charBuffer0.length());
      assertEquals(1143, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(charBuffer0, 1143, 1143);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = 2152;
      StrBuilder strBuilder1 = new StrBuilder(2021);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(2021, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append(stringBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals("", stringBuilder0.toString());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals("false", stringBuilder0.toString());
      assertEquals("false", stringBuilder1.toString());
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertNotNull(stringBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln(stringBuilder0, 2021, 2021);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("Invalid length: ");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder0.build();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(101);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(101, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(101));
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(iterator0);
      assertFalse(priorityQueue0.contains(101));
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(101, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(101, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(101, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      
      boolean boolean0 = priorityQueue0.add(strBuilder_StrBuilderTokenizer1);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(101, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(1, priorityQueue0.size());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertTrue(boolean0);
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertFalse(priorityQueue0.contains(101));
      
      // Undeclared exception!
      try { 
        strBuilder0.appendAll(iterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      StrBuilder strBuilder1 = strBuilder0.appendAll(iterator0);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("grs9)2+uI");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.getNullText();
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = StrBuilder.CAPACITY;
      assertEquals(32, int0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder1.getNewLineText();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("");
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      Writer writer0 = strBuilder0.asWriter();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(writer0);
      
      StrBuilder strBuilder1 = strBuilder0.append('H');
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0, 1, 0);
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertNotNull(strBuilder2);
      assertEquals(1, charArray0.length);
      
      int int1 = strBuilder2.validateRange(0, 0);
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertEquals(1, charArray0.length);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder2.new StrBuilderReader();
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(1, charArray0.length);
      
      strBuilder_StrBuilderReader0.reset();
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertEquals(1, charArray0.length);
      
      StrBuilder strBuilder3 = strBuilder0.append(false);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(7, strBuilder3.size());
      assertEquals(7, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(int0));
      
      Iterator<Integer> iterator0 = arrayDeque0.iterator();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      assertFalse(arrayDeque0.contains(int0));
      
      StrBuilder strBuilder4 = strBuilder1.appendAll(iterator0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(7, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(7, strBuilder4.length());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertNotNull(strBuilder4);
      assertFalse(arrayDeque0.contains(int0));
      
      StrBuilder strBuilder5 = strBuilder4.insert(1, "org.apache.commons.lang3.ArraySorter");
      assertEquals(86, strBuilder0.capacity());
      assertEquals(43, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(86, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(43, strBuilder1.length());
      assertEquals(43, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(86, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(43, strBuilder4.size());
      assertEquals(43, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(86, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(43, strBuilder5.size());
      assertEquals(43, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertNotNull(strBuilder5);
      assertFalse(arrayDeque0.contains(1));
      
      String string0 = strBuilder2.getNullText();
      assertEquals(86, strBuilder0.capacity());
      assertEquals(43, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(86, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(43, strBuilder1.length());
      assertEquals(43, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(43, strBuilder2.size());
      assertEquals(43, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(86, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertNull(string0);
      assertEquals(1, charArray0.length);
      
      String string1 = strBuilder4.getNewLineText();
      assertEquals(86, strBuilder0.capacity());
      assertEquals(43, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(86, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(43, strBuilder1.length());
      assertEquals(43, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(86, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(43, strBuilder4.size());
      assertEquals(43, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder2);
      assertNull(string1);
      assertFalse(arrayDeque0.contains(1));
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('{');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      strBuilder0.hashCode();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.append((StrBuilder) null, (-516), (-170));
      assertEquals(32, strBuilder2.capacity());
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      int int0 = (-2303);
      StrBuilder strBuilder0 = new StrBuilder((-2303));
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char char0 = 'o';
      StrBuilder strBuilder1 = new StrBuilder();
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.reverse();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      int int1 = 2107;
      StringWriter stringWriter0 = new StringWriter(2107);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = stringBuffer0.append((long) 3778);
      assertEquals("3778", stringWriter0.toString());
      assertEquals("3778", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      assertEquals(4, stringBuffer1.length());
      assertEquals("3778", stringBuffer1.toString());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      
      StrBuilder strBuilder3 = strBuilder2.appendln(stringBuffer0);
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals("3778", stringWriter0.toString());
      assertEquals("3778", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      assertEquals(5, strBuilder3.size());
      assertEquals(5, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      int int2 = 117;
      CharBuffer charBuffer0 = CharBuffer.allocate(117);
      assertTrue(charBuffer0.hasArray());
      assertEquals(117, charBuffer0.remaining());
      assertEquals(117, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(117, charBuffer0.capacity());
      assertEquals(117, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      int int3 = 0;
      // Undeclared exception!
      try { 
        strBuilder3.append((CharSequence) charBuffer0, 0, (-2303));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) null);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.minimizeCapacity();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.setLength(0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.appendSeparator("I2R]N: ", 63);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.capacity());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(7, strBuilder3.length());
      assertEquals(7, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(14, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(7, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(7, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder3.append(0);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.capacity());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(8, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(8, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(8, strBuilder5.size());
      assertEquals(8, strBuilder5.length());
      assertEquals(14, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertNotNull(strBuilder5);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.capacity());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'X';
      charArray0[2] = ';';
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.capacity());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'I', '2', 'R'}, charArray0);
      assertEquals(3, charArray0.length);
      
      // Undeclared exception!
      strBuilder5.readFrom(strBuilder_StrBuilderReader0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.trim();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      // Undeclared exception!
      try { 
        strBuilder2.append(strBuilder1, (-872), (-872));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll('w', '\"');
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("");
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendln(strBuilder1);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.replaceAll('w', '(');
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertEquals(1, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = strBuilder0.equals(object0);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be va:'");
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertEquals(51, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((-2572.39F));
      assertEquals(51, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(27, strBuilder0.size());
      assertEquals(27, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(51, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(27, strBuilder1.size());
      assertEquals(27, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder("length must be va:'");
      assertEquals(19, strBuilder2.length());
      assertEquals(19, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(51, strBuilder2.capacity());
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.insert(6, false);
      assertEquals(32, strBuilder0.size());
      assertEquals(32, strBuilder0.length());
      assertEquals(51, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(51, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.length());
      assertEquals(32, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) strBuilder2);
      assertEquals(19, strBuilder2.length());
      assertEquals(19, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(51, strBuilder2.capacity());
      assertEquals("length must be va:'", stringWriter0.toString());
      assertEquals("length must be va:'", stringWriter1.toString());
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertNotNull(stringWriter1);
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertEquals(19, strBuilder2.length());
      assertEquals(19, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(51, strBuilder2.capacity());
      assertEquals("length must be va:'", stringWriter0.toString());
      assertEquals("length must be va:'", stringWriter1.toString());
      assertEquals("length must be va:'", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder4 = strBuilder3.append(stringBuffer0, 6, 6);
      assertEquals(38, strBuilder0.length());
      assertEquals(51, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(38, strBuilder0.size());
      assertEquals(19, strBuilder2.length());
      assertEquals(19, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(51, strBuilder2.capacity());
      assertEquals(51, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(38, strBuilder3.size());
      assertEquals(38, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals("length must be va:'", stringWriter0.toString());
      assertEquals("length must be va:'", stringWriter1.toString());
      assertEquals("length must be va:'", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(38, strBuilder4.size());
      assertEquals(38, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(51, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder5 = strBuilder0.appendNull();
      assertEquals(38, strBuilder0.length());
      assertEquals(51, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(38, strBuilder0.size());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(51, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(38, strBuilder5.length());
      assertEquals(38, strBuilder5.size());
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = new StrBuilder();
      assertEquals(0, strBuilder6.size());
      assertEquals(0, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isNotEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder6.isEmpty());
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertNotNull(strBuilder6);
      
      String string0 = strBuilder2.toString();
      assertEquals(19, strBuilder2.length());
      assertEquals(19, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(51, strBuilder2.capacity());
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder3);
      assertEquals("length must be va:'", string0);
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertNotNull(string0);
      
      StrBuilder strBuilder7 = strBuilder3.appendln("length must be va:'");
      assertEquals(114, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(58, strBuilder0.size());
      assertEquals(58, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(114, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(58, strBuilder3.size());
      assertEquals(58, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(114, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(58, strBuilder7.length());
      assertEquals(58, strBuilder7.size());
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertNotNull(strBuilder7);
      
      boolean boolean1 = strBuilder6.equals((Object) strBuilder3);
      assertEquals(114, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(58, strBuilder0.size());
      assertEquals(58, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(114, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(58, strBuilder3.size());
      assertEquals(58, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder6.size());
      assertEquals(0, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isNotEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder6.isEmpty());
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder3);
      assertFalse(boolean1);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder7));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      int int0 = (-1);
      StrBuilder strBuilder0 = new StrBuilder((-1));
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char char0 = 'O';
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('O');
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.trim();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      strBuilder2.size = (-1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals((-1), strBuilder0.size());
      assertEquals((-1), strBuilder0.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals((-1), strBuilder1.length());
      assertEquals((-1), strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals((-1), strBuilder2.size());
      assertEquals((-1), strBuilder2.length());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder2.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("");
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StringReader stringReader0 = new StringReader("j^");
      assertNotNull(stringReader0);
      
      int int0 = strBuilder1.readFrom(stringReader0);
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNotSame(strBuilder1, strBuilder0);
      assertEquals(2, int0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.appendln((char[]) null, 0, 0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(1, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendSeparator('3', 423);
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.length());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = new StrBuilder("org.apache.commons.lang3.ArraySorter");
      assertEquals(36, strBuilder3.size());
      assertEquals(36, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(68, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      boolean boolean0 = strBuilder3.equals(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(36, strBuilder3.size());
      assertEquals(36, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(68, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      
      StrBuilder strBuilder4 = strBuilder3.append((char[]) null, 53, 2120);
      assertEquals(36, strBuilder3.size());
      assertEquals(36, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(68, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(68, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(36, strBuilder4.size());
      assertEquals(36, strBuilder4.length());
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      
      // Undeclared exception!
      try { 
        strBuilder3.substring((-434), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -434
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StrBuilder strBuilder0 = new StrBuilder(31);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(31, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(39, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 39
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '{';
      charArray0[1] = 'B';
      charArray0[2] = 'R';
      charArray0[3] = '6';
      charArray0[4] = 'n';
      charArray0[5] = '?';
      charArray0[6] = 'r';
      StrBuilder strBuilder1 = new StrBuilder();
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1, 0, 0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.length());
      assertEquals("{BR6n?r\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertArrayEquals(new char[] {'{', 'B', 'R', '6', 'n', '?', 'r', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(9, charArray0.length);
      
      charBufferArray0[0] = charBuffer0;
      StrBuilder strBuilder3 = strBuilder2.appendAll(charBufferArray0);
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(9, strBuilder2.size());
      assertEquals(9, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(9, strBuilder3.size());
      assertEquals(9, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      assertEquals(1, charBufferArray0.length);
      
      StrBuilder strBuilder4 = strBuilder1.append((-7L));
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(2, strBuilder4.size());
      assertEquals(2, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotNull(strBuilder4);
      
      // Undeclared exception!
      try { 
        strBuilder1.appendln(strBuilder0, 0, (-974));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '{';
      charArray0[1] = 'B';
      charArray0[2] = 'R';
      charArray0[3] = '6';
      charArray0[4] = 'n';
      charArray0[5] = '?';
      charArray0[6] = 'r';
      charArray0[7] = 'v';
      charArray0[8] = 'h';
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0, 0, 0);
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'{', 'B', 'R', '6', 'n', '?', 'r', 'v', 'h'}, charArray0);
      assertNotNull(strBuilder1);
      assertEquals(9, charArray0.length);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append((CharSequence) charBuffer0);
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertArrayEquals(new char[] {'{', 'B', 'R', '6', 'n', '?', 'r', 'v', 'h'}, charArray0);
      assertNotNull(strBuilder2);
      assertEquals(9, charArray0.length);
      
      String string0 = "";
      StrBuilder strBuilder3 = strBuilder0.append(0);
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(2, strBuilder3.size());
      assertEquals(2, strBuilder3.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert((-340), '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -340
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) null);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.setLength(1807);
      assertEquals(3614, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1807, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1807, strBuilder0.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(3614, strBuilder2.capacity());
      assertEquals(1807, strBuilder2.length());
      assertEquals(1807, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      Writer writer0 = strBuilder1.asWriter();
      assertEquals(3614, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1807, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1807, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3614, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1807, strBuilder1.size());
      assertEquals(1807, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(writer0);
      
      char char0 = 'W';
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) strBuilder2;
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertEquals(3614, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1807, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1807, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3614, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1807, strBuilder1.size());
      assertEquals(1807, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertEquals(3614, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1807, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1807, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3614, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1807, strBuilder1.size());
      assertEquals(1807, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      
      objectArray0[1] = (Object) strBuilder_StrBuilderTokenizer1;
      objectArray0[2] = (Object) strBuilder2;
      objectArray0[3] = (Object) strBuilder0;
      objectArray0[4] = (Object) strBuilder2;
      // Undeclared exception!
      try { 
        strBuilder0.appendln((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[20];
      charArray0[0] = 'H';
      Writer writer0 = strBuilder0.asWriter();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(writer0);
      
      StrBuilder strBuilder1 = strBuilder0.append('H');
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendln("", 0, 0);
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(2, strBuilder2.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = new StrBuilder('H');
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(72, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      
      char[] charArray1 = strBuilder2.getChars(charArray0);
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(2, strBuilder2.length());
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(charArray0, charArray1);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(charArray1, charArray0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertNotNull(charArray1);
      assertEquals(20, charArray0.length);
      assertEquals(20, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("grs9)2+uI");
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.capacity());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertArrayEquals(new char[] {'g', 'r', 's', '9', ')', '2', '+', 'u', 'I'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(9, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-16));
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("i|QS");
      assertEquals("i|QS", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[5];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("@p}<zZt}\"");
      assertEquals(41, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'b';
      charArray0[1] = '[';
      charArray0[2] = 'D';
      charArray0[3] = '4';
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(41, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'b', '[', 'D', '4'}, charArray0);
      assertArrayEquals(new char[] {'@', 'p', '}', '<', 'z', 'Z', 't', '}', '\"'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(9, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = 14;
      String string0 = ";;DYm<:";
      Reader reader0 = strBuilder0.asReader();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(reader0.markSupported());
      assertFalse(reader0.ready());
      assertNotNull(reader0);
      
      // Undeclared exception!
      try { 
        strBuilder0.replace(1807, 14, ";;DYm<:");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = 2152;
      StrBuilder strBuilder1 = strBuilder0.appendln(2152);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("false", stringBuilder0.toString());
      assertEquals("false", stringBuilder1.toString());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertNotNull(stringBuilder1);
      
      StrBuilder strBuilder3 = new StrBuilder(2021);
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(2021, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      
      int int1 = strBuilder0.capacity();
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertEquals(32, int1);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        strBuilder3.charAt(3419);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3419
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(928);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(928, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.isNotEmpty();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(928, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(boolean0);
      
      int int0 = strBuilder0.capacity();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(928, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(928, int0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(0.0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.minimizeCapacity();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.capacity());
      assertEquals(3, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(3, strBuilder2.length());
      assertEquals(3, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.appendSeparator("~9b q5RUP", 0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(3, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(3, strBuilder3.length());
      assertEquals(3, strBuilder3.size());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder2.replaceFirst('r', 'r');
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.capacity());
      assertEquals(3, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(3, strBuilder2.length());
      assertEquals(3, strBuilder2.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(3, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(3, strBuilder4.size());
      assertEquals(3, strBuilder4.length());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertNotNull(strBuilder4);
      
      int int0 = strBuilder2.indexOf("remove() is unsupported", (-2523));
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.capacity());
      assertEquals(3, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(3, strBuilder2.length());
      assertEquals(3, strBuilder2.size());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertEquals((-1), int0);
      
      boolean boolean0 = strBuilder4.equals(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.capacity());
      assertEquals(3, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(3, strBuilder2.length());
      assertEquals(3, strBuilder2.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(3, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(3, strBuilder4.size());
      assertEquals(3, strBuilder4.length());
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("xihnv!zR/Sq|>d}jGO");
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(50, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.deleteFirst("");
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(50, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertEquals(18, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(18, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(50, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(102);
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(102, charBuffer0.length());
      assertEquals(102, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder3 = strBuilder1.append(charBuffer0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(240, strBuilder0.capacity());
      assertEquals(120, strBuilder0.size());
      assertEquals(120, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(240, strBuilder1.capacity());
      assertEquals(120, strBuilder1.length());
      assertEquals(120, strBuilder1.size());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(102, charBuffer0.length());
      assertEquals(102, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(120, strBuilder3.size());
      assertEquals(120, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(240, strBuilder3.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      strBuilder0.size = 0;
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      strBuilder0.size = 0;
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder4 = strBuilder0.ensureCapacity(102);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(240, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertNotNull(strBuilder4);
      
      // Undeclared exception!
      try { 
        strBuilder4.insert(1, 'y');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(strBuilder1);
      assertEquals(0, charArray0.length);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln(charArray0, (-1100), 104);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 104
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(105);
      assertEquals(105, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("");
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
      assertEquals(105, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(105, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.appendln("r\"FtQ4wc}V!^!r=^P");
      assertEquals(105, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(18, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(105, strBuilder3.capacity());
      assertEquals(18, strBuilder3.size());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-277));
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("3#xTisj?", "3#xTisj?");
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendln("3GWO FDA", (Object[]) null);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(9, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(9, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder2.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(9, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(9, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      charArray0[1] = 'r';
      charArray0[2] = 'W';
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, (-277), 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      int int0 = 2;
      StrBuilder strBuilder0 = new StrBuilder(2);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("i|QS");
      assertEquals("i|QS", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'J';
      charArray0[1] = 'v';
      charArray0[2] = 'K';
      charArray0[3] = 'v';
      charArray0[4] = 'J';
      charArray0[5] = 'K';
      charArray0[6] = 'v';
      int int1 = (-2432);
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 2, (-2432));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -2432
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("@p}<zZt}\"");
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(41, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'b';
      charArray0[1] = '[';
      // Undeclared exception!
      try { 
        strBuilder0.appendln(charArray0, 0, 1888);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 1888
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      Writer writer0 = strBuilder0.asWriter();
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(writer0);
      
      StrBuilder strBuilder1 = strBuilder0.append('H');
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendln("", 0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(2, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendFixedWidthPadLeft(4, 1, 'H');
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(3, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(3, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(3, strBuilder3.length());
      assertEquals(3, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln(charArray0, 0, 1888);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 1888
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.charAt((-189));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -189
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.charAt(1568);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1568
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.charAt(1568);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1568
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((-118.9619F));
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("grs9)2+uI");
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder("grs9)2+uI");
      assertEquals(41, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(9, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(9, strBuilder2.size());
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(41, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(9, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(9, strBuilder2.size());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertTrue(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      
      int int0 = strBuilder1.lastIndexOf("v");
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertEquals((-1), int0);
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("xihnv!zR/Sq|>d}jGO");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder1.size());
      assertEquals(18, strBuilder1.length());
      assertEquals(50, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendln(380.894F);
      assertEquals(26, strBuilder0.size());
      assertEquals(26, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(26, strBuilder1.size());
      assertEquals(26, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(50, strBuilder1.capacity());
      assertEquals(26, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(50, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(26, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(102);
      assertEquals(102, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(102, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder3 = strBuilder1.append(charBuffer0);
      assertEquals(256, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(128, strBuilder0.size());
      assertEquals(128, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(256, strBuilder1.capacity());
      assertEquals(128, strBuilder1.size());
      assertEquals(128, strBuilder1.length());
      assertEquals(102, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(102, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(128, strBuilder3.size());
      assertEquals(128, strBuilder3.length());
      assertEquals(256, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      strBuilder0.size = 0;
      assertEquals(256, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      
      strBuilder0.size = 0;
      assertEquals(256, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(256, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder4 = strBuilder0.ensureCapacity(102);
      assertEquals(256, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(256, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertNotNull(strBuilder4);
      
      String string0 = strBuilder4.substring(0, 0);
      assertEquals(256, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(256, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = '!';
      charArray0[2] = 'w';
      charArray0[3] = '!';
      charArray0[4] = 'P';
      charArray0[5] = '!';
      HashSet<StringReader> hashSet0 = new HashSet<StringReader>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      PriorityQueue<StringReader> priorityQueue0 = new PriorityQueue<StringReader>(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      StrBuilder strBuilder5 = strBuilder3.appendWithSeparators((Iterable<?>) priorityQueue0, "=:KFs7m/_kqFZ");
      assertEquals(256, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(256, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, priorityQueue0.size());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(256, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(102, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(102, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(256, strBuilder3.capacity());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder4.appendln(380.894F);
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertEquals(256, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(256, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(8, strBuilder6.length());
      assertEquals(8, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertEquals(8, strBuilder4.length());
      assertEquals(8, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(256, strBuilder4.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertNotNull(strBuilder6);
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertEquals(256, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.size());
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(256, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, 2945, 2746);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 2746
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("@qh%t0OAE$fQ19;Q");
      assertEquals(16, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains('<');
      assertEquals(16, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("bFyN(o#(ye");
      assertEquals(42, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("'\"");
      assertEquals(34, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertEquals(42, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt((-184));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -184
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-3966));
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(1991);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1991
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendln((Object) strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.size());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.deleteFirst("|KT6bcw[Jip`?W6h@~");
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(1, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("gPCApRV'^FF");
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.reset();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      Vector<String> vector0 = new Vector<String>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      assertFalse(vector0.contains("gPCApRV'^FF"));
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      assertFalse(vector0.contains("gPCApRV'^FF"));
      assertFalse(arrayDeque0.contains("gPCApRV'^FF"));
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) arrayDeque0, "gPCApRV'^FF");
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(11, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11, strBuilder1.length());
      assertEquals(43, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertFalse(vector0.contains("gPCApRV'^FF"));
      assertFalse(arrayDeque0.contains("gPCApRV'^FF"));
      
      long long0 = strBuilder_StrBuilderReader0.skip(0L);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0L, long0);
      
      long long1 = strBuilder_StrBuilderReader0.skip(2438L);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertSame(strBuilder0, strBuilder1);
      assertEquals(11L, long1);
      assertFalse(long1 == long0);
      
      String string0 = strBuilder0.rightString((-521));
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("x");
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.isNotEmpty();
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendAll((Object[]) null);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder2.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.replaceFirst((String) null, (String) null);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      String string0 = strBuilder3.toString();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals("", string0);
      assertNotNull(string0);
      
      HashSet<StringBuffer> hashSet0 = null;
      try {
        hashSet0 = new HashSet<StringBuffer>(1141, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String[] stringArray0 = new String[13];
      stringArray0[0] = "";
      StrBuilder strBuilder2 = strBuilder0.appendAll(stringArray0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      assertEquals(13, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("`4'4la0");
      assertFalse(strBuilder1.isEmpty());
      assertEquals(39, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(7, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "`4'4la0";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "`4'4la0";
      StrBuilder strBuilder2 = strBuilder1.appendAll(stringArray0);
      assertFalse(strBuilder1.isEmpty());
      assertEquals(39, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(21, strBuilder1.size());
      assertEquals(21, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(39, strBuilder2.capacity());
      assertEquals(21, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(21, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      assertEquals(6, stringArray0.length);
      
      StrBuilder strBuilder3 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder1, 1, '3');
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(39, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(21, strBuilder1.size());
      assertEquals(21, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(1, strBuilder3.size());
      assertEquals(1, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      String string0 = strBuilder0.leftString((-434));
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertEquals("", string0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertNotNull(string0);
      
      Writer writer0 = strBuilder0.asWriter();
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertNotNull(writer0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(108, 108);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 108
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("xihnv!zR/Sq|>d}jGO");
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(50, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(18, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = 102;
      CharBuffer charBuffer0 = CharBuffer.allocate(102);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.length());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(102, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(charBuffer0);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(240, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(120, strBuilder0.size());
      assertEquals(120, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(120, strBuilder1.size());
      assertEquals(120, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(240, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.length());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(102, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(120, strBuilder2.length());
      assertEquals(120, strBuilder2.size());
      assertEquals(240, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      int int1 = 0;
      strBuilder0.size = 0;
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      strBuilder0.size = 0;
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder3 = strBuilder0.ensureCapacity(102);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(240, strBuilder3.capacity());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      String string0 = strBuilder3.substring(0, 0);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(240, strBuilder3.capacity());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char char0 = '!';
      StrBuilder strBuilder4 = strBuilder0.appendFixedWidthPadLeft(0, 0, '!');
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder4.length());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.size());
      assertEquals(240, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNotNull(strBuilder4);
      
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        strBuilder0.insert(52, (-3962));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 52
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      Reader reader0 = strBuilder0.asReader();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(reader0.ready());
      assertTrue(reader0.markSupported());
      assertNotNull(reader0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendSeparator('&', 3614);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = new StrBuilder("");
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.appendln((-1904.2));
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(8, strBuilder3.size());
      assertEquals(8, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(8, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(8, strBuilder4.length());
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder2.append(strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(10, strBuilder2.size());
      assertEquals(10, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(8, strBuilder3.size());
      assertEquals(8, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(10, strBuilder5.length());
      assertEquals(10, strBuilder5.size());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertNotNull(strBuilder5);
      
      int int0 = strBuilder0.indexOf("t%ueNHF");
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      
      StrBuilder strBuilder6 = strBuilder0.deleteFirst('t');
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(10, strBuilder6.size());
      assertEquals(10, strBuilder6.length());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertNotNull(strBuilder6);
      
      Reader reader0 = strBuilder6.asReader();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(10, strBuilder6.size());
      assertEquals(10, strBuilder6.length());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertTrue(reader0.markSupported());
      assertTrue(reader0.ready());
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertNotNull(reader0);
      
      StrBuilder strBuilder7 = strBuilder0.appendNewLine();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11, strBuilder7.size());
      assertEquals(11, strBuilder7.length());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(32, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = strBuilder2.append((-927L));
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder1.length());
      assertEquals(15, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(15, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(15, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(15, strBuilder8.size());
      assertEquals(15, strBuilder8.length());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertTrue(strBuilder8.isNotEmpty());
      assertEquals(32, strBuilder8.capacity());
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder3);
      assertNotSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder6);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertNotNull(strBuilder8);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '&';
      int int1 = (-1203);
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-1), (-1203));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendln((char[]) null);
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendPadding(1, '[');
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(2, strBuilder3.size());
      assertEquals(2, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.append((-3171));
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(7, strBuilder4.length());
      assertEquals(7, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder2.appendSeparator('L', 152);
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(8, strBuilder2.size());
      assertEquals(8, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(8, strBuilder5.length());
      assertEquals(8, strBuilder5.size());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertNotNull(strBuilder5);
      
      boolean boolean0 = strBuilder1.startsWith("");
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertTrue(boolean0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      boolean boolean1 = strBuilder5.isNotEmpty();
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(8, strBuilder2.size());
      assertEquals(8, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(8, strBuilder5.length());
      assertEquals(8, strBuilder5.size());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertTrue(boolean1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("xihnv!zR/Sq|>d}jGO");
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder1.size());
      assertEquals(50, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(102);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(102, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.length());
      assertEquals(102, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(charBuffer0);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(240, strBuilder0.capacity());
      assertEquals(120, strBuilder0.length());
      assertEquals(120, strBuilder0.size());
      assertEquals(120, strBuilder1.length());
      assertEquals(240, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(120, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(102, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.length());
      assertEquals(102, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(120, strBuilder2.size());
      assertEquals(120, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(240, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      strBuilder0.size = 0;
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(240, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      
      strBuilder0.size = 0;
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(240, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(240, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder3 = strBuilder0.ensureCapacity(102);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(240, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(240, strBuilder3.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      String string0 = strBuilder3.substring(0, 0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(240, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(240, strBuilder3.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      IntStream intStream0 = stringBuffer0.codePoints();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(intStream0);
      
      boolean boolean0 = strBuilder2.isNotEmpty();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(240, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(240, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(102, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.length());
      assertEquals(102, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(240, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      strBuilder0.hashCode();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      TreeSet<StringReader> treeSet0 = new TreeSet<StringReader>();
      assertNotNull(treeSet0);
      
      StringReader stringReader0 = treeSet0.pollFirst();
      assertNull(stringReader0);
      
      Iterator<StringReader> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(iterator0, (String) null);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendln(31);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.setLength(31);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(31, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(31, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(31, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(31, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(31, strBuilder2.size());
      assertEquals(31, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(31, strBuilder3.size());
      assertEquals(31, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder2.append(false);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(72, strBuilder0.capacity());
      assertEquals(36, strBuilder0.size());
      assertEquals(36, strBuilder0.length());
      assertEquals(36, strBuilder1.size());
      assertEquals(36, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(72, strBuilder1.capacity());
      assertEquals(36, strBuilder2.length());
      assertEquals(72, strBuilder2.capacity());
      assertEquals(36, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(36, strBuilder4.length());
      assertEquals(72, strBuilder4.capacity());
      assertEquals(36, strBuilder4.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder1.appendSeparator("", (-736));
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(72, strBuilder0.capacity());
      assertEquals(36, strBuilder0.size());
      assertEquals(36, strBuilder0.length());
      assertEquals(36, strBuilder1.size());
      assertEquals(36, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(72, strBuilder1.capacity());
      assertEquals(36, strBuilder5.size());
      assertEquals(72, strBuilder5.capacity());
      assertEquals(36, strBuilder5.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder0.replaceFirst('r', 'r');
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(72, strBuilder0.capacity());
      assertEquals(36, strBuilder0.size());
      assertEquals(36, strBuilder0.length());
      assertFalse(strBuilder6.isEmpty());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(36, strBuilder6.size());
      assertEquals(36, strBuilder6.length());
      assertEquals(72, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertNotNull(strBuilder6);
      
      int int0 = strBuilder0.indexOf("eAC=ShB;5", (-2523));
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(72, strBuilder0.capacity());
      assertEquals(36, strBuilder0.size());
      assertEquals(36, strBuilder0.length());
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int0);
      
      boolean boolean0 = strBuilder2.equals(strBuilder5);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(72, strBuilder0.capacity());
      assertEquals(36, strBuilder0.size());
      assertEquals(36, strBuilder0.length());
      assertEquals(36, strBuilder1.size());
      assertEquals(36, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(72, strBuilder1.capacity());
      assertEquals(36, strBuilder2.length());
      assertEquals(72, strBuilder2.capacity());
      assertEquals(36, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(36, strBuilder5.size());
      assertEquals(72, strBuilder5.capacity());
      assertEquals(36, strBuilder5.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        strBuilder3.substring((-2523), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2523
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = "8";
      StrBuilder strBuilder0 = new StrBuilder("8");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      String string1 = strBuilder0.substring(0, 0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("8");
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder1);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.appendln(stringBuffer0, 0, 0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(33, strBuilder2.capacity());
      assertEquals(1, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      charArray0[1] = ' ';
      StrBuilder strBuilder3 = strBuilder2.append(charArray0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(3, strBuilder2.length());
      assertEquals(3, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(33, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(33, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(3, strBuilder3.size());
      assertEquals(3, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertArrayEquals(new char[] {'8', ' '}, charArray0);
      assertNotNull(strBuilder3);
      assertEquals(2, charArray0.length);
      
      StrBuilder strBuilder4 = strBuilder0.insert(0, (float) 0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder4.size());
      assertEquals(6, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(33, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder1.append(1.0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(9, strBuilder1.length());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(33, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(9, strBuilder5.length());
      assertEquals(9, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertNotNull(strBuilder5);
      
      TreeSet<StringReader> treeSet0 = new TreeSet<StringReader>();
      assertNotNull(treeSet0);
      
      Iterator<StringReader> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      StrBuilder strBuilder6 = strBuilder5.appendWithSeparators(iterator0, "}%4ft");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(9, strBuilder1.length());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(33, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(9, strBuilder5.length());
      assertEquals(9, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(33, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(9, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(9, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertNotNull(strBuilder6);
      
      String string2 = strBuilder5.toString();
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(9, strBuilder1.length());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(33, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(9, strBuilder5.length());
      assertEquals(9, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertEquals("0.0\n8 1.0", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      StrBuilder strBuilder7 = strBuilder1.append((Object) "0.0\n8 1.0");
      assertEquals(33, strBuilder7.capacity());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(18, strBuilder7.size());
      assertEquals(18, strBuilder7.length());
      assertTrue(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder1.size());
      assertEquals(18, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertNotNull(strBuilder7);
      
      int int1 = 0;
      StrBuilder strBuilder8 = strBuilder0.appendFixedWidthPadRight((Object) "8", 0, '8');
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder8.length());
      assertEquals(18, strBuilder8.size());
      assertTrue(strBuilder8.isNotEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(33, strBuilder8.capacity());
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder5);
      assertNotNull(strBuilder8);
      
      StrBuilder strBuilder9 = strBuilder3.append("8");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertEquals(33, strBuilder9.capacity());
      assertTrue(strBuilder9.isNotEmpty());
      assertNull(strBuilder9.getNullText());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(19, strBuilder9.length());
      assertEquals(19, strBuilder9.size());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(19, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(19, strBuilder1.length());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(19, strBuilder2.length());
      assertEquals(19, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(33, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(33, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(19, strBuilder3.size());
      assertEquals(19, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder8);
      assertArrayEquals(new char[] {'8', ' '}, charArray0);
      assertNotNull(strBuilder9);
      assertEquals(2, charArray0.length);
      
      StringBuilder stringBuilder0 = new StringBuilder("");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((-3357));
      assertEquals("-3357", stringBuilder0.toString());
      assertEquals("-3357", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      int int2 = (-800);
      // Undeclared exception!
      try { 
        stringBuilder1.delete((-800), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -800
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer(1937);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer1 = new StringBuffer(1937);
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotNull(stringBuffer1);
      
      IntStream intStream0 = stringBuffer1.chars();
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertNotSame(stringBuffer1, stringBuffer0);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotNull(intStream0);
      
      StrBuilder strBuilder2 = strBuilder1.append((CharSequence) null, 1937, 1687);
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.trim();
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = new StrBuilder();
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertNotNull(strBuilder4);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(1937, (Object) strBuilder4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1937
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      TreeSet<StringReader> treeSet0 = new TreeSet<StringReader>();
      assertNotNull(treeSet0);
      
      StringReader stringReader0 = treeSet0.pollFirst();
      assertNull(stringReader0);
      
      Iterator<StringReader> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(iterator0, (String) null);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendln(31);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.setLength(31);
      assertEquals(31, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(31, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(31, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(31, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(31, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(31, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(31, strBuilder3.length());
      assertEquals(31, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder2.append(false);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(72, strBuilder0.capacity());
      assertEquals(36, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(36, strBuilder1.size());
      assertEquals(36, strBuilder1.length());
      assertEquals(72, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(36, strBuilder2.size());
      assertEquals(36, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(72, strBuilder2.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(72, strBuilder4.capacity());
      assertEquals(36, strBuilder4.length());
      assertEquals(36, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder1.appendSeparator("", (-736));
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(72, strBuilder0.capacity());
      assertEquals(36, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(36, strBuilder1.size());
      assertEquals(36, strBuilder1.length());
      assertEquals(72, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(36, strBuilder5.length());
      assertEquals(72, strBuilder5.capacity());
      assertEquals(36, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder0.replaceFirst('r', 'r');
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(72, strBuilder0.capacity());
      assertEquals(36, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(36, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertEquals(72, strBuilder6.capacity());
      assertEquals(36, strBuilder6.size());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertNotNull(strBuilder6);
      
      String string0 = "eACShB;5";
      int int0 = (-2523);
      int int1 = strBuilder0.indexOf("eACShB;5", (-2523));
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(72, strBuilder0.capacity());
      assertEquals(36, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = strBuilder2.equals(strBuilder5);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(72, strBuilder0.capacity());
      assertEquals(36, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(36, strBuilder1.size());
      assertEquals(36, strBuilder1.length());
      assertEquals(72, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(36, strBuilder2.size());
      assertEquals(36, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(72, strBuilder2.capacity());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(36, strBuilder5.length());
      assertEquals(72, strBuilder5.capacity());
      assertEquals(36, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertTrue(boolean0);
      
      int int2 = 2506;
      StrBuilder strBuilder7 = strBuilder0.append((CharSequence) null, 2506, 31);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(72, strBuilder0.capacity());
      assertEquals(36, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder7.length());
      assertEquals(72, strBuilder7.capacity());
      assertEquals(36, strBuilder7.size());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertTrue(strBuilder7.isNotEmpty());
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder4);
      assertNotNull(strBuilder7);
      
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(strBuilder1);
      assertEquals(0, charArray0.length);
      
      int int0 = strBuilder1.indexOf('y');
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator("");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(2);
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.isEmpty();
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertFalse(boolean0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      boolean boolean1 = strBuilder2.isNotEmpty();
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertFalse(boolean1);
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(49);
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(49, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setNullText("mFP'UHwfIM&R");
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals("mFP'UHwfIM&R", strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(49, strBuilder0.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals("mFP'UHwfIM&R", strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(49, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator("end < start", "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
      assertEquals(120, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals("mFP'UHwfIM&R", strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(60, strBuilder0.length());
      assertEquals(60, strBuilder0.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(120, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(60, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(60, strBuilder2.length());
      assertEquals("mFP'UHwfIM&R", strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.appendln(49);
      assertEquals(120, strBuilder0.capacity());
      assertEquals(63, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(63, strBuilder0.size());
      assertEquals("mFP'UHwfIM&R", strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals("mFP'UHwfIM&R", strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(120, strBuilder3.capacity());
      assertEquals(63, strBuilder3.length());
      assertEquals(63, strBuilder3.size());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      char[] charArray0 = strBuilder3.toCharArray();
      assertEquals(120, strBuilder0.capacity());
      assertEquals(63, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(63, strBuilder0.size());
      assertEquals("mFP'UHwfIM&R", strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals("mFP'UHwfIM&R", strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(120, strBuilder3.capacity());
      assertEquals(63, strBuilder3.length());
      assertEquals(63, strBuilder3.size());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(charArray0);
      assertEquals(63, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("gPCApRV'^FF");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.reset();
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator(", '", "gPCApRV'^FF");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(14, strBuilder1.length());
      assertEquals(14, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(43, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      long long0 = strBuilder_StrBuilderReader0.skip(0L);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0L, long0);
      
      long long1 = strBuilder_StrBuilderReader0.skip(2438L);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertSame(strBuilder0, strBuilder1);
      assertEquals(14L, long1);
      assertFalse(long1 == long0);
      
      String string0 = strBuilder0.rightString((-521));
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("i|QS");
      assertEquals("i|QS", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[2] = 'n';
      StringBuilder stringBuilder1 = stringBuilder0.append((int) 'Y');
      assertEquals("i|QS89", stringBuilder0.toString());
      assertEquals("i|QS89", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuilder1, 0, 2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals("i|QS89", stringBuilder0.toString());
      assertEquals("i|QS89", stringBuilder1.toString());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2, strBuilder1.capacity());
      assertEquals(2, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      strBuilder1.appendTo(stringBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals("i|QS89i|", stringBuilder0.toString());
      assertEquals("i|QS89i|", stringBuilder1.toString());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2, strBuilder1.capacity());
      assertEquals(2, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.insert(2, charArray0);
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertEquals(14, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(7, strBuilder2.size());
      assertEquals(7, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(14, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertArrayEquals(new char[] {'Y', '\u0000', 'n', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strBuilder2);
      assertEquals(5, charArray0.length);
      
      StrBuilder strBuilder3 = strBuilder1.appendPadding(3, 'Y');
      assertEquals(14, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("i|QS89i|", stringBuilder0.toString());
      assertEquals("i|QS89i|", stringBuilder1.toString());
      assertEquals(14, strBuilder1.capacity());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(10, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(14, strBuilder3.capacity());
      assertEquals(10, strBuilder3.size());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      StrBuilder strBuilder1 = new StrBuilder((-2248));
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder1.leftString((-2248));
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNotSame(strBuilder1, strBuilder0);
      assertEquals("", string0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln('f');
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendln((Object) strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.deleteFirst("|KT6bcw[Jip`?W6h@~");
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(5, strBuilder3.size());
      assertEquals(5, strBuilder3.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder0.deleteCharAt(0);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(4, strBuilder4.size());
      assertEquals(4, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = new StrBuilder('f');
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.length());
      assertEquals(102, strBuilder5.capacity());
      assertEquals(0, strBuilder5.size());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertNotNull(strBuilder5);
      
      boolean boolean0 = strBuilder2.endsWith("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(4, strBuilder2.length());
      assertEquals(4, strBuilder2.size());
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      
      StrBuilder strBuilder6 = strBuilder0.trim();
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder6.size());
      assertEquals(1, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertNotNull(strBuilder6);
      
      boolean boolean1 = strBuilder1.equals(strBuilder6);
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder6.size());
      assertEquals(1, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertTrue(boolean1);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(boolean1 == boolean0);
      
      StrBuilder strBuilder7 = new StrBuilder("|KT6bcw[Jip`?W6h@~");
      assertNull(strBuilder7.getNewLineText());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(50, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertEquals(18, strBuilder7.size());
      assertEquals(18, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertNotNull(strBuilder7);
      
      String string0 = strBuilder7.leftString(0);
      assertNull(strBuilder7.getNewLineText());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(50, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertEquals(18, strBuilder7.size());
      assertEquals(18, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertNotSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder4);
      assertEquals("", string0);
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertNotNull(string0);
      
      strBuilder3.appendTo(strBuilder6);
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(2, strBuilder2.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(2, strBuilder3.size());
      assertEquals(2, strBuilder3.length());
      assertEquals(2, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(2, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertNotSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder7);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder7));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder7));
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.leftString(28);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      boolean boolean0 = strBuilder_StrBuilderTokenizer0.hasPrevious();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderTokenizer0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((char[]) null);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendPadding((-491), '[');
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.length());
      assertEquals(1, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.append((-491));
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder3.length());
      assertEquals(5, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      boolean boolean0 = strBuilder0.startsWith("");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-587));
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.build();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StrBuilder.CAPACITY;
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.clear();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      // Undeclared exception!
      try { 
        strBuilder1.insert(515, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 515
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      char char0 = 'J';
      char[] charArray0 = new char[8];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
      charArray0[6] = 'J';
      charArray0[7] = 'J';
      // Undeclared exception!
      try { 
        strBuilder0.insert((-2665), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2665
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      int int0 = (-2048);
      StrBuilder strBuilder0 = new StrBuilder((-2048));
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char char0 = 'o';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(1, 3778, 'o');
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3778, strBuilder0.length());
      assertEquals(3778, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7556, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7556, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3778, strBuilder1.size());
      assertEquals(3778, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.reverse();
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3778, strBuilder0.length());
      assertEquals(3778, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7556, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(7556, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(3778, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3778, strBuilder2.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      int int1 = 2107;
      StringWriter stringWriter0 = new StringWriter(2107);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder3 = strBuilder2.appendln(stringBuffer0);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3779, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3779, strBuilder0.size());
      assertEquals(7556, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(7556, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(3779, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3779, strBuilder2.size());
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(7556, strBuilder3.capacity());
      assertEquals(3779, strBuilder3.length());
      assertEquals(3779, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      charArray0[1] = '5';
      charArray0[2] = 'o';
      // Undeclared exception!
      try { 
        strBuilder1.appendln(charArray0, (-2048), 97);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 97
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(" ");
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.appendln(charArray0, 3699, 401);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 401
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      Writer writer0 = strBuilder0.asWriter();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(writer0);
      
      strBuilder0.appendTo(writer0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("xihnv!zR/Sq|>d}jGO");
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(50, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = 102;
      CharBuffer charBuffer0 = CharBuffer.allocate(102);
      assertEquals(0, charBuffer0.position());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(102, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(charBuffer0);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(120, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(120, strBuilder0.length());
      assertEquals(240, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(120, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(120, strBuilder1.size());
      assertEquals(240, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(0, charBuffer0.position());
      assertEquals(102, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(102, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(102, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(120, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(120, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(240, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      int int1 = 0;
      strBuilder0.size = 0;
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(240, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      
      strBuilder0.size = 0;
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(240, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(240, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      int int2 = 0;
      StrBuilder strBuilder3 = strBuilder0.ensureCapacity(102);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(240, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(240, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      String string0 = strBuilder3.substring(0, 0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(240, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(240, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char char0 = '!';
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = '!';
      charArray0[2] = 'w';
      charArray0[3] = '!';
      charArray0[4] = 'P';
      charArray0[5] = '!';
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, 2945, 2746);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 2746
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(997);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(997, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(116);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(997, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(116, strBuilder0.size());
      assertEquals(116, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(997, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(116, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(116, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder1.midString(997, (-3020));
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(997, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(116, strBuilder0.size());
      assertEquals(116, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(997, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(116, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(116, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder2 = strBuilder1.append(strBuilder0, 0, 0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(997, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(116, strBuilder0.size());
      assertEquals(116, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(997, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(116, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(116, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(997, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(116, strBuilder2.length());
      assertEquals(116, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      charArray0[1] = '=';
      charArray0[2] = '3';
      charArray0[3] = 'O';
      charArray0[4] = 'k';
      // Undeclared exception!
      try { 
        strBuilder2.insert(108, charArray0, 76, 6);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 76
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("2!G9Zs72zK'rOm^^)D");
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith("2!G9Zs72zK'rOm^^)D");
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertTrue(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder(2);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 0, (-651));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -651
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(108);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(108, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(108, strBuilder0.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(108, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      String string0 = "EtRUZCviqwJl#7@`E";
      StrBuilder strBuilder3 = strBuilder0.replaceFirst("EtRUZCviqwJl#7@`E", "EtRUZCviqwJl#7@`E");
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(108, strBuilder3.capacity());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'v';
      charArray0[1] = '/';
      charArray0[2] = '*';
      charArray0[3] = '9';
      charArray0[4] = '^';
      charArray0[5] = '[';
      charArray0[6] = '!';
      StrBuilder strBuilder4 = strBuilder1.appendln(charArray0);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(8, strBuilder1.length());
      assertEquals(8, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(8, strBuilder4.length());
      assertEquals(8, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertArrayEquals(new char[] {'v', '/', '*', '9', '^', '[', '!'}, charArray0);
      assertNotNull(strBuilder4);
      assertEquals(7, charArray0.length);
      
      StrBuilder strBuilder5 = strBuilder2.appendPadding(108, '^');
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(108, strBuilder0.capacity());
      assertEquals(108, strBuilder0.size());
      assertEquals(108, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(8, strBuilder1.length());
      assertEquals(8, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(108, strBuilder2.capacity());
      assertEquals(108, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(108, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(108, strBuilder5.capacity());
      assertEquals(108, strBuilder5.size());
      assertEquals(108, strBuilder5.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder0.append(108);
      assertEquals(111, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(222, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(111, strBuilder0.length());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(111, strBuilder6.size());
      assertEquals(222, strBuilder6.capacity());
      assertEquals(111, strBuilder6.length());
      assertTrue(strBuilder6.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder1.appendSeparator('8', 3);
      assertFalse(strBuilder7.isEmpty());
      assertEquals(9, strBuilder7.size());
      assertEquals(32, strBuilder7.capacity());
      assertTrue(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(9, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(9, strBuilder1.size());
      assertEquals(9, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertNotNull(strBuilder7);
      
      // Undeclared exception!
      try { 
        strBuilder1.insert(3, charArray0, 108, 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 108
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("");
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      StringBuffer stringBuffer0 = new StringBuffer(441);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0);
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      Writer writer0 = strBuilder0.asWriter();
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(writer0);
      
      StrBuilder strBuilder2 = strBuilder0.append('H');
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.appendln(charArray0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(4, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(4, strBuilder3.size());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertNotNull(strBuilder3);
      assertEquals(1, charArray0.length);
      
      StrBuilder strBuilder4 = strBuilder3.appendPadding(0, '[');
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(4, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(4, strBuilder3.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(4, strBuilder4.size());
      assertEquals(4, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertNotNull(strBuilder4);
      assertEquals(1, charArray0.length);
      
      StrBuilder strBuilder5 = strBuilder0.append(1);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder5.size());
      assertEquals(5, strBuilder5.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = new StrBuilder("Ga!zv");
      assertEquals(37, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertEquals(5, strBuilder6.size());
      assertEquals(5, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder6.appendSeparator('1', (-1));
      assertEquals(37, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertEquals(5, strBuilder6.size());
      assertEquals(5, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(5, strBuilder7.length());
      assertEquals(5, strBuilder7.size());
      assertNull(strBuilder7.getNullText());
      assertTrue(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(37, strBuilder7.capacity());
      assertFalse(strBuilder7.isEmpty());
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder5);
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertNotNull(strBuilder7);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln('f');
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendln((Object) strBuilder0);
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.deleteCharAt(0);
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder3.size());
      assertEquals(4, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder0.insert(0, true);
      assertEquals(8, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder4.size());
      assertEquals(8, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertNotNull(strBuilder4);
      
      boolean boolean0 = strBuilder2.endsWith("|KT6bcw[Jip`?W6h@~");
      assertEquals(8, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder1.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(8, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(8, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertFalse(boolean0);
      
      StrBuilder strBuilder5 = strBuilder0.trim();
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(6, strBuilder5.size());
      assertEquals(6, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder5.replaceFirst("|KT6bcw[Jip`?W6h@~", "|KT6bcw[Jip`?W6h@~");
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(6, strBuilder5.size());
      assertEquals(6, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(6, strBuilder6.size());
      assertEquals(6, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertNotNull(strBuilder6);
      
      boolean boolean1 = strBuilder1.equals(strBuilder5);
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(6, strBuilder5.size());
      assertEquals(6, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      StringBuffer stringBuffer0 = new StringBuffer(1852);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder5.appendln(stringBuffer0, (-3326), 1911);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder(0);
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.clear();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      String string0 = strBuilder2.midString(0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertEquals("", string0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(string0);
      
      StrBuilder strBuilder3 = strBuilder0.insert(0, "startIndex must be valid");
      assertEquals(32, strBuilder0.capacity());
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(24, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      
      // Undeclared exception!
      try { 
        strBuilder2.appendln("", 0, 188);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(13);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(13, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("StrTokenizer", 4, (-999));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter");
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(57, strBuilder0.length());
      assertEquals(57, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(89, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(57, strBuilder0.length());
      assertEquals(57, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(89, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(57, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(57, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(89, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-587));
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf('D');
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll('X', '>');
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder1.append((CharSequence) strBuilder0, (-587), 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      int int0 = (-2303);
      StrBuilder strBuilder0 = new StrBuilder((-2303));
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char char0 = 'o';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(1, 3778, 'o');
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3778, strBuilder0.length());
      assertEquals(7556, strBuilder0.capacity());
      assertEquals(3778, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7556, strBuilder1.capacity());
      assertEquals(3778, strBuilder1.size());
      assertEquals(3778, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.reverse();
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3778, strBuilder0.length());
      assertEquals(7556, strBuilder0.capacity());
      assertEquals(3778, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(3778, strBuilder2.length());
      assertEquals(7556, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3778, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      int int1 = 2107;
      StringWriter stringWriter0 = new StringWriter(2107);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder3 = strBuilder2.appendln(stringBuffer0);
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3779, strBuilder0.length());
      assertEquals(7556, strBuilder0.capacity());
      assertEquals(3779, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(7556, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3779, strBuilder2.size());
      assertEquals(3779, strBuilder2.length());
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(3779, strBuilder3.length());
      assertEquals(3779, strBuilder3.size());
      assertEquals(7556, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      int int2 = 117;
      CharBuffer charBuffer0 = CharBuffer.allocate(117);
      assertEquals(0, charBuffer0.position());
      assertEquals(117, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(117, charBuffer0.limit());
      assertEquals(117, charBuffer0.remaining());
      assertEquals(117, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      int int3 = 0;
      // Undeclared exception!
      try { 
        strBuilder3.append((CharSequence) charBuffer0, 0, (-2303));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('}');
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      strBuilder0.hashCode();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(true);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.deleteFirst('{');
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5, strBuilder2.size());
      assertEquals(5, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      strBuilder0.hashCode();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('{');
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = StrBuilder.CAPACITY;
      assertEquals(32, int0);
      
      int int1 = strBuilder1.indexOf((String) null);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendSeparator('&', 3614);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(2, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = new StrBuilder("");
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.appendln((-1904.2));
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(8, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(8, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(8, strBuilder4.size());
      assertEquals(8, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder2.append(strBuilder3);
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder1.length());
      assertEquals(10, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(10, strBuilder2.size());
      assertEquals(10, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(8, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(8, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(32, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(10, strBuilder5.size());
      assertEquals(10, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertNotNull(strBuilder5);
      
      int int0 = strBuilder0.indexOf("t%ueNHF");
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertEquals((-1), int0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      
      StrBuilder strBuilder6 = strBuilder0.deleteFirst('t');
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(10, strBuilder6.length());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(10, strBuilder6.size());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder2.append((-927L));
      assertEquals(32, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(14, strBuilder1.length());
      assertEquals(14, strBuilder1.size());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(14, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(14, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(14, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(32, strBuilder7.capacity());
      assertEquals(14, strBuilder7.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder6);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertNotNull(strBuilder7);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '&';
      int int1 = (-1203);
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-1), (-1203));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.appendFixedWidthPadRight((Object) strBuilder2, 34, '[');
      assertEquals(34, strBuilder0.size());
      assertEquals(68, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(68, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(34, strBuilder1.size());
      assertEquals(34, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(34, strBuilder3.length());
      assertEquals(34, strBuilder3.size());
      assertEquals(68, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder2.deleteAll((String) null);
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isNotEmpty());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotNull(strBuilder4);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Eawt");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll("Eawt");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(36, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(77);
      assertEquals(77, charBuffer0.capacity());
      assertEquals(77, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(77, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(77, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(charBuffer0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(77, strBuilder0.length());
      assertEquals(77, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(154, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(154, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(77, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(77, strBuilder1.length());
      assertEquals(77, charBuffer0.capacity());
      assertEquals(77, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(77, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(77, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(77, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(77, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(154, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.appendln(77);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(80, strBuilder0.length());
      assertEquals(80, strBuilder0.size());
      assertEquals(154, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(154, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(80, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(80, strBuilder3.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("xihnv!zR/Sq|>d}jGO");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(50, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(18, strBuilder1.size());
      assertEquals(18, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = 102;
      CharBuffer charBuffer0 = CharBuffer.allocate(102);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(102, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.limit());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.length());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(charBuffer0);
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(120, strBuilder0.size());
      assertEquals(120, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(240, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(120, strBuilder1.size());
      assertEquals(120, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(102, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.limit());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(120, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(120, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(240, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      int int1 = 0;
      strBuilder0.size = 0;
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      strBuilder0.size = 0;
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder3 = strBuilder0.ensureCapacity(102);
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertEquals(240, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
      
      String string0 = strBuilder3.substring(0, 0);
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertEquals(240, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char char0 = '!';
      StrBuilder strBuilder4 = strBuilder0.appendFixedWidthPadLeft(0, 0, '!');
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(240, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertNotNull(strBuilder4);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      StrBuilder strBuilder5 = strBuilder4.appendFixedWidthPadLeft(189, (-2260), '!');
      assertEquals(240, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(240, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(240, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isNotEmpty());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(0, strBuilder5.size());
      assertEquals(0, strBuilder5.length());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertNotNull(strBuilder5);
      
      // Undeclared exception!
      try { 
        strBuilder5.insert((-2260), (double) 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2260
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      String string0 = "{\\wv8kwz|?";
      StrBuilder strBuilder0 = new StrBuilder("{wv8kwz|?");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      Iterable<StringBuilder> iterable0 = null;
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) null, "{wv8kwz|?");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(9, strBuilder1.length());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(41, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      IntStream intStream0 = strBuilder1.chars();
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(9, strBuilder1.length());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(41, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(intStream0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "{wv8kwz|?");
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals("{wv8kwz|?", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.length());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder2 = strBuilder0.append(charBuffer0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals("{wv8kwz|?", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.length());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.limit());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(41, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(18, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(18, strBuilder2.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      int int0 = (-816);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-816));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.ensureCapacity((-896));
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.lastIndexOf('8', (-896));
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert((-896), 25.900129949);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -896
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith("u");
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith("");
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(10);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(10, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      LinkedHashSet<StrBuilder> linkedHashSet0 = new LinkedHashSet<StrBuilder>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(strBuilder0));
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = '$';
      charArray0[2] = '{';
      charArray0[3] = '-';
      charArray0[4] = 'J';
      charArray0[5] = 'Q';
      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(7, strBuilder2.length());
      assertEquals(7, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertArrayEquals(new char[] {'>', '$', '{', '-', 'J', 'Q'}, charArray0);
      assertNotNull(strBuilder2);
      assertEquals(6, charArray0.length);
      
      boolean boolean0 = linkedHashSet0.add(strBuilder1);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertTrue(boolean0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(linkedHashSet0.contains(strBuilder0));
      assertTrue(linkedHashSet0.contains(strBuilder2));
      
      ArrayList<StrBuilder> arrayList0 = new ArrayList<StrBuilder>(linkedHashSet0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(linkedHashSet0.contains(strBuilder0));
      assertTrue(linkedHashSet0.contains(strBuilder2));
      assertTrue(arrayList0.contains(strBuilder2));
      assertFalse(arrayList0.contains(strBuilder0));
      
      StrBuilder strBuilder3 = strBuilder0.appendWithSeparators((Iterable<?>) arrayList0, "3#xTisj?");
      assertEquals(10, strBuilder0.capacity());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(7, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(10, strBuilder3.capacity());
      assertEquals(7, strBuilder3.length());
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      assertTrue(linkedHashSet0.contains(strBuilder0));
      assertTrue(arrayList0.contains(strBuilder0));
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      LinkedHashSet<StringWriter> linkedHashSet0 = new LinkedHashSet<StringWriter>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) linkedHashSet0, "(M&=/1HzY$05l?M]");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertSame(strBuilder0, strBuilder1);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      int int0 = 102;
      StrBuilder strBuilder0 = new StrBuilder(102);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      ArrayDeque<StrBuilder> arrayDeque0 = new ArrayDeque<StrBuilder>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(strBuilder0));
      
      ArrayDeque<StrBuilder> arrayDeque1 = arrayDeque0.clone();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque0.contains(strBuilder0));
      assertFalse(arrayDeque1.contains(strBuilder0));
      
      boolean boolean0 = arrayDeque1.add(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque1.size());
      assertFalse(arrayDeque1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertTrue(boolean0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque0.contains(strBuilder0));
      assertTrue(arrayDeque1.contains(strBuilder0));
      
      Spliterator<StrBuilder> spliterator0 = arrayDeque1.spliterator();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque1.size());
      assertFalse(arrayDeque1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(spliterator0);
      assertFalse(arrayDeque0.contains(strBuilder0));
      assertTrue(arrayDeque1.contains(strBuilder0));
      
      StrBuilder strBuilder1 = arrayDeque1.pop();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(102, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(strBuilder1);
      assertFalse(arrayDeque0.contains(strBuilder0));
      assertFalse(arrayDeque1.contains(strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder0.appendWithSeparators((Iterable<?>) arrayDeque1, "Sfg<O7qHvb^LaGiH");
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(102, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(strBuilder2);
      assertFalse(arrayDeque0.contains(strBuilder2));
      assertFalse(arrayDeque1.contains(strBuilder2));
      
      String string0 = "end < start";
      boolean boolean1 = strBuilder2.startsWith("end < start");
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(102, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(boolean1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayDeque0.contains(strBuilder2));
      assertFalse(arrayDeque1.contains(strBuilder2));
      
      int int1 = (-1);
      // Undeclared exception!
      try { 
        strBuilder2.insert((-1), 0.0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln("The Array hust not be null");
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(27, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.insert(0, 3.0);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertEquals(30, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(30, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(30, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNullText());
      assertEquals(30, strBuilder2.size());
      assertEquals(30, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      boolean boolean0 = strBuilder0.contains("");
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertEquals(30, strBuilder0.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-17));
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("y1X/8");
      assertEquals("y1X/8", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) strBuilder0;
      objectArray0[1] = (Object) strBuilder0;
      StrBuilder strBuilder1 = strBuilder0.append("/YuU>2`0 x`", objectArray0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder1.size());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(2, objectArray0.length);
      
      boolean boolean0 = strBuilder1.startsWith((String) null);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder1.size());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(boolean0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 4, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      boolean boolean0 = strBuilder_StrBuilderReader0.ready();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.reset();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((-1));
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.replaceFirst((String) null, (String) null);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.reset();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'G';
      charArray0[1] = '9';
      int int0 = strBuilder_StrBuilderReader0.read();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 2696, 2696);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.rightString((-2661));
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      String string1 = strBuilder_StrBuilderTokenizer0.getContent();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      long long0 = strBuilder_StrBuilderReader0.skip((-1L));
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(0L, long0);
      
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(boolean0);
      
      boolean boolean1 = strBuilder_StrBuilderReader0.ready();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1497));
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringWriter1.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      
      StringWriter stringWriter2 = stringWriter1.append('\\');
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals("\\", stringWriter0.toString());
      assertEquals("\\", stringWriter1.toString());
      assertEquals("\\", stringWriter2.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertNotNull(stringWriter2);
      
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals("\\", stringWriter0.toString());
      assertEquals("\\", stringWriter1.toString());
      assertEquals("\\", stringWriter2.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("\\", stringBuffer0.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals("\\", stringWriter0.toString());
      assertEquals("\\", stringWriter1.toString());
      assertEquals("\\", stringWriter2.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("\\", stringBuffer0.toString());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((String) null, "r,F");
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = 1141;
      HashSet<StringBuffer> hashSet0 = null;
      try {
        hashSet0 = new HashSet<StringBuffer>(1141, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-17));
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("y1X/8");
      assertEquals("y1X/8", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[2] = 'n';
      StringBuilder stringBuilder1 = stringBuilder0.append('n');
      assertEquals("y1X/8n", stringBuilder0.toString());
      assertEquals("y1X/8n", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuilder1, 0, (-17));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-258));
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("y1X/8");
      assertEquals("y1X/8", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = 'J';
      charArray0[2] = 'n';
      charArray0[3] = 'O';
      charArray0[4] = '>';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      assertEquals("y1X/8YJnO>", stringBuilder0.toString());
      assertEquals("y1X/8YJnO>", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertArrayEquals(new char[] {'Y', 'J', 'n', 'O', '>'}, charArray0);
      assertNotNull(stringBuilder1);
      assertEquals(5, charArray0.length);
      
      StringBuilder stringBuilder2 = stringBuilder0.append(true);
      assertEquals("y1X/8YJnO>true", stringBuilder0.toString());
      assertEquals("y1X/8YJnO>true", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotNull(stringBuilder2);
      
      StringBuilder stringBuilder3 = stringBuilder0.append('Y');
      assertEquals("y1X/8YJnO>trueY", stringBuilder0.toString());
      assertEquals("y1X/8YJnO>trueY", stringBuilder3.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertNotNull(stringBuilder3);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuilder0, 0, (-258));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      int int0 = (-34);
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read((char[]) null, (-34), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder("");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.length();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, int0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '$';
      charArray1[1] = '@';
      charArray1[2] = '@';
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray1, 0, (-2142));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.reset();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((-1));
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.setLength(23);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(23, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder1.size());
      assertEquals(23, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(23, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(23, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '+';
      charArray0[1] = '8';
      charArray0[2] = 'J';
      charArray0[3] = 'i';
      charArray0[4] = ',';
      charArray0[5] = 't';
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 115, (-570));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.reset();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'G';
      charArray0[1] = '9';
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals((-1), int0);
      
      int int1 = StrBuilder.CAPACITY;
      assertEquals(32, int1);
      assertFalse(int1 == int0);
      
      String string0 = strBuilder0.substring(0, 101);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll('%', '.');
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string1 = strBuilder0.substring(0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int2 = strBuilder_StrBuilderReader0.read();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean0 = strBuilder1.equals((Object) "");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(boolean0);
      
      int int3 = strBuilder1.readFrom(strBuilder_StrBuilderReader0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      StrBuilder strBuilder2 = strBuilder1.insert(0, (-1));
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      // Undeclared exception!
      try { 
        strBuilder2.appendln(strBuilder0, (-1), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder1, 1595, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("remove() is unsupported");
      assertEquals(55, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder1, 1196, 2367);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = "`4'4la0";
      StrBuilder strBuilder1 = new StrBuilder("`4'4la0");
      assertEquals(39, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.deleteFirst("`4'4la0");
      assertEquals(39, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(39, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      // Undeclared exception!
      try { 
        strBuilder1.deleteCharAt(1878);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1878
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("", (-4749));
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('T', 'T');
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.endsWith("e<><[,");
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(false);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('@', 'G');
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder("CjHv[Jt!xK*x ");
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(14, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(46, strBuilder2.capacity());
      assertEquals(14, strBuilder2.size());
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "CjHv[Jt!xK*x ";
      StrBuilder strBuilder3 = strBuilder1.appendln("CjHv[Jt!xK*x ", objectArray0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(15, strBuilder1.size());
      assertEquals(15, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(15, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(15, strBuilder3.length());
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      assertEquals(1, objectArray0.length);
      
      StrBuilder strBuilder4 = strBuilder1.appendPadding((-1835), 'G');
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(15, strBuilder1.size());
      assertEquals(15, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(15, strBuilder4.size());
      assertEquals(15, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder2.appendSeparator('G', 1505);
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(46, strBuilder2.capacity());
      assertEquals(15, strBuilder2.size());
      assertEquals(15, strBuilder2.length());
      assertEquals(46, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(15, strBuilder5.length());
      assertEquals(15, strBuilder5.size());
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder1);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertNotNull(strBuilder5);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      // Undeclared exception!
      try { 
        strBuilder0.insert(2453, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2453
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(11);
      assertEquals(11, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("i", 2069);
      assertEquals(11, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(11, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      TreeSet<StringReader> treeSet0 = new TreeSet<StringReader>();
      assertNotNull(treeSet0);
      
      StringReader stringReader0 = treeSet0.pollFirst();
      assertNull(stringReader0);
      
      Iterator<StringReader> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(iterator0, (String) null);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendln(31);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder2.length());
      assertEquals(3, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.setLength(31);
      assertEquals(31, strBuilder0.size());
      assertEquals(31, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(31, strBuilder1.length());
      assertEquals(31, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(31, strBuilder2.length());
      assertEquals(31, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(31, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(31, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder2.append(false);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.length());
      assertEquals(72, strBuilder0.capacity());
      assertEquals(36, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(36, strBuilder1.size());
      assertEquals(36, strBuilder1.length());
      assertEquals(72, strBuilder1.capacity());
      assertEquals(36, strBuilder2.length());
      assertEquals(72, strBuilder2.capacity());
      assertEquals(36, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(36, strBuilder4.size());
      assertEquals(36, strBuilder4.length());
      assertEquals(72, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder1.appendSeparator("", (-736));
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.length());
      assertEquals(72, strBuilder0.capacity());
      assertEquals(36, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(36, strBuilder1.size());
      assertEquals(36, strBuilder1.length());
      assertEquals(72, strBuilder1.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(72, strBuilder5.capacity());
      assertEquals(36, strBuilder5.length());
      assertEquals(36, strBuilder5.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder0.replaceFirst('r', 'r');
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.length());
      assertEquals(72, strBuilder0.capacity());
      assertEquals(36, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(36, strBuilder6.size());
      assertEquals(36, strBuilder6.length());
      assertEquals(72, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertNotNull(strBuilder6);
      
      int int0 = strBuilder0.indexOf("eACShB;5", (-2523));
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.length());
      assertEquals(72, strBuilder0.capacity());
      assertEquals(36, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertEquals((-1), int0);
      
      boolean boolean0 = strBuilder2.equals(strBuilder5);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.length());
      assertEquals(72, strBuilder0.capacity());
      assertEquals(36, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(36, strBuilder1.size());
      assertEquals(36, strBuilder1.length());
      assertEquals(72, strBuilder1.capacity());
      assertEquals(36, strBuilder2.length());
      assertEquals(72, strBuilder2.capacity());
      assertEquals(36, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(72, strBuilder5.capacity());
      assertEquals(36, strBuilder5.length());
      assertEquals(36, strBuilder5.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder6);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('@', 101);
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter", "org.apache.commons.lang3.ArrayUtils");
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(11, '4');
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder1.length());
      assertEquals(11, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1));
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder((-1));
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder0.subSequence((-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(0.0);
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.minimizeCapacity();
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.capacity());
      assertEquals(3, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(3, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      // Undeclared exception!
      try { 
        strBuilder1.subSequence((-1941), (-1941));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1941
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-258));
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("oy1X/");
      assertEquals("oy1X/", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = 'J';
      charArray0[2] = 'n';
      int int0 = strBuilder0.indexOf('y');
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(1133);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuilder0, (-258), (-258));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = 'H';
      StrBuilder strBuilder0 = new StrBuilder('H');
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(72, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder(3120);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln(stringBuilder0, 3120, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append('l');
      assertEquals("l", stringBuilder0.toString());
      assertEquals("l", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder1.append(stringBuilder0, (-1), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Array and element cannot both e null");
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuilder0, 0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", stringBuilder0.toString());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-115));
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("y1X/8");
      assertEquals("y1X/8", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[5];
      String string0 = strBuilder0.leftString((-115));
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", string0);
      assertNotNull(string0);
      
      charArray0[0] = 'Y';
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("y1X/8", stringBuilder0.toString());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, (-4668), 2746);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 2746
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = 2152;
      StrBuilder strBuilder1 = strBuilder0.appendln(2152);
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append(stringBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", stringBuilder0.toString());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("false", stringBuilder0.toString());
      assertEquals("false", stringBuilder1.toString());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln(stringBuilder0, 2021, 2021);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "");
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder0.rightString(39);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertSame(strBuilder0, strBuilder1);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln('f');
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder1.append((CharSequence) strBuilder0, 1414, 1414);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      String string0 = "l]dE9.Ki- ^#F#K";
      StrBuilder strBuilder0 = new StrBuilder("l]dE9.Ki- ^#F#K");
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((-3373.29812));
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(27, strBuilder0.length());
      assertEquals(47, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(27, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(27, strBuilder1.size());
      assertEquals(27, strBuilder1.length());
      assertEquals(47, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StringBuilder stringBuilder0 = new StringBuilder("");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln("org.apache.commons.lang3.text.StrMatcher", (-1274), (-1274));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      Object[] objectArray0 = new Object[2];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "|QS");
      strBuilder1.reverse();
      // Undeclared exception!
      try { 
        strBuilder0.append("|QS", (-761), 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[8];
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      Object object0 = strBuilder_StrBuilderTokenizer0.cloneReset();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) strBuilder0;
      objectArray0[2] = (Object) strBuilder0;
      objectArray0[3] = (Object) "@hsJu9NHu|";
      objectArray0[4] = (Object) strBuilder0;
      objectArray0[5] = (Object) strBuilder0;
      objectArray0[6] = (Object) strBuilder0;
      objectArray0[7] = (Object) strBuilder0;
      strBuilder0.append("@hsJu9NHu|", objectArray0);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder0.insert(1899, (Object) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1899
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = new StrBuilder((-1843));
      // Undeclared exception!
      try { 
        strBuilder0.appendln(strBuilder1, (-1843), (-1843));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(33);
      StrBuilder strBuilder1 = new StrBuilder("5)I]3L/akXc");
      // Undeclared exception!
      try { 
        strBuilder0.appendln(strBuilder1, 10, 1776);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2529);
      strBuilder0.append((long) 2529);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("Invalid length: ");
      strBuilder1.setLength(108);
      assertEquals(108, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = new StrBuilder("sN|");
      strBuilder0.appendln(strBuilder1, 0, 0);
      assertTrue(strBuilder0.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(997);
      StrBuilder strBuilder1 = strBuilder0.setLength(116);
      strBuilder1.midString(997, (-3041));
      StrBuilder strBuilder2 = new StrBuilder();
      StrBuilder strBuilder3 = strBuilder1.append(strBuilder2, 0, 0);
      strBuilder3.append(0L);
      // Undeclared exception!
      try { 
        strBuilder0.appendln(strBuilder1, 108, 1510);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("gPCApRV'^FF");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.reset();
      strBuilder_StrBuilderReader0.skip(0L);
      long long0 = strBuilder_StrBuilderReader0.skip(2438L);
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(11L, long0);
      
      strBuilder0.rightString((-521));
      assertEquals(11, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      String string0 = strBuilder0.rightString(2);
      String string1 = strBuilder0.build();
      assertTrue(string1.equals((Object)string0));
      
      StrBuilder strBuilder1 = new StrBuilder("|ax6d?GegBGGDG");
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(14, strBuilder1.length());
      assertFalse(boolean0);
      assertEquals(46, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[18];
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);
      strBuilder2.deleteAll('.');
      assertEquals(74, strBuilder0.capacity());
      assertEquals(38, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      // Undeclared exception!
      try { 
        strBuilder0.insert(2, (Object) locale_Category0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      strBuilder0.appendFixedWidthPadRight((Object) "Invalid offset: ", 9, 'k');
      assertEquals(25, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendPadding(53, 'e');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[1];
      strBuilder0.appendln(0.0);
      charArray0[0] = '-';
      strBuilder0.getChars(charArray0);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = 4;
      // Undeclared exception!
      try { 
        strBuilder0.replace(204, 4, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = 9;
      int int1 = 0;
      String string0 = null;
      // Undeclared exception!
      try { 
        strBuilder0.replace(9, 0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.leftString(28);
      StrBuilder strBuilder1 = new StrBuilder((String) null);
      strBuilder1.append((double) 28);
      StrBuilder strBuilder2 = new StrBuilder(89);
      strBuilder1.contains("");
      strBuilder0.deleteAll("");
      StrBuilder strBuilder3 = new StrBuilder(8);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder3.new StrBuilderReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        strBuilder1.subSequence(8, 2048);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2048
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.midString((-2939), 17);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((-1418), (-2939), 't');
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("bFyN(o#(ye");
      strBuilder0.appendFixedWidthPadRight((Object) "bFyN(o#(ye", 34, '~');
      strBuilder0.deleteAll("bFyN(o#(ye");
      assertEquals(88, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      String string0 = "";
      strBuilder0.contains("");
      strBuilder0.deleteAll("");
      int int0 = (-663);
      char char0 = '8';
      strBuilder0.appendFixedWidthPadRight(0, (-663), '8');
      int int1 = 0;
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-1718));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = (-206);
      // Undeclared exception!
      try { 
        strBuilder0.setLength((-206));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -206
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.setLength((-372));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -372
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.validateIndex((-1763));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1763
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      String string0 = "%6'";
      StrBuilder strBuilder0 = new StrBuilder("%6'");
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      charArray0[1] = '*';
      char char0 = 'c';
      int int0 = (-55);
      // Undeclared exception!
      try { 
        strBuilder0.validateIndex((-55));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -55
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      TreeSet<StringReader> treeSet0 = new TreeSet<StringReader>();
      StrBuilder strBuilder1 = new StrBuilder("ugPD\"g5W*0H#8kMBB[");
      StrBuilder strBuilder2 = strBuilder1.appendln(strBuilder0);
      strBuilder2.trim();
      strBuilder2.appendln(0.0F);
      assertEquals(22, strBuilder2.length());
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("5N(o#(ye");
      strBuilder0.replaceAll("|j3nxdy`xy$<YI8D3", "");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      boolean boolean0 = strBuilder_StrBuilderReader0.ready();
      assertEquals(40, strBuilder0.capacity());
      assertTrue(boolean0);
      assertEquals(8, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = new StrBuilder();
      strBuilder1.indexOf("org.apache.commons.lang3.ArraySorter", 48);
      StrBuilder strBuilder2 = new StrBuilder("org.apache.commons.lang3.ArraySorter");
      strBuilder2.equals(strBuilder0);
      // Undeclared exception!
      try { 
        strBuilder2.substring((-434), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -434
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StrBuilder strBuilder0 = new StrBuilder("k6\" OQ-zMY#!|8ehg^");
      StrBuilder strBuilder1 = new StrBuilder();
      strBuilder0.appendTo(strBuilder1);
      assertEquals(18, strBuilder1.size());
      assertTrue(strBuilder0.equals((Object)strBuilder1));
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      String string0 = "zDl+`/$w:45A-";
      StrBuilder strBuilder0 = new StrBuilder("zDl+`/$w:45A-");
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt((-801));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -801
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendln(strBuilder0);
      strBuilder1.trim();
      strBuilder0.appendln((-18.23147F));
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      TreeSet<StringReader> treeSet0 = new TreeSet<StringReader>();
      treeSet0.descendingIterator();
      boolean boolean0 = strBuilder0.equals(strBuilder0);
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.toCharArray();
      Integer integer0 = new Integer((-1395));
      strBuilder0.appendln((Object) integer0);
      assertTrue(strBuilder0.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[0];
      strBuilder0.appendln("org.apache.Oommon[.lang3.text.StrBuilder$StrBuilderWr8ter", objectArray0);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1295));
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) strBuilder0;
      objectArray0[4] = (Object) strBuilder0;
      objectArray0[5] = (Object) "";
      StrBuilder strBuilder1 = strBuilder0.append("", objectArray0);
      // Undeclared exception!
      try { 
        strBuilder1.insert(116, (long) (-1295));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 116
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.indexOf('\'');
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.midString(2425, (-3));
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.midString(1260, 1);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.appendNewLine();
      StrBuilder strBuilder1 = strBuilder0.clear();
      strBuilder1.midString(2930, (-1062));
      strBuilder0.insert(0, "startIndex must be valid");
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = new StrBuilder(0);
      strBuilder0.subSequence(0, 0);
      strBuilder0.insert(0, 0.0F);
      assertTrue(strBuilder0.isNotEmpty());
  }
}
