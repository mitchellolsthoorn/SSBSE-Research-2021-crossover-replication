/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:04:38 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "systemv/pst8pdt";
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("4.j< jGy<'D/?+0.Ru", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'j' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(Z|(?:[+-]d{2}(?:')d{2}))");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(locale0));
      
      Locale locale1 = Locale.lookup(linkedList0, linkedList1);
      assertNull(locale1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(locale0));
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("rok", timeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'r' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1169;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1169, "org.apache.commons.lang3.time.FastDateParser$PatternStrategy");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=org.apache.commons.lang3.time.FastDateParser$PatternStrategy,offset=1169,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1169, simpleTimeZone0.getRawOffset());
      assertEquals("org.apache.commons.lang3.time.FastDateParser$PatternStrategy", simpleTimeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      String string0 = "hT})uKaO>gUU5";
      MockDate mockDate0 = new MockDate(538L);
      assertNotNull(mockDate0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("GMT[+-]d{1,2}:d{2}", simpleTimeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'T' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "bz";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1183, "singapore");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("singapore", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=singapore,offset=1183,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1183, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      int int0 = simpleTimeZone0.getOffset((long) 1183);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("singapore", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=singapore,offset=1183,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1183, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1183, int0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("bz", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'b' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1183, "singapore");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1183, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=singapore,offset=1183,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("singapore", simpleTimeZone0.getID());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("bz", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'b' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(Z|(?:[+-]d{2}(?::)d{2}))");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{2}(?::)d{2}))", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("(Z|(?:[+-]d{2}(?::)d{2}))", fastDateParser0.getPattern());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      TimeZone timeZone1 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, timeZone1);
      assertSame(timeZone1, timeZone0);
      assertNotNull(timeZone1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("(Z|(?:[+-]d{2}(?::)d{2}))", fastDateParser0.getPattern());
      assertEquals("GMT", timeZone1.getID());
      
      FastDateParser.TimeZoneStrategy fastDateParser_TimeZoneStrategy0 = new FastDateParser.TimeZoneStrategy(locale0);
      assertNotNull(fastDateParser_TimeZoneStrategy0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      
      Locale locale1 = fastDateParser0.getLocale();
      assertSame(timeZone0, timeZone1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("(Z|(?:[+-]d{2}(?::)d{2}))", fastDateParser0.getPattern());
      assertEquals("", locale1.getVariant());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      
      String string0 = fastDateParser0.getPattern();
      assertSame(timeZone0, timeZone1);
      assertSame(locale0, locale1);
      assertNotNull(string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("(Z|(?:[+-]d{2}(?::)d{2}))", fastDateParser0.getPattern());
      assertEquals("(Z|(?:[+-]d{2}(?::)d{2}))", string0);
      
      String string1 = fastDateParser0.toStringAll();
      assertSame(timeZone0, timeZone1);
      assertSame(locale0, locale1);
      assertNotNull(string1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("(Z|(?:[+-]d{2}(?::)d{2}))", fastDateParser0.getPattern());
      assertFalse(string1.equals((Object)string0));
      
      FastDateParser.TimeZoneStrategy fastDateParser_TimeZoneStrategy1 = new FastDateParser.TimeZoneStrategy(locale1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "Yz!B}g4>)X+HW*}");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=Yz!B}g4>)X+HW*},offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("Yz!B}g4>)X+HW*}", simpleTimeZone0.getID());
      assertEquals(2, simpleTimeZone0.getRawOffset());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      int int0 = (-562);
      ParsePosition parsePosition0 = new ParsePosition((-562));
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals((-562), parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=-562,errorIndex=-1]", parsePosition0.toString());
      
      String string0 = "M9E36VDzbG-j";
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("Yz!B}g4>)X+HW*}", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'B' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-5032), "s=RdAARNZ(k!{");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("s=RdAARNZ(k!{", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=s=RdAARNZ(k!{,offset=-5032,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-5032), simpleTimeZone0.getRawOffset());
      
      Locale locale1 = Locale.GERMANY;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("DE", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de_DE", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      
      MockDate mockDate0 = new MockDate((-5032), 2, (-887));
      assertNotNull(mockDate0);
      
      String string0 = "h `C8s";
      SimpleTimeZone simpleTimeZone1 = new SimpleTimeZone(3, "h `C8s");
      assertNotNull(simpleTimeZone1);
      assertEquals(3, simpleTimeZone1.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=h `C8s,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone1.toString());
      assertFalse(simpleTimeZone1.useDaylightTime());
      assertEquals(0, simpleTimeZone1.getDSTSavings());
      assertEquals("h `C8s", simpleTimeZone1.getID());
      assertFalse(simpleTimeZone1.equals((Object)simpleTimeZone0));
      
      int int0 = (-872);
      MockDate mockDate1 = new MockDate((-872), (-321), 2);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Locale locale2 = Locale.SIMPLIFIED_CHINESE;
      assertNotSame(locale2, locale1);
      assertSame(locale2, locale0);
      assertNotNull(locale2);
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("zh_CN", locale2.toString());
      assertEquals("CHN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("CN", locale2.getCountry());
      assertFalse(locale2.equals((Object)locale1));
      
      String string1 = "$%<wK,Zh zgOLq\"";
      SimpleTimeZone simpleTimeZone2 = new SimpleTimeZone(111, "#");
      assertNotNull(simpleTimeZone2);
      assertEquals(111, simpleTimeZone2.getRawOffset());
      assertEquals("#", simpleTimeZone2.getID());
      assertEquals(0, simpleTimeZone2.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=#,offset=111,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone2.toString());
      assertFalse(simpleTimeZone2.useDaylightTime());
      assertFalse(simpleTimeZone2.equals((Object)simpleTimeZone0));
      assertFalse(simpleTimeZone2.equals((Object)simpleTimeZone1));
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("$%<wK,Zh zgOLq\"", simpleTimeZone2, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'g' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "v|c";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "Yz!B}g4>)X+HW*}");
      assertNotNull(simpleTimeZone0);
      assertEquals("Yz!B}g4>)X+HW*}", simpleTimeZone0.getID());
      assertEquals(2, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Yz!B}g4>)X+HW*},offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      MockDate mockDate0 = new MockDate(2, 2, 2);
      assertNotNull(mockDate0);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("v|c", simpleTimeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'v' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(Z|(?:[+-]d{2}(?::)d{2}))");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{2}(?::)d{2}))", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("(Z|(?:[+-]d{2}(?::)d{2}))", fastDateParser0.getPattern());
      
      FastDateParser fastDateParser1 = null;
      try {
        fastDateParser1 = new FastDateParser("zulu", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'l' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateParser$PatternStrategy";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1169, "org.apache.commons.lang3.time.FastDateParser$PatternStrategy");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=org.apache.commons.lang3.time.FastDateParser$PatternStrategy,offset=1169,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1169, simpleTimeZone0.getRawOffset());
      assertEquals("org.apache.commons.lang3.time.FastDateParser$PatternStrategy", simpleTimeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      
      Locale locale1 = Locale.GERMAN;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("KQszJWX;\u0003=Q-", simpleTimeZone0, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'Q' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1169, "org.apache.commons.lang3.time.FastDateParser$PatternStrategy");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("org.apache.commons.lang3.time.FastDateParser$PatternStrategy", simpleTimeZone0.getID());
      assertEquals(1169, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=org.apache.commons.lang3.time.FastDateParser$PatternStrategy,offset=1169,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      MockDate mockDate0 = new MockDate((-887), (-887), 181);
      assertNotNull(mockDate0);
      
      Locale locale1 = Locale.GERMANY;
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      
      Locale locale2 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(locale2);
      assertEquals("ja", locale2.getLanguage());
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale2.toString());
      assertEquals("JP", locale2.getVariant());
      assertEquals("JP", locale2.getCountry());
      assertEquals("jpn", locale2.getISO3Language());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("wwcY@", simpleTimeZone0, locale2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'c' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-792), "systemv/pst8pdt");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=systemv/pst8pdt,offset=-792,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-792), simpleTimeZone0.getRawOffset());
      assertEquals("systemv/pst8pdt", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = new Locale("Yz!B}g4>)X+HW*}", "Yz!B}g4>)X+HW*}");
      assertNotNull(locale0);
      assertEquals("YZ!B}G4>)X+HW*}", locale0.getCountry());
      assertEquals("yz!b}g4>)x+hw*}", locale0.getLanguage());
      assertEquals("yz!b}g4>)x+hw*}_YZ!B}G4>)X+HW*}", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("pacific/yap", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'p' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = 2856L;
      System.setCurrentTimeMillis(2856L);
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("ZXOQB0n3{4IA#^7 J0M", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'O' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(106, ", locale=");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=, locale=,offset=106,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(", locale=", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(106, simpleTimeZone0.getRawOffset());
      
      Locale locale0 = new Locale("jAUm.]@5((p41b93?a)");
      assertNotNull(locale0);
      assertEquals("jaum.]@5((p41b93?a)", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jaum.]@5((p41b93?a)", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("~O$.Pgwh$Bl~", simpleTimeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'O' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "org.apache.commons.lang3.time.FastDateParser$PatternStrategy");
      assertNotNull(simpleTimeZone0);
      assertEquals("org.apache.commons.lang3.time.FastDateParser$PatternStrategy", simpleTimeZone0.getID());
      assertEquals(4, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=org.apache.commons.lang3.time.FastDateParser$PatternStrategy,offset=4,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = new Locale("'GW)n]%X90 ,xkY", ":GZL:auZ");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("'gw)n]%x90 ,xky", locale0.getLanguage());
      assertEquals("'gw)n]%x90 ,xky_:GZL:AUZ", locale0.toString());
      assertEquals(":GZL:AUZ", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("]", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("org.apache.commons.lang3.time.FastDateParser$PatternStrategy", simpleTimeZone0.getID());
      assertEquals(4, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=org.apache.commons.lang3.time.FastDateParser$PatternStrategy,offset=4,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", locale0.getVariant());
      assertEquals("'gw)n]%x90 ,xky", locale0.getLanguage());
      assertEquals("'gw)n]%x90 ,xky_:GZL:AUZ", locale0.toString());
      assertEquals(":GZL:AUZ", locale0.getCountry());
      assertEquals("]", fastDateParser0.getPattern());
      
      String string0 = fastDateParser0.toString();
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.time.FastDateParser$PatternStrategy", simpleTimeZone0.getID());
      assertEquals(4, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=org.apache.commons.lang3.time.FastDateParser$PatternStrategy,offset=4,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", locale0.getVariant());
      assertEquals("'gw)n]%x90 ,xky", locale0.getLanguage());
      assertEquals("'gw)n]%x90 ,xky_:GZL:AUZ", locale0.toString());
      assertEquals(":GZL:AUZ", locale0.getCountry());
      assertEquals("]", fastDateParser0.getPattern());
      assertEquals("FastDateParser[], 'gw)n]%x90 ,xky_:GZL:AUZ, org.apache.commons.lang3.time.FastDateParser$PatternStrategy]", string0);
      
      ParsePosition parsePosition0 = new ParsePosition(4);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=4,errorIndex=-1]", parsePosition0.toString());
      assertEquals(4, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      parsePosition0.setIndex(108);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(108, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=108,errorIndex=-1]", parsePosition0.toString());
      
      // Undeclared exception!
      try { 
        fastDateParser0.parse("", parsePosition0, (Calendar) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(Z|(?:[+-]d{2}(?::)d{2}))");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Instant instant0 = MockInstant.ofEpochSecond(1194L, 0L);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Thu Jan 01 00:19:54 GMT 1970", date0.toString());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Locale locale0 = Locale.lookup(linkedList0, linkedHashSet0);
      assertNull(locale0);
      assertEquals(0, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{2}(?::)d{2}))", timeZone0, (Locale) null, date0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("Thu Jan 01 00:19:54 GMT 1970", date0.toString());
      assertEquals("(Z|(?:[+-]d{2}(?::)d{2}))", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition((-6249));
      assertNotNull(parsePosition0);
      assertEquals((-6249), parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=-6249,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      int int0 = (-4641);
      int int1 = (-3780);
      int int2 = 75;
      int int3 = (-3770);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(75, (-6249), (-6249), 1402, 10, 739);
      assertNotNull(mockGregorianCalendar0);
      
      ParsePosition parsePosition1 = new ParsePosition(739);
      assertNotNull(parsePosition1);
      assertEquals((-1), parsePosition1.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=739,errorIndex=-1]", parsePosition1.toString());
      assertEquals(739, parsePosition1.getIndex());
      assertFalse(parsePosition1.equals((Object)parsePosition0));
      
      // Undeclared exception!
      try { 
        fastDateParser0.parse("(Z|(?:[+-]d{2}(?::)d{2}))", parsePosition1, (Calendar) mockGregorianCalendar0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(63, "");
      assertNotNull(simpleTimeZone0);
      assertEquals(63, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=63,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      ParsePosition parsePosition0 = new ParsePosition(63);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=63,errorIndex=-1]", parsePosition0.toString());
      assertEquals(63, parsePosition0.getIndex());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(63, (-4641), (-3780), 549, 63, (-3770));
      assertNotNull(mockGregorianCalendar0);
      
      SimpleTimeZone simpleTimeZone1 = new SimpleTimeZone(63, "Sm2;i/s`\"lUuA&");
      assertNotNull(simpleTimeZone1);
      assertEquals("java.util.SimpleTimeZone[id=Sm2;i/s`\"lUuA&,offset=63,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone1.toString());
      assertFalse(simpleTimeZone1.useDaylightTime());
      assertEquals(0, simpleTimeZone1.getDSTSavings());
      assertEquals(63, simpleTimeZone1.getRawOffset());
      assertEquals("Sm2;i/s`\"lUuA&", simpleTimeZone1.getID());
      assertFalse(simpleTimeZone1.equals((Object)simpleTimeZone0));
      
      Locale locale1 = Locale.forLanguageTag("Sm2;i/s`\"lUuA&");
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      
      MockDate mockDate0 = new MockDate(1, (-2967), (-2967), 1, 1, 1);
      assertNotNull(mockDate0);
      
      String string0 = ", timeZone=";
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("Uc8<,7cRl/2/6$Ai&nh", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'U' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(Z|(?:[+-]d{2}(?::)d{2}))");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{2}(?::)d{2}))", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("(Z|(?:[+-]d{2}(?::)d{2}))", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(358);
      assertNotNull(parsePosition0);
      assertEquals(358, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=358,errorIndex=-1]", parsePosition0.toString());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      FastDateParser.TimeZoneStrategy fastDateParser_TimeZoneStrategy0 = new FastDateParser.TimeZoneStrategy(locale0);
      assertNotNull(fastDateParser_TimeZoneStrategy0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string0 = fastDateParser0.toStringAll();
      assertNotNull(string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("(Z|(?:[+-]d{2}(?::)d{2}))", fastDateParser0.getPattern());
      
      FastDateParser.TimeZoneStrategy fastDateParser_TimeZoneStrategy1 = new FastDateParser.TimeZoneStrategy(locale0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(63, "");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=63,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(63, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      Instant instant0 = MockInstant.ofEpochSecond((long) 63, (-2257L));
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Thu Jan 01 00:01:02 GMT 1970", date0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("", simpleTimeZone0, locale0, date0);
      assertNotNull(fastDateParser0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=63,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(63, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("Thu Jan 01 00:01:02 GMT 1970", date0.toString());
      assertEquals("", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(63);
      assertNotNull(parsePosition0);
      assertEquals(63, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=63,errorIndex=-1]", parsePosition0.toString());
      
      Date date1 = fastDateParser0.parse("", parsePosition0);
      assertNotSame(date0, date1);
      assertNotSame(date1, date0);
      assertNotNull(date1);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=63,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(63, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("Thu Jan 01 00:01:02 GMT 1970", date0.toString());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals(63, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=63,errorIndex=-1]", parsePosition0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertFalse(date1.equals((Object)date0));
      
      Object object0 = fastDateParser0.parseObject("hT})uKaO>gUU5");
      assertNotSame(date0, date1);
      assertNotSame(date0, object0);
      assertNotSame(object0, date1);
      assertNotSame(object0, date0);
      assertNotNull(object0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=63,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(63, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("Thu Jan 01 00:01:02 GMT 1970", date0.toString());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      assertFalse(date0.equals((Object)date1));
      assertTrue(object0.equals((Object)date1));
      assertFalse(object0.equals((Object)date0));
      
      FastDateParser fastDateParser1 = new FastDateParser("", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser1);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=63,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(63, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", fastDateParser1.getPattern());
      assertTrue(fastDateParser1.equals((Object)fastDateParser0));
      
      FastDateParser fastDateParser2 = null;
      try {
        fastDateParser2 = new FastDateParser("hT})uKaO>gUU5", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'T' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("UTC", timeZone0.getID());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      
      Locale locale1 = Locale.GERMANY;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de_DE", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      
      MockDate mockDate0 = new MockDate((-5032), 2, (-887));
      assertNotNull(mockDate0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("h `C8s", timeZone0, locale1, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'C' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "(Z|(?:[+-]\\d{2}(?::)\\d{2}))";
      TimeZone timeZone0 = TimeZone.getTimeZone("(Z|(?:[+-]d{2}(?::)d{2}))");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      
      MockDate mockDate0 = new MockDate(1381, 1381, 1381);
      assertNotNull(mockDate0);
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{2}(?::)d{2}))", timeZone0, locale0, mockDate0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("Tue Nov 12 00:00:00 GMT 3399", mockDate0.toString());
      assertEquals("(Z|(?:[+-]d{2}(?::)d{2}))", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(1381);
      assertNotNull(parsePosition0);
      assertEquals(1381, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1381,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      int int0 = 1645;
      String string1 = "\",offset=";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1645, "\",offset=");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("\",offset=", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=\",offset=,offset=1645,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1645, simpleTimeZone0.getRawOffset());
      
      FastDateParser fastDateParser1 = new FastDateParser("(Z|(?:[+-]d{2}(?::)d{2}))", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser1);
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("\",offset=", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=\",offset=,offset=1645,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1645, simpleTimeZone0.getRawOffset());
      assertEquals("(Z|(?:[+-]d{2}(?::)d{2}))", fastDateParser1.getPattern());
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      
      // Undeclared exception!
      try { 
        fastDateParser1.parse("org.apache.commons.lang3.time.FastDateParser$5", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1169, "org.apache.commons.lang3.time.FastDateParser$PatternStrategy");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=org.apache.commons.lang3.time.FastDateParser$PatternStrategy,offset=1169,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("org.apache.commons.lang3.time.FastDateParser$PatternStrategy", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1169, simpleTimeZone0.getRawOffset());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale1 = Locale.US;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("US", locale1.getCountry());
      assertEquals("en_US", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("I!p=^0,7Sme", simpleTimeZone0, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'I' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "(Z|(?:[+-]\\d{2}(?::)\\d{2}))";
      TimeZone timeZone0 = TimeZone.getTimeZone("(Z|(?:[+-]d{2}(?::)d{2}))");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      
      ParsePosition parsePosition0 = new ParsePosition(2111);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(2111, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2111,errorIndex=-1]", parsePosition0.toString());
      
      Locale locale1 = new Locale("(Z|(?:[+-]d{2}(?::)d{2}))");
      assertNotNull(locale1);
      assertEquals("", locale1.getISO3Country());
      assertEquals("(z|(?:[+-]d{2}(?::)d{2}))", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("(z|(?:[+-]d{2}(?::)d{2}))", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{2}(?::)d{2}))", timeZone0, locale1);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale1.getISO3Country());
      assertEquals("(z|(?:[+-]d{2}(?::)d{2}))", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("(z|(?:[+-]d{2}(?::)d{2}))", locale1.getLanguage());
      assertEquals("(Z|(?:[+-]d{2}(?::)d{2}))", fastDateParser0.getPattern());
      assertFalse(locale1.equals((Object)locale0));
      
      ParsePosition parsePosition1 = new ParsePosition(111);
      assertNotNull(parsePosition1);
      assertEquals("java.text.ParsePosition[index=111,errorIndex=-1]", parsePosition1.toString());
      assertEquals(111, parsePosition1.getIndex());
      assertEquals((-1), parsePosition1.getErrorIndex());
      assertFalse(parsePosition1.equals((Object)parsePosition0));
      
      String string1 = "Invalid locale format: ";
      try { 
        fastDateParser0.parse("Invalid locale format: ");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: Invalid locale format: 
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(63, "");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=63,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(63, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      assertFalse(set0.contains(""));
      
      SimpleTimeZone simpleTimeZone1 = new SimpleTimeZone(80, "V Ji0m@ja/cy7Z@");
      assertNotNull(simpleTimeZone1);
      assertEquals(80, simpleTimeZone1.getRawOffset());
      assertFalse(simpleTimeZone1.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=V Ji0m@ja/cy7Z@,offset=80,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone1.toString());
      assertEquals(0, simpleTimeZone1.getDSTSavings());
      assertEquals("V Ji0m@ja/cy7Z@", simpleTimeZone1.getID());
      assertFalse(simpleTimeZone1.equals((Object)simpleTimeZone0));
      
      Locale locale1 = Locale.forLanguageTag("[GmtTimeZone id=\"");
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      FastDateParser fastDateParser0 = new FastDateParser("", simpleTimeZone1, locale1, mockDate0);
      assertNotNull(fastDateParser0);
      assertEquals(80, simpleTimeZone1.getRawOffset());
      assertFalse(simpleTimeZone1.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=V Ji0m@ja/cy7Z@,offset=80,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone1.toString());
      assertEquals(0, simpleTimeZone1.getDSTSavings());
      assertEquals("V Ji0m@ja/cy7Z@", simpleTimeZone1.getID());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("", fastDateParser0.getPattern());
      assertFalse(simpleTimeZone1.equals((Object)simpleTimeZone0));
      assertFalse(locale1.equals((Object)locale0));
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      assertNotNull(mockGregorianCalendar0);
      assertFalse(simpleTimeZone0.equals((Object)simpleTimeZone1));
      
      FastDateParser.TimeZoneStrategy fastDateParser_TimeZoneStrategy0 = new FastDateParser.TimeZoneStrategy(locale0);
      assertNotNull(fastDateParser_TimeZoneStrategy0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertFalse(locale0.equals((Object)locale1));
      
      ParsePosition parsePosition0 = new ParsePosition(63);
      assertNotNull(parsePosition0);
      assertEquals(63, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=63,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      // Undeclared exception!
      try { 
        fastDateParser_TimeZoneStrategy0.parse(fastDateParser0, mockGregorianCalendar0, "Q!rd/", parsePosition0, 5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
