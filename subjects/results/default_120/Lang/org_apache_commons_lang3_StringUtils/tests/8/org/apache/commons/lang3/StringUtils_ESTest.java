/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:32:38 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("q)gIKFU]:G", "q)gIKFU]:G", "q)gIKFU]:G");
      assertNotNull(string0);
      assertEquals("q)gIKFU]:G", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "q)gIKFU]:G", (-562), (-562));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultIfEmpty("", "q)gIKFU]:G");
      assertNotNull(string1);
      assertEquals("q)gIKFU]:G", string1);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = 'y';
      charArray0[3] = 'G';
      charArray0[4] = 'G';
      charArray0[5] = 'G';
      charArray0[6] = 'y';
      charArray0[7] = 'y';
      int int1 = StringUtils.indexOfAny((CharSequence) "q)gIKFU]:G", charArray0);
      assertEquals(9, int1);
      assertArrayEquals(new char[] {'*', 'y', '\u0000', 'G', 'G', 'G', 'y', 'y'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.repeat('y', 2607);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int2 = StringUtils.ordinalIndexOf("", "q)gIKFU]:G", 9);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string3 = StringUtils.defaultIfBlank("e(Cow", "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertNotNull(string3);
      assertEquals("e(Cow", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.substring((String) null, (-1), 2607);
      assertNull(string4);
      
      String string5 = StringUtils.replaceEachRepeatedly("U^_:%oc>gryXQ", (String[]) null, (String[]) null);
      assertNotNull(string5);
      assertEquals("U^_:%oc>gryXQ", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("KI+@f_");
      assertNotNull(string0);
      
      int int0 = 32767;
      char char0 = 'T';
      // Undeclared exception!
      StringUtils.rightPad("KI+@f_", 32767, 'T');
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.0;
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-82);
      String string0 = StringUtils.join(byteArray0, '(');
      assertNotNull(string0);
      assertEquals("32(1(48(-43(86(12(8(-82", string0);
      assertArrayEquals(new byte[] {(byte)32, (byte)1, (byte)48, (byte) (-43), (byte)86, (byte)12, (byte)8, (byte) (-82)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      charSequenceArray0[0] = (CharSequence) "32(1(48(-43(86(12(8(-82";
      String string1 = StringUtils.stripStart("\r\r", (String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "\r\r";
      charSequenceArray0[3] = (CharSequence) "\r\r";
      charSequenceArray0[4] = (CharSequence) "\r\r";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\r\r", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Iterator<Object> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      String string0 = StringUtils.join(iterator0, "'@DxZwgc");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      
      String string1 = StringUtils.upperCase(" vs ", locale0);
      assertNotNull(string1);
      assertEquals(" VS ", string1);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertFalse(string1.equals((Object)string0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 5;
      intArray0[1] = 7;
      intArray0[2] = 7;
      intArray0[3] = 7;
      intArray0[4] = (int) ' ';
      intArray0[5] = 5;
      String string2 = StringUtils.join(intArray0, ' ', 1, 5);
      assertNotNull(string2);
      assertEquals("7 7 7 32", string2);
      assertArrayEquals(new int[] {5, 7, 7, 7, 32, 5}, intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((byte[]) null, ' ', 5, 57);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("u_M", 'J');
      assertNotNull(string0);
      assertEquals("Ju_MJ", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Ju_MJ", (CharSequence) "u_M");
      assertEquals(1, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("U|AZ0Iim+afSm%6E/", "Ju_MJ", 977);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.substringBefore((String) null, 977);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Ju_MJ", (CharSequence) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Ju_MJ", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("org.apache.commons.lang3.LocaleUtils", " ", " ");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.LocaleUtils", string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '';
      charArray0[1] = 'e';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      charArray0[4] = 'D';
      charArray0[5] = 'U';
      charArray0[6] = 'v';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "org.apache.commons.lang3.LocaleUtils", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'', 'e', 'z', 'z', 'D', 'U', 'v'}, charArray0);
      assertEquals(7, charArray0.length);
      
      int int0 = 0;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", " ", 0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 0, 98);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("org.apache.commons.lang3.LocaleUtils", " ", " ");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.LocaleUtils", string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '';
      charArray0[1] = 'e';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      charArray0[4] = 'D';
      charArray0[5] = '';
      charArray0[6] = 'v';
      int int0 = 0;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", " ", 0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 0, (int) 'e');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      String string0 = StringUtils.remove("@:TkiY)hI)wv^tp(#", "@:TkiY)hI)wv^tp(#");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.capitalize("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "@:TkiY)hI)wv^tp(#";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "@:TkiY)hI)wv^tp(#";
      charSequenceArray0[4] = (CharSequence) "@:TkiY)hI)wv^tp(#";
      boolean boolean1 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[2], charSequenceArray0[1]);
      assertEquals((-1), int0);
      assertEquals(5, charSequenceArray0.length);
      
      String string2 = StringUtils.center("}Uw] 4?9Kh&?1&)[", 32);
      assertNotNull(string2);
      assertEquals("        }Uw] 4?9Kh&?1&)[        ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringAfter("Q))V!R1H(e#iNu:30r", (-1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      int int1 = StringUtils.indexOf((CharSequence) "Q))V!R1H(e#iNu:30r", (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = StringUtils.split("        }Uw] 4?9Kh&?1&)[        ", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.removeStart("$ V", "9G00k;MC::%.]j&D(S");
      assertNotNull(string4);
      assertEquals("$ V", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean2 = StringUtils.contains((CharSequence) null, (CharSequence) "        }Uw] 4?9Kh&?1&)[        ");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("]", (-4020));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase((String) null, (String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.chomp((String) null);
      assertNull(string2);
      
      char[] charArray0 = new char[3];
      charArray0[2] = '\u0000';
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Integer integer0 = new Integer('\u0000');
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      short[] shortArray0 = new short[12];
      shortArray0[0] = (short) (-34);
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)5;
      shortArray0[3] = (short)1357;
      String string3 = StringUtils.abbreviate((String) null, (String) null, 118, (int) (short)1357);
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, "Thd");
      assertNull(stringArray0);
      
      String string4 = StringUtils.removeStartIgnoreCase("Thd", "`?_s|");
      assertNotNull(string4);
      assertEquals("Thd", string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Thd", (CharSequence) "Thd");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.0;
      String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width is %d", "o", "4");
      assertNull(stringArray0);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      stack0.clear();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      String string0 = "5*hU#N";
      String string1 = StringUtils.substring("5*hU#N", 790);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      StringUtils.rightPad("", 65536, "maxWith cannot be negative");
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.leftPad(" ", 9, " ");
      assertNotNull(string0);
      assertEquals("         ", string0);
      
      String string1 = StringUtils.appendIfMissing("         ", " ", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("         ", string1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("N<QN&FxQu_M", "U]1");
      assertNotNull(string2);
      assertEquals("N<QN&FxQu_M", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "N<QN&FxQu_M";
      stringArray0[1] = " ";
      stringArray0[2] = " ";
      stringArray0[3] = "N<QN&FxQu_M";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(4, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.normalizeSpace("Index: ");
      assertNotNull(string4);
      assertEquals("Index:", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte) (-67);
      // Undeclared exception!
      try { 
        Charset.forName("N<QN&FxQu_M");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // N<QN&FxQu_M
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.uncapitalize(" ");
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("2 uEwqO#", " ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      Integer integer0 = new Integer('\'');
      assertNotNull(integer0);
      assertEquals(39, (int)integer0);
      
      String string2 = StringUtils.getDigits("2 uEwqO#");
      assertNotNull(string2);
      assertEquals("2", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[1] = " ";
      stringArray1[2] = "2";
      stringArray1[6] = "2";
      stringArray1[5] = " ";
      String string3 = StringUtils.chomp("2", "2");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(2, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.replaceChars(" ", '\'', 'c');
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("2 uEwqO#", " ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = new Integer('\'');
      assertEquals(39, int0);
      
      String string2 = StringUtils.getDigits("2 uEwqO#");
      assertNotNull(string2);
      assertEquals("2", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[1] = " ";
      stringArray1[2] = "2";
      stringArray1[3] = " ";
      stringArray1[6] = "2";
      stringArray1[5] = " ";
      stringArray1[6] = " ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(" ", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 2 vs 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      String string0 = " ";
      String string1 = "@C=]IX?mrt(i_[$lm^J";
      // Undeclared exception!
      try { 
        StringUtils.replacePattern(" ", " ", "@C=]IX?mrt(i_[$lm^J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("T9|Z{[0?2,-", "T9|Z{[0?2,-");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", 'M');
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 'M';
      doubleArray0[3] = (double) 'L';
      String string1 = StringUtils.join(doubleArray0, '5', 0, 3);
      assertNotNull(string1);
      assertEquals("0.056.0577.0", string1);
      assertArrayEquals(new double[] {0.0, 6.0, 77.0, 76.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripEnd("T9|Z{[0?2,-", "Dz@jQ_<.e");
      assertNotNull(string2);
      assertEquals("T9|Z{[0?2,-", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "0.056.0577.0";
      charSequenceArray0[1] = (CharSequence) "T9|Z{[0?2,-";
      charSequenceArray0[2] = (CharSequence) "qMdk{m:`-@E!e}8N?aB";
      boolean boolean0 = StringUtils.equalsAny("Dz@jQ_<.e", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string3 = StringUtils.join(doubleArray0, '@', 2364, 280);
      assertNotNull(string3);
      assertEquals("", string3);
      assertArrayEquals(new double[] {0.0, 6.0, 77.0, 76.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      String string0 = "u6/p";
      String string1 = StringUtils.repeat("u6/p", "u6/p", 681);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replace("#", string1, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string2);
      assertEquals("#", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      assertTrue(charset1.canEncode());
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.displayName());
      assertEquals("UTF-8", charset1.toString());
      assertEquals("UTF-8", charset1.name());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("u6/p", "#", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 16);
      assertEquals((-1), int0);
      
      char[] charArray0 = null;
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.truncate("", 8, 8);
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.left("", (-1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, 'R');
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean3);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string4 = StringUtils.join((int[]) null, 'R', 16, 0);
      assertNull(string4);
      
      String string5 = StringUtils.substringBefore(" vs  vs ", 0);
      assertNotNull(string5);
      assertEquals(" vs  vs ", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = "e]+R";
      try { 
        StringUtils.getBytes("e]+R", "@");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2698;
      doubleArray0[1] = (double) 2698;
      doubleArray0[2] = (-1586.5655113179564);
      doubleArray0[3] = (double) 2698;
      String string0 = StringUtils.right("\n", (-1));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substring("", (-1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) "", 4);
      assertEquals(1, int0);
      
      String string2 = StringUtils.repeat("", "Cannot clone Cloneable type ", 2698);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) string2, (CharSequence) "\n", 4);
      assertEquals((-1), int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("\n");
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\n", "\n");
      assertEquals(1.0, double0, 0.01);
      
      // Undeclared exception!
      StringUtils.isAlphaSpace(string2);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("\r", "\r");
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\r", (CharSequence) "\r", 108);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "\r", 108);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = StringUtils.isNumeric("\r");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "\r";
      String string1 = StringUtils.abbreviate(" has no clone method", "\r", 0, 3);
      assertNotNull(string1);
      assertEquals(" h\r", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("JuT(3>3", "", "");
      assertNull(stringArray0);
      
      String string2 = StringUtils.stripAccents("urWh+`R0X/bJbqFn");
      assertNotNull(string2);
      assertEquals("urWh+`R0X/bJbqFn", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "$.Il&O]STF'b=bV|{+", (CharSequence) "urWh+`R0X/bJbqFn");
      assertEquals(16, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      String string0 = StringUtils.chomp("\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = (-4305);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\r", "]gIpL^", 640, (-4305));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, " ");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '?';
      charArray0[1] = ' ';
      charArray0[2] = 'p';
      charArray0[3] = 'o';
      String string1 = StringUtils.appendIfMissing(" ", " ", (CharSequence[]) null);
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(" ");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " ", "A");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.wrap("D!@O7c/ %;*9Md>BZ", ' ');
      assertNotNull(string2);
      assertEquals(" D!@O7c/ %;*9Md>BZ ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(int0));
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      boolean boolean1 = priorityQueue0.add(integer0);
      assertTrue(boolean1);
      assertEquals(1, priorityQueue0.size());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      assertTrue(priorityQueue0.contains(int0));
      
      Integer integer1 = new Integer((-514));
      assertNotNull(integer1);
      assertEquals((-514), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      boolean boolean2 = priorityQueue0.add(integer1);
      assertTrue(boolean2);
      assertEquals(2, priorityQueue0.size());
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(priorityQueue0.contains((-514)));
      
      Iterator<Integer> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(2, priorityQueue0.size());
      assertTrue(priorityQueue0.contains((-514)));
      
      String string3 = StringUtils.join(iterator0, '$');
      assertNotNull(string3);
      assertEquals("-514$-1", string3);
      assertEquals(2, priorityQueue0.size());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(priorityQueue0.contains((-514)));
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.rightPad((String) null, 356, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.defaultIfEmpty((String) null, (String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-3223);
      shortArray0[1] = (short) (-1112);
      shortArray0[2] = (short)249;
      shortArray0[3] = (short)49;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)396;
      shortArray0[6] = (short)11;
      shortArray0[7] = (short)66;
      char char0 = 's';
      int int0 = 2;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 's', 2, (int) (short)66);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, " ");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '?';
      charArray0[1] = ' ';
      charArray0[2] = 'p';
      charArray0[3] = 'o';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'?', ' ', 'p', 'o'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      String string0 = StringUtils.appendIfMissing("", "", charSequenceArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(charSequenceArray0[3]);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfAny(charSequenceArray0[3], "Search and Replace array lengths don't match: ");
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string1 = StringUtils.wrap("Search and Replace array lengths don't match: ", 'J');
      assertNotNull(string1);
      assertEquals("JSearch and Replace array lengths don't match: J", string1);
      assertFalse(string1.equals((Object)string0));
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(int0));
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      boolean boolean1 = priorityQueue0.add(integer0);
      assertTrue(boolean1);
      assertEquals(1, priorityQueue0.size());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      assertTrue(priorityQueue0.contains(int0));
      
      Iterator<Integer> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(priorityQueue0.contains(int0));
      
      String string2 = StringUtils.join(iterator0, 'J');
      assertNotNull(string2);
      assertEquals("-1", string2);
      assertEquals(1, priorityQueue0.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(priorityQueue0.contains(int0));
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\r", charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'j', 'O', 'O'}, charArray0);
      assertEquals(3, charArray0.length);
      
      String string0 = StringUtils.repeat('*', 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate("", 2261);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", "\r");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\r", (CharSequence) "\r", 2421);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      String string1 = StringUtils.join(intArray0, '~', (-1428), (-2801));
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", "\r");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\r", (CharSequence) "\r", 2421);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MIN_VALUE, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      String string1 = StringUtils.stripToNull("\r");
      assertNull(string1);
      
      String string2 = StringUtils.swapCase(" has no clone method");
      assertNotNull(string2);
      assertEquals(" HAS NO CLONE METHOD", string2);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      String string0 = StringUtils.stripToNull(" ");
      assertNull(string0);
      
      String string1 = StringUtils.EMPTY;
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, "");
      assertFalse(boolean0);
      
      String string2 = StringUtils.abbreviate(".................................................................................................. vs ", " ", 3012, 3);
      assertNotNull(string2);
      assertEquals(" s ", string2);
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.substringsBetween(" ", "u(\"5", "$.Il&O]STF'b=bV|{+");
      assertNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ".................................................................................................. vs ", (CharSequence) "");
      assertEquals(102, int0);
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.removeEndIgnoreCase((String) null, (String) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.truncate("", 410);
      assertNotNull(string2);
      assertEquals("", string2);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      serviceLoader0.reload();
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Iterator<Object> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      String string3 = StringUtils.join(iterator0, (String) null);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertTrue(string3.equals((Object)string2));
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string3));
      
      String string4 = StringUtils.substringAfter((String) null, 1420);
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("@0S", (-4003));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "%");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBeforeLast("org.apacQe.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils", "3%F@_Z\u0006J&m");
      assertNotNull(string1);
      assertEquals("org.apacQe.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumeric("org.apacQe.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "3%F@_Z\u0006J&m";
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "%";
      boolean boolean1 = StringUtils.equalsAny("", charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.substring("", 2328, 2328);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripAccents("br\"lc@Nu");
      assertNotNull(string3);
      assertEquals("br\"lc@Nu", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.compare("org.apacQe.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils", "3%F@_Z\u0006J&m");
      assertEquals(60, int0);
      
      String string4 = StringUtils.replaceChars("", '7', '_');
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isAlpha("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.CR;
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.wrap(":@9wg", "ulG");
      assertNotNull(string2);
      assertEquals("ulG:@9wgulG", string2);
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 't';
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'t'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.substring((String) null, 63);
      assertNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "ulG:@9wgulG", (CharSequence) "\r", (-495));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("ulG:@9wgulG", "l", 1466);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      String string0 = StringUtils.replaceAll("PZ", "PZ", "PZ");
      assertNotNull(string0);
      assertEquals("PZ", string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'C';
      charArray0[1] = '!';
      charArray0[2] = '5';
      charArray0[3] = 'J';
      charArray0[5] = 'O';
      charArray0[6] = 'J';
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String string1 = StringUtils.substringBetween("PZ", (String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("PZ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "N|p?#QI";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("N|p?#QI", string0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "N|p?#QI", (CharSequence) "N|p?#QI");
      assertEquals(0, int0);
      
      String string1 = StringUtils.right("N|p?#QI", 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.getDigits("B");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringAfterLast("mxU!D}<d</7%nYE_", 953);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.abbreviateMiddle("N|p?#QI", "N|p?#QI", 99);
      assertNotNull(string4);
      assertEquals("N|p?#QI", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.capitalize("%");
      assertNotNull(string5);
      assertEquals("%", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.rightPad("", 90, 'h');
      assertNotNull(string6);
      assertEquals("hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.substringAfterLast("', has a length less than 2", "");
      assertNotNull(string7);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      
      String string8 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string8);
      assertEquals("N|p?#QI", string8);
      assertEquals(1, stringArray0.length);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      String string0 = StringUtils.repeat('?', 31);
      assertNotNull(string0);
      assertEquals("???????????????????????????????", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("???????????????????????????????");
      assertNotNull(intArray0);
      assertEquals(31, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = '?';
      String string1 = StringUtils.join(charArray0, ',');
      assertNotNull(string1);
      assertEquals("?,?", string1);
      assertArrayEquals(new char[] {'?', '?'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "???????????????????????????????");
      assertFalse(boolean0);
      
      String string2 = StringUtils.center("\"v.aG1F{", 10);
      assertNotNull(string2);
      assertEquals("\"v.aG1F{ ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeStartIgnoreCase("/@E", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string3);
      assertEquals("/@E", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(31));
      
      String string4 = StringUtils.join((List<?>) arrayList0, '(', 173, (-416));
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(arrayList0.contains(31));
      
      String string5 = StringUtils.normalizeSpace("ur?b8j)lP<QUh@+LEb");
      assertNotNull(string5);
      assertEquals("ur?b8j)lP<QUh@+LEb", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      floatArray0[1] = (-1.0F);
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      String string0 = StringUtils.replace("#", "#", "#");
      assertNotNull(string0);
      assertEquals("#", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("#");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "#", (CharSequence) "#");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.startsWithAny("#", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Minimum abbreviation width with offset is %d", "gN(a9L}f", "gN(a9L}f");
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      
      String string1 = StringUtils.normalizeSpace("Minimum abbreviation width with offset is %d");
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Minimum abbreviation width with offset is %d";
      stringArray0[1] = "Minimum abbreviation width with offset is %d";
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string2 = StringUtils.swapCase("Minimum abbreviation width with offset is %d");
      assertNotNull(string2);
      assertEquals("mINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[0] = (CharSequence) "mINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[2] = (CharSequence) "s.1ZtaC";
      charSequenceArray0[3] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[4] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[5] = (CharSequence) "Minimum abbreviation width with offset is %d";
      String[] stringArray1 = StringUtils.splitByCharacterType("maxWith cannot be negative");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(9, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Minimum abbreviation width with offset is %d", charSequenceArray0[3], (-820));
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      int int1 = StringUtils.countMatches(charSequenceArray0[4], 'e');
      assertEquals(2, int1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("o#5_&V<i,#y", "o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNotNull(string0);
      assertEquals("o#5_&V<i,#y", string0);
      
      String string1 = StringUtils.substringAfter("UpA{-?;'4{pSY,KVc", "offset cannot be negative");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("UpA{-?;'4{pSY,KVc", 1582);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.wrapIfMissing("Rq*z`u2h", ", Length: 0");
      assertNotNull(string3);
      assertEquals(", Length: 0Rq*z`u2h, Length: 0", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.lastOrdinalIndexOf(", Length: 0Rq*z`u2h, Length: 0", "Rq*z`u2h", 8);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      String string0 = StringUtils.stripToNull(" ");
      assertNull(string0);
      
      String string1 = StringUtils.EMPTY;
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, "");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringBetween(".................................................................................................. vs ", "");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.containsWhitespace(".................................................................................................. vs ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.difference("', has a length less than 2Cx.V\"$D5~Fw#GAL#D#@v=@@EU", (String) null);
      assertNotNull(string3);
      assertEquals("', has a length less than 2Cx.V\"$D5~Fw#GAL#D#@v=@@EU", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.split("D", "Qr>IQt");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.uncapitalize("Exception cloning Cloneable type -1I0I0I0I0I0I0I0");
      assertNotNull(string4);
      assertEquals("exception cloning Cloneable type -1I0I0I0I0I0I0I0", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      String string0 = StringUtils.abbreviate("@:TkiY)hI)w^tp(#", "\r", 8, 8);
      assertNotNull(string0);
      assertEquals("\rI)w^tp\r", string0);
      
      String string1 = StringUtils.defaultString("*'l@;GA+");
      assertNotNull(string1);
      assertEquals("*'l@;GA+", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "*'l@;GA+", (CharSequence) "*'l@;GA+", (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      String string0 = StringUtils.swapCase(".hbVLW_U/2%N9Vx2XH,");
      assertNotNull(string0);
      assertEquals(".HBvlw_u/2%n9vX2xh,", string0);
      
      String string1 = StringUtils.removeStartIgnoreCase(".hbVLW_U/2%N9Vx2XH,", "oTquVatc8 zWjm");
      assertNotNull(string1);
      assertEquals(".hbVLW_U/2%N9Vx2XH,", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.remove(".HBvlw_u/2%n9vX2xh,", 'B');
      assertNotNull(string2);
      assertEquals(".Hvlw_u/2%n9vX2xh,", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.normalizeSpace("aV#k");
      assertNotNull(string3);
      assertEquals("aV#k", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.substringBeforeLast(".hbVLW_U/2%N9Vx2XH,", "oTquVatc8 zWjm");
      assertNotNull(string4);
      assertEquals(".hbVLW_U/2%N9Vx2XH,", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAsciiPrintable(".hbVLW_U/2%N9Vx2XH,");
      assertTrue(boolean0);
      
      String string5 = StringUtils.abbreviate((String) null, 97, 114);
      assertNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) ".hbVLW_U/2%N9Vx2XH,";
      charSequenceArray0[1] = (CharSequence) ".HBvlw_u/2%n9vX2xh,";
      charSequenceArray0[2] = (CharSequence) ".hbVLW_U/2%N9Vx2XH,";
      String string6 = StringUtils.abbreviate("\r", "\r", 12, 97);
      assertNotNull(string6);
      assertEquals("\r", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      
      charSequenceArray0[3] = (CharSequence) "\r";
      charSequenceArray0[4] = (CharSequence) ".Hvlw_u/2%n9vX2xh,";
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("aV#k", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string7 = StringUtils.replaceChars(".hbVLW_U/2%N9Vx2XH,", 'Q', 'T');
      assertNotNull(string7);
      assertEquals(".hbVLW_U/2%N9Vx2XH,", string7);
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      
      String string8 = StringUtils.right("ska", (-957));
      assertNotNull(string8);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("oTquVatc8 zWjm", charSequenceArray0);
      assertFalse(boolean2);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = 'Q';
      charArray0[2] = 'T';
      charArray0[3] = 'Q';
      charArray0[4] = 'T';
      charArray0[5] = 'B';
      charArray0[6] = 'T';
      charArray0[7] = 'Q';
      charArray0[8] = 'Q';
      int int0 = StringUtils.indexOfAny((CharSequence) "aV#k", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'T', 'Q', 'T', 'Q', 'T', 'B', 'T', 'Q', 'Q'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("r", "+^iy.BY9LR");
      assertNotNull(string0);
      assertEquals("+^iy.BY9LRr+^iy.BY9LR", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("+^iy.BY9LRr+^iy.BY9LR");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[7];
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "+^iy.BY9LR", (CharSequence) "r");
      assertEquals(9, int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 9;
      String string1 = StringUtils.join(intArray0, 'J');
      assertNotNull(string1);
      assertEquals("9", string1);
      assertArrayEquals(new int[] {9}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripEnd("r", "Array and element cannot both be null");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("r", stringArray0);
      assertFalse(boolean1);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Array and element cannot both be null", (CharSequence) "Array and element cannot both be null", 9);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) " vs +^iy.BY9LR", 'J');
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String string3 = StringUtils.replacePattern((String) null, "+^iy.BY9LR", "");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      char char0 = 'X';
      String string0 = StringUtils.wrapIfMissing("org.apache.commons.lang3.StringUtils", 'X');
      assertNotNull(string0);
      assertEquals("Xorg.apache.commons.lang3.StringUtilsX", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Xorg.apache.commons.lang3.StringUtilsX";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[5] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[6] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      boolean boolean0 = StringUtils.equalsAny("Xorg.apache.commons.lang3.StringUtilsX", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string1 = "Cx.V\"$D5~";
      String string2 = StringUtils.wrapIfMissing("Fw#GAL#D#@v=@@EU", "Cx.V\"$D5~");
      assertNotNull(string2);
      assertEquals("Cx.V\"$D5~Fw#GAL#D#@v=@@EUCx.V\"$D5~", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("Xorg.apache.commons.lang3.StringUtilsX", "org.apache.commons.lang3.StringUtils", "bT9v$%|?H1[U<iK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("9yXh)9wAx");
      assertNotNull(string0);
      assertEquals("9yxh)9wax", string0);
      
      String string1 = StringUtils.unwrap("\"", "', has a length less than 2");
      assertNotNull(string1);
      assertEquals("\"", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\"", (CharSequence) "9yXh)9wAx");
      assertEquals(0, int0);
      
      String string2 = StringUtils.getDigits("9yxh)9wax");
      assertNotNull(string2);
      assertEquals("99", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "', has a length less than 2", (CharSequence) "9yxh)9wax");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("u6/p", "u6/p", "'5R");
      assertNotNull(string0);
      assertEquals("'5R", string0);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      boolean[] booleanArray0 = new boolean[0];
      String string1 = StringUtils.join(booleanArray0, 'y');
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      
      Supplier<CharBuffer> supplier0 = (Supplier<CharBuffer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(charBuffer0).when(supplier0).get();
      CharBuffer charBuffer1 = StringUtils.getIfBlank(charBuffer0, supplier0);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.isReadOnly());
      
      String string0 = StringUtils.repeat("", 396);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string1 = StringUtils.replace("", "", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) charBuffer1;
      charSequenceArray0[5] = (CharSequence) charBuffer0;
      boolean boolean0 = StringUtils.equalsAny(charBuffer1, charSequenceArray0);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertTrue(boolean0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      String string0 = StringUtils.substring("", 8192);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string1);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.rightPad("", 8192, "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", string2);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      serviceLoader0.reload();
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Iterator<Object> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      String string0 = StringUtils.join(iterator0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      
      String string1 = locale0.getDisplayVariant();
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      
      String string2 = StringUtils.upperCase("org.apache.commons.lang3.ObjectUtils$Null", locale0);
      assertNotNull(string2);
      assertEquals("ORG.APACHE.COMMONS.LANG3.OBJECTUTILS$NULL", string2);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 5;
      intArray0[1] = (int) ' ';
      intArray0[2] = 5;
      intArray0[3] = 7;
      intArray0[4] = (int) ' ';
      intArray0[5] = 5;
      intArray0[6] = 7;
      intArray0[7] = 7;
      intArray0[8] = (int) ' ';
      String string3 = StringUtils.join(intArray0, ' ', 5, 5);
      assertNotNull(string3);
      assertEquals("", string3);
      assertArrayEquals(new int[] {5, 32, 5, 7, 32, 5, 7, 7, 32}, intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.join((byte[]) null, ' ', 5, Integer.MAX_VALUE);
      assertNull(string4);
      
      String[] stringArray0 = StringUtils.split((String) null, "", 32);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      String string0 = StringUtils.leftPad("Minimum abbreviation width with offset is %d", 2, '2');
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      
      String string1 = StringUtils.wrapIfMissing("Minimum abbreviation width with offset is %d", "n*m))tQSE");
      assertNotNull(string1);
      assertEquals("n*m))tQSEMinimum abbreviation width with offset is %dn*m))tQSE", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceAll("Minimum abbreviation width with offset is %d", "N<QN&FxQu_M45/y4T|O8p/", (String) null);
      assertNotNull(string2);
      assertEquals("Minimum abbreviation width with offset is %d", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Minimum abbreviation width with offset is %d", (char[]) null);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "N<QN&FxQu_M45/y4T|O8p/";
      String string3 = StringUtils.prependIfMissing((String) null, "n*m))tQSEMinimum abbreviation width with offset is %dn*m))tQSE", charSequenceArray0);
      assertNull(string3);
      assertEquals(5, charSequenceArray0.length);
      
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "N<QN&FxQu_M45/y4T|O8p/";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.repeat("=>w<; ^+4@y1ps#*", 9);
      assertNotNull(string4);
      assertEquals("=>w<; ^+4@y1ps#*=>w<; ^+4@y1ps#*=>w<; ^+4@y1ps#*=>w<; ^+4@y1ps#*=>w<; ^+4@y1ps#*=>w<; ^+4@y1ps#*=>w<; ^+4@y1ps#*=>w<; ^+4@y1ps#*=>w<; ^+4@y1ps#*", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 926;
      intArray0[1] = 50;
      intArray0[2] = 1017;
      intArray0[3] = (-1427);
      intArray0[4] = 10;
      char char0 = 'c';
      String string0 = StringUtils.join(intArray0, 'c', 3922, 3310);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new int[] {926, 50, 1017, (-1427), 10}, intArray0);
      assertEquals(5, intArray0.length);
      
      String string1 = StringUtils.leftPad("?HY=IW;7K,~'n~m:Exception cloning Cloneable type ", (-1427), 'c');
      assertNotNull(string1);
      assertEquals("?HY=IW;7K,~'n~m:Exception cloning Cloneable type ", string1);
      assertFalse(string1.equals((Object)string0));
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(10));
      
      Iterator<Integer> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(10));
      
      stack0.setSize(1017);
      assertFalse(stack0.empty());
      assertEquals(1017, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1017, stack0.size());
      assertFalse(stack0.contains(10));
      
      String string2 = "...";
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, "...");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "*R*k");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.removeStartIgnoreCase("*R*k", "...");
      assertNotNull(string0);
      assertEquals("*R*k", string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "*R*k", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase((CharSequence) null, "*R*k");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string1 = StringUtils.strip("...");
      assertNotNull(string1);
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.swapCase("OVSCd!sG=2!e");
      assertNotNull(string2);
      assertEquals("ovscD!Sg=2!E", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "ovscD!Sg=2!E", (CharSequence) "*R*k", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "...", charArray0);
      assertFalse(boolean3);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      String string3 = StringUtils.substringBefore("...", 97);
      assertNotNull(string3);
      assertEquals("...", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      String string0 = StringUtils.trim("=>w<; ^+4@y1ps#*");
      assertNotNull(string0);
      assertEquals("=>w<; ^+4@y1ps#*", string0);
      
      String string1 = StringUtils.normalizeSpace("=>w<; ^+4@y1ps#*");
      assertNotNull(string1);
      assertEquals("=>w<; ^+4@y1ps#*", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.chop("=>w<; ^+4@y1ps#*");
      assertNotNull(string2);
      assertEquals("=>w<; ^+4@y1ps#", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "=>w<; ^+4@y1ps#", (CharSequence) "=>w<; ^+4@y1ps#*", 1);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replaceAll("=>w<; ^+4@y1ps#*", "=>w<; ^+4@y1ps#*", (String) null);
      assertNotNull(string3);
      assertEquals("=>w<; ^+4@y1ps#*", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      int int1 = StringUtils.compareIgnoreCase(", Length: ", "=>w<; ^+4@y1ps#*", false);
      assertEquals((-17), int1);
      assertFalse(int1 == int0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "=>w<; ^+4@y1ps#";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "=>w<; ^+4@y1ps#*";
      objectArray0[4] = (Object) ", Length: ";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "=>w<; ^+4@y1ps#*";
      String string4 = StringUtils.join(objectArray0, 'E', 10, 1);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(7, objectArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.replaceIgnoreCase("", ", Length: ", "=>w<; ^+4@y1ps#*", (-1));
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "{", (-804));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '?';
      charArray0[1] = 'S';
      charArray0[2] = '\'';
      charArray0[3] = '1';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "{", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'?', 'S', '\'', '1'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("\n");
      assertTrue(boolean0);
      
      String string1 = StringUtils.capitalize("\n");
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlphaSpace("\n");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split("object");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.unwrap((String) null, '!');
      assertNull(string2);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, '!');
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("<k", "Object varargs must not be null", Integer.MAX_VALUE);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("u6/p", "u6/p", "'5R");
      assertNotNull(string0);
      assertEquals("'5R", string0);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "u6/p", (CharSequence) "u6/p");
      assertTrue(boolean0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.prependIfMissing("\r", "\r", (CharSequence[]) null);
      assertNotNull(string2);
      assertEquals("\r", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "'5R", (-431));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.removeEndIgnoreCase((String) null, "");
      assertNull(string3);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("'5R");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int1 = StringUtils.countMatches((CharSequence) null, 'M');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[0];
      String string4 = "1^Y(4Zns2[\\u,\"mJ";
      String string5 = StringUtils.replaceFirst((String) null, string4, "\r");
      assertNull(string5);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean3 = StringUtils.equalsAny("", (CharSequence[]) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      String string6 = StringUtils.chop("VtuGc?V!Z)");
      assertNotNull(string6);
      assertEquals("VtuGc?V!Z", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null, 13, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Arguments cannot both be null";
      String string0 = StringUtils.joinWith("Arguments cannot both be null", objectArray0);
      assertNotNull(string0);
      assertEquals("Arguments cannot both be null", string0);
      assertEquals(1, objectArray0.length);
      
      boolean boolean0 = StringUtils.isBlank("Arguments cannot both be null");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "Arguments cannot both be null", '|');
      assertEquals(0, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '|';
      charArray0[4] = 'C';
      charArray0[5] = '|';
      charArray0[6] = '|';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Arguments cannot both be null", charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'|', '|', '|', '|', 'C', '|', '|'}, charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String string1 = StringUtils.join(booleanArray0, 'a');
      assertNotNull(string1);
      assertEquals("false", string1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.mid("Arguments cannot both be null", 0, 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = StringUtils.containsWhitespace("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isAllLowerCase("Arguments cannot both be null");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = StringUtils.isAllLowerCase("Arguments cannot both be null");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      
      boolean boolean5 = StringUtils.isAllLowerCase("Arguments cannot both be null");
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      
      String string3 = StringUtils.rotate("Index: ", 0);
      assertNotNull(string3);
      assertEquals("Index: ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Arguments cannot both be null";
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "Arguments cannot both be null";
      stringArray1[1] = "Arguments cannot both be null";
      stringArray1[2] = "Index: ";
      stringArray1[3] = "Arguments cannot both be null";
      String string4 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(1, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.repeat(" ", 2082);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase(" ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.abbreviate("=", (String) null, 2082);
      assertNotNull(string2);
      assertEquals("=", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAny((CharSequence) " ", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)116;
      String string3 = StringUtils.join(byteArray0, '\\');
      assertNotNull(string3);
      assertEquals("65\\-28\\73\\-67\\3\\-1\\116", string3);
      assertArrayEquals(new byte[] {(byte)65, (byte) (-28), (byte)73, (byte) (-67), (byte)3, (byte) (-1), (byte)116}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(string3));
      
      Iterator<String> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains(string3));
      
      String string4 = StringUtils.join(iterator0, '\\');
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(treeSet0.contains(string3));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (int) (byte) (-1), 53);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      String string0 = StringUtils.abbreviate("@:TkiY)hI)w^tp(#", "\r", 13, 13);
      assertNotNull(string0);
      assertEquals("\riY)hI)w^tp(#", string0);
      
      String string1 = StringUtils.difference("Locale must not be null", "Locale must not be null");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      int int0 = 2147483645;
      // Undeclared exception!
      try { 
        StringUtils.repeat("DP*Dn$a", 2147483645);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      String string0 = StringUtils.leftPad(" ", 9, " ");
      assertNotNull(string0);
      assertEquals("         ", string0);
      
      String string1 = StringUtils.defaultIfEmpty((String) null, "offset cannot be negative");
      assertNotNull(string1);
      assertEquals("offset cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      String string2 = StringUtils.valueOf(charArray0);
      assertNotNull(string2);
      assertEquals("e", string2);
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsWhitespace("e");
      assertFalse(boolean0);
      
      String string3 = StringUtils.repeat('@', (-549));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int[] intArray0 = StringUtils.toCodePoints("e");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {101}, intArray0);
      assertEquals(1, intArray0.length);
      
      String string4 = StringUtils.join(charArray0, ',');
      assertNotNull(string4);
      assertEquals("e", string4);
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("offset cannot be negative", "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Locale locale0 = new Locale("offset cannot be negative", " ");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals(" ", locale0.getCountry());
      assertEquals("offset cannot be negative", locale0.getLanguage());
      assertEquals("offset cannot be negative_ ", locale0.toString());
      
      String string5 = StringUtils.upperCase((String) null, locale0);
      assertNull(string5);
      assertEquals("", locale0.getVariant());
      assertEquals(" ", locale0.getCountry());
      assertEquals("offset cannot be negative", locale0.getLanguage());
      assertEquals("offset cannot be negative_ ", locale0.toString());
      
      String string6 = StringUtils.mid("e", 10, 10);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      Locale locale0 = new Locale("o9t&V\"oQ#", " ");
      assertNotNull(locale0);
      assertEquals("o9t&v\"oq#_ ", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("o9t&v\"oq#", locale0.getLanguage());
      assertEquals(" ", locale0.getCountry());
      
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
      assertEquals("o9t&v\"oq#_ ", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("o9t&v\"oq#", locale0.getLanguage());
      assertEquals(" ", locale0.getCountry());
      
      String string1 = StringUtils.leftPad(" ", 32, (String) null);
      assertNotNull(string1);
      assertEquals("                                ", string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(" ");
      assertTrue(boolean0);
      
      String string2 = StringUtils.left("]", 4);
      assertNotNull(string2);
      assertEquals("]", string2);
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "]", "Exception cloning Cloneable type ");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.unwrap("o9t&V\"oQ#", '_');
      assertNotNull(string3);
      assertEquals("o9t&V\"oQ#", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 'R';
      floatArray0[3] = (float) 'R';
      String string0 = StringUtils.wrapIfMissing("#Ln", ' ');
      assertNotNull(string0);
      assertEquals(" #Ln ", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase(" #Ln ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter("6vN)@(IR#PsIX&l", "`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("{fZnK1pPy.?q", 1655);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringBefore("", "`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "|rYgI3C#", (CharSequence) "6vN)@(IR#PsIX&l", 46);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "6vN)@(IR#PsIX&l", (CharSequence) "`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;", 1655);
      assertEquals(434, int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.uncapitalize("6vN)@(IR#PsIX&l");
      assertNotNull(string4);
      assertEquals("6vN)@(IR#PsIX&l", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "Exception cloning Cloneable type q)gIKFU]:G");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      String string0 = StringUtils.removeEnd("+^iy.BY9LR", "+^iy.BY9LR");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[8];
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "+^iy.BY9LR", (CharSequence) " vs ");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.difference((String) null, "g*d#DEko)P.@J");
      assertNotNull(string1);
      assertEquals("g*d#DEko)P.@J", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.compare((String) null, "+^iy.BY9LR", false);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.joinWith((String) null, stringArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(8, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeAll("", (String) null);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(8, stringArray0.length);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals((-1), int2);
      assertArrayEquals(new char[] {'+'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string5 = StringUtils.swapCase((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.wrapIfMissing("g*d#DEko)P.@J", "u_M");
      assertNotNull(string6);
      assertEquals("u_Mg*d#DEko)P.@Ju_M", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.deleteWhitespace("u_Mg*d#DEko)P.@Ju_M");
      assertNotNull(string7);
      assertEquals("u_Mg*d#DEko)P.@Ju_M", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "+^iy.BY9LR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.abbreviateMiddle("=--*$", " ", (-35));
      assertNotNull(string1);
      assertEquals("=--*$", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "|N", (CharSequence) "|N");
      assertEquals(0, int0);
      
      String string0 = StringUtils.substringBefore("u", "u");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeFirst("e\"", "e\"");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringAfter("|N", 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.unwrap("", 'D');
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.wrapIfMissing("DEOrI}I8JHCS", 'j');
      assertNotNull(string4);
      assertEquals("jDEOrI}I8JHCSj", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAllUpperCase("u");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("e\"", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      String string0 = StringUtils.join((boolean[]) null, '-', 530, 530);
      assertNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      charArray0[3] = '-';
      charArray0[4] = '-';
      charArray0[5] = '-';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'-', '-', '-', '-', '-', '-'}, charArray0);
      assertEquals(6, charArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.wrapIfMissing((String) null, "\"v.aG1F{");
      assertNull(string1);
      
      boolean boolean1 = StringUtils.containsIgnoreCase(charSequenceArray0[0], charSequenceArray0[1]);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equals(charSequenceArray0[0], charSequenceArray0[0]);
      assertTrue(boolean2);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("\r", "u6/p", ", '");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny("\r", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.abbreviate(", '", "{?P%T", 128, 6);
      assertNotNull(string0);
      assertEquals(", '", string0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) ", '", (CharSequence) "2[");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = new String[9];
      stringArray1[0] = "u6/p";
      stringArray1[1] = "org.apache.commons.lang3.CharUtils";
      stringArray1[2] = "{?P%T";
      stringArray1[3] = "2[";
      stringArray1[4] = "u6/p";
      stringArray1[5] = "u6/p";
      stringArray1[6] = "\r";
      stringArray1[7] = ", '";
      stringArray1[8] = "{?P%T";
      String string1 = StringUtils.replaceEachRepeatedly(",Wy\"Hz\"", (String[]) null, stringArray1);
      assertNotNull(string1);
      assertEquals(",Wy\"Hz\"", string1);
      assertEquals(9, stringArray1.length);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      String string0 = StringUtils.unwrap("h", "6Nka(\"aeEKonxxPOeu");
      assertNotNull(string0);
      assertEquals("h", string0);
      
      String string1 = StringUtils.replaceFirst("6Nka(\"aeEKonxxPOeu", "uGwx ?El62;=^K", "h");
      assertNotNull(string1);
      assertEquals("6Nka(\"aeEKonxxPOeu", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumeric("h");
      assertFalse(boolean0);
      
      String string2 = StringUtils.leftPad("'($7O", 14);
      assertNotNull(string2);
      assertEquals("        '($7O", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceOnceIgnoreCase("6Nka(\"aeEKonxxPOeu", "h", (String) null);
      assertNotNull(string3);
      assertEquals("6Nka(\"aeEKonxxPOeu", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = '}';
      charArray0[2] = '%';
      charArray0[3] = 't';
      charArray0[4] = 'U';
      charArray0[5] = 'S';
      charArray0[6] = '%';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "6Nka(\"aeEKonxxPOeu", charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'t', '}', '%', 't', 'U', 'S', '%'}, charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.substring("O;L>g`(X|q", 14);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "h", (CharSequence) "'($7O", (-29));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "'($7O", (CharSequence) "O;L>g`(X|q");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Fq/$p");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Fq/$p", (CharSequence) "Fq/$p");
      assertEquals(0, int0);
      
      String string0 = StringUtils.center("Fq/$p", 0);
      assertNotNull(string0);
      assertEquals("Fq/$p", string0);
      
      String string1 = StringUtils.rightPad("Fq/$p", (-1), "Fq/$p");
      assertNotNull(string1);
      assertEquals("Fq/$p", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOf((CharSequence) "Fq/$p", (CharSequence) "Q))V!R1H(e#iNu:30r");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Fq/$p", (CharSequence[]) stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.endsWithAny("Fq/$p", stringArray0);
      assertTrue(boolean1);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is %d";
      String string1 = StringUtils.replaceChars("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.normalizeSpace("Minimum abbreviation width with offset is %d");
      assertNotNull(string2);
      assertEquals("Minimum abbreviation width with offset is %d", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Minimum abbreviation width with offset is %d";
      int int0 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width with offset is %d", 91);
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      
      String[] stringArray1 = Locale.getISOLanguages();
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(188, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.endsWithAny("Minimum abbreviation width with offset is %d", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(boolean0);
      assertEquals(188, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.center("Minimum abbreviation width with offset is %d", 3506);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'v', (-3778), (-668));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3778
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      String string0 = StringUtils.wrap("|N", "");
      assertNotNull(string0);
      assertEquals("|N", string0);
      
      String string1 = StringUtils.replacePattern("*k4{Bl~4qsXlYd:+0LZc'D#;vqYE;lQ>", "", "offset cannot be negative");
      assertNotNull(string1);
      assertEquals("offset cannot be negative*offset cannot be negativekoffset cannot be negative4offset cannot be negative{offset cannot be negativeBoffset cannot be negativeloffset cannot be negative~offset cannot be negative4offset cannot be negativeqoffset cannot be negativesoffset cannot be negativeXoffset cannot be negativeloffset cannot be negativeYoffset cannot be negativedoffset cannot be negative:offset cannot be negative+offset cannot be negative0offset cannot be negativeLoffset cannot be negativeZoffset cannot be negativecoffset cannot be negativeoffset cannot be negative'offset cannot be negativeDoffset cannot be negative#offset cannot be negative;offset cannot be negativevoffset cannot be negativeqoffset cannot be negativeYoffset cannot be negativeEoffset cannot be negative;offset cannot be negativeloffset cannot be negativeQoffset cannot be negative>offset cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "|N";
      charSequenceArray0[1] = (CharSequence) "*k4{Bl~4qsXlYd:+0LZc'D#;vqYE;lQ>";
      charSequenceArray0[2] = (CharSequence) "|N";
      charSequenceArray0[3] = (CharSequence) "*k4{Bl~4qsXlYd:+0LZc'D#;vqYE;lQ>";
      charSequenceArray0[4] = (CharSequence) "|N";
      charSequenceArray0[5] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[6] = (CharSequence) "|N";
      charSequenceArray0[7] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[8] = (CharSequence) "offset cannot be negative*offset cannot be negativekoffset cannot be negative4offset cannot be negative{offset cannot be negativeBoffset cannot be negativeloffset cannot be negative~offset cannot be negative4offset cannot be negativeqoffset cannot be negativesoffset cannot be negativeXoffset cannot be negativeloffset cannot be negativeYoffset cannot be negativedoffset cannot be negative:offset cannot be negative+offset cannot be negative0offset cannot be negativeLoffset cannot be negativeZoffset cannot be negativecoffset cannot be negativeoffset cannot be negative'offset cannot be negativeDoffset cannot be negative#offset cannot be negative;offset cannot be negativevoffset cannot be negativeqoffset cannot be negativeYoffset cannot be negativeoffset cannot be negativeEoffset cannot be negative;offset cannot be negativeloffset cannot be negativeQoffset cannot be negative>offset cannot be negative";
      boolean boolean0 = StringUtils.endsWithAny("offset cannot be negative*offset cannot be negativekoffset cannot be negative4offset cannot be negative{offset cannot be negativeBoffset cannot be negativeloffset cannot be negative~offset cannot be negative4offset cannot be negativeqoffset cannot be negativesoffset cannot be negativeXoffset cannot be negativeloffset cannot be negativeYoffset cannot be negativedoffset cannot be negative:offset cannot be negative+offset cannot be negative0offset cannot be negativeLoffset cannot be negativeZoffset cannot be negativecoffset cannot be negativeoffset cannot be negative'offset cannot be negativeDoffset cannot be negative#offset cannot be negative;offset cannot be negativevoffset cannot be negativeqoffset cannot be negativeYoffset cannot be negativeoffset cannot be negativeEoffset cannot be negative;offset cannot be negativeloffset cannot be negativeQoffset cannot be negative>offset cannot be negative", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[0], charSequenceArray0[6]);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
      
      String string2 = StringUtils.center("|N", 0);
      assertNotNull(string2);
      assertEquals("|N", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.rightPad("offset cannot be negative*offset cannot be negativekoffset cannot be negative4offset cannot be negative{offset cannot be negativeBoffset cannot be negativeloffset cannot be negative~offset cannot be negative4offset cannot be negativeqoffset cannot be negativesoffset cannot be negativeXoffset cannot be negativeloffset cannot be negativeYoffset cannot be negativedoffset cannot be negative:offset cannot be negative+offset cannot be negative0offset cannot be negativeLoffset cannot be negativeZoffset cannot be negativecoffset cannot be negativeoffset cannot be negative'offset cannot be negativeDoffset cannot be negative#offset cannot be negative;offset cannot be negativevoffset cannot be negativeqoffset cannot be negativeYoffset cannot be negativeoffset cannot be negativeEoffset cannot be negative;offset cannot be negativeloffset cannot be negativeQoffset cannot be negative>offset cannot be negative", 0, "oos,$:sydx ,n9");
      assertNotNull(string3);
      assertEquals("offset cannot be negative*offset cannot be negativekoffset cannot be negative4offset cannot be negative{offset cannot be negativeBoffset cannot be negativeloffset cannot be negative~offset cannot be negative4offset cannot be negativeqoffset cannot be negativesoffset cannot be negativeXoffset cannot be negativeloffset cannot be negativeYoffset cannot be negativedoffset cannot be negative:offset cannot be negative+offset cannot be negative0offset cannot be negativeLoffset cannot be negativeZoffset cannot be negativecoffset cannot be negativeoffset cannot be negative'offset cannot be negativeDoffset cannot be negative#offset cannot be negative;offset cannot be negativevoffset cannot be negativeqoffset cannot be negativeYoffset cannot be negativeoffset cannot be negativeEoffset cannot be negative;offset cannot be negativeloffset cannot be negativeQoffset cannot be negative>offset cannot be negative", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = StringUtils.split("|Pob! BM#Na", "offset cannot be negative");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string4 = StringUtils.removeStart("oTquVatc8 zWjmtoTquVatc8 zWjm", (String) null);
      assertNotNull(string4);
      assertEquals("oTquVatc8 zWjmtoTquVatc8 zWjm", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean1 = StringUtils.contains(charSequenceArray0[8], (CharSequence) "Q))V!R1H(e#iNu:30r");
      assertFalse(boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("org.apache.commons.lang3.StringUtils", 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      String string0 = "', has a length less than 2";
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      
      String string1 = StringUtils.upperCase("', has a length less than 2", locale0);
      assertNotNull(string1);
      assertEquals("', HAS A LENGTH LESS THAN 2", string1);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "', HAS A LENGTH LESS THAN 2", (CharSequence) "', HAS A LENGTH LESS THAN 2");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "', has a length less than 2", (CharSequence) "', HAS A LENGTH LESS THAN 2");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replacePattern("', has a length less than 2", (String) null, "Strings must not be null");
      assertNotNull(string2);
      assertEquals("', has a length less than 2", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.wrapIfMissing("t", "&Uxn\"%C$[~Kw)2#Hr3c");
      assertNotNull(string3);
      assertEquals("&Uxn\"%C$[~Kw)2#Hr3ct&Uxn\"%C$[~Kw)2#Hr3c", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlphaSpace("oTquVatc8 zWjm");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.removeAll(" ", "*k4{Bl~4qsXlYd:+");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 0
         // *k4{Bl~4qsXlYd:+
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "4M`FSm$HwT++mC";
      charSequenceArray0[1] = (CharSequence) "4M`FSm$HwT++mC";
      charSequenceArray0[3] = (CharSequence) "4M`FSm$HwT++mC";
      charSequenceArray0[4] = (CharSequence) "4M`FSm$HwT++mC";
      String string0 = StringUtils.right("Cannot clone Cloneable type ", (-1));
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[6] = (CharSequence) "4M`FSm$HwT++mC";
      String string1 = StringUtils.substring("4M`FSm$HwT++mC", (-1));
      assertNotNull(string1);
      assertEquals("C", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[2], charSequenceArray0[1], (-1));
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.repeat("C", "C", 9);
      assertNotNull(string2);
      assertEquals("CCCCCCCCCCCCCCCCC", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = StringUtils.getLevenshteinDistance(charSequenceArray0[1], charSequenceArray0[3], 5);
      assertEquals(0, int1);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOfIgnoreCase(charSequenceArray0[5], charSequenceArray0[3]);
      assertEquals((-1), int2);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("CCCCCCCCCCCCCCCCC");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("Cannot clone Cloneable type ");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertNotNull(treeSet0);
      
      Object object0 = treeSet0.clone();
      assertNotNull(object0);
      
      Iterator<Integer> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, '<');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.swapCase("m");
      assertNotNull(string1);
      assertEquals("M", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string2 = StringUtils.prependIfMissing("L", "", charSequenceArray0);
      assertNotNull(string2);
      assertEquals("L", string2);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAllUpperCase("L");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "L";
      stringArray0[1] = "L";
      stringArray0[2] = "M";
      stringArray0[3] = "M";
      stringArray0[4] = "";
      stringArray0[5] = "m";
      stringArray0[6] = "L";
      stringArray0[7] = "L";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(8, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      StringUtils.center("org.apache.commons.lang3.LocaleUtils", 797, 's');
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("\r");
      assertTrue(boolean0);
      
      String string1 = StringUtils.getDigits("\r");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.ordinalIndexOf("\r", "", 0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.wrap((String) null, '@');
      assertNull(string2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '[';
      charArray0[4] = '@';
      charArray0[5] = '@';
      String string3 = StringUtils.defaultString("\"RSoNGkYUOt");
      assertNotNull(string3);
      assertEquals("\"RSoNGkYUOt", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "\"RSoNGkYUOt");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      String string0 = StringUtils.substring("", 8192);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string1);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.rightPad("", 8192, "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      boolean boolean0 = StringUtils.isAsciiPrintable(" ");
      assertTrue(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) " ", 'P');
      assertEquals(0, int0);
      
      String string0 = StringUtils.join((double[]) null, 'v', 11, 0);
      assertNull(string0);
      
      String string1 = StringUtils.replaceFirst(" ", "clone", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'M', 1, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, " ");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = ' ';
      charArray0[3] = 'o';
      String string1 = StringUtils.unwrap(" ", ' ');
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 70);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.remove("", "e ");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("e ", 4, "e ");
      assertNotNull(string2);
      assertEquals("e e ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBefore("e ", "Object varargs must not be null");
      assertNotNull(string3);
      assertEquals("e ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("offset cannot be negative0LZc'D#;vqYE;lQ>", "offset cannot be negative0LZc'D#;vqYE;lQ>");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "offset cannot be negative0LZc'D#;vqYE;lQ>";
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "offset cannot be negative0LZc'D#;vqYE;lQ>";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      String string1 = StringUtils.join(objectArray0, "Minimum abbreviation width is %d", 127, 10);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(6, objectArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split("", 'E');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.stripEnd("", (String) null);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.abbreviate("", "", 10);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      charArray0[3] = 'E';
      charArray0[4] = 'E';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '.', 10, 127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      String string0 = StringUtils.chomp("Strings must not be null");
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
      
      String string1 = StringUtils.abbreviateMiddle("Strings must not be null", "gS]", 16);
      assertNotNull(string1);
      assertEquals("StringsgS]e null", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastOrdinalIndexOf("Strings must not be null", "Strings must not be null", 16);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "........................................................................................................ vs ";
      stringArray0[1] = "gS]";
      stringArray0[2] = "Strings must not be null";
      stringArray0[2] = "v}[u76";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string2);
      assertEquals("........................................................................................................ vs ", string2);
      assertEquals(4, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = StringUtils.isNumericSpace("........................................................................................................ vs ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      String string0 = StringUtils.abbreviate("@:TkiY)hI)wv^tp(#", "\r", 8, 8);
      assertNotNull(string0);
      assertEquals("\rI)wv^t\r", string0);
      
      String string1 = StringUtils.capitalize("\rI)wv^t\r");
      assertNotNull(string1);
      assertEquals("\rI)wv^t\r", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "\rI)wv^t\r", (CharSequence) "\rI)wv^t\r");
      assertTrue(boolean0);
      
      String string2 = StringUtils.trim("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsWhitespace(", Length: 0");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.chomp(", Length: 0", "");
      assertNotNull(string3);
      assertEquals(", Length: 0", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean2 = StringUtils.isAlpha("\rI)wv^t\r");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string4 = StringUtils.left("object", 8);
      assertNotNull(string4);
      assertEquals("object", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean3 = StringUtils.isAsciiPrintable("daSite3M<%I~P-c");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string5 = StringUtils.trim("object");
      assertNotNull(string5);
      assertEquals("object", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "object", (CharSequence) "@:TkiY)hI)wv^tp(#");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.indexOf((CharSequence) "\rI)wv^t\r", (CharSequence) ", Length: 0", (-1));
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String string6 = StringUtils.rightPad("", (-1));
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "", 19, 19);
      assertEquals((-1), int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      String string0 = StringUtils.defaultString("o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNotNull(string0);
      assertEquals("o#5_&V<i,#y", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("o#5_&V<i,#y", "o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      String string1 = StringUtils.join((Object[]) null, "g'\u0001i@NC1#&47w");
      assertNull(string1);
      
      String string2 = StringUtils.chop((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.stripStart("gZUe2", (String) null);
      assertNotNull(string3);
      assertEquals("gZUe2", string3);
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumeric("gZUe2");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray1);
      
      String string4 = StringUtils.removeFirst((String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.repeat('%', 10);
      assertNotNull(string5);
      assertEquals("%%%%%%%%%%", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      boolean boolean1 = StringUtils.endsWithAny(" vs ", (CharSequence[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string6 = StringUtils.capitalize("Cloneable");
      assertNotNull(string6);
      assertEquals("Cloneable", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "Cloneable", (-1705), 10);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.join(charArray0, '*', 1919, 655);
      assertNotNull(string7);
      assertEquals("", string7);
      assertArrayEquals(new char[] {'{', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 70);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = StringUtils.endsWithAny("e ", stringArray0);
      assertFalse(boolean1);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "e ", (CharSequence) "e ");
      assertEquals(0, int0);
      
      String string1 = "ncB\"O\\u";
      String string2 = StringUtils.center(string1, 70);
      assertNotNull(string2);
      assertEquals("                               ncB\"O\\u                                ", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.rightPad(string2, 12, "e ");
      assertNotNull(string3);
      assertEquals("                               ncB\"O\\u                                ", string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int1 = StringUtils.indexOf((CharSequence) string3, (CharSequence) string2);
      assertEquals(0, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(int1 == int0);
      
      String[] stringArray1 = StringUtils.split("d", "Strings must not be null");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.removeStart("U728R!g+kIt-'U(A", "dPkc'so3=*");
      assertNotNull(string4);
      assertEquals("U728R!g+kIt-'U(A", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean2 = StringUtils.contains((CharSequence) "U728R!g+kIt-'U(A", (CharSequence) "U728R!g+kIt-'U(A");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string5 = StringUtils.abbreviate("", 0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("org", 9972);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removePattern("org", "org");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBetween("", "i<&oNg)<Z03`A_m", "");
      assertNull(string2);
      
      String string3 = StringUtils.repeat("org", (-569));
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "i<&oNg)<Z03`A_m";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "org";
      charSequenceArray0[4] = (CharSequence) null;
      String string4 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-20);
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "?!b");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ?!b
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing(" vs ", "+^iy.BY9LR");
      assertNotNull(string0);
      assertEquals("+^iy.BY9LR vs +^iy.BY9LR", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("+^iy.BY9LR vs +^iy.BY9LR");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "+^iy.BY9LR", (CharSequence) " vs ");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.difference((String) null, "g*d#DEko)P.@J");
      assertNotNull(string1);
      assertEquals("g*d#DEko)P.@J", string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-127);
      String string2 = StringUtils.join(byteArray0, '[');
      assertNotNull(string2);
      assertEquals("-31[0[53[111[4[-1[2[-127", string2);
      assertArrayEquals(new byte[] {(byte) (-31), (byte)0, (byte)53, (byte)111, (byte)4, (byte) (-1), (byte)2, (byte) (-127)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.difference((String) null, (String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("org.apache.commons.lang3.StringUtils", 'a');
      assertNotNull(string0);
      assertEquals("aorg.apache.commons.lang3.StringUtilsa", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "aorg.apache.commons.lang3.StringUtilsa";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      
      String string1 = StringUtils.substringAfter("aorg.apache.commons.lang3.StringUtilsa", "FSm$HwT++mC");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.appendIfMissingIgnoreCase((String) null, charSequenceArray0[0], charSequenceArray0);
      assertNull(string2);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumeric("FSm$HwT++mC");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      String string0 = StringUtils.replaceAll("PZ", "PZ", "PZ");
      assertNotNull(string0);
      assertEquals("PZ", string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = '!';
      charArray0[2] = '5';
      charArray0[3] = 'J';
      charArray0[4] = '+';
      charArray0[5] = 'O';
      charArray0[6] = 'L';
      charArray0[7] = '}';
      charArray0[8] = 'j';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "PZ", charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'G', '!', '5', 'J', '+', 'O', 'L', '}', 'j'}, charArray0);
      assertEquals(9, charArray0.length);
      
      String string1 = StringUtils.join(charArray0, 'a', 1371, 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'G', '!', '5', 'J', '+', 'O', 'L', '}', 'j'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      byte[] byteArray0 = StringUtils.getBytes("", charset0);
      assertNotNull(byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      String string0 = StringUtils.substring("", 31);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-1));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 109);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", 2636);
      assertFalse(boolean0);
      
      String string1 = StringUtils.uncapitalize("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      String string0 = StringUtils.substring("", 31);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("_CeZn?.}F(<+v>6", "");
      assertNotNull(string1);
      assertEquals("_CeZn?.}F(<+v>6", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceFirst("", "\n", "_CeZn?.}F(<+v>6");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isNumeric("uGwx ?El62;=^K");
      assertFalse(boolean0);
      
      String string3 = StringUtils.leftPad("", 123);
      assertNotNull(string3);
      assertEquals("                                                                                                                           ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("'($7O");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.chomp("");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      
      String string5 = StringUtils.appendIfMissingIgnoreCase(" ", "cJJ", stringArray0);
      assertNotNull(string5);
      assertEquals(" cJJ", string5);
      assertEquals(1, stringArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "K9zr6aBQ~W<ak", "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("p]V}~`<>");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[14];
      charSequenceArray0[1] = (CharSequence) "p]V}~`<>";
      charSequenceArray0[2] = (CharSequence) "K9zr6aBQ~W<ak";
      String[] stringArray0 = StringUtils.substringsBetween("...", "N73Ry_=@A?I-{M1~cj*", "");
      assertNull(stringArray0);
      
      String string0 = StringUtils.join((Object[]) charSequenceArray0, "mf4{");
      assertNotNull(string0);
      assertEquals("mf4{p]V}~`<>mf4{K9zr6aBQ~W<akmf4{mf4{mf4{mf4{mf4{mf4{mf4{mf4{mf4{mf4{mf4{", string0);
      assertEquals(14, charSequenceArray0.length);
      
      String string1 = StringUtils.chop("mf4{");
      assertNotNull(string1);
      assertEquals("mf4", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("gZUe2", "mf4");
      assertNotNull(string2);
      assertEquals("gZUe2", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.abbreviate("gZUe2", "vcb", 76);
      assertNotNull(string3);
      assertEquals("gZUe2", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean2 = StringUtils.equals((CharSequence) "mf4", (CharSequence) "K9zr6aBQ~W<ak");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("K9zr6aBQ~W<ak", "Rq*z`u2h, Length: 0Locale must not be null");
      assertNotNull(stringArray1);
      assertEquals(4, stringArray1.length);
      
      String string4 = StringUtils.prependIfMissing("...", "gZUe2", (CharSequence[]) null);
      assertNotNull(string4);
      assertEquals("gZUe2...", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean3 = StringUtils.containsIgnoreCase("Rq*z`u2h, Length: 0Locale must not be null", "gZUe2...");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      String string0 = StringUtils.rotate(" ", 9);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.repeat("Minimum abbreviation width is %d", 9);
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %d", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.remove("Minimum abbreviation width is %d", '\\');
      assertNotNull(string2);
      assertEquals("Minimum abbreviation width is %d", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      vector0.clear();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      String string3 = StringUtils.join((List<?>) vector0, 'Q', 8, 8);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.abbreviate("Minimum abbreviation width is %d", 1570);
      assertNotNull(string4);
      assertEquals("Minimum abbreviation width is %d", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.leftPad("Minimum abbreviation width is %d", 1570, "h=8*2,L^*");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.chomp("+^iy.BY9LR vs ");
      assertNotNull(string6);
      assertEquals("+^iy.BY9LR vs ", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string5, (CharSequence) " ");
      assertEquals(1567, int0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      int int0 = 9972;
      String string0 = StringUtils.substringAfterLast("org", 9972);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removePattern("org", "org");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat("null/empty items", 9972);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      StringUtils.getDigits(string2);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      
      boolean boolean0 = StringUtils.equalsAny(charBuffer0, (CharSequence[]) null);
      assertFalse(boolean0);
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      
      boolean boolean1 = StringUtils.contains((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertTrue(boolean1);
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.join((byte[]) null, '<', 1710, 1);
      assertNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("", (String) null, true);
      assertEquals(1, int0);
      
      String string1 = StringUtils.rightPad(", Length: ", 3215, '\'');
      assertNotNull(string1);
      
      String string2 = StringUtils.LF;
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.lastOrdinalIndexOf(", Length: ", charBuffer0, 1710);
      assertEquals(10, int1);
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.rotate("\n", 1);
      assertNotNull(string3);
      assertEquals("\n", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "4M`FSm$HwT++mC";
      charSequenceArray0[1] = (CharSequence) "4M`FSm$HwT++mC";
      String string0 = StringUtils.wrapIfMissing("4M`FSm$HwT++mC", ", Length: 0");
      assertNotNull(string0);
      assertEquals(", Length: 04M`FSm$HwT++mC, Length: 0", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ", Length: 0", charSequenceArray0[1], 108);
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) ", Length: 04M`FSm$HwT++mC, Length: 0", (CharSequence) ", Length: 04M`FSm$HwT++mC, Length: 0", 108);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isNumeric("ObjeOt varargs must not be nugl");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) ", Length: 04M`FSm$HwT++mC, Length: 0", charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = '-';
      charArray0[2] = '*';
      charArray0[3] = 'F';
      charArray0[4] = 'x';
      charArray0[5] = 'f';
      charArray0[6] = 'e';
      charArray0[7] = 'X';
      String string1 = StringUtils.join(charArray0, ' ', 83, 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'0', '-', '*', 'F', 'x', 'f', 'e', 'X'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = 1861.1F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2380.0F);
      floatArray0[3] = (-3684.3062F);
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(1861.1F));
      
      String string0 = StringUtils.join((List<?>) stack0, '3', 1431, (-285));
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains((-3684.3062F)));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = '3';
      charArray0[3] = 'n';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'n', 'n', '3', 'n'}, charArray0);
      assertEquals(4, charArray0.length);
      
      String string1 = StringUtils.left("kxb<t?J-_T})o'i4cWq3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-", 1);
      assertNotNull(string1);
      assertEquals("k", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isBlank("k");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 3990.2568F;
      floatArray0[4] = 2690.037F;
      floatArray0[2] = 2663.856F;
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.substringAfter("$", 71);
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      String string2 = StringUtils.truncate("\n", 86);
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      charSequenceArray0[3] = (CharSequence) "\n";
      String string3 = StringUtils.left("", 71);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      Integer integer0 = new Integer(86);
      assertNotNull(integer0);
      assertEquals(86, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      String string0 = StringUtils.removeFirst((String) null, "I17Z>lsBea+ApD");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "I17Z>lsBea+ApD";
      charSequenceArray0[1] = (CharSequence) "I17Z>lsBea+ApD";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
      
      String string1 = StringUtils.stripToEmpty("I17Z>lsBea+ApD");
      assertNotNull(string1);
      assertEquals("I17Z>lsBea+ApD", string1);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2380.0F);
      String string0 = StringUtils.replace("-RG],ksOkbZi6TI", (String) null, "t");
      assertNotNull(string0);
      assertEquals("-RG],ksOkbZi6TI", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "-RG],ksOkbZi6TI", 1);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceAll((String) null, "wx@%v-e^pQA", (String) null);
      assertNull(string1);
      
      int int1 = StringUtils.compareIgnoreCase("V .}<p:1n ZPW", (String) null, false);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.leftPad(" ", 9, " ");
      assertNotNull(string0);
      assertEquals("         ", string0);
      
      String string1 = StringUtils.appendIfMissing("         ", " ", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("         ", string1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("N<QN&FxQu_M", "U]1");
      assertNotNull(string2);
      assertEquals("N<QN&FxQu_M", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlpha("N<QN&FxQu_M");
      assertFalse(boolean0);
      
      String string3 = StringUtils.leftPad("org.apache.commons.lang3.exception.CloneFailedException", 1381, "`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.join((float[]) null, 't');
      assertNull(string4);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 't';
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'t', 't'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.substring("N<QN&FxQu_M", 9);
      assertNotNull(string5);
      assertEquals("_M", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;", (CharSequence) "org.apache.commons.lang3.exception.CloneFailedException", 13);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle((String) null, (String) null, 18);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((char[]) null, '=', 3186, 18);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, 'F');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "K9zr6aBQ~W<ak", "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("p]V}~`<>");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[14];
      charSequenceArray0[1] = (CharSequence) "p]V}~`<>";
      charSequenceArray0[2] = (CharSequence) "K9zr6aBQ~W<ak";
      boolean boolean2 = StringUtils.equalsAny("p]V}~`<>", charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(14, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "K9zr6aBQ~W<ak", (CharSequence) "K9zr6aBQ~W<ak");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)97;
      String string0 = StringUtils.join(byteArray0, ']', 2730, (-2599));
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)82, (byte)97, (byte)97, (byte)97}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      String string1 = StringUtils.replace("p]V}~`<>", "F]5Ax:Y", "p]V}~`<>");
      assertNotNull(string1);
      assertEquals("p]V}~`<>", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "p]V}~`<>", charSequenceArray0[1]);
      assertEquals((-1), int0);
      assertEquals(14, charSequenceArray0.length);
      
      String string2 = StringUtils.LF;
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceIgnoreCase("p]V}~`<>", "org.apache.commons.lang3.Charsets", "'IGRMzjd`{J%z%|\"", 9);
      assertNotNull(string3);
      assertEquals("p]V}~`<>", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = StringUtils.lastOrdinalIndexOf("p]V}~`<>", "", 2730);
      assertEquals(8, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      String string0 = StringUtils.substring("", 8192);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("", 8192, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trim("EDB1>BBfb'\",$=`l");
      assertNotNull(string2);
      assertEquals("EDB1>BBfb'\",$=`l", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.defaultString("(Yb ar#h 6[lu");
      assertNotNull(string3);
      assertEquals("(Yb ar#h 6[lu", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "(Yb ar#h 6[lu", (CharSequence) "", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      String string0 = StringUtils.substringAfter("*hPk*hPk", "*hPk*hPk");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = '7';
      charArray0[2] = '>';
      charArray0[3] = '1';
      charArray0[0] = '1';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'1', '7', '>', '1', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      String[] stringArray0 = StringUtils.split("*hPk*hPk", '7');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.center("", (-1061), "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfter(" -F?LI3uAzw -F?LI3uAzwg*>c.]&GAEju3", (-1061));
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = " Q~?py&WA";
      String string4 = StringUtils.stripStart("*hPk*hPk", "x");
      assertNotNull(string4);
      assertEquals("*hPk*hPk", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = "', has a length less than 2";
      int int0 = StringUtils.indexOf((CharSequence) "*hPk*hPk", (-1061));
      assertEquals((-1), int0);
      
      String string6 = StringUtils.rightPad("x", (-1), '9');
      assertNotNull(string6);
      assertEquals("x", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "*hPk*hPk", (CharSequence) "*hPk*hPk", (-1061));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 649.0F;
      floatArray0[1] = 649.0F;
      floatArray0[2] = (-3684.3062F);
      floatArray0[3] = (-1.0F);
      String string0 = StringUtils.join(floatArray0, 'P');
      assertNotNull(string0);
      assertEquals("649.0P649.0P-3684.3062P-1.0", string0);
      assertArrayEquals(new float[] {649.0F, 649.0F, (-3684.3062F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 649.0F;
      doubleArray0[1] = (double) 649.0F;
      doubleArray0[2] = (-3917.0263210682538);
      doubleArray0[3] = (double) 649.0F;
      doubleArray0[4] = (double) (-3684.3062F);
      doubleArray0[5] = (double) (-1.0F);
      String string1 = StringUtils.join(doubleArray0, 'P', 1614, 1614);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new double[] {649.0, 649.0, (-3917.0263210682538), 649.0, (-3684.30615234375), (-1.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceChars("649.0P649.0P-3684.3062P-1.0", '-', 'P');
      assertNotNull(string2);
      assertEquals("649.0P649.0PP3684.3062PP1.0", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.remove("649.0P649.0PP3684.3062PP1.0", 'n');
      assertNotNull(string3);
      assertEquals("649.0P649.0PP3684.3062PP1.0", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.removeStart("', has a length less than 2", "...");
      assertNotNull(string0);
      assertEquals("', has a length less than 2", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "', has a length less than 2", charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "', has a length less than 2", charArray0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.center("...", 122);
      assertNotNull(string1);
      assertEquals("                                                           ...                                                            ", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "...", 99);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("', has a length less than 2");
      assertNotNull(intArray0);
      assertEquals(27, intArray0.length);
      
      String string2 = StringUtils.rightPad("                                                           ...                                                            ", 122, 'n');
      assertNotNull(string2);
      assertEquals("                                                           ...                                                            ", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "+b+$AH*T7";
      charSequenceArray0[1] = (CharSequence) "+b+$AH*T7";
      charSequenceArray0[2] = (CharSequence) "+b+$AH*T7";
      charSequenceArray0[3] = (CharSequence) "+b+$AH*T7";
      charSequenceArray0[4] = (CharSequence) "+b+$AH*T7";
      charSequenceArray0[5] = (CharSequence) "+b+$AH*T7";
      String string0 = StringUtils.prependIfMissing("+b+$AH*T7", "+b+$AH*T7", charSequenceArray0);
      assertNotNull(string0);
      assertEquals("+b+$AH*T7", string0);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(charSequenceArray0[1]);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[1], charSequenceArray0[0], 2190);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAsciiPrintable(charSequenceArray0[4]);
      assertTrue(boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.countMatches(charSequenceArray0[2], 'C');
      assertEquals(0, int1);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      byte[] byteArray0 = new byte[1];
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      assertTrue(charset1.canEncode());
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.toString());
      assertEquals("UTF-8", charset1.displayName());
      assertEquals("UTF-8", charset1.name());
      
      byteArray0[0] = (byte)10;
      String string1 = StringUtils.toEncodedString(byteArray0, charset0);
      assertSame(charset0, charset1);
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      int int2 = StringUtils.compare("+b+$AH*T7", "+b+$AH*T7");
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("+b+$AH*T7"));
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("+b+$AH*T7"));
      
      String string2 = StringUtils.join(iterator0, 'C');
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(arrayDeque0.contains("+b+$AH*T7"));
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "+b+$AH*T7", (CharSequence) "");
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      String string0 = StringUtils.reverse("b&egB9Lm,(H,!<L");
      assertNotNull(string0);
      assertEquals("L<!,H(,mL9Bge&b", string0);
      
      String string1 = StringUtils.leftPad(" vs ", 102, "......");
      assertNotNull(string1);
      assertEquals(".................................................................................................. vs ", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "`7S4v=n=org.apache.commons.lang3.exception.CloneFailedException";
      charSequenceArray0[1] = (CharSequence) "L<!,H(,mL9Bge&b";
      charSequenceArray0[2] = (CharSequence) "b&egB9Lm,(H,!<L";
      charSequenceArray0[3] = (CharSequence) ".................................................................................................. vs ";
      charSequenceArray0[4] = (CharSequence) ".................................................................................................. vs ";
      charSequenceArray0[5] = (CharSequence) "L<!,H(,mL9Bge&b";
      String string2 = StringUtils.remove("@^!H3BriIt>`K&)&#au", "Object varargs must not be null'IGRMzjd`{J%z%|\"");
      assertNotNull(string2);
      assertEquals("@^!H3BriIt>`K&)&#au", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[6] = (CharSequence) "@^!H3BriIt>`K&)&#au";
      String string3 = StringUtils.appendIfMissing("`7S4v=n=org.apache.commons.lang3.exception.CloneFailedException", "b&egB9Lm,(H,!<L", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("`7S4v=n=org.apache.commons.lang3.exception.CloneFailedException", string3);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.chomp("......", ".................................................................................................. vs ");
      assertNotNull(string4);
      assertEquals("......", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean0 = StringUtils.isAlpha("U]1");
      assertFalse(boolean0);
      
      String string5 = StringUtils.leftPad("C>X6X6u", 1088, "org.apache.commons.lang3.exception.CloneFailedException");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      int int0 = StringUtils.indexOfAny((CharSequence) "Object varargs must not be null'IGRMzjd`{J%z%|\"", charArray0);
      assertEquals(31, int0);
      assertArrayEquals(new char[] {'\''}, charArray0);
      assertEquals(1, charArray0.length);
      
      String string6 = StringUtils.substringBetween((String) null, "......");
      assertNull(string6);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, "L<!,H(,mL9Bge&b");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string7 = StringUtils.rotate("L<!,H(,mL9Bge&b", (-1));
      assertNotNull(string7);
      assertEquals("<!,H(,mL9Bge&bL", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      
      boolean boolean1 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 76);
      assertNull(string0);
      
      String string1 = StringUtils.leftPad("&aS;8ru/Uhj2{zI`", 76, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string1);
      assertEquals("Aborting to protect against StackOverflowError - output of o&aS;8ru/Uhj2{zI`", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Aborting to protect against StackOverflowError - output of o&aS;8ru/Uhj2{zI`", (String) null, (-4023));
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      String string2 = StringUtils.replaceOnce((String) null, "Minimum abbreviation width with offset is %d", "...', has a length less than 2");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isBlank("Minimum abbreviation width with offset is %d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      String string0 = StringUtils.abbreviate("@:TkiY)8;hI)wv^tp(#", "", 8, 8);
      assertNotNull(string0);
      assertEquals("@:TkiY)8", string0);
      
      String string1 = StringUtils.capitalize("@:TkiY)8");
      assertNotNull(string1);
      assertEquals("@:TkiY)8", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "@:TkiY)8", (CharSequence) "@:TkiY)8");
      assertTrue(boolean0);
      
      String string2 = StringUtils.trim("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.containsWhitespace(", Length: 0");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.chomp(", Length: 0", "");
      assertNotNull(string3);
      assertEquals(", Length: 0", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isAlpha("@:TkiY)8");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string4 = StringUtils.left("object", 8);
      assertNotNull(string4);
      assertEquals("object", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean3 = StringUtils.isAsciiPrintable("daSite3M<%I~P-c");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string5 = StringUtils.trim("object");
      assertNotNull(string5);
      assertEquals("object", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "object", (CharSequence) "@:TkiY)8;hI)wv^tp(#");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.indexOf((CharSequence) "@:TkiY)8", (CharSequence) ", Length: 0", (-1));
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Locale.FilteringMode> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string6 = StringUtils.join(iterator0, (String) null);
      assertNotNull(string6);
      assertEquals("", string6);
      assertEquals(0, linkedList0.size());
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = null;
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[0], (CharSequence) null);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[0], charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.removeEnd(" -F?LI3uAzw", " -F?LI3uAzw");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.reverseDelimited("org.apache.commons.lang3.ObjectUtils$Null", 'i');
      assertNotNull(string1);
      assertEquals("ls$Nulliorg.apache.commons.lang3.ObjectUt", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("org.apache.commons.lang3.ObjectUtils$Null", (-1), '{');
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.joinWith("oe#", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean2 = StringUtils.isNotEmpty("org.apache.commons.lang3.ObjectUtils$Null");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "ls$Nulliorg.apache.commons.lang3.ObjectUt");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("PEW`S?U.}N7X$cRDR=e", "'IGRMzjd`{J%z%|\"Object varargs must not be null", "J!hizcA0[OB0t7%~aH");
      assertNotNull(string4);
      assertEquals("PEW`S?U.}N7X$cRDR=e", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      
      CharBuffer charBuffer1 = CharBuffer.allocate(1653);
      assertNotNull(charBuffer1);
      assertFalse(charBuffer1.isDirect());
      assertEquals(1653, charBuffer1.remaining());
      assertEquals(1653, charBuffer1.capacity());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(1653, charBuffer1.length());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(1653, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      
      CharBuffer charBuffer2 = StringUtils.firstNonBlank((CharBuffer[]) null);
      assertNull(charBuffer2);
      
      String string5 = StringUtils.abbreviate("org.apache.commons.lang3.ObjectUtils$Null", "", (-1), (-1));
      assertNotNull(string5);
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.substringsBetween("maxWith cannot be negative", "k.{3|m0s[W145)9R", "PEW`S?U.}N7X$cRDR=e");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = null;
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[0], (CharSequence) null);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[0], charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.removeEnd(" -F?LI3uAzw", " -F?LI3uAzw");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.reverseDelimited("org.apache.commons.lang3.ObjectUtils$Null", 'i');
      assertNotNull(string1);
      assertEquals("ls$Nulliorg.apache.commons.lang3.ObjectUt", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "ls$Nulliorg.apache.commons.lang3.ObjectUt");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.center("org.apache.commons.lang3.ObjectUtils$Null", (-1), '{');
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.joinWith("oe#", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean2 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "ls$Nulliorg.apache.commons.lang3.ObjectUt");
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("PEW`S?U.}N7X$cRDR=e", "'IGRMzjd`{J%z%|\"Object varargs must not be null", "J!hizcA0[OB0t7%~aH");
      assertNotNull(string4);
      assertEquals("PEW`S?U.}N7X$cRDR=e", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      
      CharBuffer charBuffer1 = CharBuffer.allocate(1653);
      assertNotNull(charBuffer1);
      assertEquals(0, charBuffer1.arrayOffset());
      assertTrue(charBuffer1.hasArray());
      assertEquals(1653, charBuffer1.capacity());
      assertEquals(1653, charBuffer1.limit());
      assertEquals(0, charBuffer1.position());
      assertEquals(1653, charBuffer1.length());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(1653, charBuffer1.remaining());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      
      CharBuffer charBuffer2 = StringUtils.firstNonBlank((CharBuffer[]) null);
      assertNull(charBuffer2);
      
      String string5 = StringUtils.abbreviate("org.apache.commons.lang3.ObjectUtils$Null", "", (-1), (-1));
      assertNotNull(string5);
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.substringsBetween("maxWith cannot be negative", "k.{3|m0s[W145)9R", "PEW`S?U.}N7X$cRDR=e");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-2421), (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.truncate((String) null, 6);
      assertNull(string1);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      serviceLoader0.reload();
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Iterator<Object> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      String string2 = StringUtils.join(iterator0, (String) null);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((CharSequence) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) null, supplier0);
      assertNull(charSequence0);
      
      String string3 = StringUtils.substringAfter("\r", 6);
      assertNotNull(string3);
      assertEquals("", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.truncate("", 51);
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string5 = StringUtils.substringBetween("", "^oEm", "\r");
      assertNull(string5);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "^oEm", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string6 = StringUtils.truncate((String) null, 6, 476);
      assertNull(string6);
      
      String string7 = StringUtils.chomp("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string7);
      assertEquals("p{InCombiningDiacriticalMarks}+", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.substringBeforeLast("t$A;bEs#.c}XPLQP", "X&(QW.?;`sKvp.");
      assertNotNull(string8);
      assertEquals("t$A;bEs#.c}XPLQP", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      
      String string9 = StringUtils.deleteWhitespace((String) null);
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.removeAll((String) null, "1LA 5");
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.substringAfter((String) null, 13);
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      String string2 = StringUtils.join((boolean[]) null, 'q', (-1590), 13);
      assertNull(string2);
      
      charSequenceArray0[2] = (CharSequence) null;
      String string3 = StringUtils.removeEnd((String) null, "Object varargs must not be null'IGRMzjd`{J%z%|\"");
      assertNull(string3);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains((-1590)));
      
      String string4 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string4);
      assertEquals("", string4);
      
      charSequenceArray0[4] = (CharSequence) "";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) null, supplier0);
      assertNull(charSequence0);
      
      charSequenceArray0[5] = null;
      String string5 = StringUtils.substringAfter((String) null, 34);
      assertNull(string5);
      
      charSequenceArray0[6] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate((String) null, (-561));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("u6/p", "u6/p", "'5R");
      assertNotNull(string0);
      assertEquals("'5R", string0);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "u6/p", (CharSequence) "u6/p");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfter((String) null, 71);
      assertNull(string1);
      
      String string2 = StringUtils.truncate("+:)mMy]H0rLeOUi:k", 86);
      assertNotNull(string2);
      assertEquals("+:)mMy]H0rLeOUi:k", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.left("\r", 71);
      assertNotNull(string3);
      assertEquals("\r", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.leftPad("Aborting to protect against StackOverflowError - output of one loop is the input of another", 86, "'5R");
      assertNotNull(string4);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      int int0 = StringUtils.countMatches((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("m", ".");
      assertNotNull(string0);
      assertEquals("m", string0);
      
      String string1 = StringUtils.replaceChars("m", '&', '&');
      assertNotNull(string1);
      assertEquals("m", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween(" ", "m", "m");
      assertNull(stringArray0);
      
      String string2 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string3 = StringUtils.substringBefore("Aborting to protect against StackOverflowError - output of one loop is the input of another", 2);
      assertNotNull(string3);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.substring("Aborting to protect against StackOverflowError - output of one loop is the input of another", 2, 1934);
      assertNotNull(string4);
      assertEquals("orting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.replaceEachRepeatedly("offset cannot be negative", (String[]) null, (String[]) null);
      assertNotNull(string5);
      assertEquals("offset cannot be negative", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String[] stringArray1 = StringUtils.split("<iKc6?0dpI1pIS*ZC*}", "org.apache.commons.lang3.ObjectUtils", 2);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      
      int int0 = StringUtils.ordinalIndexOf("org.apache.commons.lang3.ObjectUtils", "offset cannot be negative", 2);
      assertEquals((-1), int0);
      
      int int1 = 2119;
      int int2 = StringUtils.lastIndexOf((CharSequence) "offset cannot be negative", (-1), 2119);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = StringUtils.ordinalIndexOf("m", " ", (-1761));
      assertEquals((-1), int3);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      
      boolean boolean0 = StringUtils.isAlpha("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = '&';
      int int4 = StringUtils.indexOfAnyBut((CharSequence) "m", charArray0);
      assertEquals(0, int4);
      assertArrayEquals(new char[] {'&', '&'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      
      int int5 = StringUtils.indexOfAny((CharSequence) "<iKc6?0dpI1pIS*ZC*}", (CharSequence[]) stringArray1);
      assertEquals(0, int5);
      assertEquals(2, stringArray1.length);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "m", 4);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int6 = StringUtils.indexOf((CharSequence) "m", (-1761));
      assertEquals((-1), int6);
      assertTrue(int6 == int2);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertTrue(int6 == int0);
      assertFalse(int6 == int4);
      assertTrue(int6 == int3);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[6];
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      String string0 = StringUtils.unwrap("Sr~`-Ecab3=vRq;", "");
      assertNotNull(string0);
      assertEquals("Sr~`-Ecab3=vRq;", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.getDigits("Sr~`-Ecab3=vRq;");
      assertNotNull(string1);
      assertEquals("3", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat("", (-1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.unwrap("3", "lSyd^xdumt?&\"<$.1E\"null/empty items");
      assertNotNull(string3);
      assertEquals("3", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("3", "Sr~`-Ecab3=vRq;", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      String string1 = StringUtils.center("T&", 4, "T&");
      assertNotNull(string1);
      assertEquals("TT&T", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "TT&T", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      String string2 = StringUtils.stripToNull("");
      assertNull(string2);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      Locale locale1 = Locale.forLanguageTag("uGwx ?El62;=^K");
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = locale0.getDisplayScript();
      assertNotSame(locale0, locale1);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = locale1.getDisplayName();
      assertNotSame(locale1, locale0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      
      Locale locale2 = Locale.GERMANY;
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotNull(locale2);
      assertEquals("de_DE", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("DE", locale2.getCountry());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("de", locale2.getLanguage());
      assertEquals("DEU", locale2.getISO3Country());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      
      Set<Character> set0 = locale2.getExtensionKeys();
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotNull(set0);
      assertEquals("de_DE", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("DE", locale2.getCountry());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("de", locale2.getLanguage());
      assertEquals("DEU", locale2.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      
      String string5 = locale2.getDisplayVariant();
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals("de_DE", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("DE", locale2.getCountry());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("de", locale2.getLanguage());
      assertEquals("DEU", locale2.getISO3Country());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("TT&T", (CharSequence) null, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      String string0 = StringUtils.substringAfter("', has a length less than 2", 32);
      assertNotNull(string0);
      assertEquals("has a length less than 2", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      String string1 = StringUtils.abbreviateMiddle("', has a length less than 2", "6F?E+Dj`K%inE'mJB:", 32);
      assertNotNull(string1);
      assertEquals("', has a length less than 2", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6F?E+Dj`K%inE'mJB:";
      stringArray0[1] = "6<L:q";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(string2);
      assertEquals("6F?E+Dj`K%inE'mJB:", string2);
      assertEquals(2, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.reverse("6<L:q");
      assertNotNull(string3);
      assertEquals("q:L<6", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.join((Object[]) stringArray1, '?', Integer.MAX_VALUE, 8);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      int int0 = StringUtils.indexOf((CharSequence) "', has a length less than 2", 32);
      assertEquals(2, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "6F?E+Dj`K%inE'mJB:";
      charSequenceArray0[1] = (CharSequence) "6<L:q";
      charSequenceArray0[2] = (CharSequence) "6F?E+Dj`K%inE'mJB:";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "MSmm";
      charSequenceArray0[5] = (CharSequence) "6<L:q";
      charSequenceArray0[6] = (CharSequence) "6<L:q";
      String string5 = StringUtils.abbreviate("has a length less than 2", "dBEy-Q>j3", Integer.MAX_VALUE, 2989);
      assertNotNull(string5);
      assertEquals("has a length less than 2", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "has a length less than 2", (CharSequence) "has a length less than 2");
      assertNotNull(charSequence0);
      assertEquals("has a length less than 2", charSequence0);
      assertFalse(charSequence0.equals((Object)string4));
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string5));
      
      charSequenceArray0[7] = (CharSequence) "has a length less than 2";
      charSequenceArray0[8] = (CharSequence) "has a length less than 2";
      String string6 = StringUtils.appendIfMissingIgnoreCase("MSmm", "6F?E+Dj`K%inE'mJB:", charSequenceArray0);
      assertNotNull(string6);
      assertEquals("MSmm", string6);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.stripToNull("6F?E+Dj`K%inE'mJB:");
      assertNotNull(string7);
      assertEquals("6F?E+Dj`K%inE'mJB:", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      String string0 = StringUtils.difference("org.apache.commons.lang3.exception.CloneFailedException", "', is neither of type Map.Entry nor an Array");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      String string1 = StringUtils.rightPad("C>X6X6uorg.apache.commons.lang3.StringUtils", 321, "");
      assertNotNull(string1);
      assertEquals("C>X6X6uorg.apache.commons.lang3.StringUtils                                                                                                                                                                                                                                                                                      ", string1);
      assertFalse(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[0];
      String string2 = StringUtils.join(objectArray0, '?', (-1547), Integer.MAX_VALUE);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, objectArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "', is neither of type Map.Entry nor an Array", 5739);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&FF9rogf", (String) null, Integer.MAX_VALUE);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      String string0 = StringUtils.swapCase("}=5n4H");
      assertNotNull(string0);
      assertEquals("}=5N4h", string0);
      
      String string1 = StringUtils.substringAfter("}=5N4h", "*hPk*hPk");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "}=5n4H", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertEquals(1, charArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("'5R", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.substringAfterLast("<aXMgS{,JZRO", "<aXMgS{,JZRO");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "/!E", "/!E");
      assertEquals(0, int0);
      
      String string3 = StringUtils.left("}=5N4h", (-2031));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("}BKHGagOW39v[`", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.mid("}BKHGagOW39v[`", 6, 6);
      assertNotNull(string0);
      assertEquals("gOW39v", string0);
      
      int int0 = StringUtils.lastIndexOfAny("%", stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.substringBeforeLast("}BKHGagOW39v[`", " in");
      assertNotNull(string1);
      assertEquals("}BKHGagOW39v[`", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null, (Locale) null);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.repeat('2', (-3685));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.equalsAny("", (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)97;
      byteArray0[8] = (byte)97;
      String string2 = StringUtils.join(byteArray0, 'Y', (int) (byte)97, (-3685));
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)97, (byte)97, (byte)97, (byte)97, (byte)97, (byte)97, (byte)97}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      String string3 = StringUtils.mid("Locale must not be null", (byte)97, (-3685));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.LF;
      assertNotNull(string4);
      assertEquals("\n", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("\n", (CharSequence[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String[] stringArray1 = StringUtils.split("", "\n", 101);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("ZL'", "ZL'");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "ZL'");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.strip("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("ZL'"));
      
      String string2 = StringUtils.join((List<?>) linkedList0, 'e', 9, 9);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, linkedList0.size());
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(linkedList0.contains('e'));
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceIgnoreCase("", "", ">M!5pj?y3tT;\"+gXR");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.abbreviateMiddle("", "", 3168);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.reverse((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.stripEnd("1yc4q++", "v4");
      assertNotNull(string5);
      assertEquals("1yc4q++", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByCharacterType("uSw^GO\"#-#TQ>/dLJ");
      assertNotNull(stringArray0);
      assertEquals(13, stringArray0.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'z');
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string6 = StringUtils.replacePattern((String) null, " vs +^iy.BY9LR", "");
      assertNull(string6);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "1yc4q++");
      assertFalse(boolean0);
      
      String string7 = StringUtils.join((Object[]) stringArray0, '\"');
      assertNotNull(string7);
      assertEquals("u\"S\"w\"^\"GO\"\"#\"-\"#\"TQ\">\"/\"d\"LJ", string7);
      assertEquals(13, stringArray0.length);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      String string0 = StringUtils.chop("`7S4v=n=r");
      assertNotNull(string0);
      assertEquals("`7S4v=n=", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("`7S4v=n=");
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String string1 = StringUtils.join(booleanArray0, 'H', 76, 76);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.compare("`7S4v=n=r", "`7S4v=n=", false);
      assertEquals(1, int0);
      
      int int1 = StringUtils.compareIgnoreCase("", "", true);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.join((float[]) null, 'D', 1434, (-1163));
      assertNull(string2);
      
      String string3 = StringUtils.join(booleanArray0, '\'');
      assertNotNull(string3);
      assertEquals("false'false", string3);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.removeStart("org.apache.commons.lang3.exception.CloneFailedException", "`7S4v=n=");
      assertNotNull(string4);
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "false'false";
      String string5 = StringUtils.substringBefore("false'false", 1);
      assertNotNull(string5);
      assertEquals("false'false", string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      charSequenceArray0[1] = (CharSequence) "false'false";
      charSequenceArray0[2] = (CharSequence) "`7S4v=n=";
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'F';
      charArray0[3] = 'D';
      charArray0[4] = 'H';
      charArray0[5] = 'H';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(6, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(6, charBuffer0.length());
      assertEquals("HHFDHH", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(6, charBuffer0.limit());
      assertArrayEquals(new char[] {'H', 'H', 'F', 'D', 'H', 'H'}, charArray0);
      assertEquals(6, charArray0.length);
      
      charSequenceArray0[3] = (CharSequence) charBuffer0;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "`7S4v=n=";
      charSequenceArray0[6] = (CharSequence) null;
      String string6 = StringUtils.prependIfMissing("+^iy.BY9LR vs ", "`7S4v=n=", charSequenceArray0);
      assertNotNull(string6);
      assertEquals("`7S4v=n=+^iy.BY9LR vs ", string6);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      String string0 = StringUtils.repeat('?', 31);
      assertNotNull(string0);
      assertEquals("???????????????????????????????", string0);
      
      String string1 = StringUtils.swapCase("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[0];
      String string2 = StringUtils.join(byteArray0, '?');
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.chop("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      Vector<Integer> vector0 = new Vector<Integer>(10);
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(10));
      
      String string4 = StringUtils.join((List<?>) vector0, '?', 2249, 10);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(vector0.contains(10));
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      String string1 = StringUtils.center("T&", 4, "T&");
      assertNotNull(string1);
      assertEquals("TT&T", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "TT&T", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      String string2 = StringUtils.substringAfter("uGwx ?El62;=^K", "");
      assertNotNull(string2);
      assertEquals("uGwx ?El62;=^K", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.forLanguageTag("uGwx ?El62;=^K");
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = locale0.getDisplayScript();
      assertNotSame(locale0, locale1);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = locale1.getDisplayName();
      assertNotSame(locale1, locale0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = locale1.getDisplayVariant(locale0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      String[] stringArray0 = new String[0];
      String string6 = StringUtils.toRootLowerCase("");
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertFalse(boolean1);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.split("Threshold must not be negative", "T9D[!v-", 4);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Locale.FilteringMode> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, '?');
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.substringBefore("", 256);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = null;
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.center("|Pob! BM#Na", (-1));
      assertNotNull(string0);
      assertEquals("|Pob! BM#Na", string0);
      
      String string1 = StringUtils.rightPad("Q))V!R1H(e#iNu:30r", (-1), "Q))V!R1H(e#iNu:30r");
      assertNotNull(string1);
      assertEquals("Q))V!R1H(e#iNu:30r", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOf((CharSequence) "|Pob! BM#Na", (CharSequence) "|Pob! BM#Na");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.split("C>X6X6u", "N-^OBdHysT");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.removeStart("org.apache.commons.lang3.StringUtils", "C>X6X6u");
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Q))V!R1H(e#iNu:30r", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.abbreviate("Q))V!R1H(e#iNu:30r", 17);
      assertNotNull(string3);
      assertEquals("Q))V!R1H(e#iNu...", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.0;
      String string0 = StringUtils.chomp("\r\r");
      assertNotNull(string0);
      assertEquals("\r", string0);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      String string0 = StringUtils.substring("", 8192);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.truncate("", 8192, 8192);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.rightPad("", 8192, "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = "H',u-b ";
      int int0 = 885;
      String string2 = StringUtils.right("H',u-b ", 885);
      assertNotNull(string2);
      assertEquals("H',u-b ", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "rq5TY*,Z73v`;4;Dy]\\";
      int int1 = 32767;
      // Undeclared exception!
      StringUtils.center("rq5TY*,Z73v`;4;Dy]", 32767, 'n');
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      String string0 = StringUtils.substringBetween("...", "...", "...");
      assertNull(string0);
      
      String string1 = StringUtils.chop("...");
      assertNotNull(string1);
      assertEquals("..", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "..", (CharSequence) null);
      assertEquals(0, int0);
      
      String string2 = StringUtils.rightPad((String) null, 0, 'r');
      assertNull(string2);
      
      int int1 = StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, 543);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = null;
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[0], (CharSequence) null);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, 'a');
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", charSequenceArray0[0]);
      assertEquals(0, int1);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      String string0 = StringUtils.repeat('?', 31);
      assertNotNull(string0);
      assertEquals("???????????????????????????????", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("???????????????????????????????");
      assertNotNull(intArray0);
      assertEquals(31, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = '?';
      String string1 = StringUtils.join(charArray0, ',');
      assertNotNull(string1);
      assertEquals("?,?", string1);
      assertArrayEquals(new char[] {'?', '?'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "???????????????????????????????");
      assertFalse(boolean0);
      
      Locale locale0 = new Locale("^7So##AR)U`4Kg!+0", "toTquVatc8 zWjm");
      assertNotNull(locale0);
      assertEquals("TOTQUVATC8 ZWJM", locale0.getCountry());
      assertEquals("^7so##ar)u`4kg!+0_TOTQUVATC8 ZWJM", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("^7so##ar)u`4kg!+0", locale0.getLanguage());
      
      String string2 = StringUtils.upperCase("^7So##AR)U`4Kg!+0", locale0);
      assertNotNull(string2);
      assertEquals("^7SO##AR)U`4KG!+0", string2);
      assertEquals("TOTQUVATC8 ZWJM", locale0.getCountry());
      assertEquals("^7so##ar)u`4kg!+0_TOTQUVATC8 ZWJM", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("^7so##ar)u`4kg!+0", locale0.getLanguage());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.mid("???????????????????????????????", 10, 24);
      assertNotNull(string3);
      assertEquals("?????????????????????", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = "\\u";
      String string5 = StringUtils.overlay(string4, string4, (-1614), 64);
      assertNotNull(string5);
      assertEquals("\\u", string5);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.removeStart("', has a length less than 2", "...");
      assertNotNull(string0);
      assertEquals("', has a length less than 2", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "', has a length less than 2", charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      
      String[] stringArray0 = StringUtils.substringsBetween("Exception cloning Cloneable type -1", "Exception cloning Cloneable type -1", "%V!9I>9Pb'#Z=IW");
      assertNull(stringArray0);
      
      String string1 = StringUtils.wrap("', has a length less than 2", "`;`;`;`;`;`");
      assertNotNull(string1);
      assertEquals("`;`;`;`;`;`', has a length less than 2`;`;`;`;`;`", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.capitalize("R|,K6l*");
      assertNotNull(string2);
      assertEquals("R|,K6l*", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((Object[]) null, "', has a length less than 2");
      assertNull(string3);
      
      String string4 = StringUtils.chop("`;`;`;`;`;`', has a length less than 2`;`;`;`;`;`");
      assertNotNull(string4);
      assertEquals("`;`;`;`;`;`', has a length less than 2`;`;`;`;`;", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.stripStart("dK+sZ", "Exception cloning Cloneable type ");
      assertNotNull(string5);
      assertEquals("dK+sZ", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.substringBeforeLast("-\"yhod/}RI0|F\fJx", "Exception cloning Cloneable type ");
      assertNotNull(string6);
      assertEquals("-\"yhod/}RI0|F\fJx", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlphanumeric("', has a length less than 2");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsAny("org.apache.commons.lang3.ObjectUtils$Nullymz}I.riv\"!\u0001G79q9", (CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.split("R|,K6l*");
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String string7 = StringUtils.truncate("kxb<t?J-_T})o'i4cWq", 0);
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.stripToNull("\n");
      assertNull(string1);
      
      byte[] byteArray0 = new byte[1];
      String string2 = StringUtils.join(byteArray0, 'y');
      assertNotNull(string2);
      assertEquals("0", string2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      
      int[] intArray0 = StringUtils.toCodePoints("0");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {48}, intArray0);
      assertEquals(1, intArray0.length);
      
      String string3 = StringUtils.mid((String) null, 29, 29);
      assertNull(string3);
      
      String string4 = StringUtils.abbreviate((String) null, 29);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      char[] charArray0 = new char[1];
      charArray0[0] = 'J';
      String string0 = StringUtils.join(charArray0, 'J');
      assertNotNull(string0);
      assertEquals("J", string0);
      assertArrayEquals(new char[] {'J'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Locale locale0 = new Locale("N<QN&FxQu_MU]1", "J");
      assertNotNull(locale0);
      assertEquals("n<qn&fxqu_mu]1_J", locale0.toString());
      assertEquals("n<qn&fxqu_mu]1", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("J", locale0.getCountry());
      
      String string1 = StringUtils.upperCase("N<QN&FxQu_MU]1", locale0);
      assertNotNull(string1);
      assertEquals("N<QN&FXQU_MU]1", string1);
      assertEquals("n<qn&fxqu_mu]1_J", locale0.toString());
      assertEquals("n<qn&fxqu_mu]1", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("J", locale0.getCountry());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.mid((String) null, 10, 'J');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Locale must not be null", "\r", 8, 8);
      assertNotNull(string0);
      assertEquals("\rust no\r", string0);
      
      String string1 = StringUtils.upperCase(", Length: 0");
      assertNotNull(string1);
      assertEquals(", LENGTH: 0", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "\rust no\r", (CharSequence) ", LENGTH: 0");
      assertFalse(boolean0);
      
      String string2 = StringUtils.trim("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("Exception cloning Cloneable type -1", "", "uGwx ?El62;=^K");
      assertNull(stringArray0);
      
      String string3 = StringUtils.wrap("I'MqMMg\"(gKL", "...");
      assertNotNull(string3);
      assertEquals("...I'MqMMg\"(gKL...", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.capitalize("o%(P]/|$6|gi]");
      assertNotNull(string4);
      assertEquals("O%(P]/|$6|gi]", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.join((Object[]) null, "o%(P]/|$6|gi]");
      assertNull(string5);
      
      String string6 = StringUtils.chop("\rust no\r");
      assertNotNull(string6);
      assertEquals("\rust no", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      
      String string7 = StringUtils.stripStart("-\"yhod/}RI0|F\fJx", ", Length: 0");
      assertNotNull(string7);
      assertEquals("-\"yhod/}RI0|F\fJx", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      
      String string8 = StringUtils.substringBeforeLast("UpA{-?;'4{pSY,KVc", "org.apache.commons.lang3.ObjectUtils$Nullymz}I.riv\"!\u0001G79q9");
      assertNotNull(string8);
      assertEquals("UpA{-?;'4{pSY,KVc", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      
      boolean boolean1 = StringUtils.isAlphanumeric("...I'MqMMg\"(gKL...");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equalsAny("", (CharSequence[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray1 = StringUtils.split(";nWad(k%qu,s9Y!9md&");
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String string9 = StringUtils.truncate("kxb<t?J-_T})o'i4cWq", 8);
      assertNotNull(string9);
      assertEquals("kxb<t?J-", string9);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "-\"yhod/}RI0|F\fJx", (CharSequence) "-\"yhod/}RI0|F\fJx", 59);
      assertEquals((-1), int0);
      
      String string10 = StringUtils.leftPad("...", (-839), "#6");
      assertNotNull(string10);
      assertEquals("...", string10);
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      
      String string11 = StringUtils.truncate("Minimum abbreviation width with offset is %d", 8, 60);
      assertNotNull(string11);
      assertEquals("abbreviation width with offset is %d", string11);
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string2));
      
      boolean boolean3 = StringUtils.isMixedCase("abbreviation width with offset is %d");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = null;
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Te>;c";
      stringArray0[1] = "Object varargs must not be null";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.appendIfMissing("+^iy.BY9LR", "Object varargs must not be null", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("+^iy.BY9LRObject varargs must not be null", string1);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "+^iy.BY9LRObject varargs must not be null", 64);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "Te>;c", charSequenceArray0[0], (-4178));
      assertEquals((-1), int1);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.substringAfter("Object varargs must not be null", 64);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat("", 160);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.remove("K9zr6aBQ~W<ak", "p]V}~`<>");
      assertNotNull(string2);
      assertEquals("K9zr6aBQ~W<ak", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.substringsBetween("@<q", "", "ymz}I.riv\"!\u0001G79q9");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string3 = StringUtils.substringAfter("", "ymz}I.riv\"!\u0001G79q9");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      char[] charArray0 = new char[6];
      charArray0[1] = ',';
      charArray0[2] = ',';
      String string4 = StringUtils.join(charArray0, '\u0000');
      assertNotNull(string4);
      assertEquals("\u0000\u0000,\u0000,\u0000\u0000\u0000\u0000\u0000\u0000", string4);
      assertArrayEquals(new char[] {'\u0000', ',', ',', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean3 = StringUtils.equalsIgnoreCase("E,``;>-KA34Z\"4+Z6vF", "");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      Locale locale0 = new Locale("", "K9zr6aBQ~W<ak");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("_K9ZR6ABQ~W<AK", locale0.toString());
      assertEquals("K9ZR6ABQ~W<AK", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string5 = StringUtils.upperCase(" in an array of ", locale0);
      assertNotNull(string5);
      assertEquals(" IN AN ARRAY OF ", string5);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("_K9ZR6ABQ~W<AK", locale0.toString());
      assertEquals("K9ZR6ABQ~W<AK", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.mid("K9zr6aBQ~W<ak", '\u0000', 2492);
      assertNotNull(string6);
      assertEquals("K9zr6aBQ~W<ak", string6);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      String string0 = StringUtils.leftPad(" ", 9, " ");
      assertNotNull(string0);
      assertEquals("         ", string0);
      
      String string1 = StringUtils.defaultIfEmpty((String) null, "offset cannot be negative");
      assertNotNull(string1);
      assertEquals("offset cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      String string2 = StringUtils.valueOf(charArray0);
      assertNotNull(string2);
      assertEquals("e", string2);
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsWhitespace("e");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "offset cannot be negative", charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, '?');
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      Locale locale0 = new Locale("^7So#AR)U`4Kg!+0", "toTquVatc8 zWjm");
      assertNotNull(locale0);
      assertEquals("^7so#ar)u`4kg!+0_TOTQUVATC8 ZWJM", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("^7so#ar)u`4kg!+0", locale0.getLanguage());
      assertEquals("TOTQUVATC8 ZWJM", locale0.getCountry());
      
      String string1 = StringUtils.upperCase("`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;k\"\"P=g,T%n-", locale0);
      assertNotNull(string1);
      assertEquals("`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;K\"\"P=G,T%N-", string1);
      assertEquals("^7so#ar)u`4kg!+0_TOTQUVATC8 ZWJM", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("^7so#ar)u`4kg!+0", locale0.getLanguage());
      assertEquals("TOTQUVATC8 ZWJM", locale0.getCountry());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("", 4, "org.apache.commons.lang3.exception.CloneFailedException");
      assertNotNull(string2);
      assertEquals("org.", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.left("+~amv3>E", 462);
      assertNotNull(string3);
      assertEquals("+~amv3>E", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "toTquVatc8 zWjm", "`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;K\"\"P=G,T%N-");
      assertEquals(2, int0);
      
      String string4 = StringUtils.unwrap("...", '?');
      assertNotNull(string4);
      assertEquals("...", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = null;
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[0], (CharSequence) null);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.overlay("oTquVatc8 zWjm", "t", (-1), (-1));
      assertNotNull(string0);
      assertEquals("toTquVatc8 zWjm", string0);
      
      String string1 = StringUtils.wrapIfMissing("oTquVatc8 zWjm", "toTquVatc8 zWjm");
      assertNotNull(string1);
      assertEquals("toTquVatc8 zWjmoTquVatc8 zWjmtoTquVatc8 zWjm", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlphaSpace("t");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "toTquVatc8 zWjmoTquVatc8 zWjmtoTquVatc8 zWjm", (CharSequence) "toTquVatc8 zWjm", 3880);
      assertEquals(29, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.leftPad("toTquVatc8 zWjmoTquVatc8 zWjmtoTquVatc8 zWjm", 2802, 'O');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      String string0 = StringUtils.removeStart("', has a length less than 2", "...");
      assertNotNull(string0);
      assertEquals("', has a length less than 2", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "', has a length less than 2", charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'U', 'U', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      
      String string1 = StringUtils.join(charArray0, 'U', 99, 99);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'U', 'U', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviate("", 99);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceIgnoreCase("", "", ">M!5pj?y3tT;\"+gXR");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.replacePattern("+hl0CZ|", "org.apache.commons.lang3.ObjectUtils$Null", "\r");
      assertNotNull(string3);
      assertEquals("+hl0CZ|", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "+hl0CZ|";
      stringArray0[2] = "\r";
      stringArray0[3] = "";
      stringArray0[4] = "\r";
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = ">M!5pj?y3tT;\"+gXR";
      stringArray1[1] = "+hl0CZ|";
      stringArray1[2] = "+hl0CZ|";
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "";
      stringArray1[6] = ">M!5pj?y3tT;\"+gXR";
      stringArray1[7] = "org.apache.commons.lang3.ObjectUtils$Null";
      stringArray1[8] = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("+hl0CZ|", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 5 vs 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.substringBetween("i<&oNg)<Z03`A_m", "&aS;8ru/Uhj2{zI`", "i<&oNg)<Z03`A_m");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(9, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("i<&oNg)<Z03`A_m", (-1), 26);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-2421), (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.truncate((String) null, 6);
      assertNull(string1);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      serviceLoader0.reload();
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Iterator<Object> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      String string2 = StringUtils.join(iterator0, (String) null);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) null, supplier0);
      assertNull(charSequence0);
      
      String string3 = StringUtils.substringAfter("\r", 6);
      assertNotNull(string3);
      assertEquals("", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.truncate("", 51);
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("null/empty items", 51, (-1862));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("org", 9972);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string1 = StringUtils.removePattern("org", "org");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "org";
      charSequenceArray0[3] = (CharSequence) "";
      String string2 = StringUtils.substringBetween("", "i<&oNg)<Z03`A_m", "");
      assertNull(string2);
      
      charSequenceArray0[4] = (CharSequence) null;
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
      
      String string3 = StringUtils.truncate("Array element ", 51, 9972);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.chomp("\r\r");
      assertNotNull(string4);
      assertEquals("\r", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      String string0 = "', has a length less than 2";
      char[] charArray0 = new char[8];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      String string1 = StringUtils.removeStart("', has a length less than 2", "...");
      assertNotNull(string1);
      assertEquals("', has a length less than 2", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "', has a length less than 2", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'U', 'U', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      
      double double0 = StringUtils.getJaroWinklerDistance("', has a length less than 2", "', has a length less than 2");
      assertEquals(1.0, double0, 0.01);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "', has a length less than 2";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "', has a length less than 2";
      objectArray0[3] = (Object) 'U';
      objectArray0[4] = (Object) "', has a length less than 2";
      objectArray0[5] = (Object) 'U';
      objectArray0[6] = (Object) 'U';
      objectArray0[7] = (Object) "Search and Replace array lengths don't match: ";
      objectArray0[8] = (Object) "', has a length less than 2";
      int int0 = 16;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "', has a length less than 2", (-2784), 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2784
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      String string0 = StringUtils.repeat("u6/p", "u6/p", 3520);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(3520);
      assertNotNull(charBuffer0);
      assertEquals(3520, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3520, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3520, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(3520, charBuffer0.limit());
      
      boolean boolean0 = StringUtils.equals((CharSequence) "u6/p", (CharSequence) charBuffer0);
      assertFalse(boolean0);
      assertEquals(3520, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3520, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3520, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(3520, charBuffer0.limit());
      
      String string1 = StringUtils.replace("#", string0, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string1);
      assertEquals("#", string1);
      assertFalse(string1.equals((Object)string0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      
      byte[] byteArray0 = StringUtils.getBytes("u6/p", charset0);
      assertNotNull(byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertArrayEquals(new byte[] {(byte)117, (byte)54, (byte)47, (byte)112}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      // Undeclared exception!
      StringUtils.indexOfIgnoreCase((CharSequence) string0, (CharSequence) "#", 3520);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      floatArray0[1] = (-1.0F);
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.deleteWhitespace("\r");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.right("", 1858);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.center("", 6, '!');
      assertNotNull(string3);
      assertEquals("!!!!!!", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "0LZc'D#;vqYE;lQ>";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNotNull(charSequence0);
      assertEquals("0LZc'D#;vqYE;lQ>", charSequence0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string4 = StringUtils.substringBetween("\r", "Search and Replace array lengths don't match: ");
      assertNull(string4);
      
      String string5 = StringUtils.defaultString("b2k4*W/+");
      assertNotNull(string5);
      assertEquals("b2k4*W/+", string5);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.join((Object[]) charSequenceArray0, "^9SU", 2522, 2256);
      assertNotNull(string6);
      assertEquals("", string6);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Locale.FilteringMode> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string7 = StringUtils.join(iterator0, '!');
      assertNotNull(string7);
      assertEquals("", string7);
      assertEquals(0, linkedList0.size());
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)charSequence0));
      
      String string8 = StringUtils.substringBefore(" -F?LI3uAzw -F?LI3uAzwCCCCCCCCCCCCCCCCCCC", (-2312));
      assertNotNull(string8);
      assertEquals(" -F?LI3uAzw -F?LI3uAzwCCCCCCCCCCCCCCCCCCC", string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)charSequence0));
      assertFalse(string8.equals((Object)string7));
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      String string0 = StringUtils.repeat('?', 31);
      assertNotNull(string0);
      assertEquals("???????????????????????????????", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("???????????????????????????????");
      assertNotNull(intArray0);
      assertEquals(31, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = '?';
      String string1 = StringUtils.join(charArray0, ',');
      assertNotNull(string1);
      assertEquals("?,?", string1);
      assertArrayEquals(new char[] {'?', '?'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "???????????????????????????????");
      assertFalse(boolean0);
      
      Locale locale0 = new Locale("^7So#AR)U`4Kg!+0", "toTquVatc8 zWjm");
      assertNotNull(locale0);
      assertEquals("^7so#ar)u`4kg!+0_TOTQUVATC8 ZWJM", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("^7so#ar)u`4kg!+0", locale0.getLanguage());
      assertEquals("TOTQUVATC8 ZWJM", locale0.getCountry());
      
      String string2 = StringUtils.upperCase("^7So#AR)U`4Kg!+0", locale0);
      assertNotNull(string2);
      assertEquals("^7SO#AR)U`4KG!+0", string2);
      assertEquals("^7so#ar)u`4kg!+0_TOTQUVATC8 ZWJM", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("^7so#ar)u`4kg!+0", locale0.getLanguage());
      assertEquals("TOTQUVATC8 ZWJM", locale0.getCountry());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.leftPad("", 4, "");
      assertNotNull(string3);
      assertEquals("    ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("    ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.left("\n", 4402);
      assertNotNull(string4);
      assertEquals("\n", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "toTquVatc8 zWjm", "\n");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.unwrap("???????????????????????????????", '?');
      assertNotNull(string5);
      assertEquals("?????????????????????????????", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      floatArray0[1] = 1861.1F;
      String string0 = StringUtils.replace(";", "......", "......", (-1994));
      assertNotNull(string0);
      assertEquals(";", string0);
      
      String string1 = StringUtils.replaceIgnoreCase(";", ";", ";");
      assertNotNull(string1);
      assertEquals(";", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "......", (CharSequence) "......", (-1160));
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) ";", (CharSequence) ";");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.strip(";");
      assertNotNull(string2);
      assertEquals(";", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.replaceAll((String) null, "......", "#T]A]A;)_Iu=A");
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("kxb<t?J-_T})o'i4cWq3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-", "\n");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.wrapIfMissing((String) null, 'j');
      assertNull(string4);
      
      String string5 = StringUtils.leftPad("t#", 2067, (String) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) string5, 0);
      assertEquals((-1), int2);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      String string0 = StringUtils.wrap("-1", '[');
      assertNotNull(string0);
      assertEquals("[-1[", string0);
      
      boolean boolean0 = StringUtils.isAlpha("[-1[");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "-1", (CharSequence) "-1");
      assertEquals((-1), int0);
      
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      boolean boolean1 = arrayDeque0.add(locale_FilteringMode0);
      assertTrue(boolean1);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(arrayDeque0.contains(locale_FilteringMode0));
      
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(locale_FilteringMode0));
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean2 = linkedHashSet0.add(locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertTrue(boolean2);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(linkedHashSet0.contains(locale_FilteringMode0));
      assertTrue(linkedHashSet0.contains(locale_FilteringMode1));
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains("-1"));
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(stack0.contains("-1"));
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, '@');
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(string1.equals((Object)string0));
      assertFalse(stack0.contains(string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "-1";
      charSequenceArray0[1] = (CharSequence) "[-1[";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "[-1[";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "-1";
      int int1 = StringUtils.lastIndexOfAny("-1", charSequenceArray0);
      assertEquals(2, int1);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.substringBeforeLast(" vs ", "ir~3).>@_$I/Qr");
      assertNotNull(string2);
      assertEquals(" vs ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean3 = StringUtils.isMixedCase(charSequenceArray0[5]);
      assertFalse(boolean3);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      String string3 = StringUtils.removeStart("@kU", (String) null);
      assertNotNull(string3);
      assertEquals("@kU", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.wrap((String) null, '[');
      assertNull(string4);
      
      String string5 = StringUtils.capitalize("b[Z=3j|n\"((6t8>:rl");
      assertNotNull(string5);
      assertEquals("B[Z=3j|n\"((6t8>:rl", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("7emjB*q", 76);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "7emjB*q", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "7emjB*q", (char[]) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.leftPad("", (-1), 'c');
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.removeAll((String) null, "1LA 5");
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.substringAfter((String) null, 13);
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      String string2 = StringUtils.join((boolean[]) null, 'q', (-1590), 13);
      assertNull(string2);
      
      charSequenceArray0[2] = (CharSequence) null;
      String string3 = StringUtils.removeEnd((String) null, "Object varargs must not be null'IGRMzjd`{J%z%|\"");
      assertNull(string3);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(13));
      
      String string4 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string4);
      assertEquals("", string4);
      
      charSequenceArray0[4] = (CharSequence) "";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) null, supplier0);
      assertNull(charSequence0);
      
      charSequenceArray0[5] = null;
      String string5 = StringUtils.substringAfter((String) null, 34);
      assertNull(string5);
      
      charSequenceArray0[6] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate((String) null, (-561));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) null, supplier0);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("\r");
      assertTrue(boolean0);
      
      String string1 = StringUtils.getDigits("\r");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.ordinalIndexOf("\r", "", 0);
      assertEquals((-1), int0);
      
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      boolean boolean1 = arrayDeque0.add(locale_FilteringMode0);
      assertTrue(boolean1);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayDeque0.contains(locale_FilteringMode0));
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(locale_FilteringMode0));
      
      boolean boolean2 = hashSet0.add(locale_FilteringMode0);
      assertTrue(boolean2);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains(string0));
      
      String string2 = StringUtils.join((Iterator<?>) listIterator0, 'V');
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(linkedList0.contains(string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string3 = StringUtils.substringAfter("", 857);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "\r";
      charSequenceArray0[7] = (CharSequence) "";
      int int1 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(0, int1);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.strip("(/b2>^~^/~yL&D^rnC", "(/b2>^~^/~yL&D^rnC");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      
      boolean boolean3 = StringUtils.isMixedCase("\r");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      String string5 = StringUtils.removeStart("4[", "offset cannot be negative");
      assertNotNull(string5);
      assertEquals("4[", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = null;
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[0], (CharSequence) null);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.repeat("=", 2082);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isMixedCase("t");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(string0, "oTquVatc8 zWjm", (-674));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 15
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      String string0 = "%";
      String[] stringArray0 = StringUtils.splitByCharacterType("toTquVatc8 zWjmoTquVatc8 zWjm");
      assertNotNull(stringArray0);
      assertEquals(19, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.removePattern("...", "3X[19");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 4
         // 3X[19
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "K9zr6aBQ~W<ak", "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("p]V}~`<>");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.substringAfter("GL#H", "");
      assertNotNull(string1);
      assertEquals("GL#H", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("jyy$8", 2432);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "GL#H", (CharSequence) "E,``;>-KA34Z\"4+Z6vF", (-1817));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.repeat((String) null, "Sr_d(zDi", (-1));
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "K9zr6aBQ~W<ak", (CharSequence) null, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>(arrayDeque0);
      assertNotNull(hashSet0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Iterator<Locale.FilteringMode> iterator0 = hashSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean0 = arrayDeque0.add(locale_FilteringMode0);
      assertTrue(boolean0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains(locale_FilteringMode0));
      
      boolean boolean1 = hashSet0.add(locale_FilteringMode0);
      assertTrue(boolean1);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayDeque0.contains(locale_FilteringMode0));
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      
      String string0 = StringUtils.join(iterator0, 'V');
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(arrayDeque0.contains(locale_FilteringMode0));
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.substringBeforeLast(", '", ", '");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isMixedCase(charSequenceArray0[0]);
      assertFalse(boolean2);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string2 = StringUtils.removeStart("", "IMC");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Rn*5", 'h');
      assertNotNull(string0);
      assertEquals("hRn*5h", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("E,``;>-KA34Z\"4+Z6vF");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter("xSQHz.<E{uk%", "vB");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring(":Pxm})", 32);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ":Pxm})", (CharSequence) "', has a length less than 2", 589);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "vB", 5);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.substring("", 2, 5);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) ":Pxm})";
      charSequenceArray0[1] = (CharSequence) "xSQHz.<E{uk%";
      charSequenceArray0[2] = (CharSequence) ":Pxm})";
      charSequenceArray0[3] = (CharSequence) "hRn*5h";
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("xSQHz.<E{uk%", charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 589;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 589;
      longArray0[3] = (long) (-1);
      String string4 = StringUtils.join(longArray0, '[');
      assertNotNull(string4);
      assertEquals("589[2[589[-1", string4);
      assertArrayEquals(new long[] {589L, 2L, 589L, (-1L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.leftPad("p{InCombiningDiacriticalMarks}+", 32, "org.apache.commons.lang3.RegExUtils");
      assertNotNull(string5);
      assertEquals("op{InCombiningDiacriticalMarks}+", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = " vs +^iy.BY9LR";
      stringArray0[1] = "', has a length less than 2";
      stringArray0[2] = "', has a length less than 2";
      stringArray0[3] = " vs +^iy.BY9LR";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "', has a length less than 2");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.firstNonEmpty(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string0);
      assertEquals("vs +^iy.BY9LR", string0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.containsWhitespace(" vs +^iy.BY9LR");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chomp((String) null, "vs +^iy.BY9LR");
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.leftPad("h\"=YGNW'LFuO", 32, (String) null);
      assertNotNull(string2);
      assertEquals("                  h\"=YGNW'LFuO", string2);
      assertFalse(string2.equals((Object)string0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      int int0 = StringUtils.indexOfAny((CharSequence) "h\"=YGNW'LFuO", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'n'}, charArray0);
      assertEquals(1, charArray0.length);
      
      String string3 = StringUtils.left((String) null, 15);
      assertNull(string3);
      
      boolean boolean2 = StringUtils.isBlank("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = StringUtils.substringBefore("', has a length less than 2", "\r");
      assertNotNull(string4);
      assertEquals("', has a length less than 2", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      floatArray0[1] = (-1.0F);
      String string0 = StringUtils.join(floatArray0, '\'', 1129, (int) '\'');
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new float[] {1861.1F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.join(charArray0, 'a');
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf("\"v.aG1F{o#5_&V<i,#y", "", (-1));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.removeEnd("IOA_;$z9+VR", "");
      assertNotNull(string2);
      assertEquals("IOA_;$z9+VR", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      String string0 = StringUtils.replaceChars("Strings must not be null", "toTquVatc8 zWjm", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("SSringssonsSsntSsbesnnll", string0);
      
      String string1 = StringUtils.upperCase("toTquVatc8 zWjm");
      assertNotNull(string1);
      assertEquals("TOTQUVATC8 ZWJM", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "Strings must not be null", (-778));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "SSringssonsSsntSsbesnnll", (CharSequence) "%]J+7g[Sb \"vYa)q/;z");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.substringBefore("u", " vs ");
      assertNotNull(string2);
      assertEquals("u", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlpha("u");
      assertTrue(boolean0);
      
      String string3 = StringUtils.substringAfter("Minimum abbreviation width is %d", 24);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      charArray0[1] = 'D';
      charArray0[2] = '\\';
      charArray0[3] = 'o';
      charArray0[4] = 'W';
      String string4 = StringUtils.join(charArray0, '\\');
      assertNotNull(string4);
      assertEquals("N\\D\\\\\\o\\W", string4);
      assertArrayEquals(new char[] {'N', 'D', '\\', 'o', 'W'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isMixedCase(" vs ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "u", (CharSequence) "ND\\oW", 917);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "4M`FSm$HwT++mC";
      objectArray0[1] = (Object) "\r";
      objectArray0[2] = (Object) "\r";
      objectArray0[3] = (Object) "\r";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      String string0 = StringUtils.join(objectArray0, 'u');
      assertNotNull(string0);
      assertEquals(5, objectArray0.length);
      
      String string1 = StringUtils.substringAfter("G8#U&2_Ka-?GCLh", "\r");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((List<?>) null, 'u', 52, 1641);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'S');
      assertNull(stringArray0);
      
      String string3 = StringUtils.remove("4M`FSm$HwT++mCu\ru\ru\rujava.lang.Object@59303151", '4');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.substringAfterLast("4M`FSm$HwT++mCu\ru\ru\rujava.lang.Object@59303151", 1641);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.join(objectArray0, 'u', 2606, 52);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(5, objectArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      String string0 = StringUtils.defaultString("o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNotNull(string0);
      assertEquals("o#5_&V<i,#y", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("o#5_&V<i,#y", "o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) null, "g'\u0001i@NC1#&47w");
      assertNull(string1);
      
      String string2 = StringUtils.chop((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.stripStart("gZUe2", (String) null);
      assertNotNull(string3);
      assertEquals("gZUe2", string3);
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumeric("gZUe2");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      String string4 = StringUtils.join(byteArray0, '\'');
      assertNotNull(string4);
      assertEquals("", string4);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String[] stringArray1 = StringUtils.split((String) null, 'y');
      assertNull(stringArray1);
      
      String string5 = StringUtils.substringBefore("gZUe2", 3382);
      assertNotNull(string5);
      assertEquals("gZUe2", string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.substringAfterLast("Invalid locale format: ", "|]k,Ah)!n\".@8*z+");
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "o#5_&V<i,#y", 76);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.replacePattern("Minimum abbreviation width is %d", "h=8*2,L^*", "Locale must not be null");
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width is %d", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrapIfMissing("`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;", "k\"\"P=g,T%n-");
      assertNotNull(string2);
      assertEquals("k\"\"P=g,T%n-`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;`;k\"\"P=g,T%n-", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      String string0 = StringUtils.unwrap("T9|Z{[0?a,-", ' ');
      assertNotNull(string0);
      assertEquals("T9|Z{[0?a,-", string0);
      
      String string1 = StringUtils.deleteWhitespace("T9|Z{[0?a,-");
      assertNotNull(string1);
      assertEquals("T9|Z{[0?a,-", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.right("maxWith cannot be negative", 22);
      assertNotNull(string2);
      assertEquals("ith cannot be negative", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substring("Strings must not be null", (-281));
      assertNotNull(string3);
      assertEquals("Strings must not be null", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "maxWith cannot be negative", (CharSequence) "maxWith cannot be negative", (-2433));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 0.0;
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.deleteWhitespace("0LZc'D#;vqYE;lQ>");
      assertNotNull(string1);
      assertEquals("0LZc'D#;vqYE;lQ>", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.right("0LZc'D#;vqYE;lQ>", 14);
      assertNotNull(string2);
      assertEquals("c'D#;vqYE;lQ>", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "0LZc'D#;vqYE;lQ>";
      charSequenceArray0[1] = (CharSequence) "Pshrzb0nxQAg?R";
      String string3 = StringUtils.center("0LZc'D#;vqYE;lQ>", 6, '!');
      assertNotNull(string3);
      assertEquals("0LZc'D#;vqYE;lQ>", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      charSequenceArray0[2] = (CharSequence) "0LZc'D#;vqYE;lQ>";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "'D#;vqYE;lQ>";
      charSequenceArray0[5] = (CharSequence) "0LZc'D#;vqYE;lQ>";
      charSequenceArray0[6] = (CharSequence) "'D#;vqYE;lQ>";
      charSequenceArray0[7] = (CharSequence) "Pshrzb0nxQAg?R";
      charSequenceArray0[2] = (CharSequence) "Pshrzb0nxQAg?R";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNotNull(charSequence0);
      assertEquals("0LZc'D#;vqYE;lQ>", charSequence0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string4 = StringUtils.substringBetween("=))hC", "0LZc'D#;vqYE;lQ>");
      assertNull(string4);
      
      String string5 = StringUtils.defaultString((String) null);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.join((Object[]) charSequenceArray0, "Minimum abbreviation width with offset is %d", 2522, 14);
      assertNotNull(string6);
      assertEquals("", string6);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join((List<?>) linkedList0, 'Z', 65536, 65536);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.leftPad("", (-239));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      String string0 = StringUtils.leftPad(" ", 36, " ");
      assertNotNull(string0);
      assertEquals("                                    ", string0);
      
      int int0 = StringUtils.compare("                                    ", " ");
      assertEquals(35, int0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(" "));
      
      Integer integer0 = new Integer(36);
      assertNotNull(integer0);
      assertEquals(36, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      String string1 = StringUtils.stripEnd("-'5R", "-'5R");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.replaceChars("+^iy.BY9LR vs ", (String) null, " ");
      assertNotNull(string3);
      assertEquals("+^iy.BY9LR vs ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.chomp(string0);
      assertNotNull(string1);
      assertEquals("\\u", string1);
      
      String string2 = StringUtils.left(string0, (-1563));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "E^V,8;;/Z\"/}q&}");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.unwrap("Supplied value must be a valid byte literal between -128 and 127: [", 'A');
      assertNotNull(string3);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      floatArray0[1] = (-1.0F);
      String string0 = StringUtils.join(floatArray0, '\'', 1129, (int) '\'');
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new float[] {1861.1F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      String string1 = StringUtils.replaceChars("(A(Mr2r8_", "(A(Mr2r8_", ",m");
      assertNotNull(string1);
      assertEquals(",m,", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.difference(",m", "N3vk(}");
      assertNotNull(string2);
      assertEquals("N3vk(}", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.compare("(A(Mr2r8_", "", false);
      assertEquals(10, int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(",m", (CharSequence) null);
      assertFalse(boolean0);
      
      Locale locale0 = new Locale("&]>*h", ",m,");
      assertNotNull(locale0);
      assertEquals(",M,", locale0.getCountry());
      assertEquals("&]>*h", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("&]>*h_,M,", locale0.toString());
      
      String string3 = StringUtils.upperCase("", locale0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(",M,", locale0.getCountry());
      assertEquals("&]>*h", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("&]>*h_,M,", locale0.toString());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.mid("Z|\":rQ", 15, (-2163));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      String string0 = StringUtils.repeat('?', 31);
      assertNotNull(string0);
      assertEquals("???????????????????????????????", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("???????????????????????????????");
      assertNotNull(intArray0);
      assertEquals(31, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'G';
      charArray0[1] = '?';
      String string1 = StringUtils.join(charArray0, ',');
      assertNotNull(string1);
      assertEquals("G,?", string1);
      assertArrayEquals(new char[] {'G', '?'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[3];
      String string2 = StringUtils.joinWith("h!=<pM", objectArray0);
      assertNotNull(string2);
      assertEquals("h!=<pMh!=<pM", string2);
      assertEquals(3, objectArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.defaultIfEmpty("/#UctXBPw", "'IGRMzjd`{J%z%|\"");
      assertNotNull(string3);
      assertEquals("/#UctXBPw", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsWhitespace("/#UctXBPw");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "/#UctXBPw", charArray0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'G', '?'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.rotate(" ", (-612));
      assertNotNull(string4);
      assertEquals(" ", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " in an array of ", "%xGL[Q>n<zvi?Hd");
      assertFalse(boolean0);
      
      String string0 = StringUtils.toRootLowerCase("%xGL[Q>n<zvi?Hd");
      assertNotNull(string0);
      assertEquals("%xgl[q>n<zvi?hd", string0);
      
      String string1 = StringUtils.abbreviateMiddle("........................................................................................................ vs ", " in an array of ", 16);
      assertNotNull(string1);
      assertEquals("........................................................................................................ vs ", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastOrdinalIndexOf(" in an array of ", "........................................................................................................ vs ", (-4057));
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string2);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.wrapIfMissing(" in an array of ", '<');
      assertNotNull(string3);
      assertEquals("< in an array of <", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "%xGL[Q>n<zvi?Hd";
      String string4 = StringUtils.firstNonEmpty(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string4);
      assertEquals("%xGL[Q>n<zvi?Hd", string4);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      int int1 = StringUtils.countMatches((CharSequence) "%xGL[Q>n<zvi?Hd", 'T');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      String string5 = StringUtils.join(byteArray0, 'z');
      assertNotNull(string5);
      assertEquals("-86z-86z-86", string5);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-86), (byte) (-86)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      int[] intArray0 = StringUtils.toCodePoints(string2);
      assertNotSame(stringArray0, stringArray1);
      assertNull(intArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      boolean boolean1 = StringUtils.equalsAny("........................................................................................................ vs ", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(boolean1);
      assertEquals(2, stringArray1.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[1] = 'Y';
      String string0 = StringUtils.join((List<?>) null, "[*xPz\"O", 2628, 2628);
      assertNull(string0);
      
      String string1 = StringUtils.join((List<?>) null, '`', 2628, 0);
      assertNull(string1);
      
      String string2 = StringUtils.leftPad("[*xPz\"O", 0);
      assertNotNull(string2);
      assertEquals("[*xPz\"O", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      String string0 = StringUtils.rightPad("Rq*z`u2h", 82, '7');
      assertNotNull(string0);
      assertEquals("Rq*z`u2h77777777777777777777777777777777777777777777777777777777777777777777777777", string0);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(82));
      
      Integer integer0 = new Integer((-1343));
      assertNotNull(integer0);
      assertEquals((-1343), (int)integer0);
      
      boolean boolean0 = arrayDeque0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains(integer0));
      assertFalse(arrayDeque0.contains(82));
      
      boolean boolean1 = StringUtils.isMixedCase("Rq*z`u2h");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.difference("offset cannot be negative", "olFD?kUU-91x/L");
      assertNotNull(string1);
      assertEquals("lFD?kUU-91x/L", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      String string0 = StringUtils.rightPad("Rq*z`u2h", 82, '7');
      assertNotNull(string0);
      assertEquals("Rq*z`u2h77777777777777777777777777777777777777777777777777777777777777777777777777", string0);
      
      String string1 = StringUtils.join((long[]) null, 'n', (-1343), (-1343));
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Rq*z`u2h77777777777777777777777777777777777777777777777777777777777777777777777777", (String) null);
      assertTrue(boolean0);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(82));
      
      Integer integer0 = new Integer((-1343));
      assertNotNull(integer0);
      assertEquals((-1343), (int)integer0);
      
      boolean boolean1 = arrayDeque0.add(integer0);
      assertTrue(boolean1);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayDeque0.contains((-1343)));
      assertFalse(arrayDeque0.contains(82));
      
      Vector<Object> vector0 = new Vector<Object>(arrayDeque0);
      assertNotNull(vector0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(1, vector0.capacity());
      assertEquals("[-1343]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(arrayDeque0.contains((-1343)));
      assertFalse(arrayDeque0.contains(82));
      assertTrue(vector0.contains((-1343)));
      assertFalse(vector0.contains("Rq*z`u2h77777777777777777777777777777777777777777777777777777777777777777777777777"));
      
      vector0.ensureCapacity(82);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(82, vector0.capacity());
      assertEquals("[-1343]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(arrayDeque0.contains((-1343)));
      assertFalse(arrayDeque0.contains(82));
      assertTrue(vector0.contains((-1343)));
      assertFalse(vector0.contains("Rq*z`u2h77777777777777777777777777777777777777777777777777777777777777777777777777"));
      
      String string2 = StringUtils.abbreviate("bRX", (String) null, (-3054), 2836);
      assertNotNull(string2);
      assertEquals("bRX", string2);
      assertFalse(string2.equals((Object)string0));
      
      Integer integer1 = new Integer(3475);
      assertNotNull(integer1);
      assertEquals(3475, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      int int0 = StringUtils.length("Rq*z`u2h77777777777777777777777777777777777777777777777777777777777777777777777777");
      assertEquals(82, int0);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Integer integer0 = new Integer((-1343));
      assertNotNull(integer0);
      assertEquals((-1343), (int)integer0);
      
      boolean boolean0 = arrayDeque0.add(integer0);
      assertTrue(boolean0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(arrayDeque0.contains(integer0));
      
      boolean boolean1 = arrayDeque0.add(integer0);
      assertTrue(boolean1);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayDeque0.contains(integer0));
      
      Integer integer1 = new Integer(8);
      assertNotNull(integer1);
      assertEquals(8, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      arrayDeque0.addFirst(integer1);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(3, arrayDeque0.size());
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(arrayDeque0.contains(integer1));
      
      Vector<Object> vector0 = new Vector<Object>(arrayDeque0);
      assertNotNull(vector0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(3, arrayDeque0.size());
      assertEquals(3, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[8, -1343, -1343]", vector0.toString());
      assertEquals(3, vector0.capacity());
      assertTrue(arrayDeque0.contains(integer1));
      assertTrue(vector0.contains((-1343)));
      
      Integer integer2 = new Integer((-1343));
      assertNotNull(integer2);
      assertEquals((-1343), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      boolean boolean2 = vector0.add((Object) integer2);
      assertTrue(boolean2);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(3, arrayDeque0.size());
      assertEquals(4, vector0.size());
      assertEquals("[8, -1343, -1343, -1343]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(6, vector0.capacity());
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(arrayDeque0.contains(integer2));
      assertTrue(vector0.contains((-1343)));
      
      vector0.ensureCapacity(82);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(3, arrayDeque0.size());
      assertEquals(4, vector0.size());
      assertEquals(82, vector0.capacity());
      assertEquals("[8, -1343, -1343, -1343]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(arrayDeque0.contains(integer2));
      assertFalse(arrayDeque0.contains(82));
      assertTrue(vector0.contains((-1343)));
      assertFalse(vector0.contains(82));
      
      boolean boolean3 = vector0.add((Object) null);
      assertTrue(boolean3);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(3, arrayDeque0.size());
      assertEquals(5, vector0.size());
      assertEquals(82, vector0.capacity());
      assertEquals("[8, -1343, -1343, -1343, null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(arrayDeque0.contains(integer2));
      assertFalse(arrayDeque0.contains(82));
      assertTrue(vector0.contains((-1343)));
      assertFalse(vector0.contains(82));
      
      String string0 = StringUtils.join((Iterable<?>) vector0, 'n');
      assertNotNull(string0);
      assertEquals("8n-1343n-1343n-1343n", string0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(3, arrayDeque0.size());
      assertEquals(5, vector0.size());
      assertEquals(82, vector0.capacity());
      assertEquals("[8, -1343, -1343, -1343, null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(arrayDeque0.contains(integer2));
      assertFalse(arrayDeque0.contains(82));
      assertTrue(vector0.contains((-1343)));
      assertFalse(vector0.contains(82));
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      String string0 = StringUtils.replaceAll("oYYg<W$Rs1x6.^FG:", "oYYg<W$Rs1x6.^FG:", "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string0);
      assertEquals("oYYg<W$Rs1x6.^FG:", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "oYYg<W$Rs1x6.^FG:", "oYYg<W$Rs1x6.^FG:");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "org.apache.commons.lang3.ArrayUtils", 1562, 2303);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripToNull("oYYg<W$Rs1x6.^FG:");
      assertNotNull(string1);
      assertEquals("oYYg<W$Rs1x6.^FG:", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.EMPTY;
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("org.apache.commons.lang3.ArrayUtils", "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.replaceChars("oYYg<W$Rs1x6.^FG:", "oYYg<W$Rs1x6.^FG:", "oYYg<W$Rs1x6.^FG:");
      assertNotNull(string3);
      assertEquals("oYYg<W$Rs1x6.^FG:", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.defaultIfBlank("org.apache.commons.lang3.ArrayUtils", "oYYg<W$Rs1x6.^FG:");
      assertNotNull(string4);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.join((Iterator<?>) null, '+');
      assertNull(string5);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "oYYg<W$Rs1x6.^FG:";
      stringArray0[2] = "oYYg<W$Rs1x6.^FG:";
      stringArray0[3] = "";
      stringArray0[4] = null;
      String string6 = StringUtils.strip("org.apache.commons.lang3.ArrayUtils", "NZ");
      assertNotNull(string6);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string6);
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.toRootLowerCase("+");
      assertNotNull(string7);
      assertEquals("+", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      
      String string8 = StringUtils.chomp("oYYg<W$Rs1x6.^FG:");
      assertNotNull(string8);
      assertEquals("oYYg<W$Rs1x6.^FG:", string8);
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string3));
      
      String string9 = StringUtils.swapCase("oYYg<W$Rs1x6.^FG:");
      assertNotNull(string9);
      assertEquals("OyyG<w$rS1X6.^fg:", string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      
      String string10 = StringUtils.join((Iterator<?>) null, (String) null);
      assertNull(string10);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfter("", (String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.compare((String) null, "c/h!", true);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int1);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.compare((String) null, "");
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("c/h!", ' ');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "offset cannot be negative", supplier0);
      assertNotNull(charSequence0);
      assertEquals("offset cannot be negative", charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      
      double double0 = StringUtils.getJaroWinklerDistance("offset cannot be negative", "");
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.left((String) null, 86);
      assertNull(string2);
      
      String string3 = StringUtils.upperCase("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.upperCase((String) null);
      assertNull(string4);
      
      int int3 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "...", (-1));
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int4);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      
      String string5 = StringUtils.substringBefore("", "s)W");
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)charSequence0));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      
      boolean boolean1 = StringUtils.isNumericSpace("...");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean2);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string6 = StringUtils.wrapIfMissing("", '}');
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)charSequence0));
      assertTrue(string6.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      String string0 = StringUtils.trim("Strings must not be null");
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
      
      String string1 = StringUtils.normalizeSpace((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 797);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replace((String) null, "org.apache.commons.lang3.ObjectUtils", "#.}1|(?YcB&pY C:");
      assertNull(string2);
      
      String string3 = StringUtils.reverse((String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      String string0 = StringUtils.substring("", 8192);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.difference("}*uCUk^Pf\"+", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)100;
      String string1 = StringUtils.join(byteArray0, 'L');
      assertNotNull(string1);
      assertEquals("55L100", string1);
      assertArrayEquals(new byte[] {(byte)55, (byte)100}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("J*.0s@t!]luBo", (int) (byte)55, 'M');
      assertNotNull(string2);
      assertEquals("MMMMMMMMMMMMMMMMMMMMJ*.0s@t!]luBoMMMMMMMMMMMMMMMMMMMMM", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.truncate("an`6)t*73.gaYbkS*_", 76);
      assertNotNull(string0);
      assertEquals("an`6)t*73.gaYbkS*_", string0);
      
      String string1 = StringUtils.repeat("an`6)t*73.gaYbkS*_", (-1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      boolean boolean1 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "an`6)t*73.gaYbkS*_", "QI`5a");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean2 = StringUtils.equalsAny("QI`5a", charSequenceArray0);
      assertFalse(boolean2);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.stripEnd("K!k,a:}{c", "K!k,a:}{c");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, '9', 76, (-1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean3 = StringUtils.isNotEmpty("");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string4 = StringUtils.replaceAll("'+WB2\"cNLA4i-VK]P", "Object varargs must cot be nKll", "K!k,a:}{c");
      assertNotNull(string4);
      assertEquals("'+WB2\"cNLA4i-VK]P", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.join((Iterable<?>) null, "an`6)t*73.gaYbkS*_");
      assertNull(string5);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("yB\"m%5Fa'p=sZ/lk", "yB\"m%5Fa'p=sZ/lk");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(17, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) null, '9');
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.truncate("an`6)*73.gaYbkS*_=", 76);
      assertNotNull(string0);
      assertEquals("an`6)*73.gaYbkS*_=", string0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      String string1 = StringUtils.join(floatArray0, 't');
      assertNotNull(string1);
      assertEquals("0.0", string1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeEndIgnoreCase("0.0", "object");
      assertNotNull(string2);
      assertEquals("0.0", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceEachRepeatedly(" ", (String[]) null, (String[]) null);
      assertNotNull(string3);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.wrap("", 't');
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAlpha("an`6)*73.gaYbkS*_=");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      String string0 = StringUtils.repeat("DP*Dn$a", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("DP*Dn$a", 'a');
      assertNotNull(string1);
      assertEquals("DP*Dn$", string1);
      assertFalse(string1.equals((Object)string0));
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      vector0.clear();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "DP*Dn$";
      charSequenceArray0[1] = (CharSequence) "DP*Dn$a";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "DP*Dn$";
      charSequenceArray0[4] = (CharSequence) "DP*Dn$";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "DP*Dn$a";
      boolean boolean0 = StringUtils.equalsAny("DP*Dn$", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.uncapitalize((String) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase(charSequenceArray0[0], charSequenceArray0[4]);
      assertTrue(boolean1);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.join((short[]) null, 'a', (-1795), (-1795));
      assertNull(string3);
      
      String string4 = StringUtils.trimToNull("XJQD_YMa0>");
      assertNotNull(string4);
      assertEquals("XJQD_YMa0>", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "=</3TNdn{";
      charSequenceArray0[1] = (CharSequence) "=</3TNdn{";
      boolean boolean0 = StringUtils.isEmpty("=</3TNdn{");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("*hPk*hPk");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.abbreviateMiddle("*hPk*hPk", ", Length: ", 2485);
      assertNotNull(string0);
      assertEquals("*hPk*hPk", string0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.rightPad("1/G+D|NYuSL", 17, "=</3TNdn{");
      assertNotNull(string2);
      assertEquals("1/G+D|NYuSL=</3TN", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "\\u";
      String string4 = StringUtils.reverse(string3);
      assertNotNull(string4);
      assertEquals("u\\", string4);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.stripEnd("=</3TNdn{", "&V[@");
      assertNotNull(string5);
      assertEquals("=</3TNdn{", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.join((Integer[]) null);
      assertNull(string6);
      
      String string7 = StringUtils.trimToEmpty("Threshold must not be negative");
      assertNotNull(string7);
      assertEquals("Threshold must not be negative", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      
      String string8 = StringUtils.removeStartIgnoreCase("1/G+D|NYuSL=</3TN", "4P");
      assertNotNull(string8);
      assertEquals("1/G+D|NYuSL=</3TN", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = null;
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[0], (CharSequence) null);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.replacePattern("t", "oTquVatc8 zWjm", "t");
      assertNotNull(string0);
      assertEquals("t", string0);
      
      String string1 = StringUtils.substringBetween("DU$wn*'jJ~~;n.", "DU$wn*'jJ~~;n.", "t");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("XcrALq$^ZbR", "t", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'i', 1984, 1984);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore("K{Am3v", 213);
      assertNotNull(string1);
      assertEquals("K{Am3v", string1);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "*k*k");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.removeStartIgnoreCase("*k*k", "...");
      assertNotNull(string0);
      assertEquals("*k*k", string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "*k*k", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[20];
      shortArray0[0] = (short) (-3866);
      shortArray0[1] = (short) (-3866);
      shortArray0[2] = (short) (-3866);
      shortArray0[3] = (short) (-3866);
      shortArray0[4] = (short) (-3866);
      shortArray0[5] = (short) (-3866);
      shortArray0[6] = (short) (-3866);
      shortArray0[7] = (short) (-3866);
      String string1 = StringUtils.join(shortArray0, '\'');
      assertNotNull(string1);
      assertEquals("-3866'-3866'-3866'-3866'-3866'-3866'-3866'-3866'0'0'0'0'0'0'0'0'0'0'0'0", string1);
      assertEquals(20, shortArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("*k*k", "*k*k", (CharSequence[]) null);
      assertNotNull(string2);
      assertEquals("*k*k", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBefore("ch", "*k*k");
      assertNotNull(string3);
      assertEquals("ch", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.deleteWhitespace("ch");
      assertNotNull(string4);
      assertEquals("ch", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.defaultString("RY18ulG");
      assertNotNull(string5);
      assertEquals("RY18ulG", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      int int1 = StringUtils.compareIgnoreCase("ch", (String) null);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.join((Object[]) null, 'Z', (int) (short) (-3866), (-86));
      assertNull(string6);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("RY18ulG", "\r", (int) (short) (-3866));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      String string0 = StringUtils.wrap("-1", '[');
      assertNotNull(string0);
      assertEquals("[-1[", string0);
      
      String string1 = StringUtils.truncate("[-1[", 4);
      assertNotNull(string1);
      assertEquals("[-1[", string1);
      assertTrue(string1.equals((Object)string0));
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      String string2 = StringUtils.mid("[-1[", (-1174), 2084);
      assertNotNull(string2);
      assertEquals("[-1[", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("u6/p", "u6/p", "'5R");
      assertNotNull(string0);
      assertEquals("'5R", string0);
      
      boolean boolean0 = StringUtils.isAlpha("'5R");
      assertFalse(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      charArray0[3] = 'F';
      charArray0[4] = 'W';
      charArray0[6] = 'F';
      charArray0[7] = 'F';
      charArray0[8] = 'F';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "u6/p", charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'F', 'F', '\u0000', 'F', 'W', '\u0000', 'F', 'F', 'F'}, charArray0);
      assertEquals(9, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.repeat("'5R", (String) null, 2095);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      String string0 = StringUtils.reverse(";}H04tqpSSycioS`");
      assertNotNull(string0);
      assertEquals("`SoicySSpqt40H};", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "`SoicySSpqt40H};";
      objectArray0[1] = (Object) "`SoicySSpqt40H};";
      objectArray0[2] = (Object) "`SoicySSpqt40H};";
      objectArray0[3] = (Object) "`SoicySSpqt40H};";
      objectArray0[4] = (Object) ";}H04tqpSSycioS`";
      objectArray0[5] = (Object) ";}H04tqpSSycioS`";
      String string1 = StringUtils.truncate("*hPkZhPk", 15);
      assertNotNull(string1);
      assertEquals("*hPkZhPk", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chop("Threshold must not be negative");
      assertNotNull(string2);
      assertEquals("Threshold must not be negativ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'E';
      charArray0[1] = '-';
      charArray0[2] = 'r';
      charArray0[4] = 'J';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "*hPkZhPk", charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'E', '-', 'r', '\u0000', 'J'}, charArray0);
      assertEquals(5, charArray0.length);
      
      String string3 = StringUtils.join(charArray0, ':', 1371, (-2055));
      assertNotNull(string3);
      assertEquals("", string3);
      assertArrayEquals(new char[] {'E', '-', 'r', '\u0000', 'J'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.abbreviate("*hPkZhPk", 695);
      assertNotNull(string4);
      assertEquals("*hPkZhPk", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "Threshold must not be negativ");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("`SoicySSpqt40H};");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(object0));
      
      boolean boolean0 = linkedList0.add((Object) "z3=N.~.U^");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(object0));
      assertTrue(linkedList0.contains("z3=N.~.U^"));
      
      String string0 = StringUtils.unwrap((String) null, "^h!O$[H-HO$ j");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "^h!O$[H-HO$ j");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.getDigits("^h!O$[H-HO$ j");
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      String string0 = StringUtils.join(objectArray0, "Object varargs must not be null", 615, 609);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2, objectArray0.length);
      
      String string1 = StringUtils.substringBetween("Object varargs must not be null", "Object varargs must not be null");
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[6] = (CharSequence) "";
      String string2 = StringUtils.chop("Object varargs must not be null");
      assertNotNull(string2);
      assertEquals("Object varargs must not be nul", string2);
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[7] = (CharSequence) "Object varargs must not be nul";
      charSequenceArray0[8] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "B";
      stringArray0[1] = "n*m))tQSE";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      String string0 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(9, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("YI", "Supplied value must be a valid byte literal between -128 and 127: [");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 66
         // Supplied value must be a valid byte literal between -128 and 127: [
         //                                                                   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.startsWith("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 'Q';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.length());
      assertEquals("NQ", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertArrayEquals(new char[] {'N', 'Q'}, charArray0);
      assertEquals(2, charArray0.length);
      
      boolean boolean3 = linkedList0.add(charBuffer0);
      assertTrue(boolean3);
      assertEquals(1, linkedList0.size());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.length());
      assertEquals("NQ", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertArrayEquals(new char[] {'N', 'Q'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(linkedList0.contains(charBuffer0));
      
      UnaryOperator<CharBuffer> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      boolean boolean4 = linkedList0.removeFirstOccurrence(charBuffer0);
      assertTrue(boolean4);
      assertEquals(0, linkedList0.size());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.length());
      assertEquals("NQ", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertArrayEquals(new char[] {'N', 'Q'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(linkedList0.contains(charBuffer0));
      
      linkedList0.replaceAll(unaryOperator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(charBuffer0));
      
      String string2 = StringUtils.deleteWhitespace("O<;");
      assertNotNull(string2);
      assertEquals("O<;", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.repeat("Id", "", 1085);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      String string0 = StringUtils.capitalize("Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match: ", string0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("Search and Replace array lengths don't match: "));
      
      String string1 = StringUtils.deleteWhitespace(", Length: 0");
      assertNotNull(string1);
      assertEquals(",Length:0", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string2 = StringUtils.right(", Length: 0", (-3));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      charSequenceArray0[2] = (CharSequence) "";
      String string3 = (String)StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(string3);
      assertEquals(5, charSequenceArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      String string4 = StringUtils.replaceEachRepeatedly("Search and Replace array lengths don't match: ", stringArray0, stringArray0);
      assertNotNull(string4);
      assertEquals("Search and Replace array lengths don't match: ", string4);
      assertEquals(1, stringArray0.length);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.substringAfterLast(string3, (-3));
      assertNull(string5);
      assertEquals(5, charSequenceArray0.length);
      
      String string6 = StringUtils.left("null/empty items", Integer.MAX_VALUE);
      assertNotNull(string6);
      assertEquals("null/empty items", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[0], (-2015), 18);
      assertEquals((-1), int0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      String string0 = StringUtils.truncate("Strings must not be null", 12);
      assertNotNull(string0);
      assertEquals("Strings must", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.unwrap("Strings must not be null", '\"');
      assertNotNull(string1);
      assertEquals("Strings must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviate("', has a length less than 2", "Strings must not be null", (int) '\"');
      assertNotNull(string2);
      assertEquals("', has a length less than 2", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBefore("Threshold must not be negative", (-1));
      assertNotNull(string3);
      assertEquals("Threshold must not be negative", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.split("-1O$FaR8|:XA", 'o');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.center("Strings must", (-1), "Strings must not be null");
      assertNotNull(string4);
      assertEquals("Strings must", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.getDigits("Strings must not be null");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.stripStart("-1O$FaR8|:XA", " Q~?py&WA");
      assertNotNull(string6);
      assertEquals("-1O$FaR8|:XA", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.rotate("', has a length less than 2", 12);
      assertNotNull(string7);
      assertEquals(" less than 2', has a length", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      
      int int1 = StringUtils.indexOf((CharSequence) "-1O$FaR8|:XA", 12);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string8 = StringUtils.rightPad(" Q~?py&WA", 12, 'K');
      assertNotNull(string8);
      assertEquals(" Q~?py&WAKKK", string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "', has a length less than 2", (CharSequence) " less than 2', has a length", 12);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      
      boolean boolean0 = StringUtils.contains((CharSequence) "-1O$FaR8|:XA", 26);
      assertFalse(boolean0);
      
      String string9 = StringUtils.trimToNull("', has a length less than 2");
      assertNotNull(string9);
      assertEquals("', has a length less than 2", string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "Threshold must not be negative", (CharSequence) "', has a length less than 2");
      assertEquals((-1), int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      
      String string10 = StringUtils.joinWith("Mx{_", stringArray0);
      assertNotNull(string10);
      assertEquals("-1O$FaR8|:XA", string10);
      assertEquals(1, stringArray0.length);
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string4));
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "', has a length less than 2";
      charSequenceArray0[1] = (CharSequence) "-1O$FaR8|:XA";
      charSequenceArray0[4] = (CharSequence) "', has a length less than 2";
      charSequenceArray0[3] = (CharSequence) "Threshold must not be negative";
      charSequenceArray0[4] = (CharSequence) "Threshold must not be negative";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string11 = StringUtils.left("'IGRMzjd`{J%z%|\"", 2);
      assertNotNull(string11);
      assertEquals("'I", string11);
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string7));
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "h", (CharSequence) "h", (-1552));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "6NkaM\"a|EKonxxPOeu", (CharSequence) "6NkaM\"a|EKonxxPOeu", 13);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "h", 1555);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      String string0 = StringUtils.rotate(" ", 9);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.chomp("comparator");
      assertNotNull(string1);
      assertEquals("comparator", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat(' ', 9);
      assertNotNull(string2);
      assertEquals("         ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("', has a length less than 2");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "', has a length less than 2", (CharSequence) "', has a length less than 2", 32);
      assertEquals(0, int0);
      
      String string0 = StringUtils.stripStart("~qIOYN\"55U:XFXB1", "EbqO:tMNd,J'z");
      assertNotNull(string0);
      assertEquals("~qIOYN\"55U:XFXB1", string0);
      
      String string1 = StringUtils.replaceChars("FHY?OJti~", "~qIOYN\"55U:XFXB1", "st)ig+H}");
      assertNotNull(string1);
      assertEquals("Hg?iJtis", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      floatArray0[1] = (-1.0F);
      String string0 = StringUtils.join(floatArray0, '\'', 1129, (int) '\'');
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new float[] {1861.1F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      String string1 = StringUtils.replaceChars("(A(Mr2r8_", "(A(Mr2r8_", ",m");
      assertNotNull(string1);
      assertEquals(",m,", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.upperCase("(A(Mr2r8_");
      assertNotNull(string2);
      assertEquals("(A(MR2R8_", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastOrdinalIndexOf("s", "(A(MR2R8_", 1129);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "N3vk(}", (CharSequence) "s");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.substringBefore((String) null, "O'");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAlpha("O'");
      assertFalse(boolean0);
      
      String string4 = StringUtils.substringAfter((String) null, (-1));
      assertNull(string4);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      charArray0[6] = '\'';
      String string5 = StringUtils.join(charArray0, '\'');
      assertNotNull(string5);
      assertEquals("'''''''''''''", string5);
      assertArrayEquals(new char[] {'\'', '\'', '\'', '\'', '\'', '\'', '\''}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isMixedCase("'''''''''''''");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "", 1129);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      String string0 = StringUtils.defaultString("o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNotNull(string0);
      assertEquals("o#5_&V<i,#y", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("o#5_&V<i,#y", "o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      String string1 = StringUtils.join((Object[]) null, "g'\u0001i@NC1#&47w");
      assertNull(string1);
      
      String string2 = StringUtils.chop((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.stripStart("gZUe2", (String) null);
      assertNotNull(string3);
      assertEquals("gZUe2", string3);
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumeric("gZUe2");
      assertTrue(boolean0);
      
      String string4 = StringUtils.abbreviate((String) null, "o#5_&V<i,#y", 76);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "o#5_&V<i,#y", (CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      String string0 = StringUtils.upperCase(", Length: 0");
      assertNotNull(string0);
      assertEquals(", LENGTH: 0", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) ", LENGTH: 0", (CharSequence) ", Length: 0");
      assertFalse(boolean0);
      
      String string1 = StringUtils.trim(", LENGTH: 0");
      assertNotNull(string1);
      assertEquals(", LENGTH: 0", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = "J;d%^J;d%^";
      String string3 = "P1*PZQa)";
      String[] stringArray0 = StringUtils.substringsBetween("J;d%^J;d%^", "", "P1*PZQa)");
      assertNull(stringArray0);
      
      String string4 = StringUtils.wrap(" vs ", ", LENGTH: 0");
      assertNotNull(string4);
      assertEquals(", LENGTH: 0 vs , LENGTH: 0", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.capitalize(", LENGTH: 0");
      assertNotNull(string5);
      assertEquals(", LENGTH: 0", string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst(", LENGTH: 0", "P1*PZQa)", "J;d%^J;d%^");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 6
         // P1*PZQa)
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Locale must not be null", "\r", 8, 8);
      assertNotNull(string0);
      assertEquals("\rust no\r", string0);
      
      String string1 = StringUtils.upperCase("g Length: 0");
      assertNotNull(string1);
      assertEquals("G LENGTH: 0", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "\rust no\r", (CharSequence) "G LENGTH: 0");
      assertFalse(boolean0);
      
      String string2 = StringUtils.trim("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("Exception cloning Cloneable type -1", "", "uGwx ?El62;=^K");
      assertNull(stringArray0);
      
      String string3 = StringUtils.wrap("I'MqMMg\"(gKL", "...");
      assertNotNull(string3);
      assertEquals("...I'MqMMg\"(gKL...", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.capitalize("o%(P]/|$6|gi]");
      assertNotNull(string4);
      assertEquals("O%(P]/|$6|gi]", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.join((Object[]) null, "o%(P]/|$6|gi]");
      assertNull(string5);
      
      String string6 = StringUtils.wrapIfMissing("O%(P]/|$6|gi]", (String) null);
      assertNotNull(string6);
      assertEquals("O%(P]/|$6|gi]", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      
      String string7 = StringUtils.stripStart("-\"yhod/}RI0|F\fJx", "g Length: 0");
      assertNotNull(string7);
      assertEquals("-\"yhod/}RI0|F\fJx", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      
      String string8 = StringUtils.substringBeforeLast("", "org.apache.commons.lang3.ObjectUtils$Nullymz}I.riv\"!\u0001G79q9");
      assertNotNull(string8);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlphanumeric("...I'MqMMg\"(gKL...");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equalsAny("", (CharSequence[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray1 = StringUtils.split("o%(P]/|$6|gi]", "\rust no\r");
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String string9 = StringUtils.truncate("kxb<t?J-_T})o'i4cWq", 8);
      assertNotNull(string9);
      assertEquals("kxb<t?J-", string9);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 1037, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.substringBefore("p{InCombiningDiacriticalMarks}+", (String) null);
      assertNotNull(string1);
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2698;
      doubleArray0[1] = (double) 2698;
      doubleArray0[2] = (-1586.5655113179564);
      String[] stringArray0 = StringUtils.split("P*mf8");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.prependIfMissingIgnoreCase((String) null, (CharSequence) null, stringArray0);
      assertNull(string0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.joinWith((String) null, stringArray0);
      assertNotNull(string1);
      assertEquals("P*mf8", string1);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.join(doubleArray0, 'l', 2698, 2698);
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new double[] {2698.0, 2698.0, (-1586.5655113179564), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 0.0;
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.abbreviate("", "Pshrzb0nxQAg?R", 6, 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWith("\r", "");
      assertTrue(boolean0);
      
      LinkedHashSet<CharBuffer> linkedHashSet0 = new LinkedHashSet<CharBuffer>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      String string2 = StringUtils.stripAccents("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.capitalize("\r");
      assertNotNull(string3);
      assertEquals("\r", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.leftPad("J%z%|\"", (-510), "v0XAACXVu");
      assertNotNull(string4);
      assertEquals("J%z%|\"", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("Index: ", (CharSequence[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.overlay("", "Index: ", 0, 0);
      assertNotNull(string5);
      assertEquals("Index: ", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isWhitespace("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfEmpty("j:v`Jm", supplier0);
      assertNotNull(string6);
      assertEquals("j:v`Jm", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.deleteWhitespace("J%z%|\"");
      assertNotNull(string7);
      assertEquals("J%z%|\"", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.0;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, ' ', (-45), 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -45
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[1] = 'Y';
      charArray0[2] = 'x';
      charArray0[3] = 'T';
      charArray0[4] = 'v';
      charArray0[5] = 't';
      charArray0[6] = '@';
      charArray0[7] = '^';
      String string0 = StringUtils.valueOf(charArray0);
      assertNotNull(string0);
      assertEquals("MYxTvt@^", string0);
      assertArrayEquals(new char[] {'M', 'Y', 'x', 'T', 'v', 't', '@', '^'}, charArray0);
      assertEquals(8, charArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "MYxTvt@^", (CharSequence) "MYxTvt@^", 1357);
      assertEquals(0, int0);
      
      String string1 = "aJ;_#\\u!!y+tx,w7c+}=5n4H";
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) string1;
      charSequenceArray0[1] = (CharSequence) string1;
      String string2 = StringUtils.appendIfMissingIgnoreCase(string1, "MYxTvt@^", charSequenceArray0);
      assertNotNull(string2);
      assertEquals("aJ;_#\\u!!y+tx,w7c+}=5n4H", string2);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string1);
      assertTrue(boolean0);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.compareIgnoreCase("MYxTvt@^", "4qh{TJx!|zo']L");
      assertEquals(57, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.valueOf(charArray0);
      assertNotNull(string3);
      assertEquals("MYxTvt@^", string3);
      assertArrayEquals(new char[] {'M', 'Y', 'x', 'T', 'v', 't', '@', '^'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.unwrap(string2, "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertNotNull(string4);
      assertEquals("aJ;_#\\u!!y+tx,w7c+}=5n4H", string4);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      
      String string5 = StringUtils.truncate("...', has a length less than 2", 57);
      assertNotNull(string5);
      assertEquals("...', has a length less than 2", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'v';
      doubleArray0[1] = (double) '@';
      doubleArray0[2] = (double) 1357;
      doubleArray0[3] = (double) 'v';
      doubleArray0[4] = (double) 't';
      doubleArray0[5] = (double) 'x';
      doubleArray0[6] = (double) 'x';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '^', 0, 1375);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      int int0 = StringUtils.compare("=>w<; ^+4@y1ps#*", "(HJpV;k#3\"){)XxP ", true);
      assertEquals(21, int0);
      
      String string0 = StringUtils.replaceChars(",m", "/lzC", (String) null);
      assertNotNull(string0);
      assertEquals(",m", string0);
      
      String string1 = "N3vk(}";
      String string2 = StringUtils.difference("=>w<; ^+4@y1ps#*", "(HJpV;k#3\"){)XxP ");
      assertNotNull(string2);
      assertEquals("(HJpV;k#3\"){)XxP ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      char char0 = ']';
      String string3 = StringUtils.join(booleanArray0, ']');
      assertNotNull(string3);
      assertEquals("true", string3);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("true", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat("", 160);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.remove("K9zr6aBQ~W<ak", "p]V}~`<>");
      assertNotNull(string2);
      assertEquals("K9zr6aBQ~W<ak", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("@<q", "", "ymz}I.riv\"!\u0001G79q9");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.wrapIfMissing("Object varargs must not be null", '>');
      assertNotNull(string3);
      assertEquals(">Object varargs must not be null>", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.substringAfter("", "ymz}I.riv\"!\u0001G79q9");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.substring("Sr_d(zDi", 160);
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "p]V}~`<>", 160);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Object varargs must not be null", (CharSequence) "", 15);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfAny("K9zr6aBQ~W<ak", (CharSequence[]) null);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("iy)9kzPz{\u0002R)", "F!sVqF", 127);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.ObjectUtils";
      String string1 = StringUtils.stripAccents("org.apache.commons.lang3.ObjectUtils");
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.ObjectUtils", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.countMatches((CharSequence) "org.apache.commons.lang3.ObjectUtils", (CharSequence) "org.apache.commons.lang3.ObjectUtils");
      assertEquals(1, int0);
      
      String string2 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string2);
      
      int int1 = StringUtils.lastIndexOfAny("org.apache.commons.lang3.ObjectUtils", (CharSequence[]) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("[ey2~0Fn5s(p)R9n*st", (String) null, 2);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = "Search and Replace array lengths don't match: ";
      int int2 = StringUtils.compareIgnoreCase((String) null, "Search and Replace array lengths don't match: ", false);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      int int3 = StringUtils.indexOfAny((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence[]) stringArray0);
      assertEquals((-1), int3);
      assertEquals(1, stringArray0.length);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      byte[] byteArray0 = null;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      
      // Undeclared exception!
      try { 
        ByteBuffer.allocate((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      String string0 = StringUtils.replaceChars("e ", 'V', 'E');
      assertNotNull(string0);
      assertEquals("e ", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("e ", "e ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "e ", (CharSequence) "e ", 322);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("e ", "e ", 322);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.getDigits("e ");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBetween("", "e ");
      assertNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "e ");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.join((Object[]) null, 'V');
      assertNull(string3);
      
      String string4 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string4);
      
      byte[] byteArray0 = StringUtils.getBytes("Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null);
      assertNotNull(byteArray0);
      assertEquals(91, byteArray0.length);
      
      String string5 = StringUtils.join((Object[]) stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(2, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      
      String string6 = StringUtils.substring("Aborting to protect against StackOverflowError - output of one loop is the input of another", 14);
      assertNotNull(string6);
      assertEquals("otect against StackOverflowError - output of one loop is the input of another", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      
      int int2 = StringUtils.ordinalIndexOf("e ", "", 10);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string7 = StringUtils.removeEnd((String) null, (String) null);
      assertNull(string7);
      
      String[] stringArray2 = StringUtils.split("otect against StackOverflowError - output of one loop is the input of another");
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertEquals(13, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String string8 = StringUtils.abbreviate("q73HI", 9);
      assertNotNull(string8);
      assertEquals("q73HI", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      
      String[] stringArray3 = StringUtils.substringsBetween("u5v!", "q73HI", "comparator");
      assertNull(stringArray3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "comparator", (CharSequence) "e ");
      assertFalse(boolean0);
      
      String[] stringArray4 = StringUtils.stripAll((String[]) null, "SzKd");
      assertNull(stringArray4);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string9 = StringUtils.chomp("u5v!");
      assertNotNull(string9);
      assertEquals("u5v!", string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      
      String string10 = StringUtils.mid("Cannot store ", (-888), (-1));
      assertNotNull(string10);
      assertEquals("", string10);
      assertTrue(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      String string0 = StringUtils.trimToNull("q vs ");
      assertNotNull(string0);
      assertEquals("q vs", string0);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "=</3TNdn{";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "<q4P3L]eWbj91WR.X^";
      stringArray0[1] = "<q4P3L]eWbj91WR.X^";
      stringArray0[2] = "<q4P3L]eWbj91WR.X^";
      stringArray0[3] = "<q4P3L]eWbj91WR.X^";
      stringArray0[4] = "<q4P3L]eWbj91WR.X^";
      String string0 = StringUtils.replaceEachRepeatedly("=</3TNdn{", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("=</3TNdn{", string0);
      assertEquals(5, stringArray0.length);
      
      String string1 = StringUtils.substringAfterLast("<q4P3L]eWbj91WR.X^", Integer.MAX_VALUE);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.left("<q4P3L]eWbj91WR.X^", 10);
      assertNotNull(string2);
      assertEquals("<q4P3L]eWb", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "<q4P3L]eWb", 1, (-1102));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2380.0F);
      floatArray0[3] = (-3684.3062F);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)17;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-3866);
      shortArray0[3] = (short)13;
      String string0 = StringUtils.join(shortArray0, '5');
      assertNotNull(string0);
      assertEquals("17505-386651350", string0);
      assertArrayEquals(new short[] {(short)17, (short)0, (short) (-3866), (short)13, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (short)13;
      objectArray0[1] = (Object) (-3684.3062F);
      objectArray0[2] = (Object) (-2380.0F);
      String string1 = StringUtils.prependIfMissingIgnoreCase("17505-386651350", "17505-386651350", (CharSequence[]) null);
      assertNotNull(string1);
      assertEquals("17505-386651350", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("17505-386651350", "ch");
      assertNotNull(string2);
      assertEquals("17505-386651350", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.deleteWhitespace("fWZ)Sc1*NVJ(u");
      assertNotNull(string3);
      assertEquals("fWZ)Sc1*NVJ(u", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.defaultString("17505-386651350");
      assertNotNull(string4);
      assertEquals("17505-386651350", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      String string5 = StringUtils.toEncodedString(byteArray0, charset0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      String string0 = StringUtils.replace("org.apache.commons.lang3.CharUtils", "#Ln", "#Ln", (-1994));
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.CharUtils", string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[5] = '[';
      charArray0[2] = '[';
      charArray0[3] = 't';
      charArray0[4] = '^';
      charArray0[5] = 'e';
      charArray0[6] = '_';
      int int0 = StringUtils.indexOfAny((CharSequence) "org.apache.commons.lang3.CharUtils", charArray0);
      assertEquals(9, int0);
      assertArrayEquals(new char[] {'d', '\u0000', '[', 't', '^', 'e', '_'}, charArray0);
      assertEquals(7, charArray0.length);
      
      String string1 = StringUtils.center("org.apache.commons.lang3.CharUtils", 9);
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.CharUtils", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      String string0 = StringUtils.capitalize("Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match: ", string0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("Search and Replace array lengths don't match: "));
      
      String string1 = StringUtils.deleteWhitespace(", Length: 0");
      assertNotNull(string1);
      assertEquals(",Length:0", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string2 = StringUtils.right(", Length: 0", (-3));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      charSequenceArray0[0] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(5, charSequenceArray0.length);
      
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "null/empty items";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string3 = StringUtils.substringBetween("", "=))hC");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.chomp("\n");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\n", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'%', '%', '%'}, charArray0);
      assertEquals(3, charArray0.length);
      
      String string2 = StringUtils.substring("maxWith cannot be negative", (int) '%');
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      
      Integer integer0 = new Integer('%');
      assertNotNull(integer0);
      assertEquals(37, (int)integer0);
      
      String string3 = StringUtils.abbreviateMiddle("\n", "", (-1271));
      assertNotNull(string3);
      assertEquals("\n", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      short[] shortArray0 = new short[12];
      shortArray0[0] = (short) (-34);
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)3;
      shortArray0[3] = (short)1357;
      shortArray0[4] = (short)1064;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '%', (int) (short) (-34), (int) (short)3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -34
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      String string0 = StringUtils.chomp("\"");
      assertNotNull(string0);
      assertEquals("\"", string0);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      String string0 = StringUtils.truncate((String) null, 4);
      assertNull(string0);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      serviceLoader0.reload();
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Iterator<Object> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      
      String string1 = StringUtils.upperCase("org.apache.commons.lang3.ObjectUtils$Null", locale0);
      assertNotNull(string1);
      assertEquals("ORG.APACHE.COMMONS.LANG3.OBJECTUTILS$NULL", string1);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      
      int[] intArray0 = new int[2];
      intArray0[0] = 4;
      intArray0[1] = 4;
      String string2 = StringUtils.valueOf((char[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.lowerCase("Object varargs must not be null");
      assertNotNull(string3);
      assertEquals("object varargs must not be null", string3);
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "ORG.APACHE.COMMONS.LANG3.OBJECTUTILS$NULL", (CharSequence) "org.apache.commons.lang3.ObjectUtils$Null");
      assertEquals(32, int0);
      
      String string4 = StringUtils.strip("t1eEfxXn9)");
      assertNotNull(string4);
      assertEquals("t1eEfxXn9)", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      int int1 = StringUtils.length((CharSequence) null);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.defaultString("$-& @QsYdr}2$bB|^", "Strings must not be null");
      assertNotNull(string5);
      assertEquals("$-& @QsYdr}2$bB|^", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      String string0 = "";
      int int0 = StringUtils.compare("Aborting to protect against StackOverflowError - output -f one loop is the input of another", "", true);
      assertEquals(91, int0);
      
      boolean[] booleanArray0 = new boolean[3];
      String string1 = ",m";
      String string2 = StringUtils.replaceChars(",m", "(A(Mr2r8_", ",m");
      assertNotNull(string2);
      assertEquals(",m", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.difference("0COqHuY##-kbck", ", Length: 0");
      assertNotNull(string3);
      assertEquals(", Length: 0", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int1 = StringUtils.compare("clone", "N3vk(}", true);
      assertEquals(21, int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.join(booleanArray0, '\'');
      assertNotNull(string4);
      assertEquals("false'false'false", string4);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith(",m", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '\u001E';
      String string0 = StringUtils.join(doubleArray0, '\u001E');
      assertNotNull(string0);
      assertEquals("30.0", string0);
      assertArrayEquals(new double[] {30.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      String string1 = StringUtils.replaceChars("Object varargs must not be null", "30.0", "Object varargs must not be null");
      assertNotNull(string1);
      assertEquals("Object varargs must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "30.0", (CharSequence) "Object varargs must not be null");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("...");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("p!0DIjRK`xB", "\"BrCM#b}Jq{*#", 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 15
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfter("", (String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.compare((String) null, "c/h!", true);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int1);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.compare((String) null, "");
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("c/h!", ' ');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "offset cannot be negative", supplier0);
      assertNotNull(charSequence0);
      assertEquals("offset cannot be negative", charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("offset cannot be negative", "");
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.left((String) null, 86);
      assertNull(string2);
      
      String string3 = StringUtils.upperCase("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.upperCase((String) null);
      assertNull(string4);
      
      int int3 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "...", (-1));
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int4);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      
      String string5 = StringUtils.substringBefore("", "s)W");
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)charSequence0));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.substringAfter(" ", (-1));
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)charSequence0));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      
      boolean boolean2 = StringUtils.isMixedCase("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "}";
      charSequenceArray0[1] = (CharSequence) "}";
      charSequenceArray0[2] = (CharSequence) "}";
      String string0 = StringUtils.join((Object[]) charSequenceArray0, "}", 2, 2);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(8, charSequenceArray0.length);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "}";
      charSequenceArray0[5] = (CharSequence) "}";
      charSequenceArray0[6] = (CharSequence) "}";
      charSequenceArray0[7] = (CharSequence) "}";
      boolean boolean0 = StringUtils.equalsAny("}", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.substring((String) null, 2, (-6));
      assertNull(string1);
      
      String string2 = StringUtils.stripAccents("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.compare((String) null, "t");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = null;
      String string1 = StringUtils.stripEnd("moL n)!X>I@4 Ti#<Y", (String) null);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("Invalid locale format: ", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string2);
      assertEquals("Invalid locale format: ", string2);
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlpha("6,J`i=6Dc:;-fj]\"");
      assertFalse(boolean0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.left("6,J`i=6Dc:;-fj]\"", 32);
      assertNotNull(string3);
      assertEquals("6,J`i=6Dc:;-fj]\"", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = "VP+;M~r\\ZSw Wy$N!s";
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(int0));
      
      // Undeclared exception!
      try { 
        arrayDeque0.offerLast((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.stripEnd("moL n)!X>I@4 Ti#<Y", (String) null);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference((String) null, "moL n)!X>I@4 Ti#<Y");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) "moL n)!X>I@4 Ti#<Y", 29);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      String string0 = StringUtils.unwrap("-'5R", "-'5R");
      assertNotNull(string0);
      assertEquals("-'5R", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("-'5R", "-'5R");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.mid("-'5R", 7, 160);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfAny("AtG1", stringArray0);
      assertEquals(4, int0);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "}=5n4H", (CharSequence[]) stringArray0);
      assertEquals(0, int1);
      assertEquals(1, stringArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-2421), (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.truncate((String) null, 6);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("...");
      assertNotNull(string0);
      assertEquals("...", string0);
      
      String string1 = StringUtils.repeat((String) null, "\"BrCM#b}Jq{*#", 1);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing(";2\"i}2\u0002IgmfK", ";2\"i}2\u0002IgmfK");
      assertNotNull(string0);
      assertEquals(";2\"i}2\u0002IgmfK", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) ";2\"i}2\u0002IgmfK";
      charSequenceArray0[1] = (CharSequence) ";2\"i}2\u0002IgmfK";
      charSequenceArray0[2] = (CharSequence) ";2\"i}2\u0002IgmfK";
      charSequenceArray0[3] = (CharSequence) ";2\"i}2\u0002IgmfK";
      charSequenceArray0[4] = (CharSequence) ";2\"i}2\u0002IgmfK";
      charSequenceArray0[5] = (CharSequence) ";2\"i}2\u0002IgmfK";
      boolean boolean0 = StringUtils.startsWithAny(";2\"i}2\u0002IgmfK", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      String string0 = StringUtils.substring("+^iy.BY9LR vs ", 587, 587);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", 'U');
      assertEquals(0, int0);
      
      String string1 = StringUtils.stripAccents("g~}tl.{Up'{7rOH");
      assertNotNull(string1);
      assertEquals("g~}tl.{Up'{7rOH", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.capitalize("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.leftPad("0E>- $", 1077, "Rq*z`u2h, Length: 0");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) string3;
      charSequenceArray0[1] = (CharSequence) "+^iy.BY9LR vs ";
      charSequenceArray0[2] = (CharSequence) "Rq*z`u2h, Length: 0";
      charSequenceArray0[3] = (CharSequence) "+^iy.BY9LR vs ";
      charSequenceArray0[4] = (CharSequence) "";
      String string4 = StringUtils.replace("0E>- $", "", "/l}JDN", 587);
      assertNotNull(string4);
      assertEquals("0E>- $", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      charSequenceArray0[5] = (CharSequence) "0E>- $";
      charSequenceArray0[6] = (CharSequence) "Rq*z`u2h, Length: 0";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("Index: ", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string5 = StringUtils.abbreviate("0E>- $", (int) (short)25, (int) (short)25);
      assertNotNull(string5);
      assertEquals("0E>- $", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      
      String string6 = StringUtils.stripToNull("+^iy.BY9LR vs ");
      assertNotNull(string6);
      assertEquals("+^iy.BY9LR vs", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      
      boolean boolean1 = StringUtils.isWhitespace("+^iy.BY9LR vs");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string7 = StringUtils.getIfEmpty("0E>- $", supplier0);
      assertNotNull(string7);
      assertEquals("0E>- $", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.deleteWhitespace("");
      assertNotNull(string8);
      assertEquals("", string8);
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[5], charSequenceArray0[1], 587);
      assertEquals((-1), int1);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith(" in an array of ", " in an array of ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase(" in an array of ", " in an array of ");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.deleteWhitespace("-7eT#!j4mx");
      assertNotNull(string1);
      assertEquals("-7eT#!j4mx", string1);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      String string1 = StringUtils.deleteWhitespace("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.unwrap("Threshold must not be negative", 'N');
      assertNotNull(string3);
      assertEquals("Threshold must not be negative", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("~", "~", (String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.stripToNull("~");
      assertNotNull(string0);
      assertEquals("~", string0);
      
      String string1 = StringUtils.abbreviate("~", "~", 5);
      assertNotNull(string1);
      assertEquals("~", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "~");
      assertFalse(boolean0);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, 'b');
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "~", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      
      byte[] byteArray0 = StringUtils.getBytes("?N{dT=", charset0);
      assertNotNull(byteArray0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertArrayEquals(new byte[] {(byte)63, (byte)78, (byte)123, (byte)100, (byte)84, (byte)61}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "?N{dT=", (CharSequence) "|N", 8192);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "|N", (CharSequence) "?N{dT=", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 0.0;
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.abbreviate("", "Pshrzb0nxQAg?R", 6, 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWith("\r", "");
      assertTrue(boolean0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      
      char[] charArray0 = new char[0];
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      assertNotSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer1.hasArray());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      
      CharBuffer charBuffer2 = CharBuffer.allocate(0);
      assertNotSame(charBuffer2, charBuffer1);
      assertNotSame(charBuffer2, charBuffer0);
      assertNotNull(charBuffer2);
      assertEquals(0, charBuffer2.remaining());
      assertEquals(0, charBuffer2.capacity());
      assertEquals(0, charBuffer2.arrayOffset());
      assertFalse(charBuffer2.isReadOnly());
      assertFalse(charBuffer2.isDirect());
      assertFalse(charBuffer2.hasRemaining());
      assertEquals(0, charBuffer2.length());
      assertEquals("", charBuffer2.toString());
      assertEquals(0, charBuffer2.limit());
      assertEquals(0, charBuffer2.position());
      assertTrue(charBuffer2.hasArray());
      assertTrue(charBuffer2.equals((Object)charBuffer0));
      assertTrue(charBuffer2.equals((Object)charBuffer1));
      
      String string2 = StringUtils.strip("\r");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.center(";8h{kRDm{DxXkA]", 522);
      assertNotNull(string4);
      assertEquals("                                                                                                                                                                                                                                                             ;8h{kRDm{DxXkA]                                                                                                                                                                                                                                                             ", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", 6);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.unwrap("Pshrzb0nxQAg?R", "");
      assertNotNull(string5);
      assertEquals("Pshrzb0nxQAg?R", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.unwrap("^PS.o]RzJCNjC>+$_D", (String) null);
      assertNotNull(string0);
      assertEquals("^PS.o]RzJCNjC>+$_D", string0);
      
      String string1 = StringUtils.difference("~\u0007s5F4gv", "45w9ayf<^?Dl");
      assertNotNull(string1);
      assertEquals("45w9ayf<^?Dl", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      String string0 = StringUtils.center("}6Ca^Vel^/K#j", 15);
      assertNotNull(string0);
      assertEquals(" }6Ca^Vel^/K#j ", string0);
      
      String string1 = StringUtils.chop("\"v.aG1F{");
      assertNotNull(string1);
      assertEquals("\"v.aG1F", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeIgnoreCase("\r", "-1+^iy.BY9LR vs +^iy.BY9LR");
      assertNotNull(string2);
      assertEquals("\r", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[4] = 'o';
      charArray0[5] = 'A';
      charArray0[6] = 'A';
      String string3 = StringUtils.join(charArray0, 'B');
      assertNotNull(string3);
      assertEquals("ABABAB\u0000BoBABA", string3);
      assertArrayEquals(new char[] {'A', 'A', 'A', '\u0000', 'o', 'A', 'A'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.substring((String) null, 6, (-2119));
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAlphaSpace("\r");
      assertFalse(boolean0);
      
      String string5 = StringUtils.leftPad((String) null, 15, "}6Ca^Vel^/K#j");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, (-3347), "org.apache.commons.lang3.CharUtils");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      String string0 = StringUtils.center("<VK7yT|V'HJW:s<o", (-744));
      assertNotNull(string0);
      assertEquals("<VK7yT|V'HJW:s<o", string0);
      
      String string1 = StringUtils.chop("<VK7yT|V'HJW:s<o");
      assertNotNull(string1);
      assertEquals("<VK7yT|V'HJW:s<", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeIgnoreCase("W%!^:d hzr", "<VK7yT|V'HJW:s<");
      assertNotNull(string2);
      assertEquals("W%!^:d hzr", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = 'B';
      charArray0[2] = 'o';
      charArray0[3] = '`';
      charArray0[4] = 'o';
      charArray0[5] = 'A';
      String string3 = StringUtils.join(charArray0, 'A');
      assertNotNull(string3);
      assertEquals("OABAoA`AoAA", string3);
      assertArrayEquals(new char[] {'O', 'B', 'o', '`', 'o', 'A'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.substring("<VK7yT|V'HJW:s<o", (-2119), (-2119));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean0 = StringUtils.isAlphaSpace("-1+^iy.BY9LR vs +^iy.BY9LR");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      String string0 = StringUtils.replace("org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils", (-1994));
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.CharUtils", string0);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.CharUtils", (CharSequence) null, (-1994));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.CharUtils", (CharSequence) "org.apache.commons.lang3.CharUtils");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.strip("org.apache.commons.lang3.CharUtils");
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.CharUtils", string2);
      assertTrue(string2.equals((Object)string0));
      
      int int2 = StringUtils.length("org.apache.commons.lang3.CharUtils");
      assertEquals(34, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      try { 
        StringUtils.getBytes("ymz}I.riv\"!\u0001G79q9", "org.apache.commons.lang3.CharUtils");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) ", Length: 0", 358);
      assertFalse(boolean0);
      
      String string0 = StringUtils.trimToNull(", Length: 0");
      assertNotNull(string0);
      assertEquals(", Length: 0", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) ", Length: 0", (CharSequence) ", Length: 0");
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ", Length: 0";
      objectArray0[1] = (Object) ", Length: 0";
      objectArray0[2] = (Object) ", Length: 0";
      objectArray0[3] = (Object) ", Length: 0";
      objectArray0[4] = (Object) ", Length: 0";
      String string1 = StringUtils.joinWith(", Length: 0", objectArray0);
      assertNotNull(string1);
      assertEquals(", Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0", string1);
      assertEquals(6, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) ", Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0";
      charSequenceArray0[1] = (CharSequence) ", Length: 0";
      charSequenceArray0[2] = (CharSequence) ", Length: 0";
      charSequenceArray0[3] = (CharSequence) ", Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0";
      charSequenceArray0[4] = (CharSequence) ", Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0";
      charSequenceArray0[5] = (CharSequence) ", Length: 0";
      charSequenceArray0[6] = (CharSequence) ", Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2380.0F);
      floatArray0[3] = (-3684.3062F);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)17;
      shortArray0[1] = (short)0;
      String string0 = StringUtils.repeat("\r", "\r", (int) (short)0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "\r";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "\r";
      boolean boolean0 = StringUtils.equalsAny("\r", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase(charSequenceArray0[6], "");
      assertTrue(boolean1);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray1 = new short[2];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)0;
      shortArray1[1] = (short)17;
      String string2 = StringUtils.join(shortArray1, '6', 3526, 1595);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new short[] {(short)0, (short)17}, shortArray1);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      String string3 = StringUtils.trimToNull((String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(101).when(comparator0).compare(anyString() , anyString());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      assertNotNull(treeSet0);
      
      String string0 = StringUtils.join((Iterable<?>) treeSet0, (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(treeSet0.contains(string0));
      
      String string1 = StringUtils.substringBeforeLast("KV4G7:|cbHq^;bC9)O", "%:CU~^$3IKGppD(");
      assertNotNull(string1);
      assertEquals("KV4G7:|cbHq^;bC9)O", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumeric("KV4G7:|cbHq^;bC9)O");
      assertFalse(boolean0);
      
      boolean boolean1 = treeSet0.add("KV4G7:|cbHq^;bC9)O");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(treeSet0.contains("KV4G7:|cbHq^;bC9)O"));
      
      String string2 = StringUtils.lowerCase((String) null);
      assertNull(string2);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)10;
      shortArray0[2] = (short)2431;
      shortArray0[3] = (short)849;
      String string3 = StringUtils.join(shortArray0, ')');
      assertNotNull(string3);
      assertEquals("1)10)2431)849", string3);
      assertArrayEquals(new short[] {(short)1, (short)10, (short)2431, (short)849}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("{W", "", (CharSequence[]) null);
      assertNotNull(string4);
      assertEquals("{W", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.substringBefore("!?", "KV4G7:|cbHq^;bC9)O");
      assertNotNull(string5);
      assertEquals("!?", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.deleteWhitespace("!?");
      assertNotNull(string6);
      assertEquals("!?", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      
      String string7 = StringUtils.defaultString("ch");
      assertNotNull(string7);
      assertEquals("ch", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      
      int int0 = StringUtils.compareIgnoreCase("{W", (String) null);
      assertEquals(1, int0);
      
      String string8 = StringUtils.replaceIgnoreCase("%:CU~^$3IKGppD(", "hQ", "KV4G7:|cbHq^;bC9)O", (int) (short)1);
      assertNotNull(string8);
      assertEquals("%:CU~^$3IKGppD(", string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      String string0 = "*k*k";
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "*k*k");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = 0;
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "*k*k", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      String string0 = StringUtils.substringBetween("org.apache.commons.lang3.ArrayUtils", "org.apache.commons.lang3.ArrayUtils");
      assertNull(string0);
      
      String string1 = StringUtils.abbreviate((String) null, (String) null, 3, 4333);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("y|C<j[u)", "xlU7ugvT9=~I'", "u(\"5");
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "xlU7ugvT9=~I'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, 'B');
      assertNull(string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.stripEnd(string0, "The type must not be null");
      assertNull(string1);
      
      String string2 = StringUtils.rightPad("+^iy.BY9LR vs +^iy.BY9LR", 53, "The type must not be null");
      assertNotNull(string2);
      assertEquals("+^iy.BY9LR vs +^iy.BY9LRThe type must not be nullThe ", string2);
      
      String string3 = StringUtils.reverseDelimited((String) null, '\\');
      assertNull(string3);
      
      String string4 = StringUtils.swapCase((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.remove("+^iy.BY9LR vs +^iy.BY9LRThe type must not be nullThe ", '\\');
      assertNotNull(string5);
      assertEquals("+^iy.BY9LR vs +^iy.BY9LRThe type must not be nullThe ", string5);
      assertTrue(string5.equals((Object)string2));
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1, "uGwx ?El62;=^K");
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertEquals(2, stringArray2.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.startsWith("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substring("", 8192);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("", "", stringArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, stringArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.joinWith("", stringArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(0, stringArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      String string4 = StringUtils.join(byteArray0, 'T');
      assertNotNull(string4);
      assertEquals("3", string4);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      String string0 = StringUtils.removeStart("Index: ", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("Index: ", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate("u~+9", 17);
      assertNotNull(string1);
      assertEquals("u~+9", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "u~+9";
      int int0 = StringUtils.lastIndexOfAny("u~+9", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      String string0 = StringUtils.difference("org.apache.commons.lang3.exception.CloneFailedException", "', is neither of type Map.Entry nor an Array");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      String[] stringArray0 = StringUtils.substringsBetween("org.apache.commons.lang3.exception.CloneFailedException", "Array element ", "U;MFL0;");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny("org.apache.commons.lang3.exception.CloneFailedException", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.chomp("", "Threshold must not be negative");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) "org.apache.commons.lang3.exception.CloneFailedException");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      String string0 = StringUtils.wrap("-1", '[');
      assertNotNull(string0);
      assertEquals("[-1[", string0);
      
      boolean boolean0 = StringUtils.isAlpha("[-1[");
      assertFalse(boolean0);
      
      String string1 = StringUtils.defaultIfEmpty(", Length: 0", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string1);
      assertEquals(", Length: 0", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("87^Ca/", 1, 1371);
      assertNotNull(string2);
      assertEquals("7^Ca/", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.toRootLowerCase("-1");
      assertNotNull(string3);
      assertEquals("-1", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.uncapitalize("=</3TNdn{");
      assertNotNull(string0);
      assertEquals("=</3TNdn{", string0);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      assertNotNull(treeSet0);
      
      String string0 = StringUtils.join((Iterable<?>) treeSet0, (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(treeSet0.contains(string0));
      
      String string1 = StringUtils.substringBeforeLast("KV4G7:|cbHq^;bC9)O", "%:CU~^$3IKGppD(");
      assertNotNull(string1);
      assertEquals("KV4G7:|cbHq^;bC9)O", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumeric("KV4G7:|cbHq^;bC9)O");
      assertFalse(boolean0);
      
      boolean boolean1 = treeSet0.add("KV4G7:|cbHq^;bC9)O");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(treeSet0.contains("%:CU~^$3IKGppD("));
      
      String string2 = StringUtils.lowerCase((String) null);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "{W";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "{W";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) null;
      String string3 = StringUtils.repeat("KV4G7:|cbHq^;bC9)O", "KV4G7:|cbHq^;bC9)O", (-1405));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      
      charSequenceArray0[7] = (CharSequence) "";
      boolean boolean2 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.uncapitalize("%:CU~^$3IKGppD(");
      assertNotNull(string4);
      assertEquals("%:CU~^$3IKGppD(", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("u6/p", "u6/p", "'5R");
      assertNotNull(string0);
      assertEquals("'5R", string0);
      
      String string1 = StringUtils.center("", 756);
      assertNotNull(string1);
      assertEqualsstring1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "\\u";
      String string3 = StringUtils.chop(string2);
      assertNotNull(string3);
      assertEquals("\\", string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.stripStart("', is neither of type Map.Entry nor an Array", "8af<]@`?f~)Ln,Co4");
      assertNotNull(string4);
      assertEquals("', is neither of type Map.Entry nor an Array", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) string2;
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string5 = StringUtils.substringAfter("', is neither of type Map.Entry nor an Array", 1486);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      floatArray0[1] = (-1.0F);
      String string0 = StringUtils.join(floatArray0, '\'', 1129, (int) '\'');
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new float[] {1861.1F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      String string1 = StringUtils.replaceChars("(A(Mr2r8_", "(A(Mr2r8_", ",m");
      assertNotNull(string1);
      assertEquals(",m,", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.difference(",m", "N3vk(}");
      assertNotNull(string2);
      assertEquals("N3vk(}", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.compare("Supplied value must be a valid byte literal between -32768 and 32767: [", "", true);
      assertEquals(71, int0);
      
      String string3 = StringUtils.join((boolean[]) null, '\'');
      assertNull(string3);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "N3vk(}";
      objectArray0[1] = (Object) "Supplied value must be a valid byte literal between -32768 and 32767: [";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "N3vk(}";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) 1861.1F;
      String string4 = StringUtils.joinWith((String) null, objectArray0);
      assertNotNull(string4);
      assertEquals("N3vk(}Supplied value must be a valid byte literal between -32768 and 32767: [N3vk(}1861.1", string4);
      assertEquals(8, objectArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.defaultIfEmpty("'IGRMzjd`{J%z%|\"", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string5);
      assertEquals("'IGRMzjd`{J%z%|\"", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      charArray0[5] = 'b';
      charArray0[6] = '\'';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'\'', '\'', '\'', '\'', '\'', 'b', '\''}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("T9|Z{[0?2,-");
      assertNotNull(string0);
      assertEquals("t9|Z{[0?2,-", string0);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("minimum abbreviation width with offset is %d", string0);
      
      String string1 = StringUtils.capitalize("Minimum abbreviation width with offset is %d");
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphaSpace("Minimum abbreviation width with offset is %d");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      String string2 = StringUtils.removePattern("minimum abbreviation width with offset is %d", (String) null);
      assertNotNull(string2);
      assertEquals("minimum abbreviation width with offset is %d", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Locale must not be null", "\r", 8, 8);
      assertNotNull(string0);
      assertEquals("\rust no\r", string0);
      
      String string1 = StringUtils.upperCase((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "\rust no\r", (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.trim("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("Exception cloning Cloneable type -1", "", "uGwx ?El6M;=^K");
      assertNull(stringArray0);
      
      String string3 = StringUtils.wrap("I'MqMMg\"(gKL", "...");
      assertNotNull(string3);
      assertEquals("...I'MqMMg\"(gKL...", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.capitalize("o%(P]/|$6|gi]");
      assertNotNull(string4);
      assertEquals("O%(P]/|$6|gi]", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String[] stringArray1 = StringUtils.substringsBetween("...I'MqMMg\"(gKL...", "Locale must not be null", "w.)bRx");
      assertNull(stringArray1);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) "...");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      String string0 = StringUtils.getDigits("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat("", 160);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "K9zr6aBQ~W<ak";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "K9zr6aBQ~W<ak";
      String string2 = StringUtils.appendIfMissing("Minimum abbreviation width with offset is %d", "K9zr6aBQ~W<ak", charSequenceArray0);
      assertNotNull(string2);
      assertEquals("Minimum abbreviation width with offset is %d", string2);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width with offset is %d", (-2));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.center("(aE%T<\f#s@{`", (-472), "(aE%T<\f#s@{`");
      assertNotNull(string3);
      assertEquals("(aE%T<\f#s@{`", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.abbreviate("Locale must not be null", 160, 289);
      assertNotNull(string4);
      assertEquals("Locale must not be null", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.substringBetween("...", "Strings must not be null", "...");
      assertNull(string5);
      
      String string6 = StringUtils.removePattern((String) null, (String) null);
      assertNull(string6);
      
      String[] stringArray0 = new String[0];
      String string7 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string7);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isWhitespace("(aE%T<\f#s@{`");
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string8 = StringUtils.getIfEmpty(",6CA\"JeG>Cloneable type ", supplier0);
      assertNotNull(string8);
      assertEquals(",6CA\"JeG>Cloneable type ", string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      
      String string9 = StringUtils.deleteWhitespace("Strings must not be null");
      assertNotNull(string9);
      assertEquals("Stringsmustnotbenull", string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = null;
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.rightPad("oTquVatc8 zWjm", (-1), "oTquVatc8 zWjm");
      assertNotNull(string0);
      assertEquals("oTquVatc8 zWjm", string0);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[0], (CharSequence) "t");
      assertEquals((-1), int1);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = StringUtils.split("offset cannot be negative", "q)gIKFU]:Gq)gIKFU]:[");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      String string0 = StringUtils.wrapIfMissing("\"v.aG1F{o#5_&V<i,#y", 'A');
      assertNotNull(string0);
      assertEquals("A\"v.aG1F{o#5_&V<i,#yA", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("A\"v.aG1F{o#5_&V<i,#yA");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter("A\"v.aG1F{o#5_&V<i,#yA", (String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("", 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "A\"v.aG1F{o#5_&V<i,#yA", (CharSequence) null, (-902));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)34;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      
      String string3 = StringUtils.toEncodedString(byteArray0, charset0);
      assertNotNull(string3);
      assertEquals("\u0002\u0002\uFFFD\"", string3);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte) (-22), (byte)34}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "\u0002\u0002\uFFFD\"", (int) (byte)34);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.removeAll("", "Lgukj/J]Wm<%#JDC");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank(charSequenceArray0[0], supplier0);
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(charSequence0.equals((Object)string0));
      
      String string1 = StringUtils.LF;
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "\n";
      String string2 = StringUtils.removeAll("\n", "Lgukj/J]Wm<%#JDC");
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertTrue(string2.equals((Object)string1));
      
      charSequenceArray0[3] = (CharSequence) "\n";
      String string3 = StringUtils.substringAfter("}/Yn", (-665));
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      
      charSequenceArray0[4] = (CharSequence) "";
      String string4 = StringUtils.capitalize("Lgukj/J]Wm<%#JDC");
      assertNotNull(string4);
      assertEquals("Lgukj/J]Wm<%#JDC", string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      charSequenceArray0[5] = (CharSequence) "Lgukj/J]Wm<%#JDC";
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains("\n"));
      
      boolean boolean0 = arrayDeque0.add("Lgukj/J]Wm<%#JDC");
      assertTrue(boolean0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("\n"));
      assertTrue(arrayDeque0.contains("Lgukj/J]Wm<%#JDC"));
      
      String string5 = StringUtils.deleteWhitespace("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string5);
      assertEquals("p{InCombiningDiacriticalMarks}+", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      charSequenceArray0[7] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.replaceOnce("", "vZ' ^Ez[>%0&V\"", "");
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      
      boolean boolean2 = StringUtils.containsAny(charSequenceArray0[5], charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = (-4305);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\r", "]gIpL^", 640, (-4305));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Q-~mXT\tTN#89,o", "Q-~mXT\tTN#89,o");
      assertNotNull(string0);
      assertEquals("Q-~mXT\tTN#89,o", string0);
      
      String string1 = StringUtils.difference("The Array must not be null", "The Array must not be null");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Q-~mXT\tTN#89,o";
      charSequenceArray0[2] = (CharSequence) "Q-~mXT\tTN#89,o";
      charSequenceArray0[3] = (CharSequence) "Locale must not be null";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("The Array must not be null", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string2 = StringUtils.deleteWhitespace("Q-~mXT\tTN#89,o");
      assertNotNull(string2);
      assertEquals("Q-~mXTTN#89,o", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringAfter("?m", "offset cannot be negative");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.substring("Locale must not be null", 6);
      assertNotNull(string4);
      assertEquals(" must not be null", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[3], (CharSequence) "", 3894);
      assertEquals(23, int0);
      assertEquals(5, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("?m", "Q-~mXT\tTN#89,o", 0, (-5072));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 15
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(0, stringArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1843L;
      longArray0[1] = (long) 'e';
      longArray0[2] = (-2515L);
      longArray0[3] = (long) 'e';
      longArray0[4] = 0L;
      longArray0[5] = (long) 'e';
      longArray0[6] = (long) (-2981);
      longArray0[7] = (-2515L);
      String string1 = StringUtils.join(longArray0, 'e');
      assertNotNull(string1);
      assertEquals("1843e101e-2515e101e0e101e-2981e-2515", string1);
      assertArrayEquals(new long[] {1843L, 101L, (-2515L), 101L, 0L, 101L, (-2981L), (-2515L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "1843e101e-2515e101e0e101e-2981e-2515", 954);
      assertEquals((-1), int0);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      String[] stringArray1 = StringUtils.splitByCharacterType("1843e101e-2515e101e0e101e-2981e-2515");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(18, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("\r", (String) null, 1955);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotNull(stringArray2);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" in an array of ", " in an array of ");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNumeric("ymz}I.riv\"!\u0001G79q9");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) " in an array of ", "%xGL[Q>n<zvi?Hd");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.wrapIfMissing("<iKc6?0dpI1pIS*ZC*}", '>');
      assertNotNull(string0);
      assertEquals("><iKc6?0dpI1pIS*ZC*}>", string0);
      
      String string1 = StringUtils.mid("<iKc6?0dpI1pIS*ZC*}", 8, 2362);
      assertNotNull(string1);
      assertEquals("pI1pIS*ZC*}", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isAllUpperCase("pI1pIS*ZC*}");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string2 = StringUtils.substringAfter("org.apache.commons.lang3.StringUtils", "ymz}I.riv\"!\u0001G79q9");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substring("Rq*z`u2h", 1582);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.wrapIfMissing("'IGRMzjd`{J%z%|\"", "Object varargs must not be null");
      assertNotNull(string4);
      assertEquals("Object varargs must not be null'IGRMzjd`{J%z%|\"Object varargs must not be null", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Object varargs must not be null'IGRMzjd`{J%z%|\"Object varargs must not be null", (CharSequence) "", 108);
      assertEquals(78, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Object varargs must not be null'IGRMzjd`{J%z%|\"Object varargs must not be null", (CharSequence) "'IGRMzjd`{J%z%|\"", 322);
      assertEquals(62, int1);
      assertFalse(int1 == int0);
      
      boolean boolean3 = StringUtils.isNumeric("");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      boolean boolean4 = StringUtils.containsAny((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence[]) stringArray0);
      assertFalse(boolean4);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      String string0 = StringUtils.getDigits("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat("", 160);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.remove("K9zr6aBQ~W<ak", "p]V}~`<>");
      assertNotNull(string2);
      assertEquals("K9zr6aBQ~W<ak", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.replace("", "K9zr6aBQ~W<ak", (String) null);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.reverse("t");
      assertNotNull(string4);
      assertEquals("t", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.truncate("K9zr6aBQ~W<ak", 750);
      assertNotNull(string5);
      assertEquals("K9zr6aBQ~W<ak", string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "-RG],ksOkbZi6TI";
      stringArray0[2] = null;
      stringArray0[3] = "";
      stringArray0[4] = "K9zr6aBQ~W<ak";
      stringArray0[5] = "t";
      stringArray0[6] = "MpbF}tZ2O0_+821T3";
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string6);
      assertEquals("", string6);
      assertEquals(7, stringArray0.length);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllLowerCase("p]V}~`<>");
      assertFalse(boolean0);
      
      String string7 = StringUtils.substring("", (-2986));
      assertNotNull(string7);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("o#5_&V<i,#y", "o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNotNull(string0);
      assertEquals("o#5_&V<i,#y", string0);
      
      String string1 = StringUtils.substringAfter("UpA{-?;'4{pSY,KVc", "offset cannot be negative");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllLowerCase("o#5_&V<i,#y");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "UpA{-?;'4{pSY,KVc";
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "o#5_&V<i,#y";
      String string2 = StringUtils.replaceEachRepeatedly("o#5_&V<i,#y", stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string2);
      assertEquals("o#5_&V<i,#y", string2);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.leftPad("UpA{-?;'4{pSY,KVc", 549);
      assertNotNull(string3);
      assertEqualspA{-?;'4{pSY,KVc", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-2421), (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.truncate((String) null, 4);
      assertNull(string1);
      
      String string2 = StringUtils.chomp(" -F?LI3uAzw -F?LI3uAzw", "g*>c.]&GAEju3");
      assertNotNull(string2);
      assertEquals(" -F?LI3uAzw -F?LI3uAzw", string2);
      
      boolean boolean1 = StringUtils.isWhitespace(" -F?LI3uAzw -F?LI3uAzw");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.repeat((String) null, 21);
      assertNull(string3);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = " -F?LI3uAzw -F?LI3uAzw";
      stringArray0[1] = null;
      stringArray0[2] = " -F?LI3uAzw -F?LI3uAzw";
      stringArray0[3] = null;
      stringArray0[4] = "g*>c.]&GAEju3";
      stringArray0[5] = null;
      stringArray0[6] = " -F?LI3uAzw -F?LI3uAzw";
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(7, stringArray0.length);
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join((List<?>) linkedList0, '>', 2445, 2445);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(2445));
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substring("+phQ", 83, 83);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "", 'U');
      assertEquals(0, int0);
      
      String string2 = StringUtils.stripAccents("Index: ");
      assertNotNull(string2);
      assertEquals("Index: ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.capitalize("+phQ");
      assertNotNull(string3);
      assertEquals("+phQ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.leftPad("Index: ", (-510), "+phQ");
      assertNotNull(string4);
      assertEquals("Index: ", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("Index: ", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.abbreviate("Index: ", 1363, (int) (short)25);
      assertNotNull(string5);
      assertEquals("Index: ", string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isWhitespace("Index: ");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfEmpty("Index: ", supplier0);
      assertNotNull(string6);
      assertEquals("Index: ", string6);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.deleteWhitespace("Index: ");
      assertNotNull(string7);
      assertEquals("Index:", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      floatArray0[1] = (-1.0F);
      String string0 = StringUtils.abbreviateMiddle("null/empty items", "6<L:q", (-421));
      assertNotNull(string0);
      assertEquals("null/empty items", string0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.rightPad("null/empty items", 1383, "Threshold must not be negative");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.reverse((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.stripEnd("I|d2m", "");
      assertNotNull(string4);
      assertEquals("I|d2m", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.join((Integer[]) null);
      assertNull(string5);
      
      String string6 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.removeStartIgnoreCase("null/empty items", "o#5_&V<i,#y");
      assertNotNull(string7);
      assertEquals("null/empty items", string7);
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "I|d2m", 50);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      String string0 = StringUtils.defaultString("o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNotNull(string0);
      assertEquals("o#5_&V<i,#y", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("o#5_&V<i,#y", "o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNull(stringArray0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(locale0));
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(locale0));
      
      Stream<Locale> stream0 = linkedList1.parallelStream();
      assertNotSame(linkedList1, linkedList0);
      assertNotNull(stream0);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(locale0));
      
      Stack<Locale.LanguageRange> stack1 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack1);
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.equals((Object)stack0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      assertNotSame(stack0, stack1);
      assertNotSame(linkedList1, linkedList0);
      assertNotNull(list0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(stack0.equals((Object)stack1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) stack1, (Collection<Locale>) linkedList0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(stack1, stack0);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(list1.equals((Object)list0));
      assertFalse(linkedList0.contains(locale0));
      assertFalse(list1.contains(locale0));
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) list1, locale_FilteringMode1);
      assertNotSame(stack0, stack1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(stack1, stack0);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotNull(list2);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, linkedList0.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(stack0.equals((Object)stack1));
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(list1.equals((Object)list0));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertFalse(linkedList0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(list2.contains(locale0));
      
      String string1 = locale0.getDisplayLanguage();
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.lowerCase("o#5_&V<i,#y", locale0);
      assertNotNull(string2);
      assertEquals("o#5_&v<i,#y", string2);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isNumericSpace("o#5_&v<i,#y");
      assertFalse(boolean0);
      
      String string3 = StringUtils.prependIfMissing(",6CA\"JeG>Cloneable type ", "", (CharSequence[]) null);
      assertNotNull(string3);
      assertEquals(",6CA\"JeG>Cloneable type ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      String string0 = StringUtils.getDigits("...");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "...";
      String string1 = StringUtils.prependIfMissing("B%MsIAF9n", charSequenceArray0[0], charSequenceArray0);
      assertNotNull(string1);
      assertEquals("B%MsIAF9n", string1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWith("B%MsIAF9n", charSequenceArray0[0]);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0);
      assertNotNull(string2);
      assertEquals("...", string2);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isAllUpperCase("B%MsIAF9n");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("K!k,a:}{c", "/VgV=gK'*repFMl(d5g", 2939);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAny("K!k,a:}{c", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.lowerCase("3-");
      assertNotNull(string0);
      assertEquals("3-", string0);
      
      String string1 = "#g6G*\\u0";
      String string2 = StringUtils.substringBefore(string1, 2939);
      assertNotNull(string2);
      assertEquals("#g6G*\\u0", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.wrapIfMissing(string2, "/VgV=gK'*repFMl(d5g");
      assertNotNull(string3);
      assertEquals("/VgV=gK'*repFMl(d5g#g6G*\\u0/VgV=gK'*repFMl(d5g", string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      char char0 = '&';
      String string4 = StringUtils.replaceChars("K!k,a:}{c", '&', 'w');
      assertNotNull(string4);
      assertEquals("K!k,a:}{c", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.chop("Locale must not be null");
      assertNotNull(string5);
      assertEquals("Locale must not be nul", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      int int0 = StringUtils.length("Locale must not be null");
      assertEquals(23, int0);
      
      boolean boolean1 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("K!k,a:}{c", stringArray0);
      assertTrue(boolean2);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string6 = StringUtils.repeat("Locale must not be nul", 8192);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string7);
      assertEquals("K!k,a:}{c", string7);
      assertEquals(1, stringArray0.length);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      
      String string8 = StringUtils.abbreviate("Locale must not be nul", "K!k,a:}{c", 702);
      assertNotNull(string8);
      assertEquals("Locale must not be nul", string8);
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      
      try { 
        StringUtils.getBytes("3-", "K!k,a:}{c");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      String string0 = "%";
      String string1 = StringUtils.wrap("%", "");
      assertNotNull(string1);
      assertEquals("%", string1);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      int int0 = StringUtils.lastIndexOf((CharSequence) "%", (-1), 1351);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.swapCase((String) null);
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween("@RY>e.Bm/$l?*yh", "@RY>e.Bm/$l?*yh", (String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "}=5n4H", (CharSequence) "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = 1;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '\\', (-2928), (int) (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2928
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceIgnoreCase("", "", ">M!5pj?y3tT;\"+gXR");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string3 = StringUtils.replaceEachRepeatedly(" in an array of ", stringArray0, stringArray0);
      assertNotNull(string3);
      assertEquals(" in an array of ", string3);
      assertEquals(3, stringArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.substringAfterLast((String) null, 108);
      assertNull(string4);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", 6, 887);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      String string0 = StringUtils.repeat('?', 31);
      assertNotNull(string0);
      assertEquals("???????????????????????????????", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("???????????????????????????????");
      assertNotNull(intArray0);
      assertEquals(31, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      String string1 = StringUtils.join(charArray0, ',');
      assertNotNull(string1);
      assertEquals("?,\u0000", string1);
      assertArrayEquals(new char[] {'?', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "???????????????????????????????");
      assertFalse(boolean0);
      
      Locale locale0 = new Locale("^7So#AR)U`4Kg!+0", "");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("^7so#ar)u`4kg!+0", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("^7so#ar)u`4kg!+0", locale0.toString());
      
      String string2 = locale0.getDisplayName();
      assertNotNull(string2);
      assertEquals("^7so#ar)u`4kg!+0", string2);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("^7so#ar)u`4kg!+0", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("^7so#ar)u`4kg!+0", locale0.toString());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = locale0.getDisplayScript();
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("^7so#ar)u`4kg!+0", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("^7so#ar)u`4kg!+0", locale0.toString());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.upperCase("^7So#AR)U`4Kg!+0", locale0);
      assertNotNull(string4);
      assertEquals("^7SO#AR)U`4KG!+0", string4);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("^7so#ar)u`4kg!+0", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("^7so#ar)u`4kg!+0", locale0.toString());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.leftPad("", 4, "");
      assertNotNull(string5);
      assertEquals("    ", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("    ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsWhitespace("^7So#AR)U`4Kg!+0");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string6 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      String string0 = StringUtils.join(intArray0, '*', (-1807), (-3084));
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new int[] {5}, intArray0);
      assertEquals(1, intArray0.length);
      
      String string1 = StringUtils.join((byte[]) null, '*', 5, 16);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-3148), 10);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.swapCase("6uOrp8Hb&&my-S;#'");
      assertNotNull(string1);
      assertEquals("6UoRP8hB&&MY-s;#'", string1);
      assertFalse(string1.equals((Object)string0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 10;
      floatArray0[1] = (float) (-3148);
      floatArray0[2] = (float) (-3148);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 10;
      floatArray0[5] = (float) (-1);
      String string2 = StringUtils.join(intArray0, 'b');
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripEnd("org.apache.commons.lang3.LocaleUtils", "Lp4Gh,#$");
      assertNotNull(string3);
      assertEquals("org.apache.commons.lang3.LocaleUtils", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.LocaleUtils";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.LocaleUtils";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "6UoRP8hB&&MY-s;#'";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("org.apache.commons.lang3.LocaleUtils", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("org.apache.commons.lang3.LocaleUtils");
      assertNotNull(stringArray0);
      assertEquals(13, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[4], (CharSequence) "", (-3148));
      assertEquals((-1), int1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches(charSequenceArray0[2], 'I');
      assertEquals(0, int2);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string4 = StringUtils.replacePattern(" vs +^iy.BY9LR", "S", "9%o3Elfa5MNrsekS3M");
      assertNotNull(string4);
      assertEquals(" vs +^iy.BY9LR", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.substringBetween("S", (String) null, "");
      assertNull(string5);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(10));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(10));
      
      String string6 = StringUtils.join(iterator0, 'b');
      assertNotNull(string6);
      assertEquals("", string6);
      assertEquals(0, linkedList0.size());
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(linkedList0.contains(10));
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing(" vs ", "+^iy.BY9LR");
      assertNotNull(string0);
      assertEquals("+^iy.BY9LR vs +^iy.BY9LR", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("+^iy.BY9LR vs +^iy.BY9LR");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[7];
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "+^iy.BY9LR", (CharSequence) " vs ");
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      String string1 = StringUtils.join(intArray0, 'J');
      assertNotNull(string1);
      assertEquals("-1", string1);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripEnd(" vs ", "Array and element cannot both be null");
      assertNotNull(string2);
      assertEquals(" vs", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase(" vs ", stringArray0);
      assertFalse(boolean1);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.substringsBetween(" vs ", "-1", "+^iy.BY9LR vs +^iy.BY9LR");
      assertNull(stringArray1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Array and element cannot both be null", (CharSequence) "Array and element cannot both be null", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) " vs +^iy.BY9LR", 'J');
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string3 = StringUtils.replacePattern((String) null, "+^iy.BY9LR", " vs");
      assertNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle(",6CA\"JeG>", "-1", 5407);
      assertNotNull(string4);
      assertEquals(",6CA\"JeG>", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.mid("Strings must not be null", (-1), 0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      String string0 = StringUtils.defaultString("o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNotNull(string0);
      assertEquals("o#5_&V<i,#y", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("o#5_&V<i,#y", '{');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.rightPad("o#5_&V<i,#y", (int) '{', '5');
      assertNotNull(string1);
      assertEquals("o#5_&V<i,#y5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "o#5_&V<i,#y", (CharSequence) "o#5_&V<i,#y");
      assertEquals(0, int0);
      
      String string2 = StringUtils.substringBeforeLast("o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.leftPad("o#5_&V<i,#y", 0, "");
      assertNotNull(string3);
      assertEquals("o#5_&V<i,#y", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.appendIfMissing("o#5_&V<i,#y", " ", stringArray0);
      assertNotNull(string4);
      assertEquals("o#5_&V<i,#y", string4);
      assertEquals(1, stringArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertEquals(1, stringArray0.length);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("o#5_&V<i,#y");
      assertFalse(boolean0);
      
      String string5 = StringUtils.left("o#5_&V<i,#y", 0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      int int2 = StringUtils.indexOfAny((CharSequence) "", "\r");
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      String string6 = StringUtils.unwrap("', ", 'H');
      assertNotNull(string6);
      assertEquals("', ", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      String string0 = StringUtils.getDigits("...");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "...";
      String[] stringArray0 = StringUtils.substringsBetween("Z`M@c", "a=JF_&\"", "0AISIO?J/R");
      assertNull(stringArray0);
      
      String string1 = StringUtils.wrap("o%(P]/|$6|gi]", "o%(P]/|$6|gi]");
      assertNotNull(string1);
      assertEquals("o%(P]/|$6|gi]o%(P]/|$6|gi]o%(P]/|$6|gi]", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.capitalize("i1Yf8nw");
      assertNotNull(string2);
      assertEquals("I1Yf8nw", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "Z`M@c");
      assertNotNull(string3);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.chop("");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      
      String string5 = StringUtils.stripStart("Z`M@c...Z`M@cZ`M@c", "uGwx ?El62;=^K");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.substringBeforeLast("*k*k", "3-3-3-3-3-3-3-3-3-3");
      assertNotNull(string6);
      assertEquals("*k*k", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      
      boolean boolean0 = StringUtils.isAlphanumeric("I1Yf8nw");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsAny("*k*k", (CharSequence[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.split((String) null);
      assertNull(stringArray1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("*k*k", (-936));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      String string0 = StringUtils.chop("h_++dt=:Khv");
      assertNotNull(string0);
      assertEquals("h_++dt=:Kh", string0);
      
      String string1 = StringUtils.stripStart("', is neither of type Map.Entry nor an Array", "', is neither of type Map.Entry nor an Array");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBeforeLast("h_++dt=:Khv", "");
      assertNotNull(string2);
      assertEquals("h_++dt=:Khv", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumeric("h_++dt=:Khv");
      assertFalse(boolean0);
      
      String string3 = StringUtils.lowerCase("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.leftPad("", (-5594), 'y');
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.equalsAny("", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      String string0 = StringUtils.strip((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.replace((String) null, "myWH:a_JY", (String) null, 0);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) null;
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null, false);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string2 = StringUtils.join((List<?>) linkedList0, "J%z%|\"", 0, 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2380.0F);
      String string0 = StringUtils.replace("-RG],ksOkbZi6TI", (String) null, "t");
      assertNotNull(string0);
      assertEquals("-RG],ksOkbZi6TI", string0);
      
      String string1 = StringUtils.reverse((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.truncate("o+}ja$dr6'Xju4}2", 750);
      assertNotNull(string2);
      assertEquals("o+}ja$dr6'Xju4}2", string2);
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "t", "uW3V?U]q6`qw");
      assertFalse(boolean0);
      
      String string3 = StringUtils.wrapIfMissing("K*yRH,4Eprl>", '!');
      assertNotNull(string3);
      assertEquals("!K*yRH,4Eprl>!", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAllUpperCase("uW3V?U]q6`qw");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.substringAfter("o+}ja$dr6'Xju4}2", "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.substring((String) null, 6);
      assertNull(string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "-RG],ksOkbZi6TI", (CharSequence) "t", 149);
      assertEquals(13, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "t", (CharSequence) "o+}ja$dr6'Xju4}2", (-2128));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 8192, "");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith(string0, "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substring("", 8192);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.joinWith(string0, stringArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string3);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.rightPad("", 8192, "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      
      String string5 = StringUtils.reverse("");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      
      String string6 = StringUtils.stripEnd(string0, "b[.)LT%.:{|FbaBBd)");
      assertNotNull(string6);
      assertFalse(string0.equals((Object)string5));
      assertTrue(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.difference("", "b[.)LT%.:{|FbaBBd)");
      assertNotNull(string7);
      assertEquals("b[.)LT%.:{|FbaBBd)", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      String string0 = StringUtils.unwrap("hAK^5W&rvx", 'v');
      assertNotNull(string0);
      assertEquals("hAK^5W&rvx", string0);
      
      String string1 = StringUtils.right("5P.ih|E", 2883);
      assertNotNull(string1);
      assertEquals("5P.ih|E", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("*k*k", "...");
      assertNotNull(string0);
      assertEquals("*k*k", string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "*k*k", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'i', (-1), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.CharUtils";
      String string1 = "#Ln";
      int int0 = 0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 'R';
      floatArray0[3] = (float) 'R';
      String string2 = StringUtils.join(floatArray0, '\'', 0, 4);
      assertNotNull(string2);
      assertEquals("0.0'0.0'82.0'82.0", string2);
      assertArrayEquals(new float[] {0.0F, 0.0F, 82.0F, 82.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-4527);
      longArray0[1] = (long) (-4527);
      longArray0[2] = (long) (-4527);
      longArray0[3] = (long) (-4527);
      longArray0[4] = (long) 2593;
      longArray0[5] = (long) 4;
      longArray0[6] = (long) '~';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '~', (-4527), 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4527
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      String string0 = StringUtils.defaultString("o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNotNull(string0);
      assertEquals("o#5_&V<i,#y", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("o#5_&V<i,#y", "o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = '5';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "o#5_&V<i,#y", charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'{', '5'}, charArray0);
      assertEquals(2, charArray0.length);
      
      String string1 = StringUtils.substring("Sr_d(zDi", (-860));
      assertNotNull(string1);
      assertEquals("Sr_d(zDi", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("\"v.aG1F{", "o#5_&V<i,#y");
      assertNotNull(string2);
      assertEquals("\"v.aG1F{", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\"v.aG1F{", (CharSequence) "\"v.aG1F{", 77);
      assertEquals(0, int0);
      
      String string3 = StringUtils.replacePattern(" ", "org.apache.commons.lang3.ObjectUtils$Nullymz}I.riv\"!\u0001G79q9", "EEo=$0hH(yNp^SW0");
      assertNotNull(string3);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) "EEo=$0hH(yNp^SW0", 77);
      assertEquals(16, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.truncate("an`6)*73.gaYbkS*_=", 76);
      assertNotNull(string0);
      assertEquals("an`6)*73.gaYbkS*_=", string0);
      
      String string1 = StringUtils.repeat("an`6)*73.gaYbkS*_=", (-1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      boolean boolean1 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.repeat("", 17);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = StringUtils.startsWithAny("=", charSequenceArray0);
      assertFalse(boolean2);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray0 = StringUtils.substringsBetween("2[", (String) null, "!}\"A,vt'U");
      assertNull(stringArray0);
      
      boolean boolean3 = StringUtils.equalsAny("Threshold must not be negative", (CharSequence[]) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = StringUtils.contains((CharSequence) null, (CharSequence) "ld7mZux9.E2=J24>,");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.join((Object[]) null, 'V');
      assertNull(string0);
      
      String string1 = StringUtils.join((Iterator<?>) null, "Exception cloning Cloneable type ");
      assertNull(string1);
      
      String string2 = StringUtils.stripEnd("e ", "G");
      assertNotNull(string2);
      assertEquals("e ", string2);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("l)8h", "r\"q&VY77asF9TM<");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      String string0 = StringUtils.replaceChars("e ", 'V', 'E');
      assertNotNull(string0);
      assertEquals("e ", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("e ", "e ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "e ", (CharSequence) "e ", 322);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("e ", "e ", 322);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.getDigits("e ");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBetween("", (String) null);
      assertNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "e ");
      assertNull(stringArray1);
      
      String string3 = StringUtils.join((Object[]) null, 'U');
      assertNull(string3);
      
      String string4 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string4);
      
      byte[] byteArray0 = StringUtils.getBytes("Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null);
      assertNotNull(byteArray0);
      assertEquals(91, byteArray0.length);
      
      String string5 = StringUtils.join((Object[]) stringArray0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(2, stringArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      
      String string6 = StringUtils.substring("Aborting to protect against StackOverflowError - output of one loop is the input of another", 14);
      assertNotNull(string6);
      assertEquals("otect against StackOverflowError - output of one loop is the input of another", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      
      int int2 = StringUtils.ordinalIndexOf("e ", "", 10);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string7 = StringUtils.removeEnd((String) null, (String) null);
      assertNull(string7);
      
      String[] stringArray2 = StringUtils.split("otect against StackOverflowError - output of one loop is the input of another");
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertEquals(13, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String string8 = StringUtils.abbreviate("q73HI", 9);
      assertNotNull(string8);
      assertEquals("q73HI", string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      
      String[] stringArray3 = StringUtils.substringsBetween("u5v!", "q73HI", "comparator");
      assertNull(stringArray3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "comparator", (CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray4 = StringUtils.stripAll((String[]) null, "SzKd");
      assertNull(stringArray4);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string9 = StringUtils.chomp("u5v!");
      assertNotNull(string9);
      assertEquals("u5v!", string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      
      String string10 = StringUtils.mid("Cannot store ", (-888), (-1));
      assertNotNull(string10);
      assertEquals("", string10);
      assertTrue(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      String string0 = StringUtils.join(byteArray0, '/', 76, 76);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {(byte)76}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 76);
      assertEquals(0, int0);
      
      String string1 = StringUtils.rotate("", (-928));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) (byte)76;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '/', (-928), 1485);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -928
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      String string0 = StringUtils.defaultString("o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNotNull(string0);
      assertEquals("o#5_&V<i,#y", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("o#5_&V<i,#y", '{');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.rightPad("o#5_&V<i,#y", (int) '{', '4');
      assertNotNull(string1);
      assertEquals("o#5_&V<i,#y4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "o#5_&V<i,#y", (CharSequence) "o#5_&V<i,#y");
      assertEquals(0, int0);
      
      String string2 = StringUtils.substringBeforeLast("o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.substringsBetween("o#5_&V<i,#y", "o#5_&V<i,#y", "14@*!Y.rz7uO%");
      assertNull(stringArray1);
      
      String string3 = StringUtils.wrap("o#5_&V<i,#y", "");
      assertNotNull(string3);
      assertEquals("o#5_&V<i,#y", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.capitalize("14@*!Y.rz7uO%");
      assertNotNull(string4);
      assertEquals("14@*!Y.rz7uO%", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.join((Object[]) stringArray0, "14@*!Y.rz7uO%");
      assertNotNull(string5);
      assertEquals("o#5_&V<i,#y", string5);
      assertEquals(1, stringArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "o#5_&V<i,#y";
      charSequenceArray0[1] = (CharSequence) "o#5_&V<i,#y";
      String string6 = StringUtils.chop("o#5_&V<i,#y");
      assertNotNull(string6);
      assertEquals("o#5_&V<i,#", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.stripStart("org.apache.commons.lang3.ObjectUtils$Nullymz}I.riv\"!\u0001G79q9", "org.apache.commons.lang3.ObjectUtils$Nullymz}I.riv\"!\u0001G79q9");
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      
      String string8 = StringUtils.substringBeforeLast("", (String) null);
      assertNotNull(string8);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsAny("o#5_&V<i,#y", stringArray0);
      assertTrue(boolean1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string9 = StringUtils.replaceFirst("o#5_&V<i,#y4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", "p9lUWO\"LSD@2i", "+^iy.BY9LR vs ");
      assertNotNull(string9);
      assertEquals("o#5_&V<i,#y4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", string9);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      
      String string10 = StringUtils.rotate("", 2646);
      assertNotNull(string10);
      assertEquals("", string10);
      assertTrue(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertTrue(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertTrue(string10.equals((Object)string8));
      
      boolean boolean2 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      String string0 = StringUtils.leftPad("Minimum abbreviation width with offset is %d", 2, '2');
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      
      String string1 = StringUtils.wrapIfMissing("Minimum abbreviation width with offset is %d", "n*m))tQSE");
      assertNotNull(string1);
      assertEquals("n*m))tQSEMinimum abbreviation width with offset is %dn*m))tQSE", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceAll("Minimum abbreviation width with offset is %d", "N<QN&FxQu_M45/y4T|O8p/", (String) null);
      assertNotNull(string2);
      assertEquals("Minimum abbreviation width with offset is %d", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Minimum abbreviation width with offset is %d", (char[]) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.leftPad("n*m))tQSE", 10, '2');
      assertNotNull(string3);
      assertEquals("2n*m))tQSE", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.center("Threshold must not be negative", 10, '*');
      assertNotNull(string4);
      assertEquals("Threshold must not be negative", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      int int0 = StringUtils.indexOf((CharSequence) "Threshold must not be negative", 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      String string0 = StringUtils.getDigits("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad(" is %d", (-1), "t4R$R2R");
      assertNotNull(string1);
      assertEquals(" is %d", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "t4R$R2R", (CharSequence) "Q))V!R1H(e#iNu:30r");
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) " is %d";
      charSequenceArray0[2] = (CharSequence) "Q))V!R1H(e#iNu:30r";
      String string2 = StringUtils.rotate((String) null, (-1));
      assertNull(string2);
      
      charSequenceArray0[3] = (CharSequence) null;
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Q))V!R1H(e#iNu:30r", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      String string0 = StringUtils.replaceChars("Strings must not be null", "Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "Strings must not be null", (-778));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("n*m))tQSEMinimum abbreviation width with offset is %d");
      assertNotNull(stringArray0);
      assertEquals(20, stringArray0.length);
      
      String string1 = StringUtils.chop("Strings must not be null");
      assertNotNull(string1);
      assertEquals("Strings must not be nul", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[0] = '5';
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'5', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase((String) null, "+^iy.BY9LR vs ", (String) null);
      assertNull(string0);
      
      int int0 = (-1829);
      int int1 = StringUtils.ordinalIndexOf((CharSequence) null, "+^iy.BY9LR vs ", (-1829));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = 1002;
      String string1 = StringUtils.rotate((String) null, 1002);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "+^iy.BY9LR vs ");
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBetween((String) null, "+^iy.BY9LR vs ");
      assertNull(string2);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[8];
      char[] charArray0 = new char[3];
      charArray0[0] = '<';
      charArray0[1] = '/';
      charArray0[2] = 'm';
      int int3 = 108;
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 108, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      String string0 = StringUtils.replace("org.apache.commons.lang3.CharUtils", "#Ln", "#Ln", (-1994));
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.CharUtils", string0);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.CharUtils", (CharSequence) null, (-1994));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.CharUtils", (CharSequence) "#Ln");
      assertEquals(33, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.strip("org.apache.commons.lang3.CharUtils");
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.CharUtils", string2);
      assertTrue(string2.equals((Object)string0));
      
      int int2 = StringUtils.length("#Ln");
      assertEquals(3, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      try { 
        StringUtils.getBytes("ymz}I.riv\"!\u0001G79q9", "org.apache.commons.lang3.CharUtils");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.normalizeSpace("9Dc@!.%?KZv~4=b");
      assertNotNull(string1);
      assertEquals("9Dc@!.%?KZv~4=b", string1);
      
      charSequenceArray0[1] = (CharSequence) "9Dc@!.%?KZv~4=b";
      String[] stringArray0 = StringUtils.substringsBetween("9Dc@!.%?KZv~4=b", " vs ", "9Dc@!.%?KZv~4=b");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" vs ", "\"v.aG1F{", 1115);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String string2 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultString("(Yb ar#h 6[lu");
      assertNotNull(string1);
      assertEquals("(Yb ar#h 6[lu", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "(Yb ar#h 6[lu", (CharSequence) "", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      String string0 = StringUtils.getDigits("...");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "...";
      char[] charArray0 = new char[6];
      charArray0[0] = 'k';
      charArray0[1] = '2';
      charArray0[2] = 'i';
      charArray0[3] = 'd';
      charArray0[4] = 'e';
      charArray0[5] = 'd';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'k', '2', 'i', 'd', 'e', 'd'}, charArray0);
      assertEquals(6, charArray0.length);
      
      String string1 = StringUtils.removeEnd("", " -F?LI3uAzw");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.center((String) null, 0, 'k');
      assertNull(string2);
      
      String string3 = StringUtils.joinWith("Strings must not be null", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("Strings must not be null...Strings must not be nullStrings must not be null", string3);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("", "Strings must not be null", "...");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      
      CharBuffer[] charBufferArray0 = new CharBuffer[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(6, charBuffer0.length());
      assertEquals("k2ided", charBuffer0.toString());
      assertEquals(6, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(6, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertArrayEquals(new char[] {'k', '2', 'i', 'd', 'e', 'd'}, charArray0);
      assertEquals(6, charArray0.length);
      
      charBufferArray0[0] = charBuffer0;
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-404));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.leftPad(" ", 9, " ");
      assertNotNull(string0);
      assertEquals("         ", string0);
      
      String string1 = StringUtils.appendIfMissing("         ", " ", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("         ", string1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToEmpty("         ");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.appendIfMissing("\r", "", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("\r", string3);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      String string0 = StringUtils.difference("'4r-*!BdYpyYY?@mk", "'4r-*!BdYpyYY?@mk");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("sp=-s", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.mid("", 160, 160);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, '1');
      assertNotNull(string0);
      assertEquals("1111111111", string0);
      assertEquals(11, charSequenceArray0.length);
      
      String string1 = StringUtils.substringAfter("*hPk*hPk", "*hPk*hPk");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = '7';
      charArray0[2] = '>';
      charArray0[3] = '1';
      charArray0[4] = '1';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "1111111111", charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'1', '7', '>', '1', '1'}, charArray0);
      assertEquals(5, charArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("h=8*2,L^*");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      String string2 = StringUtils.rightPad("h=8*2,L^*", 147, '@');
      assertNotNull(string2);
      assertEquals("h=8*2,L^*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "h=8*2,L^*", "G{at8*#n=LtSOgA-XdL");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      String string1 = StringUtils.center("T&", 4, "T&");
      assertNotNull(string1);
      assertEquals("TT&T", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "TT&T", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      String string2 = StringUtils.substringAfter("uGwx ?El62;=^K", "");
      assertNotNull(string2);
      assertEquals("uGwx ?El62;=^K", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      
      Locale locale1 = Locale.forLanguageTag("uGwx ?El62;=^K");
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = locale0.getDisplayScript();
      assertNotSame(locale0, locale1);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = locale1.getDisplayName();
      assertNotSame(locale1, locale0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = locale1.getDisplayVariant(locale0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      Locale locale2 = Locale.GERMANY;
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotNull(locale2);
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("de", locale2.getLanguage());
      assertEquals("DEU", locale2.getISO3Country());
      assertEquals("de_DE", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("DE", locale2.getCountry());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      
      Set<Character> set0 = locale2.getExtensionKeys();
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotNull(set0);
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("de", locale2.getLanguage());
      assertEquals("DEU", locale2.getISO3Country());
      assertEquals("de_DE", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("DE", locale2.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      
      String string6 = locale2.getDisplayVariant();
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotNull(string6);
      assertEquals("", string6);
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("de", locale2.getLanguage());
      assertEquals("DEU", locale2.getISO3Country());
      assertEquals("de_DE", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("DE", locale2.getCountry());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      
      int int0 = StringUtils.getFuzzyDistance("TT&T", "uGwx ?El62;=^K", locale1);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertEquals(0, int0);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      
      char char0 = 'r';
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'r', 0, 291);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      String string0 = StringUtils.join(floatArray0, '5', (-2017), (-2017));
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      String string1 = StringUtils.difference("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      String string2 = StringUtils.substringBetween("", "", "Q-~mXT\tTN#89,oQ-~mXT\tTN#89,o");
      assertNull(string2);
      
      String string3 = StringUtils.removePattern(",6CA\"JeG>Cloneable type ", "");
      assertNotNull(string3);
      assertEquals(",6CA\"JeG>Cloneable type ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = ",6CA\"JeG>Cloneable type ";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "-1";
      stringArray0[5] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[6] = string2;
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string4);
      assertEquals(",6CA\"JeG>Cloneable type ", string4);
      assertEquals(7, stringArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("35h'wc}CRk]y1]v/^@#", supplier0);
      assertNotNull(string5);
      assertEquals("35h'wc}CRk]y1]v/^@#", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.deleteWhitespace(" is not in the range '0' - '9'");
      assertNotNull(string6);
      assertEquals("isnotintherange'0'-'9'", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      assertNotNull(treeSet0);
      
      String string0 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.rightPad((String) null, 147, '1');
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "DR");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.toRootLowerCase((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.substringBetween((String) null, (String) null, (String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      TreeSet<Locale> treeSet0 = new TreeSet<Locale>();
      assertNotNull(treeSet0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) treeSet0, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("q)gIKFU]:Gq)gIKFU]:G", "d{]xY5CY", "d{]xY5CY");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 0
         // d{]xY5CY
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Q-~mXT\tTN#89,o", "Q-~mXT\tTN#89,o");
      assertNotNull(string0);
      assertEquals("Q-~mXT\tTN#89,o", string0);
      
      String string1 = StringUtils.difference("The Array must not be null", "The Array must not be null");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Q-~mXT\tTN#89,o";
      charSequenceArray0[2] = (CharSequence) "Q-~mXT\tTN#89,o";
      charSequenceArray0[3] = (CharSequence) "Locale must not be null";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("The Array must not be null", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string2 = StringUtils.deleteWhitespace("Q-~mXT\tTN#89,o");
      assertNotNull(string2);
      assertEquals("Q-~mXTTN#89,o", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeEndIgnoreCase("Comparator should not be null.", "Comparator should not be null.");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-620);
      shortArray0[1] = (short)160;
      shortArray0[2] = (short)160;
      shortArray0[3] = (short)160;
      shortArray0[4] = (short)160;
      shortArray0[5] = (short) (-1288);
      shortArray0[6] = (short) (-1288);
      shortArray0[7] = (short)160;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '[', (int) (short)160, 32767);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 160
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", "", (-128), (-128));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate("", "", (-2386), (-128));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.swapCase("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      Stack<Locale.LanguageRange> stack1 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack1);
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.equals((Object)stack0));
      
      String string1 = StringUtils.substring(" ", 2722);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null, 2722);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) " ", (-1));
      assertFalse(boolean0);
      
      String string2 = StringUtils.uncapitalize("\"_Br");
      assertNotNull(string2);
      assertEquals("\"_Br", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.LF;
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      String string2 = StringUtils.replaceIgnoreCase((String) null, "\n", (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.chomp((String) null);
      assertNull(string3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'%', '%', '%'}, charArray0);
      assertEquals(3, charArray0.length);
      
      String string4 = StringUtils.substring("maxWith cannot be negative", (-1538));
      assertNotNull(string4);
      assertEquals("maxWith cannot be negative", string4);
      assertFalse(string4.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "maxWith cannot be negative", (CharSequence) null, (-1271));
      assertEquals((-1), int0);
      
      String string5 = StringUtils.abbreviateMiddle("\n", "maxWith cannot be negative", (-1271));
      assertNotNull(string5);
      assertEquals("\n", string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "maxWith cannot be negative";
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-34);
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)5;
      shortArray0[3] = (short)1357;
      shortArray0[4] = (short)1064;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '%', (int) (short) (-34), (int) (short)3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -34
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) " vs ";
      charSequenceArray0[1] = (CharSequence) " vs ";
      charSequenceArray0[2] = (CharSequence) " vs ";
      String string0 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeAll((String) null, " vs ");
      assertNull(string1);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank(charSequenceArray0[1], supplier0);
      assertNotNull(charSequence0);
      assertEquals(" vs ", charSequence0);
      assertEquals(3, charSequenceArray0.length);
      
      String string2 = StringUtils.LF;
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)charSequence0));
      
      String string3 = StringUtils.removeAll((String) null, "Search and Replace array lengths don't match: ");
      assertNull(string3);
      
      String string4 = StringUtils.substringAfter((String) null, 4568);
      assertNull(string4);
      
      String string5 = StringUtils.capitalize("Search and Replace array lengths don't match: ");
      assertNotNull(string5);
      assertEquals("Search and Replace array lengths don't match: ", string5);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(string2));
      
      // Undeclared exception!
      try { 
        arrayDeque0.add((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      String string0 = StringUtils.replaceChars("Strings must not be null", "toTquVatc8 zWjm", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("SSringssonsSsntSsbesnnll", string0);
      
      String string1 = StringUtils.upperCase("toTquVatc8 zWjm");
      assertNotNull(string1);
      assertEquals("TOTQUVATC8 ZWJM", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "Strings must not be null", (-778));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "SSringssonsSsntSsbesnnll", (CharSequence) "%]J+7g[Sb \"vYa)q/;z");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.substringBefore("u", " vs ");
      assertNotNull(string2);
      assertEquals("u", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlpha("u");
      assertTrue(boolean0);
      
      String string3 = StringUtils.substringAfter("Minimum abbreviation width is %d", 24);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) " vs ";
      charSequenceArray0[1] = (CharSequence) "u";
      boolean boolean1 = StringUtils.equalsAny("Minimum abbreviation width is %d", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean2);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string4 = StringUtils.repeat("x", 24);
      assertNotNull(string4);
      assertEquals("xxxxxxxxxxxxxxxxxxxxxxxx", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, 9);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) " ", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substring("&Gh`", 9);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 9);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join((List<?>) linkedList0, '>', 2445, 2445);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(2445));
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substring("+phQ", 83, 83);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "", 'U');
      assertEquals(0, int0);
      
      String string2 = StringUtils.stripAccents("Index: ");
      assertNotNull(string2);
      assertEquals("Index: ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.capitalize("+phQ");
      assertNotNull(string3);
      assertEquals("+phQ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.leftPad("Index: ", (-510), "+phQ");
      assertNotNull(string4);
      assertEquals("Index: ", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("Index: ", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)2669;
      shortArray0[2] = (short)25;
      shortArray0[3] = (short)17;
      shortArray0[4] = (short)128;
      String string5 = StringUtils.join(shortArray0, 'U');
      assertNotNull(string5);
      assertEquals("-1U2669U25U17U128", string5);
      assertArrayEquals(new short[] {(short) (-1), (short)2669, (short)25, (short)17, (short)128}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      String string0 = StringUtils.rightPad("IkycAb_a70Q)1rkG8a", 68);
      assertNotNull(string0);
      assertEquals("IkycAb_a70Q)1rkG8a                                                  ", string0);
      
      String string1 = StringUtils.left((String) null, 68);
      assertNull(string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("vdq!I'z)mM~", "IkycAb_a70Q)1rkG8a                                                  ", "Threshold must not be negative");
      assertNotNull(string2);
      assertEquals("vdq!I'z)mM~", string2);
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\"v.aG1F{");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.replaceChars("ymz}I.riv\"!\u0001G79q9", '-', '-');
      assertNotNull(string3);
      assertEquals("ymz}I.riv\"!\u0001G79q9", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.removePattern("H|1acrN~{sC]v=HN/YM", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string4);
      assertEquals("H|1acrN~{sC]v=HN/YM", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)60;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      String string5 = StringUtils.toEncodedString(byteArray0, charset0);
      assertNotNull(string5);
      assertEquals("\u0010\uFFFD.4\f5<", string5);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertArrayEquals(new byte[] {(byte)16, (byte) (-9), (byte)46, (byte)52, (byte)12, (byte)53, (byte)60}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'u');
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("gLiOD,PZ>\n", ' ');
      assertNotNull(string0);
      assertEquals(" gLiOD,PZ>\n ", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("gLiOD,PZ>\n", "gLiOD,PZ>\n");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      assertNotNull(treeSet0);
      
      String string0 = StringUtils.join((Iterable<?>) treeSet0, (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(treeSet0.contains(string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) null;
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = null;
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.replace("t", "oTquVatc8 zWjm", "t");
      assertNotNull(string0);
      assertEquals("t", string0);
      
      String string1 = StringUtils.overlay("oTquVatc8 zWjm", "t", (-1), (-1));
      assertNotNull(string1);
      assertEquals("toTquVatc8 zWjm", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlphaSpace("t");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      String string0 = StringUtils.removeEnd("'IGRMzjd`{", "J%z%|\"");
      assertNotNull(string0);
      assertEquals("'IGRMzjd`{", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "'IGRMzjd`{", (CharSequence) "J%z%|\"");
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = StringUtils.joinWith("Aborting to protect against StackOverflowError - output of one loop is the input of another", objectArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllUpperCase("'IGRMzjd`{");
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "'IGRMzjd`{", 27);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = "aJ;_#\\u!!y+tx,w7c+}=5n4H";
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "'IGRMzjd`{";
      String string3 = StringUtils.appendIfMissingIgnoreCase(string2, "'IGRMzjd`{", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("aJ;_#\\u!!y+tx,w7c+}=5n4H'IGRMzjd`{", string3);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.containsIgnoreCase((CharSequence) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int2 = StringUtils.compareIgnoreCase("7N[{VT'", "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertEquals((-60), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      String string4 = StringUtils.valueOf(charArray0);
      assertNotNull(string4);
      assertEquals("q", string4);
      assertArrayEquals(new char[] {'q'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.unwrap(string2, "LW{PU");
      assertNotNull(string5);
      assertEquals("aJ;_#\\u!!y+tx,w7c+}=5n4H", string5);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.truncate("", 1413);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null, (Locale) null);
      assertNull(string0);
      
      String string1 = StringUtils.center((String) null, 352, "Object varargs must not be null'IGRMzjd`{J%z%|\"");
      assertNull(string1);
      
      String string2 = StringUtils.replaceOnce((String) null, (String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("AtG1447@M0h-a", (String) null);
      assertNotNull(string3);
      assertEquals("AtG1447@M0h-a", string3);
      
      String string4 = StringUtils.substringBetween("org.apache.commons.lang3.CharSequenceUtils", (String) null);
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.chop("u67Y-q/u");
      assertNotNull(string5);
      assertEquals("u67Y-q/", string5);
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.leftPad("u67Y-q/", 16);
      assertNotNull(string6);
      assertEquals("         u67Y-q/", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(string3));
      
      ArrayList<String> arrayList0 = new ArrayList<String>(vector0);
      assertNotNull(arrayList0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(vector0.contains(string3));
      assertFalse(arrayList0.contains(string3));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, "eyEn %SLFCD .2[xkS", (-1734), 72);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1734
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      String string0 = StringUtils.substring("", 31);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substring("", 3749);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 3749);
      assertEquals(0, int0);
      
      String string2 = StringUtils.trimToEmpty("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("ejhlm{fM", "+x~/X@TzkAHL]O", 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.removeIgnoreCase("", "G59mx(wEd");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultIfBlank("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (-1));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.replaceChars("5D2aa1", 'V', 'V');
      assertNotNull(string2);
      assertEquals("5D2aa1", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string3);
      assertEquals("ejhlm{fM", string3);
      assertEquals(1, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.repeat("", ">qoGexBGN", (-1));
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.strip("", "rf`u*x");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string6 = StringUtils.join(iterator0, 'V');
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 'V';
      doubleArray0[3] = (double) ':';
      doubleArray0[4] = (double) 'V';
      doubleArray0[5] = (double) ':';
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (-1586.5655113179564);
      String string7 = StringUtils.join(doubleArray0, ':');
      assertNotNull(string7);
      assertEquals("0.0:86.0:0.0:58.0:86.0:58.0:-1.0:-1586.5655113179564", string7);
      assertArrayEquals(new double[] {0.0, 86.0, 0.0, 58.0, 86.0, 58.0, (-1.0), (-1586.5655113179564)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      
      String string8 = StringUtils.substringAfter(">qoGexBGN", (-1));
      assertNotNull(string8);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      
      String string9 = StringUtils.upperCase("Array and element cannot both be null");
      assertNotNull(string9);
      assertEquals("ARRAY AND ELEMENT CANNOT BOTH BE NULL", string9);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      floatArray0[1] = (-1.0F);
      String string0 = StringUtils.join(floatArray0, '\'', 1129, (-2017));
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new float[] {1861.1F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      String string1 = StringUtils.replaceChars("(A(Mr2r8_", "(A(Mr2r8_", ",m");
      assertNotNull(string1);
      assertEquals(",m,", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.difference(",m", "N3vk(}");
      assertNotNull(string2);
      assertEquals("N3vk(}", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.compare("Supplied value must be a valid byte literal between -32768 and 32767: [", "-1", true);
      assertEquals(38, int0);
      
      String string3 = StringUtils.join((boolean[]) null, '\'');
      assertNull(string3);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "N3vk(}";
      objectArray0[1] = (Object) "Supplied value must be a valid byte literal between -32768 and 32767: [";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "N3vk(}";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) 1861.1F;
      String string4 = StringUtils.joinWith((String) null, objectArray0);
      assertNotNull(string4);
      assertEquals("N3vk(}Supplied value must be a valid byte literal between -32768 and 32767: [N3vk(}1861.1", string4);
      assertEquals(8, objectArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.defaultIfEmpty("'IGRMzjd`{J%z%|\"", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string5);
      assertEquals("'IGRMzjd`{J%z%|\"", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      String string0 = StringUtils.join((boolean[]) null, '<');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "<q4P3L]eWbj91WR.X^";
      stringArray0[1] = "GsQ%y\"]7k-!cz=Q!";
      stringArray0[2] = "Locale must not be null";
      stringArray0[4] = "Locale must not be null";
      stringArray0[5] = "<q4P3L]eWbj91WR.X^";
      stringArray0[6] = "Locale must not be null";
      stringArray0[7] = "Locale must not be null";
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.replaceEachRepeatedly("Locale must not be null", stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string0);
      assertEquals("Locale must not be null", string0);
      assertEquals(8, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.substringAfterLast("Locale must not be null", (-2738));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Locale must not be null", 669, 0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("org.apache.commons.lang3.ArrayUtils", (String) null, (String) null);
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      String string0 = StringUtils.removeStart("1$2K.p", "+^iyaT.BY9LR vs ");
      assertNotNull(string0);
      assertEquals("1$2K.p", string0);
      
      String string1 = StringUtils.chop(")P+*");
      assertNotNull(string1);
      assertEquals(")P+", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) ")P+*", (CharSequence) "+^iyaT.BY9LR vs ");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("1$2K.p", ")P+", (byte)76);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.left("+^iyaT.BY9LR vs ", 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) " #.lrK1";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string0 = StringUtils.appendIfMissing(" #.lrK1", " ", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(" #.lrK1", string0);
      assertEquals(3, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(" ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) " ", "`:&y");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = null;
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[0], (CharSequence) null);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.left("R'", (-2199));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      String string0 = StringUtils.left("[I&)(Jsv;[4=Bud", 99);
      assertNotNull(string0);
      assertEquals("[I&)(Jsv;[4=Bud", string0);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      String string0 = StringUtils.remove("@:TkiY)hI)wv^tp(#", "@:TkiY)hI)wv^tp(#");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.capitalize("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.unwrap("", 'H');
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.countMatches((CharSequence) "@:TkiY)hI)wv^tp(#", 'C');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      String string0 = StringUtils.difference("", "', is neither of type Map.Entry nor an Array");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      String string1 = "aJ;_#\\u!!y+tx,w7c+}=5n4H";
      String string2 = StringUtils.replace(string1, ":", "Mzjd`{", 256);
      assertNotNull(string2);
      assertEquals("aJ;_#\\u!!y+tx,w7c+}=5n4H", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", 0);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string1, (CharSequence) "org.apache.commons.lang3.ObjectUtils$Null");
      assertEquals((-1), int0);
      assertFalse(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) string1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "ch";
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "org.apache.commons.lang3.ObjectUtils$Null";
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[5] = object2;
      String string3 = StringUtils.joinWith("', is neither of type Map.Entry nor an Array", objectArray0);
      assertNotNull(string3);
      assertEquals(6, objectArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      String string1 = StringUtils.center("", 10);
      assertNotNull(string1);
      assertEquals("          ", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("q)gIKFU]:Gq)gIKFU]:[", (-3148), "yAml<065}1(");
      assertNotNull(string2);
      assertEquals("q)gIKFU]:Gq)gIKFU]:[", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOf((CharSequence) "q)gIKFU]:Gq)gIKFU]:[", (CharSequence) "yAml<065}1(");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("C>X6X6u", "yAml<065}1(");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.CR;
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      charSequenceArray0[0] = (CharSequence) "\r";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.wrap(":@9wg", "ulG");
      assertNotNull(string2);
      assertEquals("ulG:@9wgulG", string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.leftPad("Search and Replace array lengths don't match: ", 5, '');
      assertNotNull(string3);
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.removeStart("ua[*&19'1ea59Sny&P%", (String) null);
      assertNotNull(string4);
      assertEquals("ua[*&19'1ea59Sny&P%", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.reverseDelimited("9Dc@!.%?KZv~4=b", '');
      assertNotNull(string5);
      assertEquals("9Dc@!.%?KZv~4=b", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.appendIfMissing("uGwx ?El62;=^K", "9Dc@!.%?KZv~4=b", charSequenceArray0);
      assertNotNull(string6);
      assertEquals("uGwx ?El62;=^K9Dc@!.%?KZv~4=b", string6);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean1 = linkedList0.add(locale_FilteringMode0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      linkedList0.addLast(locale_FilteringMode1);
      assertSame(locale_FilteringMode1, locale_FilteringMode0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      
      boolean boolean2 = linkedList0.add(locale_FilteringMode1);
      assertSame(locale_FilteringMode1, locale_FilteringMode0);
      assertTrue(boolean2);
      assertEquals(3, linkedList0.size());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      
      ListIterator<Locale.FilteringMode> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertEquals(3, linkedList0.size());
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      
      String string7 = StringUtils.join((Iterator<?>) listIterator0, "Search and Replace array lengths don't match: ");
      assertNotNull(string7);
      assertEquals("IGNORE_EXTENDED_RANGESSearch and Replace array lengths don't match: IGNORE_EXTENDED_RANGESSearch and Replace array lengths don't match: IGNORE_EXTENDED_RANGES", string7);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertEquals(3, linkedList0.size());
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "!_]3zC");
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      String string8 = StringUtils.toRootUpperCase("Search and Replace array lengths don't match: ");
      assertNotNull(string8);
      assertEquals("SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      
      String string9 = StringUtils.removeEndIgnoreCase("object", "-1+^iy.BY9LR vs +^iy.BY9LR");
      assertNotNull(string9);
      assertEquals("object", string9);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      
      String string10 = StringUtils.replaceEachRepeatedly(" >mmrq6@46Z", (String[]) null, (String[]) null);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string7));
      
      String string11 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string11);
      assertEquals("", string11);
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string9));
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      String string0 = StringUtils.joinWith("", objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(6, objectArray0.length);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string1 = StringUtils.toRootUpperCase("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeEndIgnoreCase((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.replaceEachRepeatedly((String) null, (String[]) null, (String[]) null);
      assertNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase((String) null, (String) null, "The type must not be null", 514);
      assertNull(string4);
      
      String string5 = StringUtils.removeEnd("", (String) null);
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "4M`FSm$HwT++mC";
      charSequenceArray0[1] = (CharSequence) "4M`FSm$HwT++mC";
      charSequenceArray0[2] = (CharSequence) "4M`FSm$HwT++mC";
      charSequenceArray0[3] = (CharSequence) "4M`FSm$HwT++mC";
      charSequenceArray0[4] = (CharSequence) "4M`FSm$HwT++mC";
      String string0 = StringUtils.right("Cannot clone Cloneable type ", (-1));
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "4M`FSm$HwT++mC";
      String string1 = StringUtils.appendIfMissingIgnoreCase("4M`FSm$HwT++mC", "4M`FSm$HwT++mC", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("4M`FSm$HwT++mC", string1);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "4M`FSm$HwT++mC", "4M`FSm$HwT++mC");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      String string0 = StringUtils.replacePattern("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", "org.apache.commons.lang3.CharSequenceUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.CharSequenceUtils", "'IGRMzjd`{J%z%|\"");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Search and Replace array lengths don't match: ", 3339);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "org.apache.commons.lang3.CharSequenceUtils", 4);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.repeat('r', (-1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int[] intArray0 = StringUtils.toCodePoints("org.apache.commons.lang3.CharSequenceUtils");
      assertNotNull(intArray0);
      assertEquals(42, intArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = '\\';
      charArray0[3] = 'r';
      charArray0[4] = 'r';
      charArray0[5] = 'r';
      charArray0[6] = 'r';
      String string2 = StringUtils.join(charArray0, 'G');
      assertNotNull(string2);
      assertEquals("rGrG\\GrGrGrGr", string2);
      assertArrayEquals(new char[] {'r', 'r', '\\', 'r', 'r', 'r', 'r'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Locale locale0 = new Locale("org.apache.commons.lang3.CharSequenceUtils", "org.apache.commons.lang3.CharSequenceUtils");
      assertNotNull(locale0);
      assertEquals("ORG.APACHE.COMMONS.LANG3.CHARSEQUENCEUTILS", locale0.getCountry());
      assertEquals("org.apache.commons.lang3.charsequenceutils_ORG.APACHE.COMMONS.LANG3.CHARSEQUENCEUTILS", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("org.apache.commons.lang3.charsequenceutils", locale0.getLanguage());
      
      String string3 = StringUtils.upperCase("org.apache.commons.lang3.CharSequenceUtils", locale0);
      assertNotNull(string3);
      assertEquals("ORG.APACHE.COMMONS.LANG3.CHARSEQUENCEUTILS", string3);
      assertEquals("ORG.APACHE.COMMONS.LANG3.CHARSEQUENCEUTILS", locale0.getCountry());
      assertEquals("org.apache.commons.lang3.charsequenceutils_ORG.APACHE.COMMONS.LANG3.CHARSEQUENCEUTILS", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("org.apache.commons.lang3.charsequenceutils", locale0.getLanguage());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.mid("org.apache.commons.lang3.CharSequenceUtils", (-1108), (-1));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = null;
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertNull(string1);
      assertEquals(0, stringArray0.length);
      
      String string2 = "Rq*z`u2h";
      String string3 = StringUtils.overlay("Rq*z`u2h", (String) null, Integer.MIN_VALUE, 2864);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing(" vs ", " vs ");
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      boolean boolean0 = StringUtils.isMixedCase(" vs ");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[7];
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " vs ", (CharSequence) " vs ");
      assertEquals(0, int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string1 = StringUtils.join(intArray0, 'J');
      assertNotNull(string1);
      assertEquals("0", string1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripEnd(" vs ", "Array and element cannot both be null");
      assertNotNull(string2);
      assertEquals(" vs", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase(" vs ", stringArray0);
      assertFalse(boolean1);
      assertEquals(7, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) " vs ", ".`R=i@nQ+60v*2C");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      String string0 = StringUtils.removeEnd("'IGRMzjd`{", "J%z%|\"");
      assertNotNull(string0);
      assertEquals("'IGRMzjd`{", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "'IGRMzjd`{", (CharSequence) "J%z%|\"");
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = StringUtils.joinWith("Aborting to protect against StackOverflowError - output of one loop is the input of another", objectArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllUpperCase("'IGRMzjd`{");
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "'IGRMzjd`{", 27);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = "aJ;_#\\u!!y+tx,w7c+}=5n4H";
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "'IGRMzjd`{";
      String string3 = StringUtils.appendIfMissingIgnoreCase(string2, "'IGRMzjd`{", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("aJ;_#\\u!!y+tx,w7c+}=5n4H'IGRMzjd`{", string3);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, 'q');
      assertNotNull(string4);
      assertEquals("'IGRMzjd`{", string4);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.overlay("J%z%|\"", string2, (-1), (-181));
      assertNotNull(string5);
      assertEquals("aJ;_#\\u!!y+tx,w7c+}=5n4HJ%z%|\"", string5);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.mid("'IGRMzjd`{", (-181), (-181));
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) string3, 16);
      assertEquals((-1), int2);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string6));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String string7 = StringUtils.difference("The Array must not be null", "Locale must not be null");
      assertNotNull(string7);
      assertEquals("Locale must not be null", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase(string2, charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string4));
      assertTrue(boolean1 == boolean0);
      
      String string8 = StringUtils.deleteWhitespace(string3);
      assertNotNull(string8);
      assertEquals("aJ;_#\\u!!y+tx,w7c+}=5n4H'IGRMzjd`{", string8);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string6));
      
      String string9 = StringUtils.removeEndIgnoreCase("Locale must not be null", "bog8{'b-/71RzH8%");
      assertNotNull(string9);
      assertEquals("Locale must not be null", string9);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string7));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)160;
      shortArray0[1] = (short) (-1288);
      shortArray0[2] = (short) (-620);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'q', (int) (short) (-1288), 18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1288
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      String string0 = StringUtils.replaceChars("e ", 'V', 'E');
      assertNotNull(string0);
      assertEquals("e ", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("e ", "e ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "e ", (CharSequence) "e ", 322);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("e ", "e ", 322);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.getDigits("e ");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBetween("", "e ");
      assertNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "e ");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.join((Object[]) null, 'V');
      assertNull(string3);
      
      String string4 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.join((Iterator<?>) null, "Exception cloning Cloneable type ");
      assertNull(string5);
      
      String string6 = StringUtils.stripEnd("e ", "G");
      assertNotNull(string6);
      assertEquals("e ", string6);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.startsWith("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      char[] charArray0 = new char[2];
      String string2 = StringUtils.deleteWhitespace((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      String string0 = StringUtils.wrap("-1", '[');
      assertNotNull(string0);
      assertEquals("[-1[", string0);
      
      boolean boolean0 = StringUtils.isAlpha("[-1[");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "-1", (CharSequence) "-1");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("Q-~mXT\tTN#89,oQ-~mXT\tTN#89,o", ",}7s", 2568);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAlpha("Q-~mXT\tTN#89,oQ-~mXT\tTN#89,o");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.substring((String) null, 116, 659);
      assertNull(string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, ';');
      assertNotNull(string2);
      assertEquals("Q-~mXT\tTN#89;oQ-~mXT\tTN#89;o", string2);
      assertEquals(3, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfterLast("0LZF}Z.JD/(fG!+f%", 2568);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.abbreviateMiddle("Invalid locale format: ", "Q-~mXT\tTN#89;oQ-~mXT\tTN#89;o", (-1422));
      assertNotNull(string4);
      assertEquals("Invalid locale format: ", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.join((Object[]) stringArray0, "Invalid locale format: ");
      assertNotNull(string5);
      assertEquals("Q-~mXT\tTN#89Invalid locale format: oQ-~mXT\tTN#89Invalid locale format: o", string5);
      assertEquals(3, stringArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      int int1 = StringUtils.ordinalIndexOf("Q-~mXT\tTN#89;oQ-~mXT\tTN#89;o", (CharSequence) null, Integer.MIN_VALUE);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string6 = StringUtils.stripEnd("Invalid locale format: ", "Q-~mXT\tTN#89Invalid locale format: oQ-~mXT\tTN#89Invalid locale format: o");
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      
      boolean boolean2 = StringUtils.isWhitespace("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string7 = StringUtils.replace("Invalid locale format: ", "", "");
      assertNotNull(string7);
      assertEquals("Invalid locale format: ", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string4));
      
      boolean boolean3 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = ';';
      charArray0[2] = '[';
      charArray0[3] = '5';
      charArray0[4] = ';';
      charArray0[5] = '[';
      charArray0[6] = ';';
      charArray0[7] = '[';
      boolean boolean4 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean4);
      assertArrayEquals(new char[] {'[', ';', '[', '5', ';', '[', ';', '['}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.deleteWhitespace("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = "maxWith cannot be negative";
      String string3 = StringUtils.prependIfMissing("maxWith cannot be negative", "maxWith cannot be negative", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("maxWith cannot be negative", string3);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isAsciiPrintable("\r");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\r", (CharSequence) "", (-32768));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.removeEndIgnoreCase("3PnQ", "");
      assertNotNull(string4);
      assertEquals("3PnQ", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.countMatches((CharSequence) "3PnQ", 'M');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 0;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '#', (-1), 53);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      String string0 = "...";
      String string1 = StringUtils.repeat("...", "Strings must not be null", 56);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) string1, (CharSequence) "...");
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "...", (CharSequence) string1, 797);
      assertEquals((-1), int0);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1, 'd');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAsciiPrintable("...");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.appendIfMissing("Strings must not be null", "...", stringArray0);
      assertNotNull(string2);
      assertEquals("Strings must not be null...", string2);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = StringUtils.indexOf((CharSequence) "Strings must not be null...", (-2));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = null;
      String string4 = StringUtils.center((String) null, (-1), "Strings must not be null");
      assertNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("+^iy.BY9LR vs ", 797, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      String string0 = StringUtils.difference("", "', is neither of type Map.Entry nor an Array");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      String string1 = StringUtils.center("T&", 4, "T&");
      assertNotNull(string1);
      assertEquals("TT&T", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "TT&T", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      String string2 = StringUtils.substringAfter("uGwx ?El62;=^K", "");
      assertNotNull(string2);
      assertEquals("uGwx ?El62;=^K", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      Locale locale1 = Locale.ENGLISH;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = locale1.getDisplayName();
      assertNotSame(locale1, locale0);
      assertNotNull(string3);
      assertEquals("English", string3);
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = locale1.getDisplayVariant(locale0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      Locale locale2 = Locale.GERMANY;
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotNull(locale2);
      assertEquals("", locale2.getVariant());
      assertEquals("DE", locale2.getCountry());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("de", locale2.getLanguage());
      assertEquals("de_DE", locale2.toString());
      assertEquals("DEU", locale2.getISO3Country());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      
      Set<Character> set0 = locale2.getExtensionKeys();
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotNull(set0);
      assertEquals("", locale2.getVariant());
      assertEquals("DE", locale2.getCountry());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("de", locale2.getLanguage());
      assertEquals("de_DE", locale2.toString());
      assertEquals("DEU", locale2.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      
      String string5 = locale2.getDisplayVariant();
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals("", locale2.getVariant());
      assertEquals("DE", locale2.getCountry());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("de", locale2.getLanguage());
      assertEquals("de_DE", locale2.toString());
      assertEquals("DEU", locale2.getISO3Country());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      int int0 = StringUtils.getFuzzyDistance("TT&T", "uGwx ?El62;=^K", locale1);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertEquals(0, int0);
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      
      char char0 = 'r';
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'r', 0, 291);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.LocaleUtils";
      String string1 = StringUtils.removeAll("org.apache.commons.lang3.LocaleUtils", "org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripToNull("Search and Replace array lengths don't match: ");
      assertNotNull(string2);
      assertEquals("Search and Replace array lengths don't match:", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "Search and Replace array lengths don't match:";
      stringArray0[2] = "";
      stringArray0[3] = "Locale must not be null";
      stringArray0[4] = null;
      stringArray0[5] = null;
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Search and Replace array lengths don't match:", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 8192, "");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith(string0, "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substring("", 8192);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("", (-2031), string0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.replaceChars(")qYu[>c#$d,&QEb", ")qYu[>c#$d,&QEb", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Locale must not be null", "\r", 8, 8);
      assertNotNull(string0);
      assertEquals("\rust no\r", string0);
      
      String string1 = StringUtils.upperCase("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "\rust no\r", (CharSequence) "");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceChars("!uo^.1~-/FbA^7", '', '');
      assertNotNull(string2);
      assertEquals("!uo^.1~-/FbA^7", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.rightPad("?9%nI ~8g>2DShV:)dd", (-2410), "Search and Replace array lengths don't match: ");
      assertNotNull(string3);
      assertEquals("?9%nI ~8g>2DShV:)dd", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      String string0 = StringUtils.replaceAll("PZ", "PZ", "PZ");
      assertNotNull(string0);
      assertEquals("PZ", string0);
      
      char[] charArray0 = new char[9];
      charArray0[1] = '!';
      charArray0[2] = '5';
      String string1 = StringUtils.abbreviate("PZ", "dPkc'so3=*", 84, 84);
      assertNotNull(string1);
      assertEquals("PZ", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultString("PZ");
      assertNotNull(string2);
      assertEquals("PZ", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "PZ", (CharSequence) null, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      String string0 = StringUtils.stripStart("ymz}I.riv\"!\u0001G79q9", "ymz}I.riv\"!\u0001G79q9");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.center(":Y*R8_X", (-32768), ",6CA\"JeG>Cloneable type ");
      assertNotNull(string1);
      assertEquals(":Y*R8_X", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.wrap(":Y*R8_X", "ymz}I.riv\"!\u0001G79q9");
      assertNotNull(string2);
      assertEquals("ymz}I.riv\"!\u0001G79q9:Y*R8_Xymz}I.riv\"!\u0001G79q9", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split("ymz}I.riv\"!\u0001G79q9", 'x');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("ymz}I.riv\"!\u0001G79q9");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.removeStartIgnoreCase("Q-~mXT\tTN#89,oQ-~mXT\tTN#89,o", (String) null);
      assertNotNull(string3);
      assertEquals("Q-~mXT\tTN#89,oQ-~mXT\tTN#89,o", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.appendIfMissing("Q-~mXT\tTN#89,oQ-~mXT\tTN#89,o", "", stringArray0);
      assertNotNull(string4);
      assertEquals("Q-~mXT\tTN#89,oQ-~mXT\tTN#89,o", string4);
      assertEquals(1, stringArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Q-~mXT\tTN#89,oQ-~mXT\tTN#89,o", " vs ");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "ymz}I.riv\"!\u0001G79q9:Y*R8_Xymz}I.riv\"!\u0001G79q9", (CharSequence) "Q-~mXT\tTN#89,oQ-~mXT\tTN#89,o", 618);
      assertEquals(38, int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.substring("Q-~mXT\tTN#89,oQ-~mXT\tTN#89,o", 5);
      assertNotNull(string5);
      assertEquals("T\tTN#89,oQ-~mXT\tTN#89,o", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.strip("...");
      assertNotNull(string6);
      assertEquals("...", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      
      int int2 = StringUtils.indexOfAny((CharSequence) "Q-~mXT\tTN#89,oQ-~mXT\tTN#89,o", "Strings must not be null");
      assertEquals(3, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      String string0 = StringUtils.unwrap("h", "6Nka(\"aeEKonxxPOeu");
      assertNotNull(string0);
      assertEquals("h", string0);
      
      String string1 = "uGwx ?El62;=^K";
      String string2 = StringUtils.replaceFirst("6Nka(\"aeEKonxxPOeu", "uGwx ?El62;=^K", "h");
      assertNotNull(string2);
      assertEquals("6Nka(\"aeEKonxxPOeu", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isNumeric("h");
      assertFalse(boolean0);
      
      String string3 = "-1";
      char char0 = '';
      String string4 = StringUtils.removeStartIgnoreCase("-1", "-1");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      String[] stringArray0 = StringUtils.split("uGwx ?El62;=^K", '');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = 1972;
      String string5 = StringUtils.substringBefore("Arguments cannot both be null", 1972);
      assertNotNull(string5);
      assertEquals("Arguments cannot both be null", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.substringAfterLast("Arguments cannot both be null", ",6CA\"JeG>Cloneable type ");
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Arguments cannot both be null", "6Nka(\"aeEKonxxPOeu");
      assertEquals(0.4, double0, 0.01);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "Search and Replace array lengths don't match: ", (-2784), (-499));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2784
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle((String) null, (String) null, 3168);
      assertNull(string2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 3168;
      longArray0[1] = (long) 3168;
      String string3 = StringUtils.firstNonEmpty(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNull(string3);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.rightPad((String) null, (-1545), (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.reverse((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.stripEnd("v4", "nm{83oSK6]FWr");
      assertNotNull(string6);
      assertEquals("v4", string6);
      
      String string7 = StringUtils.difference("w'&;", string0);
      assertNotNull(string7);
      assertEquals("w'&;", string7);
      assertFalse(string7.equals((Object)string6));
      
      String string8 = StringUtils.normalizeSpace(string0);
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      String string0 = StringUtils.difference("2", (String) null);
      assertNotNull(string0);
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      String string0 = "}BKHGagOW39v[`";
      String string1 = "bB";
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("bB", "}BKHGagOW39v[`", "Cloneable");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 13
         // }BKHGagOW39v[`
         //              ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-2421), (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.truncate((String) null, 4);
      assertNull(string1);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      serviceLoader0.reload();
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Iterator<Object> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      String string2 = StringUtils.join(iterator0, (String) null);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      
      String string3 = StringUtils.upperCase("org.apache.commons.lang3.ObjectUtils$Null", locale0);
      assertNotNull(string3);
      assertEquals("ORG.APACHE.COMMONS.LANG3.OBJECTUTILS$NULL", string3);
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertFalse(string3.equals((Object)string2));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 4;
      intArray0[1] = 4;
      char char0 = ' ';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, ' ', 5, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      String string0 = StringUtils.truncate((String) null, 4);
      assertNull(string0);
      
      String string1 = StringUtils.chomp("Yo6%[aw`lZuZBalw'");
      assertNotNull(string1);
      assertEquals("Yo6%[aw`lZuZBalw'", string1);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("o#5_&V<i,#y", "o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNotNull(string0);
      assertEquals("o#5_&V<i,#y", string0);
      
      String string1 = StringUtils.substringAfter("UpA{-?;'4{pSY,KVc", "offset cannot be negative");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("UpA{-?;'4{pSY,KVc", 1582);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.wrapIfMissing("Rq*z`u2h", ", Length: 0");
      assertNotNull(string3);
      assertEquals(", Length: 0Rq*z`u2h, Length: 0", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ", Length: 0", (CharSequence) ", Length: 0", 108);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "offset cannot be negative", (CharSequence) "ObjeOt varargs must not be nugl", 1582);
      assertEquals(23, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isNumeric("Rq*z`u2h");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "offset cannot be negative";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Rq*z`u2h", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.abbreviate("+1]2,FmAR:4*3@i', ", "oos,$:sydx ,n9", 31);
      assertNotNull(string4);
      assertEquals("+1]2,FmAR:4*3@i', ", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.stripToNull("', is neither of type Map.Entry nor an Array");
      assertNotNull(string5);
      assertEquals("', is neither of type Map.Entry nor an Array", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("', is neither of type Map.Entry nor an Array", "UpA{-?;'4{pSY,KVc");
      assertEquals(0.36, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = null;
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[0], (CharSequence) null);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.replacePattern("t", "oTquVatc8 zWjm", "t");
      assertNotNull(string0);
      assertEquals("t", string0);
      
      String string1 = StringUtils.wrapIfMissing("oTquVatc8 zWjm", "t");
      assertNotNull(string1);
      assertEquals("toTquVatc8 zWjmt", string1);
      assertFalse(string1.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("toTquVatc8 zWjmt", "t");
      assertEquals(0.69, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      String string0 = StringUtils.removeAll("org.apache.commons.lang3.LocaleUtils", "org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.capitalize("Search and Replace aray lengths don't match: ");
      assertNotNull(string1);
      assertEquals("Search and Replace aray lengths don't match: ", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrapIfMissing("org.apache.commons.lang3.LocaleUtils", "");
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.LocaleUtils", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      double double0 = StringUtils.getJaroWinklerDistance("}Z/", "z);IF%7");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      String string0 = StringUtils.unwrap("h", "6Nka(\"aeEKonxxPOeu");
      assertNotNull(string0);
      assertEquals("h", string0);
      
      String string1 = "uGwx ?El62;=^K";
      String string2 = StringUtils.replaceFirst("6Nka(\"aeEKonxxPOeu", "uGwx ?El62;=^K", "h");
      assertNotNull(string2);
      assertEquals("6Nka(\"aeEKonxxPOeu", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumeric("h");
      assertFalse(boolean0);
      
      String string3 = "-1";
      char char0 = '';
      String string4 = StringUtils.wrapIfMissing("-1", '');
      assertNotNull(string4);
      assertEquals("-1", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      int[] intArray0 = StringUtils.toCodePoints("-1");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {127, 45, 49, 127}, intArray0);
      assertEquals(4, intArray0.length);
      
      String[] stringArray0 = StringUtils.split("uGwx ?El62;=^K", '');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = 1972;
      String string5 = StringUtils.substringBefore("Arguments cannot both be null", 1972);
      assertNotNull(string5);
      assertEquals("Arguments cannot both be null", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = ",6CA\"JeG>Cloneable type ";
      String string7 = StringUtils.substringAfterLast("Arguments cannot both be null", ",6CA\"JeG>Cloneable type ");
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Arguments cannot both be null", "6Nka(\"aeEKonxxPOeu");
      assertEquals(0.4, double0, 0.01);
      
      String string8 = "Search and Replace array lengths don't match: ";
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "Search and Replace array lengths don't match: ", (-2784), (-499));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2784
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      String string0 = StringUtils.joinWith("", objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(6, objectArray0.length);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      
      String string1 = StringUtils.strip("", (String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replace("PbZJeNB*cf", ",6CA\"JeG>Cloneable type ", "org.apache.commons.lang3.ObjectUtils$Null", 256);
      assertNotNull(string2);
      assertEquals("PbZJeNB*cf", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "PbZJeNB*cf", 0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[4];
      String string3 = StringUtils.joinWith("ch", objectArray0);
      assertNotNull(string3);
      assertEquals("chchchchch", string3);
      assertEquals(6, objectArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean2 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean2);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Locale must not be null", "\r", 8, 8);
      assertNotNull(string0);
      assertEquals("\rust no\r", string0);
      
      String string1 = StringUtils.center("", 4, "");
      assertNotNull(string1);
      assertEquals("    ", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'm';
      charArray0[1] = 'o';
      charArray0[2] = '!';
      charArray0[3] = '^';
      charArray0[4] = 'P';
      charArray0[5] = '.';
      charArray0[6] = 'X';
      charArray0[7] = '9';
      charArray0[8] = '=';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "    ", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'m', 'o', '!', '^', 'P', '.', 'X', '9', '='}, charArray0);
      assertEquals(9, charArray0.length);
      
      String string2 = StringUtils.substring("Strings must not be null", (-4405));
      assertNotNull(string2);
      assertEquals("Strings must not be null", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\r", (CharSequence) "\r", (-4405));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      String string0 = StringUtils.center("H5Srh/Rcx_", 5, (String) null);
      assertNotNull(string0);
      assertEquals("H5Srh/Rcx_", string0);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      String string0 = StringUtils.replaceAll("oYYg<W$Rs1x6.^FG:", "oYYg<W$Rs1x6.^FG:", "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string0);
      assertEquals("oYYg<W$Rs1x6.^FG:", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "oYYg<W$Rs1x6.^FG:", "oYYg<W$Rs1x6.^FG:");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "org.apache.commons.lang3.ArrayUtils", 1562, 2303);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripToNull("oYYg<W$Rs1x6.^FG:");
      assertNotNull(string1);
      assertEquals("oYYg<W$Rs1x6.^FG:", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.EMPTY;
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("org.apache.commons.lang3.ArrayUtils", "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.replaceChars("oYYg<W$Rs1x6.^FG:", "oYYg<W$Rs1x6.^FG:", "oYYg<W$Rs1x6.^FG:");
      assertNotNull(string3);
      assertEquals("oYYg<W$Rs1x6.^FG:", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.defaultIfBlank("org.apache.commons.lang3.ArrayUtils", "oYYg<W$Rs1x6.^FG:");
      assertNotNull(string4);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.join((Iterator<?>) null, '+');
      assertNull(string5);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "oYYg<W$Rs1x6.^FG:";
      stringArray0[2] = "Minimum abbreviation width is %d";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string6 = StringUtils.strip("org.apache.commons.lang3.ArrayUtils", "NZ");
      assertNotNull(string6);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string6);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.toRootLowerCase("+");
      assertNotNull(string7);
      assertEquals("+", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String string0 = StringUtils.toRootUpperCase("8V>.5E6Caf<Z#\"QMc~_");
      assertNotNull(string0);
      assertEquals("8V>.5E6CAF<Z#\"QMC~_", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("8V>.5E6CAF<Z#\"QMC~_");
      assertNotNull(intArray0);
      assertEquals(19, intArray0.length);
      
      String string1 = StringUtils.replaceChars("8V>.5E6CAF<Z#\"QMC~_", "-.1D5o=cr8&", "8V>.5E6CAF<Z#\"QMC~_");
      assertNotNull(string1);
      assertEquals("FV>V5E6CAF<Z#\"QMC~_", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      Integer integer0 = new Integer(3880);
      assertNotNull(integer0);
      assertEquals(3880, (int)integer0);
      
      String string0 = StringUtils.leftPad("K9zr6aBQ~W<ak", 3880, 'O');
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("K9zr6aBQ~W<ak", "K9zr6aBQ~W<ak");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      String string0 = StringUtils.difference("org.apache.commons.lang3.exception.CloneFailedException", "', is neither of type Map.Entry nor an Array");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("', is neither of type Map.Entry nor an Array"));
      
      Iterator<String> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains("', is neither of type Map.Entry nor an Array"));
      
      String string1 = StringUtils.join(iterator0, 'W');
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(treeSet0.contains("', is neither of type Map.Entry nor an Array"));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "', is neither of type Map.Entry nor an Array";
      stringArray0[1] = "', is neither of type Map.Entry nor an Array";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.lang3.exception.CloneFailedException";
      stringArray0[4] = "', is neither of type Map.Entry nor an Array";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.strip("", "7_R!D'[[:-X");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.toRootLowerCase("', is neither of type Map.Entry nor an Array");
      assertNotNull(string3);
      assertEquals("', is neither of type map.entry nor an array", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string4 = StringUtils.replaceOnce("", "Q-~mXT\tTN#89,oQ-~mXT\tTN#89,o", "', is neither of type Map.Entry nor an Array");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-3148), 10);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.swapCase("6uOrp8Hb&&my-S;#'");
      assertNotNull(string1);
      assertEquals("6UoRP8hB&&MY-s;#'", string1);
      assertFalse(string1.equals((Object)string0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 10;
      floatArray0[1] = (float) (-3148);
      floatArray0[2] = (float) (-3148);
      String[] stringArray0 = StringUtils.substringsBetween("6UoRP8hB&&MY-s;#'", "", "6UoRP8hB&&MY-s;#'");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny("6uOrp8Hb&&my-S;#'", (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "6uOrp8Hb&&my-S;#'", (CharSequence) "6uOrp8Hb&&my-S;#'");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "'5R";
      charSequenceArray0[1] = (CharSequence) "u6/p";
      charSequenceArray0[2] = (CharSequence) "u6/p";
      String string0 = StringUtils.reverse("'5R");
      assertNotNull(string0);
      assertEquals("R5'", string0);
      
      charSequenceArray0[3] = (CharSequence) "R5'";
      int int0 = StringUtils.indexOfAny((CharSequence) "u6/p", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("u6/p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.repeat("", (-349));
      assertNotNull(string2);
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      String string0 = StringUtils.unwrap("-'5R", "-'5R");
      assertNotNull(string0);
      assertEquals("-'5R", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("-'5R", "Cloneable");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.mid("-'5R", 7, 160);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfAny("AtG1", stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "}=5n4H", (CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertEquals(1, stringArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.difference("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "'5R", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.join((byte[]) null, '\"');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("'5R");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace("'5R");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "=</3TNdn{";
      charSequenceArray0[1] = (CharSequence) "=</3TNdn{";
      boolean boolean0 = StringUtils.isEmpty("=</3TNdn{");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("*hPk*hPk");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ", Length: ", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(3, charSequenceArray0.length);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) null, '9');
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.truncate("an`6)*73.gaYbkS*_=", 76);
      assertNotNull(string0);
      assertEquals("an`6)*73.gaYbkS*_=", string0);
      
      String string1 = StringUtils.repeat("an`6)*73.gaYbkS*_=", 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.leftPad("Threshold must not be negative", 2797, "an`6)*73.gaYbkS*_=");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isEmpty("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isMixedCase("an`6)*73.gaYbkS*_=");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      String string0 = StringUtils.getDigits("...");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "...";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs +^iy.BY9LR");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'z';
      boolean boolean1 = StringUtils.containsOnly(charSequenceArray0[2], charArray0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'z'}, charArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray1);
      
      String string1 = StringUtils.substringAfterLast("", "<exU8Hb");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = "\\u";
      String string3 = StringUtils.rightPad((String) null, 38, 'z');
      assertNull(string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string2, "...");
      assertEquals((-1), int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string4 = StringUtils.stripToEmpty("snhdLTbvS1sT<");
      assertNotNull(string4);
      assertEquals("snhdLTbvS1sT<", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains("..."));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        Locale.FilteringMode.valueOf("e ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.FilteringMode.e 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      String string0 = StringUtils.replaceChars((String) null, (String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.rightPad((String) null, 366, 'r');
      assertNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, (-1648));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "", 70);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = "e ";
      String string2 = StringUtils.overlay("", "", 70, 70);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertFalse(boolean1);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string3 = "ulG";
      String string4 = StringUtils.wrap("t<", "ulG");
      assertNotNull(string4);
      assertEquals("ulGt<ulG", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      int int0 = 1;
      String string5 = StringUtils.chomp("");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byte byte0 = (byte)7;
      byteArray0[1] = (byte)7;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "Cloneable type ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Cloneable type 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Locale must not be null", "\r", 8, 8);
      assertNotNull(string0);
      assertEquals("\rust no\r", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r", "Locale must not be null", 1115);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.chop("\r");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      String string0 = StringUtils.wrap("|N", "");
      assertNotNull(string0);
      assertEquals("|N", string0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      String string1 = StringUtils.join(booleanArray0, '<', 5, (-1977));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceOnce("org.apache.commons.lang3.ObjectUtils$Nullymz}I.riv\"!\u0001G79q9", "", "|N");
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.ObjectUtils$Nullymz}I.riv\"!\u0001G79q9", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBetween("l@lMoE&Q3F1L", "yw5PPe@I:");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("yw5PPe@I:");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.chop("");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      String string0 = StringUtils.defaultString("o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNotNull(string0);
      assertEquals("o#5_&V<i,#y", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("o#5_&V<i,#y", '{');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "o#5_&V<i,#y", ":h");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase(":h");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.chomp("nfS%s");
      assertNotNull(string1);
      assertEquals("nfS%s", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'u');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "+^iy.BY9LR vs +^iy.BY9LR";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isAllLowerCase("+^iy.BY9LR vs +^iy.BY9LR");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      floatArray0[1] = (-1.0F);
      char char0 = '?';
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      String string0 = "aJ;_#\\u!!y+tx,w7c+";
      // Undeclared exception!
      try { 
        Charset.forName(string0);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // aJ;_#\\u!!y+tx,w7c+
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      String string0 = "1^Y(4Zns2[\\u,\"mJ";
      String string1 = StringUtils.capitalize(string0);
      assertNotNull(string1);
      assertEquals("1^Y(4Zns2[\\u,\"mJ", string1);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("|N");
      assertNotNull(string0);
      assertEquals("|N", string0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[7] = true;
      String string1 = StringUtils.join(booleanArray0, '<', 5, (-1977));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 649.0F;
      String string2 = StringUtils.join(floatArray0, '<');
      assertNotNull(string2);
      assertEquals("649.0", string2);
      assertArrayEquals(new float[] {649.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByCharacterType("649.0");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string3 = StringUtils.reverseDelimited("|N", 'K');
      assertNotNull(string3);
      assertEquals("|N", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "|N", 62);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(3, stringArray0.length);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.reverseDelimited("", '2');
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      
      String string6 = StringUtils.substringAfterLast("bMK", 1134);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      String string0 = "Invalid locale format: ";
      String string1 = StringUtils.replaceIgnoreCase("Invalid locale format: ", "Invalid locale format: ", "'5R");
      assertNotNull(string1);
      assertEquals("'5R", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      // Undeclared exception!
      StringUtils.repeat("Invalid locale format: ", 1114111);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      String string0 = StringUtils.getDigits("...");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "...";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs +^iy.BY9LR");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string1 = StringUtils.capitalize("f>D 4t^b4t+");
      assertNotNull(string1);
      assertEquals("F>D 4t^b4t+", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase(charSequenceArray0[3], charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)25;
      float[] floatArray0 = new float[5];
      floatArray0[0] = 649.0F;
      floatArray0[1] = (float) 't';
      floatArray0[2] = (float) 't';
      floatArray0[3] = (float) (short)25;
      floatArray0[4] = 649.0F;
      String string2 = StringUtils.join(floatArray0, 't');
      assertNotNull(string2);
      assertEquals("649.0t116.0t116.0t25.0t649.0", string2);
      assertArrayEquals(new float[] {649.0F, 116.0F, 116.0F, 25.0F, 649.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "}=5n4H";
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      stack0.clear();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, 't', (-6760), 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -6760
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      String string0 = StringUtils.reverse(";}H04tqpSSycioS`");
      assertNotNull(string0);
      assertEquals("`SoicySSpqt40H};", string0);
      
      boolean boolean0 = StringUtils.isEmpty("`SoicySSpqt40H};");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "`SoicySSpqt40H};";
      objectArray0[1] = (Object) "`SoicySSpqt40H};";
      objectArray0[2] = (Object) "`SoicySSpqt40H};";
      String string1 = StringUtils.stripToNull("Comparator should not be null.");
      assertNotNull(string1);
      assertEquals("Comparator should not be null.", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ";}H04tqpSSycioS`", (-562), (-562));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.defaultIfEmpty("`SoicySSpqt40H};", "q)gIKFU]:Gq)gIKFU]:G");
      assertNotNull(string2);
      assertEquals("`SoicySSpqt40H};", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substring("Y{]F9p$=Y1xTeNC|X", 0, 3);
      assertNotNull(string3);
      assertEquals("Y{]", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-562);
      longArray0[4] = (long) 1;
      String string4 = StringUtils.join(longArray0, '\\');
      assertNotNull(string4);
      assertEquals("-1\\0\\0\\-562\\1", string4);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, (-562L), 1L}, longArray0);
      assertEquals(5, longArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      charSequenceArray0[0] = (CharSequence) "-1\u0000\u0000-562\u0001";
      charSequenceArray0[1] = (CharSequence) "`SoicySSpqt40H};";
      charSequenceArray0[2] = (CharSequence) ";}H04tqpSSycioS`";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int1);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.toRootLowerCase("- vq{<");
      assertNotNull(string5);
      assertEquals("- vq{<", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(int1));
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean1 = priorityQueue0.add(integer0);
      assertTrue(boolean1);
      assertEquals(1, priorityQueue0.size());
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean1 == boolean0);
      assertTrue(priorityQueue0.contains(integer0));
      assertFalse(priorityQueue0.contains((-1)));
      
      String string6 = StringUtils.join((Iterable<?>) priorityQueue0, "Y{]F9p$=Y1xTeNC|X");
      assertNotNull(string6);
      assertEquals("0", string6);
      assertEquals(1, priorityQueue0.size());
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(priorityQueue0.contains(integer0));
      assertFalse(priorityQueue0.contains((-1)));
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      String string0 = StringUtils.getDigits("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 465);
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultIfEmpty("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring((String) null, 1881, 0);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.substringAfterLast("", (String) null);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      String string0 = StringUtils.center("}6Ca^Vel^/K#j", 15);
      assertNotNull(string0);
      assertEquals(" }6Ca^Vel^/K#j ", string0);
      
      String string1 = StringUtils.chop("\"v.aG1F{");
      assertNotNull(string1);
      assertEquals("\"v.aG1F", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeIgnoreCase("\r", "-1+^iy.BY9LR vs +^iy.BY9LR");
      assertNotNull(string2);
      assertEquals("\r", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = 'o';
      charArray0[5] = 'A';
      charArray0[6] = 'A';
      String string3 = StringUtils.join(charArray0, 'B');
      assertNotNull(string3);
      assertEquals("ABABABABoBABA", string3);
      assertArrayEquals(new char[] {'A', 'A', 'A', 'A', 'o', 'A', 'A'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.substring((String) null, 6, (-2119));
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAlphaSpace("\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'e';
      charArray0[1] = 'W';
      charArray0[2] = '(';
      charArray0[3] = 'R';
      charArray0[4] = 'x';
      charArray0[5] = 'z';
      String string0 = StringUtils.join(charArray0, 'x', (-1364), (-1364));
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'e', 'W', '(', 'R', 'x', 'z'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.stripEnd("moL n)!X>I@4 Ti#<Y", (String) null);
      assertNotNull(string0);
      
      String string1 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("Strings must not be null", (String) null);
      assertNotNull(string2);
      assertEquals("Strings must not be null", string2);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceIgnoreCase("", "", ">M!5pj?y3tT;\"+gXR");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.abbreviateMiddle("", "", 3168);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string4 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string4);
      
      String string5 = StringUtils.rightPad("", 0, (String) null);
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      
      String string6 = StringUtils.reverse((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.stripEnd("1yc4q++", "v4");
      assertNotNull(string7);
      assertEquals("1yc4q++", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.center((String) null, (-2981), (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.replaceOnce(")$,FI {3\"Y'", (String) null, (String) null);
      assertNotNull(string2);
      assertEquals(")$,FI {3\"Y'", string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("", (String) null);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.substringBetween("", ")$,FI {3\"Y'");
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(")$,FI {3\"Y'");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(")$,FI {3\"Y'");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.chop((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.leftPad("", 52);
      assertNotNull(string6);
      assertEquals("                                                    ", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, 'B');
      assertNull(string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.stripEnd(string0, "The type must not be null");
      assertNull(string1);
      
      String string2 = StringUtils.rightPad("+^iy.BY9LR vs +^iy.BY9LR", 53, "The type must not be null");
      assertNotNull(string2);
      assertEquals("+^iy.BY9LR vs +^iy.BY9LRThe type must not be nullThe ", string2);
      
      String string3 = StringUtils.reverseDelimited((String) null, '\\');
      assertNull(string3);
      
      String string4 = StringUtils.swapCase((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.remove("+^iy.BY9LR vs +^iy.BY9LRThe type must not be nullThe ", '\\');
      assertNotNull(string5);
      assertEquals("+^iy.BY9LR vs +^iy.BY9LRThe type must not be nullThe ", string5);
      assertTrue(string5.equals((Object)string2));
      
      int int0 = StringUtils.indexOf((CharSequence) string0, 5849, (-2165));
      assertEquals((-1), int0);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1, "uGwx ?El62;=^K");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertEquals(2, stringArray2.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      String string0 = StringUtils.substringAfter("', has a length less than 2", 32);
      assertNotNull(string0);
      assertEquals("has a length less than 2", string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "has a length less than 2";
      objectArray0[1] = (Object) "has a length less than 2";
      objectArray0[2] = (Object) "', has a length less than 2";
      objectArray0[3] = (Object) "', has a length less than 2";
      objectArray0[4] = (Object) "has a length less than 2";
      objectArray0[5] = (Object) "', has a length less than 2";
      objectArray0[6] = (Object) "has a length less than 2";
      String string1 = StringUtils.join(objectArray0, '-');
      assertNotNull(string1);
      assertEquals("has a length less than 2-has a length less than 2-', has a length less than 2-', has a length less than 2-has a length less than 2-', has a length less than 2-has a length less than 2", string1);
      assertEquals(7, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.overlay("has a length less than 2", "XbLuH^x/_gf%yH.Ep)", 32, 322);
      assertNotNull(string2);
      assertEquals("has a length less than 2XbLuH^x/_gf%yH.Ep)", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.mid("has a length less than 2-has a length less than 2-', has a length less than 2-', has a length less than 2-has a length less than 2-', has a length less than 2-has a length less than 2", 49, (-862));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "has a length less than 2-has a length less than 2-', has a length less than 2-', has a length less than 2-has a length less than 2-', has a length less than 2-has a length less than 2", (CharSequence) "has a length less than 2-has a length less than 2-', has a length less than 2-', has a length less than 2-has a length less than 2-', has a length less than 2-has a length less than 2", 322);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.difference("The Array must not be null", "Locale must not be null");
      assertNotNull(string4);
      assertEquals("Locale must not be null", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Locale must not be null", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string5 = StringUtils.deleteWhitespace("Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertNotNull(string5);
      assertEquals("Suppliedvaluemustbeavalidbyteliteralbetween-32768and32767:[", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.removeEndIgnoreCase("Suppliedvaluemustbeavalidbyteliteralbetween-32768and32767:[", (String) null);
      assertNotNull(string6);
      assertEquals("Suppliedvaluemustbeavalidbyteliteralbetween-32768and32767:[", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '-', (int) (short) (-1288), 105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1288
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.CR;
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      charSequenceArray0[0] = (CharSequence) "\r";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.wrap(":@9wg", "ulG");
      assertNotNull(string2);
      assertEquals("ulG:@9wgulG", string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.leftPad("Search and Replace array lengths don't match: ", 5, '');
      assertNotNull(string3);
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.removeStart("ua[*&19'1ea59Sny&P%", (String) null);
      assertNotNull(string4);
      assertEquals("ua[*&19'1ea59Sny&P%", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.reverseDelimited("9Dc@!.%?KZv~4=b", '');
      assertNotNull(string5);
      assertEquals("9Dc@!.%?KZv~4=b", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.appendIfMissing("uGwx ?El62;=^K", "9Dc@!.%?KZv~4=b", charSequenceArray0);
      assertNotNull(string6);
      assertEquals("uGwx ?El62;=^K9Dc@!.%?KZv~4=b", string6);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      linkedList0.addLast(locale_FilteringMode0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      
      boolean boolean1 = linkedList0.add(locale_FilteringMode0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      
      ListIterator<Locale.FilteringMode> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      
      String string7 = StringUtils.join((Iterator<?>) listIterator0, "Search and Replace array lengths don't match: ");
      assertNotNull(string7);
      assertEquals("IGNORE_EXTENDED_RANGESSearch and Replace array lengths don't match: IGNORE_EXTENDED_RANGES", string7);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertEquals(2, linkedList0.size());
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "!_]3zC");
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      String string8 = StringUtils.toRootUpperCase("Search and Replace array lengths don't match: ");
      assertNotNull(string8);
      assertEquals("SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      
      String string9 = StringUtils.removeEndIgnoreCase("object", "-1+^iy.BY9LR vs +^iy.BY9LR");
      assertNotNull(string9);
      assertEquals("object", string9);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      
      String string10 = StringUtils.replaceEachRepeatedly(" >mmrq6@46Z", (String[]) null, (String[]) null);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.removePattern("org", "org");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.trimToEmpty("QwX8nRQ9@^");
      assertNotNull(string1);
      assertEquals("QwX8nRQ9@^", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.appendIfMissing("]}l", "org", charSequenceArray0);
      assertNotNull(string2);
      assertEquals("]}lorg", string2);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      String string0 = StringUtils.unwrap("}=5n4H", "}=5n4H");
      assertNotNull(string0);
      assertEquals("}=5n4H", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.RegExUtils", "Cloneable");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.mid("", 29, 115);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Cloneable", (CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertEquals(1, stringArray0.length);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) "}=5n4H", (CharSequence) "}=5n4H");
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = StringUtils.countMatches((CharSequence) "5q]iz~zIqj|n`%r", (CharSequence) "Fq/$p");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string0 = StringUtils.replaceChars((String) null, "iZA3[Jd?", "iZA3[Jd?");
      assertNull(string0);
      
      String string1 = StringUtils.substringAfterLast("#y,PG", (String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNotBlank("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int0 = StringUtils.countMatches((CharSequence) null, '1');
      assertEquals(0, int0);
      
      String string2 = StringUtils.substringBefore((String) null, 99);
      assertNull(string2);
      
      String string3 = StringUtils.toRootUpperCase((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.swapCase("Cannot store ");
      assertNotNull(string4);
      assertEquals("cANNOT STORE ", string4);
      assertFalse(string4.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Cannot store ");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean3 = StringUtils.containsAnyIgnoreCase("iZA3[Jd?", charSequenceArray0);
      assertFalse(boolean3);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "#y,PG", 2);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOf((CharSequence) null, 55, 85);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = StringUtils.countMatches((CharSequence) "", (CharSequence) "cANNOT STORE ");
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      String string5 = StringUtils.normalizeSpace((String) null);
      assertNull(string5);
      
      String[] stringArray1 = StringUtils.substringsBetween("*hPk*hPk", (String) null, "cANNOT STORE ");
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\n", ">M!5pj?y3tT;\"+gXR", 99);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.strip((String) null);
      assertNull(string1);
      
      char[] charArray0 = new char[10];
      charArray0[0] = 'N';
      charArray0[1] = '9';
      charArray0[2] = 'e';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'N', '9', 'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(10, charArray0.length);
      
      String string2 = StringUtils.trimToEmpty("f/5~D,!");
      assertNotNull(string2);
      assertEquals("f/5~D,!", string2);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.wrapIfMissing("+o", 'T');
      assertNotNull(string1);
      assertEquals("T+oT", string1);
      
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string2);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "T+oT", 'T');
      assertEquals(2, int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'T'}, charArray0);
      assertEquals(1, charArray0.length);
      
      String string3 = StringUtils.join((Object[]) stringArray0, "m", 2, 2);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(0, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.removeAll("", "Lgukj/J]Wm<%#JDC");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank(charSequenceArray0[0], supplier0);
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(charSequence0.equals((Object)string0));
      
      String string1 = StringUtils.LF;
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      
      charSequenceArray0[2] = (CharSequence) "\n";
      String string2 = StringUtils.removeAll("\n", "Lgukj/J]Wm<%#JDC");
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      
      charSequenceArray0[3] = (CharSequence) "\n";
      String string3 = StringUtils.substringAfter("}/Yn", (-665));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      charSequenceArray0[4] = (CharSequence) "";
      String string4 = StringUtils.capitalize("Lgukj/J]Wm<%#JDC");
      assertNotNull(string4);
      assertEquals("Lgukj/J]Wm<%#JDC", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      charSequenceArray0[5] = (CharSequence) "Lgukj/J]Wm<%#JDC";
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(string4));
      
      boolean boolean0 = arrayDeque0.add("Lgukj/J]Wm<%#JDC");
      assertTrue(boolean0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("\n"));
      assertTrue(arrayDeque0.contains(string4));
      
      String string5 = StringUtils.deleteWhitespace("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string5);
      assertEquals("p{InCombiningDiacriticalMarks}+", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      charSequenceArray0[7] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      String string6 = StringUtils.join(booleanArray0, ')', (-1277), (-1977));
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)charSequence0));
      
      String string7 = StringUtils.center("Threshold must not be negative", 3975, ')');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      
      String string8 = StringUtils.rightPad("p{InCombiningDiacriticalMarks}+", 5, ')');
      assertNotNull(string8);
      assertEquals("p{InCombiningDiacriticalMarks}+", string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)charSequence0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      String string0 = StringUtils.difference("org.apache.commons.lang3.exception.CloneFailedException", "', is neither of type Map.Entry nor an Array");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[8] = true;
      String string1 = StringUtils.repeat("=", 38);
      assertNotNull(string1);
      assertEquals("======================================", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "======================================";
      charSequenceArray0[1] = (CharSequence) "=";
      boolean boolean0 = StringUtils.startsWithAny("', is neither of type Map.Entry nor an Array", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.substringsBetween("ld7mZux9.E2=J24>,", "======================================", "org.apache.commons.lang3.RegExUtils");
      assertNull(stringArray0);
      
      boolean boolean1 = StringUtils.equalsAny(charSequenceArray0[1], (CharSequence[]) null);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.contains(charSequenceArray0[0], (CharSequence) "Threshold must not be negative");
      assertFalse(boolean2);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      boolean boolean0 = StringUtils.startsWithAny("=</3TNdn{", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.substringsBetween("=</3TNdn{", "=</3TNdn{", "Strings must not be null");
      assertNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("=</3TNdn{");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      String string0 = StringUtils.repeat("Y", 16);
      assertNotNull(string0);
      assertEquals("YYYYYYYYYYYYYYYY", string0);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) null, '9');
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.truncate("an`6)*73.gaYbkS*_=", 76);
      assertNotNull(string0);
      assertEquals("an`6)*73.gaYbkS*_=", string0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      String string1 = StringUtils.join(floatArray0, 't');
      assertNotNull(string1);
      assertEquals("0.0", string1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      short[] shortArray0 = new short[0];
      String string2 = StringUtils.join(shortArray0, ':', 3324, 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.endsWith("an`6)*73.gaYbkS*_=", "0.0");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      String string0 = StringUtils.wrap("|N", "");
      assertNotNull(string0);
      assertEquals("|N", string0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[7] = true;
      String string1 = StringUtils.join(booleanArray0, '<', 5, (-1977));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("+^iy.BY9LR", (int) '<', '?');
      assertNotNull(string2);
      assertEquals("?????????????????????????+^iy.BY9LR?????????????????????????", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      String string0 = StringUtils.trim("=>w<; ^+4@y1ps#*");
      assertNotNull(string0);
      assertEquals("=>w<; ^+4@y1ps#*", string0);
      
      String string1 = StringUtils.normalizeSpace("=>w<; ^+4@y1ps#*");
      assertNotNull(string1);
      assertEquals("=>w<; ^+4@y1ps#*", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.chop("=>w<; ^+4@y1ps#*");
      assertNotNull(string2);
      assertEquals("=>w<; ^+4@y1ps#", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringAfter(", Length: ", "=>w<; ^+4@y1ps#*");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.ENGLISH;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      
      String string4 = locale1.getDisplayName();
      assertNotSame(locale1, locale0);
      assertNotNull(string4);
      assertEquals("English", string4);
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = locale0.getDisplayVariant(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      Set<Character> set0 = locale1.getExtensionKeys();
      assertNotSame(locale1, locale0);
      assertNotNull(set0);
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(locale1.equals((Object)locale0));
      
      String string6 = locale0.getDisplayVariant();
      assertNotSame(locale0, locale1);
      assertNotNull(string6);
      assertEquals("", string6);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      
      int int0 = StringUtils.getFuzzyDistance("", "=>w<; ^+4@y1ps#", locale0);
      assertNotSame(locale0, locale1);
      assertEquals(0, int0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "English";
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      String string7 = StringUtils.join(booleanArray0, '0', 256, (-497));
      assertNotNull(string7);
      assertEquals("", string7);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.joinWith(", Length: ", objectArray0);
      assertNotNull(string8);
      assertEquals("English, Length: , Length: , Length: , Length: , Length: , Length: , Length: ", string8);
      assertEquals(8, objectArray0.length);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "English, Length: , Length: , Length: , Length: , Length: , Length: , Length: ", 256);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string9 = StringUtils.center("", 291, '0');
      assertNotNull(string9);
      assertEquals("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string10 = StringUtils.trim((String) null);
      assertNull(string10);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "English";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = null;
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[0], (CharSequence) null);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[0], charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.removeEnd(" -F?LI3uAzw", " -F?LI3uAzw");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.reverseDelimited("org.apache.commons.lang3.ObjectUtils$Null", 'i');
      assertNotNull(string1);
      assertEquals("ls$Nulliorg.apache.commons.lang3.ObjectUt", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "ls$Nulliorg.apache.commons.lang3.ObjectUt");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.center("org.apache.commons.lang3.ObjectUtils$Null", (-1), '{');
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.joinWith("oe#", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "ls$Nulliorg.apache.commons.lang3.ObjectUt");
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("PEW`S?U.}N7X$cRDR=e", "'IGRMzjd`{J%z%|\"Object varargs must not be null", "J!hizcA0[OB0t7%~aH");
      assertNotNull(string4);
      assertEquals("PEW`S?U.}N7X$cRDR=e", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      
      CharBuffer charBuffer1 = CharBuffer.allocate(1653);
      assertNotNull(charBuffer1);
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(1653, charBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(1653, charBuffer1.remaining());
      assertEquals(1653, charBuffer1.capacity());
      assertEquals(1653, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      
      CharBuffer charBuffer2 = StringUtils.firstNonBlank((CharBuffer[]) null);
      assertNull(charBuffer2);
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "J!hizcA0[OB0t7%~aH", (CharSequence) "'IGRMzjd`{J%z%|\"Object varargs must not be null", (-1));
      assertEquals((-1), int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      
      String string5 = StringUtils.removeFirst("org.apache.commons.lang3.ObjectUtils$Null", "");
      assertNotNull(string5);
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) "=</3TNdn{";
      int int0 = StringUtils.compare(" ", "ymz}I.riv\"!\u0001G79q9");
      assertEquals((-89), int0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("=</3TNdn{"));
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "=</3TNdn{");
      assertNotNull(charBuffer0);
      assertEquals(9, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals("=</3TNdn{", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.remaining());
      
      CharBuffer charBuffer1 = StringUtils.getIfBlank(charBuffer0, (Supplier<CharBuffer>) null);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      assertEquals(9, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals("=</3TNdn{", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(9, charBuffer1.limit());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(9, charBuffer1.length());
      assertEquals(9, charBuffer1.remaining());
      assertEquals(9, charBuffer1.capacity());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals("=</3TNdn{", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("\r");
      assertTrue(boolean0);
      
      String string1 = StringUtils.getDigits("\r");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '>';
      charArray0[3] = '!';
      charArray0[4] = 'z';
      charArray0[5] = '7';
      charArray0[6] = '>';
      charArray0[7] = '>';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'7', '7', '>', '!', 'z', '7', '>', '>'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("\r");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.substringAfterLast("\r", "h=8*2,L^%*");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "\\u";
      String string4 = StringUtils.rightPad(string3, 147, '*');
      assertNotNull(string4);
      assertEquals("\\u*************************************************************************************************************************************************", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "h=8*2,L^%*");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.stripToEmpty("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string5);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains('*'));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = vector0.add(object0);
      assertTrue(boolean2);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(vector0.contains('*'));
      assertTrue(vector0.contains(object0));
      
      String string6 = StringUtils.join((List<?>) vector0, string3, 147, (-772));
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(vector0.contains('*'));
      assertTrue(vector0.contains(object0));
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "=</3TNdn{";
      charSequenceArray0[1] = (CharSequence) "=</3TNdn{";
      String string0 = StringUtils.leftPad("*hPk*hPk", 51, " ");
      assertNotNull(string0);
      assertEquals("                                           *hPk*hPk", string0);
      
      String string1 = StringUtils.center("                                           *hPk*hPk", 4, 'A');
      assertNotNull(string1);
      assertEquals("                                           *hPk*hPk", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      int int0 = StringUtils.compare(" ", "ymz}I.riv\"!\u0001G79q9");
      assertEquals((-89), int0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("                                           *hPk*hPk"));
      
      boolean boolean1 = linkedList0.add((Object) " ");
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(linkedList0.contains("                                           *hPk*hPk"));
      assertTrue(linkedList0.contains(" "));
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(1, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(linkedList0.contains("                                           *hPk*hPk"));
      assertTrue(linkedList0.contains(" "));
      
      String string2 = StringUtils.join((Iterator<?>) listIterator0, "...");
      assertNotNull(string2);
      assertEquals(" ", string2);
      assertEquals(1, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(linkedList0.contains("                                           *hPk*hPk"));
      assertTrue(linkedList0.contains(" "));
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Locale must not be null", "\r", 8, 8);
      assertNotNull(string0);
      assertEquals("\rust no\r", string0);
      
      String string1 = StringUtils.upperCase("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "\rust no\r", (CharSequence) "");
      assertFalse(boolean0);
      
      String string2 = StringUtils.trim("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("o%(P]/|$6|gi]", "Iwcd/at0&srmbo4dv");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = 'x';
      charArray0[2] = 'B';
      charArray0[3] = ';';
      charArray0[4] = 'H';
      charArray0[5] = 'A';
      String string3 = StringUtils.join((boolean[]) null, 'A', 8, 877);
      assertNull(string3);
      
      String string4 = StringUtils.center("9ORH^,Y9XQX{!2:Cn-", 8192, 'x');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isNoneEmpty(stringArray0);
      assertFalse(boolean1);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.compare("*k*k", "l");
      assertEquals((-66), int0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(877));
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains(877));
      
      String string5 = StringUtils.join((Iterator<?>) listIterator0, "f'@@_jKG!Z");
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(linkedList0.contains("f'@@_jKG!Z"));
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      String string0 = StringUtils.abbreviate("@:TkiY)hI)w^tp(#", "\r", 8, 8);
      assertNotNull(string0);
      assertEquals("\rI)w^tp\r", string0);
      
      String string1 = StringUtils.difference("Locale must not be null", "Locale must not be null");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      String string0 = StringUtils.strip((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.replace((String) null, "myWH:a_JY", (String) null, 0);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[8] = (CharSequence) null;
      boolean boolean0 = StringUtils.contains(charSequenceArray0[0], 0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "F#Q*U_[?pt";
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-3684.3062F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 649.0F;
      floatArray0[3] = (float) 't';
      floatArray0[4] = 649.0F;
      floatArray0[5] = (-3684.3062F);
      String string2 = StringUtils.join(floatArray0, 'y');
      assertNotNull(string2);
      assertEquals("-3684.3062y0.0y649.0y116.0y649.0y-3684.3062", string2);
      assertArrayEquals(new float[] {(-3684.3062F), 0.0F, 649.0F, 116.0F, 649.0F, (-3684.3062F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("3-uGwx ?El62;=^K");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(14, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.lastOrdinalIndexOf("-3684.3062y0.0y649.0y116.0y649.0y-3684.3062", (CharSequence) null, 49);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("8hq<0<", stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 14 vs 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      String string0 = StringUtils.replace("org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils", 0);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.CharUtils", string0);
      
      boolean boolean0 = StringUtils.endsWith("org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "org.apache.commons.lang3.CharUtils", (CharSequence) "org.apache.commons.lang3.CharUtils", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replace("", "org.apache.commons.lang3.CharUtils", " ", 2223);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      short[] shortArray0 = new short[0];
      String string2 = StringUtils.join(shortArray0, 'X');
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.replace("", "Locale must not be null", "Ja=g55J4S");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      int int1 = StringUtils.indexOf((CharSequence) "Locale must not be null", 3543);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string4 = StringUtils.EMPTY;
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.remove((String) null, " ");
      assertNull(string5);
      
      String string6 = StringUtils.defaultIfBlank("", "lZM'4s");
      assertNotNull(string6);
      assertEquals("lZM'4s", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.join((Iterator<?>) null, 'm');
      assertNull(string7);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string8 = StringUtils.strip("Threshold must not be negative", "");
      assertNotNull(string8);
      assertEquals("Threshold must not be negative", string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      
      String string9 = StringUtils.toRootLowerCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string9);
      assertEquals("org.apache.commons.lang3.stringutils", string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      String string0 = StringUtils.joinWith("", objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(6, objectArray0.length);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(locale0));
      
      Stream<Locale> stream0 = linkedList0.parallelStream();
      assertNotNull(stream0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(locale0));
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) linkedList0);
      assertNotNull(list0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      boolean boolean1 = StringUtils.isNotEmpty("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "iquMo>6?", 51);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.overlay("iquMo>6?", "org.apache.commons.lang3.exception.CloneFailedException", 51, 29);
      assertNotNull(string1);
      assertEquals("iquMo>6?org.apache.commons.lang3.exception.CloneFailedException", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("iquMo>6?org.apache.commons.lang3.exception.CloneFailedException", stringArray0);
      assertFalse(boolean2);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.wrap("U", "3S]d");
      assertNotNull(string2);
      assertEquals("3S]dU3S]d", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.chomp("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.removeStart("ulG", "RY18");
      assertNotNull(string4);
      assertEquals("ulG", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean3 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String string5 = StringUtils.capitalize("3S]dU3S]d");
      assertNotNull(string5);
      assertEquals("3S]dU3S]d", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      int int0 = StringUtils.compare("Cloneable", "");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      String string0 = StringUtils.wrap(", Length: ", "b8:C1V+");
      assertNotNull(string0);
      assertEquals("b8:C1V+, Length: b8:C1V+", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "b8:C1V+, Length: b8:C1V+", 0);
      assertFalse(boolean0);
      
      String string1 = StringUtils.uncapitalize("3Pr9se\"EQ");
      assertNotNull(string1);
      assertEquals("3Pr9se\"EQ", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = (-2087);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("b8:C1V+", 0, (-2087));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty(" ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBefore("", " ");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviate("", (-1273), Integer.MAX_VALUE);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBetween((String) null, " ", "");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      String string0 = "ymz}I.riv\"!\\1G79q9";
      String string1 = StringUtils.stripStart("ymz}I.riv\"!\u0001G79q9", "ymz}I.riv\"!\u0001G79q9");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.center(":Y*R8_X", (-32768), ",6CA\"JeG>Cloneable type ");
      assertNotNull(string2);
      assertEquals(":Y*R8_X", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "ymz}I.riv\"!\u0001G79q9", (CharSequence) ",6CA\"JeG>Cloneable type ");
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("ymz}I.riv\"!\u0001G79q9", 4, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Locale must not be null", (String) null);
      assertNotNull(string0);
      assertEquals("Locale must not be null", string0);
      
      String string1 = StringUtils.join((List<?>) null, ".D", 90, 90);
      assertNull(string1);
      
      String string2 = StringUtils.rightPad("rLz7Z", 90, "org.apache.commons.lang3.Charsets");
      assertNotNull(string2);
      assertEquals("rLz7Zorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.", string2);
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "rLz7Zorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split((String) null, "qr9Z{\"b3HCAe5J");
      assertNull(stringArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (-501L);
      longArray0[3] = (long) 90;
      longArray0[4] = (long) 90;
      longArray0[5] = (long) (-1);
      String string3 = StringUtils.join(longArray0, '`', 2798, 90);
      assertNotNull(string3);
      assertEquals("", string3);
      assertArrayEquals(new long[] {(-1L), (-1L), (-501L), 90L, 90L, (-1L)}, longArray0);
      assertEquals(6, longArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      String string0 = StringUtils.stripStart("q)gIKFU]:G", "q)gIKFU]:G");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStart((String) null, "Exception cloning Cloneable type ");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty("q)gIKFU]:G");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringAfter((String) null, " {ZKj)N%<Y?=:L");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "Exception cloning Cloneable type ";
      charSequenceArray0[2] = (CharSequence) " {ZKj)N%<Y?=:L";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.join((long[]) null, 'd');
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null, (Locale) null);
      assertNull(string0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 2620L;
      longArray0[1] = (-2515L);
      longArray0[2] = (-1L);
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      String[] stringArray0 = StringUtils.splitByCharacterType("\r");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      String string0 = StringUtils.removeAll("org.apache.commons.lang3.LocaleUtils", "org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("org.apache.commons.lang3.LocaleUtils", "Search and Replace aray lengths don't match: ");
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.LocaleUtils", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.capitalize("Search and Replace aray lengths don't match: ");
      assertNotNull(string2);
      assertEquals("Search and Replace aray lengths don't match: ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains("Search and Replace aray lengths don't match: "));
      
      boolean boolean0 = StringUtils.isAlphanumeric("org.apache.commons.lang3.LocaleUtils");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsAny("Search and Replace aray lengths don't match: ", (CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.substring("org.apache.commons.lang3.LocaleUtils", 2328, 2328);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.stripAccents("");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      long[] longArray0 = new long[20];
      longArray0[0] = (long) 95;
      String string5 = StringUtils.join(longArray0, 'v');
      assertNotNull(string5);
      assertEquals("95v0v0v0v0v0v0v0v0v0v0v0v0v0v0v0v0v0v0v0", string5);
      assertEquals(20, longArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("minimum abbreviation width with offset is %d", string0);
      
      String string1 = StringUtils.capitalize("Minimum abbreviation width with offset is %d");
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphaSpace("Minimum abbreviation width with offset is %d");
      assertFalse(boolean0);
      
      int int0 = 108;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 108;
      longArray0[1] = (long) 108;
      longArray0[2] = (long) 108;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '\\', 108, 1340);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 108
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      String string0 = StringUtils.replace("Y?$", "z7&L|>U}l", "Y?$");
      assertNotNull(string0);
      assertEquals("Y?$", string0);
      
      String string1 = StringUtils.lowerCase((String) null, (Locale) null);
      assertNull(string1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 2620L;
      longArray0[1] = (-2515L);
      longArray0[2] = (-1L);
      String string2 = StringUtils.join(longArray0, 'e');
      assertNotNull(string2);
      assertEquals("2620e-2515e-1", string2);
      assertArrayEquals(new long[] {2620L, (-2515L), (-1L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "2620e-2515e-1", 954);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.chop("Y?$");
      assertNotNull(string3);
      assertEquals("Y?", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '_';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(4, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("_eee", charBuffer0.toString());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.limit());
      assertArrayEquals(new char[] {'_', 'e', 'e', 'e'}, charArray0);
      assertEquals(4, charArray0.length);
      
      CharBuffer charBuffer1 = StringUtils.defaultIfEmpty(charBuffer0, charBuffer0);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      assertTrue(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(4, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("_eee", charBuffer0.toString());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.limit());
      assertEquals(4, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(4, charBuffer1.limit());
      assertEquals(4, charBuffer1.length());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals(4, charBuffer1.remaining());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals("_eee", charBuffer1.toString());
      assertArrayEquals(new char[] {'_', 'e', 'e', 'e'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      String string0 = StringUtils.stripToNull("q)gIKFU]:G");
      assertNotNull(string0);
      assertEquals("q)gIKFU]:G", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "q)gIKFU]:G", (-562), (-562));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeStart("q)gIKFU]:G", "q)gIKFU]:G");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isEmpty("q)gIKFU]:G");
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeIgnoreCase("q)gIKFU]:G", "q)gIKFU]:G");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = '?';
      charArray0[4] = 'A';
      charArray0[5] = 'A';
      charArray0[6] = 'A';
      charArray0[7] = 'A';
      String string3 = StringUtils.join(charArray0, '?');
      assertNotNull(string3);
      assertEquals("A?A?A???A?A?A?A", string3);
      assertArrayEquals(new char[] {'A', 'A', 'A', '?', 'A', 'A', 'A', 'A'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.substring("q)gIKFU]:G", 1, (-562));
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("u6/p", "u6/p", "u6/p");
      assertNotNull(string0);
      assertEquals("u6/p", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      String string1 = StringUtils.remove("u6/p", "dI?So`d");
      assertNotNull(string1);
      assertEquals("u6/p", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("org.apache.commons.lang3.StringUtils", "g:hZ#tB", "u6/p");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("K9zr6aBQ~W<ak");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "g:hZ#tB", "u6/p");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("u6/p", (CharSequence[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string2 = StringUtils.wrap("dI?So`d", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.StringUtilsdI?So`dorg.apache.commons.lang3.StringUtils", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.defaultIfEmpty("K9zr6aBQ~W<ak", "ymz}I.riv\"!\u0001G79q9");
      assertNotNull(string3);
      assertEquals("K9zr6aBQ~W<ak", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.substring("org.apache.commons.lang3.StringUtils", (-1386), (-3287));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.toRootLowerCase((String) null);
      assertNull(string5);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains((-3287)));
      
      Integer integer0 = new Integer((-1386));
      assertNotNull(integer0);
      assertEquals((-1386), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((-646));
      assertNotNull(integer1);
      assertEquals((-646), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      boolean boolean3 = priorityQueue0.add(integer1);
      assertTrue(boolean3);
      assertEquals(1, priorityQueue0.size());
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(priorityQueue0.contains((-646)));
      assertFalse(priorityQueue0.contains((-3287)));
      
      String string6 = StringUtils.join((Iterable<?>) priorityQueue0, (String) null);
      assertNotNull(string6);
      assertEquals("-646", string6);
      assertEquals(1, priorityQueue0.size());
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(priorityQueue0.contains((-646)));
      assertFalse(priorityQueue0.contains((-3287)));
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      String string0 = StringUtils.stripToNull("q)gIKFU]:G");
      assertNotNull(string0);
      assertEquals("q)gIKFU]:G", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "q)gIKFU]:G", (-562), (-562));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultIfEmpty("", "q)gIKFU]:G");
      assertNotNull(string1);
      assertEquals("q)gIKFU]:G", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("", 0, 1);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "q)gIKFU]:G";
      String string3 = StringUtils.join((short[]) null, 'H');
      assertNull(string3);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, "", 2147483645, (-1));
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)41;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      
      String string5 = StringUtils.toEncodedString(byteArray0, charset0);
      assertNotNull(string5);
      assertEquals("~\u0004$\uFFFD)", string5);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertArrayEquals(new byte[] {(byte)126, (byte)4, (byte)36, (byte) (-1), (byte)41}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      String string0 = StringUtils.capitalize("trp>swCR$s*4IS`B}j");
      assertNotNull(string0);
      assertEquals("Trp>swCR$s*4IS`B}j", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Trp>swCR$s*4IS`B}j";
      objectArray0[1] = (Object) "Trp>swCR$s*4IS`B}j";
      String string1 = StringUtils.join((short[]) null, 'F');
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      String string2 = StringUtils.prependIfMissingIgnoreCase("Trp>swCR$s*4IS`B}j", "trp>swCR$s*4IS`B}j", charSequenceArray0);
      assertNotNull(string2);
      assertEquals("Trp>swCR$s*4IS`B}j", string2);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringBefore("!@", "trp>swCR$s*4IS`B}j");
      assertNotNull(string3);
      assertEquals("!@", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.deleteWhitespace((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.defaultString("+^iy.BY9LR");
      assertNotNull(string5);
      assertEquals("+^iy.BY9LR", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-66);
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      
      String string0 = StringUtils.toEncodedString(byteArray0, charset0);
      assertNotNull(string0);
      assertEquals("F\uFFFD", string0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertArrayEquals(new byte[] {(byte)70, (byte) (-66)}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.removePattern("org", "org");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.trimToEmpty("QwX8nRQ9@^");
      assertNotNull(string1);
      assertEquals("QwX8nRQ9@^", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.appendIfMissing("`}l", "org", charSequenceArray0);
      assertNotNull(string2);
      assertEquals("`}lorg", string2);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.normalizeSpace("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.right("QwX8nRQ9@^", 90);
      assertNotNull(string4);
      assertEquals("QwX8nRQ9@^", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "maxWith cannot be negative", 70);
      assertNull(stringArray0);
      
      String string0 = StringUtils.unwrap("+^iy.BY9LR", '}');
      assertNotNull(string0);
      assertEquals("+^iy.BY9LR", string0);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("org.apache.commons.lang3.StringUtils", 'N');
      assertNotNull(string0);
      assertEquals("Norg.apache.commons.lang3.StringUtilsN", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Norg.apache.commons.lang3.StringUtilsN");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter("org.apache.commons.lang3.StringUtils", "Norg.apache.commons.lang3.StringUtilsN");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "Norg.apache.commons.lang3.StringUtilsN");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.normalizeSpace("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.substringsBetween("CUh`>,A@d?e`;Inl", "CUh`>,A@d?e`;Inl", "uGwx ?El62;=^K");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "uGwx ?El62;=^K", 57);
      assertNull(stringArray1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "uGwx ?El62;=^K";
      charSequenceArray0[1] = (CharSequence) "uGwx ?El62;=^K";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      char[] charArray0 = new char[9];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 'N';
      charArray0[5] = 'N';
      charArray0[6] = 'N';
      charArray0[7] = 'N';
      charArray0[8] = 'N';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-1), 57);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.normalizeSpace("9Dc@!.%?KZv~4=b");
      assertNotNull(string1);
      assertEquals("9Dc@!.%?KZv~4=b", string1);
      
      charSequenceArray0[1] = (CharSequence) "9Dc@!.%?KZv~4=b";
      String[] stringArray0 = StringUtils.substringsBetween("9Dc@!.%?KZv~4=b", " vs ", "9Dc@!.%?KZv~4=b");
      assertNull(stringArray0);
      
      float[] floatArray0 = new float[0];
      String string2 = StringUtils.join(floatArray0, 't');
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.splitByCharacterType("9Dc@!.%?KZv~4=b");
      assertNotNull(stringArray1);
      assertEquals(10, stringArray1.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf("8hq<0<", "9Dc@!.%?KZv~4=b", (-4300));
      assertEquals((-1), int0);
      
      String[] stringArray2 = new String[9];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = null;
      stringArray2[1] = " vs ";
      stringArray2[2] = "9Dc@!.%?KZv~4=b";
      stringArray2[3] = "9Dc@!.%?KZv~4=b";
      stringArray2[4] = "9Dc@!.%?KZv~4=b";
      stringArray2[5] = " vs ";
      stringArray2[6] = "sd1:Q6KFk?B!O";
      stringArray2[7] = " vs ";
      stringArray2[8] = null;
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("9Dc@!.%?KZv~4=b", stringArray2, stringArray2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2380.0F);
      floatArray0[3] = (-3684.3062F);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)17;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-3866);
      shortArray0[3] = (short)13;
      shortArray0[4] = (short)17;
      String string0 = StringUtils.join(shortArray0, '5');
      assertNotNull(string0);
      assertEquals("17505-3866513517", string0);
      assertArrayEquals(new short[] {(short)17, (short)0, (short) (-3866), (short)13, (short)17}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) (short)13;
      objectArray0[1] = (Object) (-3684.3062F);
      objectArray0[2] = (Object) (-2380.0F);
      String string1 = "aJ;_#\\u!!y+tx,w7c+}=5n4H";
      String string2 = StringUtils.join(objectArray0, string1, (int) (short)13, (int) (short)17);
      assertNotNull(string2);
      assertEquals("aJ;_#\\u!!y+tx,w7c+}=5n4HaJ;_#\\u!!y+tx,w7c+}=5n4HaJ;_#\\u!!y+tx,w7c+}=5n4H", string2);
      assertEquals(21, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      String string0 = StringUtils.rightPad("\r", 1464, "\r");
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) string0, 'e');
      assertEquals(0, int0);
      
      String string1 = StringUtils.uncapitalize("Minimum abbreviation width with offset is %d");
      assertNotNull(string1);
      assertEquals("minimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.capitalize("Minimum abbreviation width with offset is %d");
      assertNotNull(string2);
      assertEquals("Minimum abbreviation width with offset is %d", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlphaSpace("Minimum abbreviation width with offset is %d");
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.isWhitespace("Minimum abbreviation width with offset is %d");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charBuffer0.length());
      assertEquals("eeee", charBuffer0.toString());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertArrayEquals(new char[] {'e', 'e', 'e', 'e'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean boolean3 = linkedList0.add(charBuffer0);
      assertTrue(boolean3);
      assertEquals(1, linkedList0.size());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charBuffer0.length());
      assertEquals("eeee", charBuffer0.toString());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertArrayEquals(new char[] {'e', 'e', 'e', 'e'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(linkedList0.contains(charBuffer0));
      
      UnaryOperator<CharBuffer> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      boolean boolean4 = linkedList0.removeFirstOccurrence("Minimum abbreviation width with offset is %d");
      assertFalse(boolean4);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(linkedList0.contains(charBuffer0));
      
      linkedList0.replaceAll(unaryOperator0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(charBuffer0));
      
      String string3 = StringUtils.join((List<?>) linkedList0, '/', 1085, 0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(1, linkedList0.size());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(linkedList0.contains(charBuffer0));
      
      String string4 = StringUtils.deleteWhitespace("O<;");
      assertNotNull(string4);
      assertEquals("O<;", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      int int2 = StringUtils.lastOrdinalIndexOf("Minimum abbreviation width with offset is %d", "O<;", 1464);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string5 = StringUtils.repeat("-G-&`Zh?H", "x8tj", 1085);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = null;
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.replacePattern("t", "t", "t");
      assertNotNull(string0);
      assertEquals("t", string0);
      
      String string1 = StringUtils.wrapIfMissing("t", "t");
      assertNotNull(string1);
      assertEquals("t", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphaSpace("t");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2380.0F);
      floatArray0[3] = (-3684.3062F);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)17;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-3866);
      shortArray0[3] = (short)13;
      shortArray0[4] = (short)17;
      String string0 = StringUtils.join(shortArray0, '5');
      assertNotNull(string0);
      assertEquals("17505-3866513517", string0);
      assertArrayEquals(new short[] {(short)17, (short)0, (short) (-3866), (short)13, (short)17}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (short)13;
      objectArray0[1] = (Object) (-3684.3062F);
      objectArray0[2] = (Object) (-2380.0F);
      String string1 = StringUtils.prependIfMissingIgnoreCase("17505-3866513517", "17505-3866513517", (CharSequence[]) null);
      assertNotNull(string1);
      assertEquals("17505-3866513517", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("17505-3866513517", "ch");
      assertNotNull(string2);
      assertEquals("17505-3866513517", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.deleteWhitespace("fWZ)Sc1*NVJ(u");
      assertNotNull(string3);
      assertEquals("fWZ)Sc1*NVJ(u", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.defaultString("17505-3866513517");
      assertNotNull(string4);
      assertEquals("17505-3866513517", string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      
      int int0 = StringUtils.compareIgnoreCase("17505-3866513517", (String) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      
      boolean boolean0 = StringUtils.equalsAny(charBuffer0, (CharSequence[]) null);
      assertFalse(boolean0);
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      
      boolean boolean1 = StringUtils.contains((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertTrue(boolean1);
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.join((byte[]) null, '<', 1710, 1);
      assertNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("", (String) null, true);
      assertEquals(1, int0);
      
      String string1 = StringUtils.rightPad(", Length: ", 3215, '<');
      assertNotNull(string1);
      
      String string2 = StringUtils.LF;
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.lastOrdinalIndexOf(", Length: ", charBuffer0, 1710);
      assertEquals(10, int1);
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.rotate("\n", 1);
      assertNotNull(string3);
      assertEquals("\n", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      String string0 = StringUtils.strip((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.replace((String) null, "myWH:a_JY", (String) null, 0);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) null;
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[1], charSequenceArray0[1]);
      assertEquals((-1), int0);
      assertEquals(9, charSequenceArray0.length);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "myWH:a_JY";
      stringArray0[3] = null;
      stringArray0[4] = "Array and element cannot both be null";
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      String string2 = StringUtils.join(intArray0, 'I');
      assertNotNull(string2);
      assertEquals("-1", string2);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'I';
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[1], charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'I'}, charArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.removeEnd("Exception cloning Cloneable type ", "-1");
      assertNotNull(string3);
      assertEquals("Exception cloning Cloneable type ", string3);
      assertFalse(string3.equals((Object)string2));
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[2], (CharSequence) string0);
      assertEquals((-1), int1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.center("maxWith cannot be negative", (-1), 'I');
      assertNotNull(string4);
      assertEquals("maxWith cannot be negative", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.joinWith("maxWith cannot be negative", stringArray0);
      assertNotNull(string5);
      assertEquals("maxWith cannot be negativemaxWith cannot be negativemyWH:a_JYmaxWith cannot be negativemaxWith cannot be negativeArray and element cannot both be null", string5);
      assertEquals(5, stringArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean2 = StringUtils.isNotEmpty("maxWith cannot be negativemaxWith cannot be negativemyWH:a_JYmaxWith cannot be negativemaxWith cannot be negativeArray and element cannot both be null");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("Exception cloning Cloneable type ", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.truncate((String) null, (-1294));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      String string0 = StringUtils.replace("org.apache.commons.lang3.CharUtils", "#Ln", "#Ln", (-1994));
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.CharUtils", string0);
      
      String string1 = StringUtils.repeat("3-", 23);
      assertNotNull(string1);
      assertEquals("3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.remove("p]V}~`<>", "org.apache.commons.lang3.CharUtils");
      assertNotNull(string2);
      assertEquals("p]V}~`<>", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.substringsBetween("org.apache.commons.lang3.CharUtils", "yd4", "Te>");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("K9zr6aBQ~W<ak");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "3-", "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("p]V}~`<>", (CharSequence[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string3 = StringUtils.wrap("br\"lc@Nu", "p]V}~`<>");
      assertNotNull(string3);
      assertEquals("p]V}~`<>br\"lc@Nup]V}~`<>", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.leftPad("S", 160, '1');
      assertNotNull(string4);
      assertEquals("111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111S", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.removeStart("3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-", "kxb<t?J-_T})o'i4cWq");
      assertNotNull(string5);
      assertEquals("3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-", string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean3 = StringUtils.isEmpty("3-");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string6 = StringUtils.chomp("3-", "uGwx ?El62;=^K");
      assertNotNull(string6);
      assertEquals("3-", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      
      boolean boolean4 = StringUtils.containsAny((CharSequence) "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111S", (char[]) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      String string0 = StringUtils.strip((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.replace((String) null, "myWH:a_JY", (String) null, 0);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) null;
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string2 = StringUtils.leftPad((String) null, 0, 'x');
      assertNull(string2);
      
      String string3 = StringUtils.removeStart((String) null, "myWH:a_JY");
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isEmpty(charSequenceArray0[0]);
      assertFalse(boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      String string0 = StringUtils.difference("", "', is neither of type Map.Entry nor an Array");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "', is neither of type Map.Entry nor an Array";
      stringArray0[2] = "', is neither of type Map.Entry nor an Array";
      stringArray0[4] = "T&";
      stringArray0[5] = "T&";
      stringArray0[6] = "', is neither of type Map.Entry nor an Array";
      stringArray0[7] = "";
      stringArray0[8] = "', is neither of type Map.Entry nor an Array";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string1);
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      assertEquals(9, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.reverse("Qt3");
      assertNotNull(string2);
      assertEquals("3tQ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripEnd("3tQ", "', is neither of type Map.Entry nor an Array");
      assertNotNull(string3);
      assertEquals("3tQ", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle((String) null, (String) null, 3168);
      assertNull(string2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 3168;
      boolean boolean0 = StringUtils.containsAny((CharSequence) string0, (char[]) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.substring(string0, 5);
      assertNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string0, 3168);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      String string0 = StringUtils.defaultString("}=5n4H", "}=5n4H");
      assertNotNull(string0);
      assertEquals("}=5n4H", string0);
      
      String string1 = StringUtils.deleteWhitespace("}=5n4H");
      assertNotNull(string1);
      assertEquals("}=5n4H", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.right((String) null, (-1));
      assertNull(string2);
      
      String string3 = StringUtils.substring((String) null, 122);
      assertNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "Strings must not be null", 13);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      String string0 = StringUtils.getDigits("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat("", 160);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.remove("K9zr6aBQ~W<ak", "p]V}~`<>");
      assertNotNull(string2);
      assertEquals("K9zr6aBQ~W<ak", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("@<q", "", "ymz}I.riv\"!\u0001G79q9");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.wrapIfMissing("E,``;>-KA34Z\"4+Z6vF", '>');
      assertNotNull(string3);
      assertEquals(">E,``;>-KA34Z\"4+Z6vF>", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = StringUtils.substringAfter((String) null, "ymz}I.riv\"!\u0001G79q9");
      assertNull(string4);
      
      char[] charArray0 = new char[0];
      boolean boolean3 = StringUtils.containsAny((CharSequence) "K9zr6aBQ~W<ak", charArray0);
      assertFalse(boolean3);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      String string5 = StringUtils.substring("Sr_d(zDi", 160);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "p]V}~`<>", 160);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.replacePattern("", "&RH3~", "k}<HVz-2R)&T\"?SXm2l");
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "E,``;>-KA34Z\"4+Z6vF", (CharSequence) "", 15);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string7 = "aJ;_#\\u!!y+tx,w7c+";
      String string8 = StringUtils.getDigits(string7);
      assertNotNull(string8);
      assertEquals("7", string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      String string1 = StringUtils.abbreviateMiddle("org.apache.commons.lang3.StringUtils", "e`HN$WH5+vZ*qe!])", 730);
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.lang3.StringUtils";
      stringArray0[1] = "e`HN$WH5+vZ*qe!])";
      stringArray0[2] = "org.apache.commons.lang3.StringUtils";
      stringArray0[3] = "org.apache.commons.lang3.StringUtils";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 3168;
      char[] charArray0 = new char[7];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = 'A';
      charArray0[5] = 'A';
      charArray0[6] = 'A';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "org.apache.commons.lang3.StringUtils", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'A', 'A', 'A', 'A', 'A', 'A', 'A'}, charArray0);
      assertEquals(7, charArray0.length);
      
      String string2 = StringUtils.substring("org.apache.commons.lang3.StringUtils", (-860));
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils", 77);
      assertEquals(0, int0);
      
      String string3 = StringUtils.replacePattern("&RH3~", "org.apache.commons.lang3.ObjectUtils$Nullymz}I.riv\"!\u0001G79q9", "wk{k#l;cX>");
      assertNotNull(string3);
      assertEquals("&RH3~", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Sr_d(zDi", (CharSequence) "org.apache.commons.lang3.ObjectUtils$Nullymz}I.riv\"!\u0001G79q9", 15);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      String string0 = StringUtils.chop("Strings must not be null");
      assertNotNull(string0);
      assertEquals("Strings must not be nul", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Strings must not be nul", (CharSequence) "Strings must not be nul", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be nul", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[2] = (CharSequence) "z);IF%7";
      String string1 = StringUtils.wrapIfMissing("Strings must not be nul", "q");
      assertNotNull(string1);
      assertEquals("qStrings must not be nulq", string1);
      assertFalse(string1.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("Strings must not be nul", "}Z/");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string0 = StringUtils.join((List<?>) arrayList0, '}', 31, (-3429));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains((-3429)));
      
      String string1 = StringUtils.getIfEmpty("", (Supplier<String>) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      String string0 = StringUtils.joinWith("", objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(6, objectArray0.length);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string1 = StringUtils.strip("", (String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replace("PbZJeNB*cf", ",6CA\"JeG>Cloneable type ", "org.apache.commons.lang3.ObjectUtils$Null", 256);
      assertNotNull(string2);
      assertEquals("PbZJeNB*cf", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "PbZJeNB*cf", 0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = ",6CA\"JeG>Cloneable type ";
      stringArray0[2] = "PbZJeNB*cf";
      stringArray0[3] = "myWH:a_JY";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "^}uF;@caT($XgyDT");
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      assertEquals(4, stringArray1.length);
      assertEquals(4, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String string3 = StringUtils.substringAfterLast("ch", "offset cannot be negative");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.join(objectArray0, '0');
      assertNotNull(string4);
      assertEquals("00000", string4);
      assertEquals(6, objectArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "ch");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("ch", charBuffer0.toString());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      
      Supplier<CharBuffer> supplier0 = (Supplier<CharBuffer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharBuffer charBuffer1 = StringUtils.getIfEmpty(charBuffer0, supplier0);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("ch", charBuffer0.toString());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer1.remaining());
      assertEquals(2, charBuffer1.capacity());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(2, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertEquals("ch", charBuffer1.toString());
      assertEquals(2, charBuffer1.limit());
      assertTrue(charBuffer1.isReadOnly());
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) charBuffer0, "e^\"phMZeB.YWYv\"V");
      assertSame(charBuffer0, charBuffer1);
      assertFalse(boolean2);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("ch", charBuffer0.toString());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      String[] stringArray0 = StringUtils.split("+^iy.BY9LR");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.prependIfMissingIgnoreCase("vZ7p", "+^iy.BY9LR", stringArray0);
      assertNotNull(string0);
      assertEquals("+^iy.BY9LRvZ7p", string0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "+^iy.BY9LR");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("^}uF;@caT($XgyDT");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotNull(stringArray2);
      assertEquals(11, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      String string1 = StringUtils.substringAfterLast("+^iy.BY9LR", "-1");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((Object[]) stringArray2, 'E');
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotNull(string2);
      assertEquals("^E}EuEFE;@EcaETE(E$EXgyEDT", string2);
      assertEquals(11, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "+^iy.BY9LRvZ7p");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(14, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(14, charBuffer0.remaining());
      assertEquals(14, charBuffer0.length());
      assertEquals("+^iy.BY9LRvZ7p", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(14, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      
      CharBuffer charBuffer1 = StringUtils.getIfEmpty(charBuffer0, (Supplier<CharBuffer>) null);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(14, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(14, charBuffer0.remaining());
      assertEquals(14, charBuffer0.length());
      assertEquals("+^iy.BY9LRvZ7p", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(14, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(14, charBuffer1.remaining());
      assertEquals(14, charBuffer1.capacity());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertEquals(14, charBuffer1.length());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals("+^iy.BY9LRvZ7p", charBuffer1.toString());
      assertEquals(14, charBuffer1.limit());
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) charBuffer0, (String) null);
      assertSame(charBuffer0, charBuffer1);
      assertFalse(boolean0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(14, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(14, charBuffer0.remaining());
      assertEquals(14, charBuffer0.length());
      assertEquals("+^iy.BY9LRvZ7p", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(14, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = (-1.0F);
      String string0 = StringUtils.substring("org.apache.commons.lang3.ObjectUtilsyNull", (-2260));
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.ObjectUtilsyNull", string0);
      
      HashSet<CharBuffer> hashSet0 = null;
      try {
        hashSet0 = new HashSet<CharBuffer>((-173));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -173
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      charArray0[1] = '$';
      charArray0[2] = 'U';
      charArray0[3] = '%';
      charArray0[4] = '|';
      charArray0[5] = 'U';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'5', '$', 'U', '%', '|', 'U'}, charArray0);
      assertEquals(6, charArray0.length);
      
      String string0 = StringUtils.substring("", (-1718));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) "', is neither of type Map.Entry nor an Array", (-1718));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      String string0 = StringUtils.substringAfter("`|VR<%e@Yv0O;", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEnd("", ".l90_LWh");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.center(";46#", (-1517));
      assertNotNull(string2);
      assertEquals(";46#", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.chop("~RjyS#oW?h");
      assertNotNull(string3);
      assertEquals("~RjyS#oW?", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.stripStart("s&#ZhXWH_C#TqO", "v-_O*Q[VXxVuN,(Q1iy");
      assertNotNull(string4);
      assertEquals("s&#ZhXWH_C#TqO", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.substringBeforeLast("~RjyS#oW?h", "");
      assertNotNull(string5);
      assertEquals("~RjyS#oW?h", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isNumericSpace("v-_O*Q[VXxVuN,(Q1iy");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      String string0 = StringUtils.repeat("DP*Dn$a", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "DP*Dn$a";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "DP*Dn$a";
      objectArray0[3] = (Object) "DP*Dn$a";
      objectArray0[4] = (Object) "H";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "DP*Dn$a";
      String string1 = StringUtils.joinWith("H", objectArray0);
      assertNotNull(string1);
      assertEquals("DP*Dn$aHHDP*Dn$aHDP*Dn$aHHHHDP*Dn$a", string1);
      assertEquals(7, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlpha("DP*Dn$a");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(locale0));
      
      Stream<Locale> stream0 = linkedList0.parallelStream();
      assertNotNull(stream0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(locale0));
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) linkedList0);
      assertNotNull(list0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(linkedList0.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) list0, locale_FilteringMode0);
      assertNotSame(list1, list0);
      assertNotSame(list0, list1);
      assertNotNull(list1);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.equals((Object)list0));
      assertFalse(list1.contains(locale0));
      assertFalse(linkedList0.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      String string2 = locale0.getDisplayLanguage();
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.lowerCase("DP*Dn$a", locale0);
      assertNotNull(string3);
      assertEquals("dp*dn$a", string3);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isNumericSpace("DP*Dn$aHHDP*Dn$aHDP*Dn$aHHHHDP*Dn$a");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.isAlpha(" vs ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("ack)'@E\"b");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.unwrap("2 uEwqO#", '0');
      assertNotNull(string1);
      assertEquals("2 uEwqO#", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      String string0 = StringUtils.repeat('?', 31);
      assertNotNull(string0);
      assertEquals("???????????????????????????????", string0);
      
      boolean boolean0 = StringUtils.isAlpha("u");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("0V0u<zY", '?');
      assertNotNull(string1);
      assertEquals("?0V0u<zY?", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) " vs ";
      charSequenceArray0[1] = (CharSequence) " vs ";
      charSequenceArray0[2] = (CharSequence) " vs ";
      String string0 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(charSequenceArray0[1]);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string1 = StringUtils.join((List<?>) null, 'Y', 2445, 2328);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.equalsAny(charSequenceArray0[0], charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1315;
      shortArray0[1] = (short)19;
      String string2 = StringUtils.join(shortArray0, ',');
      assertNotNull(string2);
      assertEquals("1315,19", string2);
      assertArrayEquals(new short[] {(short)1315, (short)19}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      String string3 = StringUtils.join((List<?>) null, 'h', (int) (short)1315, 83);
      assertNull(string3);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("]17lS~p6~-Iy*", (CharSequence) null, (CharSequence[]) null);
      assertNotNull(string4);
      assertEquals("]17lS~p6~-Iy*", string4);
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.substringBefore(" in an array of ", " in an array of ");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.deleteWhitespace("Ud");
      assertNotNull(string6);
      assertEquals("Ud", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.defaultString(" in an array of ");
      assertNotNull(string7);
      assertEquals(" in an array of ", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      String[] stringArray0 = StringUtils.split("+^iy.BY9LR");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.prependIfMissingIgnoreCase("", "", stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.joinWith("vZ7p", stringArray0);
      assertNotNull(string1);
      assertEquals("+^iy.BY9LR", string1);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.CR;
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      charSequenceArray0[0] = (CharSequence) "\r";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAlphaSpace("9Dc@!.%?KZv~4=b");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      String string0 = StringUtils.truncate("an`6)*73.gaYbkS*_=", 76);
      assertNotNull(string0);
      assertEquals("an`6)*73.gaYbkS*_=", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAny("Threshold must not be negative", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Threshold must not be negative", (CharSequence) "an`6)*73.gaYbkS*_=");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 0.0;
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.replaceEachRepeatedly("$ V", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("$ V", string0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.replaceFirst("J F26R", "Threshold must not be negative", "Threshold must not be negative");
      assertNotNull(string1);
      assertEquals("J F26R", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isMixedCase("$ V");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.truncate("an`6)*73.gaYbkS*_=", 76);
      assertNotNull(string0);
      assertEquals("an`6)*73.gaYbkS*_=", string0);
      
      String string1 = StringUtils.repeat("an`6)*73.gaYbkS*_=", (-1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      boolean boolean1 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "an`6)*73.gaYbkS*_=", "Threshold must not be negative");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "Threshold must not be negative", (CharSequence) "an`6)*73.gaYbkS*_=");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.chomp("\n");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.left((String) null, (-3242));
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, 'A');
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      Locale locale0 = new Locale("^7So#AR)U`4Kg!+0", "toTquVatc8 zWjm");
      assertNotNull(locale0);
      assertEquals("^7so#ar)u`4kg!+0_TOTQUVATC8 ZWJM", locale0.toString());
      assertEquals("^7so#ar)u`4kg!+0", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TOTQUVATC8 ZWJM", locale0.getCountry());
      
      String string1 = StringUtils.upperCase("", locale0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals("^7so#ar)u`4kg!+0_TOTQUVATC8 ZWJM", locale0.toString());
      assertEquals("^7so#ar)u`4kg!+0", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TOTQUVATC8 ZWJM", locale0.getCountry());
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("^7So#AR)U`4Kg!+0", 0, "^7So#AR)U`4Kg!+0");
      assertNotNull(string2);
      assertEquals("^7So#AR)U`4Kg!+0", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("toTquVatc8 zWjm");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.left("fF?r", 0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "b", "dPkc'so");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.unwrap("Threshold must not be negative", 'T');
      assertNotNull(string4);
      assertEquals("Threshold must not be negative", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      String string0 = StringUtils.unwrap(" ", " ");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.difference("Locale must not be null", " ");
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Locale must not be null", (CharSequence) "Locale must not be null", 3515);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.rotate(" ", 9);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.appendIfMissing(" ", " ", charSequenceArray0);
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '_';
      charArray0[1] = '_';
      int int0 = StringUtils.indexOfAny((CharSequence) " ", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'_', '_'}, charArray0);
      assertEquals(2, charArray0.length);
      
      String string2 = StringUtils.center("\"v.aG1F{", 9);
      assertNotNull(string2);
      assertEquals("\"v.aG1F{", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.removePattern("minimum abbreviatio", "\"O");
      assertNotNull(string0);
      assertEquals("minimum abbreviatio", string0);
      
      String string1 = StringUtils.truncate("Invalid locale format: ", 19, 4);
      assertNotNull(string1);
      assertEquals("at: ", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      String string0 = StringUtils.unwrap("i<&oNg)<Z03`A_m", '~');
      assertNotNull(string0);
      assertEquals("i<&oNg)<Z03`A_m", string0);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      String string0 = StringUtils.truncate("Strings must not be null", 12);
      assertNotNull(string0);
      assertEquals("Strings must", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Strings must", (CharSequence) "Strings must not be null");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.unwrap("Strings must not be null", '\"');
      assertNotNull(string1);
      assertEquals("Strings must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviate("', has a length less than 2", "Strings must not be null", 2512);
      assertNotNull(string2);
      assertEquals("', has a length less than 2", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBefore("Threshold must not be negative", 2512);
      assertNotNull(string3);
      assertEquals("Threshold must not be negative", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split("-1O$FaR8|:XA", 'o');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.center("Strings must", (-1), "Strings must not be null");
      assertNotNull(string4);
      assertEquals("Strings must", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      
      String string5 = StringUtils.getDigits("Strings must not be null");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.stripStart("-1O$FaR8|:XA", " Q~?py&WA");
      assertNotNull(string6);
      assertEquals("-1O$FaR8|:XA", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.rotate("', has a length less than 2", 12);
      assertNotNull(string7);
      assertEquals(" less than 2', has a length", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      
      int int1 = StringUtils.indexOf((CharSequence) "-1O$FaR8|:XA", 12);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string8 = StringUtils.rightPad(" Q~?py&WA", 12, 'K');
      assertNotNull(string8);
      assertEquals(" Q~?py&WAKKK", string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "', has a length less than 2", (CharSequence) " less than 2', has a length", 5249);
      assertEquals(23, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      int int3 = StringUtils.getFuzzyDistance("', has a length less than 2", " Q~?py&WAKKK", locale0);
      assertEquals(1, int3);
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("', has a length less than 2", "-1O$FaR8|:XA");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      String string0 = StringUtils.stripEnd("}BKHGagOW39v[`}BKHGagOW39v[`", "}BKHGagOW39v[`}BKHGagOW39v[`");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, '1');
      assertNotNull(string0);
      assertEquals("1111111111", string0);
      assertEquals(11, charSequenceArray0.length);
      
      String string1 = StringUtils.substringAfter("*hPk*hPk", "*hPk*hPk");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = '7';
      charArray0[2] = '>';
      charArray0[3] = '1';
      charArray0[4] = '1';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'!', '7', '>', '1', '1'}, charArray0);
      assertEquals(5, charArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("h=8*2,L^*");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      String string2 = StringUtils.substringAfterLast("/!E", "/!E");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.rightPad("h=8*2,L^*", 147, '@');
      assertNotNull(string3);
      assertEquals("h=8*2,L^*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "h=8*2,L^*", "G{at8*#n=LtSOgA-XdL");
      assertEquals(1, int0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "/!E", (CharSequence) "1111111111", 11);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.chop("bn7CTVeUygi");
      assertNotNull(string4);
      assertEquals("bn7CTVeUyg", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("*k*k", "...");
      assertNotNull(string0);
      assertEquals("*k*k", string0);
      
      String string1 = StringUtils.toRootLowerCase("...");
      assertNotNull(string1);
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.unwrap("*k*k", "\"");
      assertNotNull(string2);
      assertEquals("*k*k", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "*k*k", (CharSequence) "*k*k");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.getDigits("*k*k");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      String string0 = StringUtils.getDigits("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat("", 160);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.remove("K9zr6aBQ~W<ak", "p]V}~`<>");
      assertNotNull(string2);
      assertEquals("K9zr6aBQ~W<ak", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("@<q", "", "ymz}I.riv\"!\u0001G79q9");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string3 = StringUtils.substringAfter("", "ymz}I.riv\"!\u0001G79q9");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.substring("Sr_d(zDi", 160);
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "p]V}~`<>", 160);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "E,``;>-KA34Z\"4+Z6vF", (CharSequence) "", 15);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Rn*5", 'h');
      assertNotNull(string0);
      assertEquals("hRn*5h", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("E,``;>-KA34Z\"4+Z6vF");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter("xSQHz.<E{uk%", "maxWith cannot be negative");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring(":Pxm})", 32);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ":Pxm})", (CharSequence) "', has a length less than 2", 589);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "maxWith cannot be negative", 5);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.remove("", "offset cannot be negative");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.remove(".'[X!{", 'a');
      assertNotNull(string4);
      assertEquals(".'[X!{", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      vector0.clear();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, '4', 20, 589);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 589
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, "}a4aSsX!}1", 0, 1872);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1872
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.center((String) null, (-2981), (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.trim((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.wrap("+^iy.BY9LR vs ", '8');
      assertNotNull(string3);
      assertEquals("8+^iy.BY9LR vs 8", string3);
      
      boolean boolean2 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean2);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.capitalize((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.join(stringArray0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(0, stringArray0.length);
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.mid("@8;*\"C;`=T5ti", (-2981), 256);
      assertNotNull(string6);
      assertEquals("@8;*\"C;`=T5ti", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "*k*k", 256);
      assertEquals((-1), int0);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, "4~PIm\\>|c4a", (-1), 256);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, '1');
      assertNotNull(string0);
      assertEquals("1111111111", string0);
      assertEquals(11, charSequenceArray0.length);
      
      String string1 = StringUtils.substringAfter("*hPk*hPk", "*hPk*hPk");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = '7';
      charArray0[2] = '>';
      charArray0[3] = '1';
      charArray0[4] = '1';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'!', '7', '>', '1', '1'}, charArray0);
      assertEquals(5, charArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("h=8*2,L^*");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      String string2 = StringUtils.substringAfterLast("/!E", "/!E");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.rightPad("h=8*2,L^*", 147, '@');
      assertNotNull(string3);
      assertEquals("h=8*2,L^*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "h=8*2,L^*", "G{at8*#n=LtSOgA-XdL");
      assertEquals(1, int0);
      
      String string4 = StringUtils.stripToEmpty("");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains('@'));
      
      String string5 = StringUtils.join((List<?>) vector0, (String) null, 12, 1);
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(vector0.contains('@'));
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.strip((String) null);
      assertNull(string1);
      
      char[] charArray0 = new char[10];
      charArray0[0] = 'N';
      charArray0[1] = '9';
      String string2 = StringUtils.join((Object[]) charSequenceArray0, '1');
      assertNotNull(string2);
      assertEquals("1", string2);
      assertEquals(2, charSequenceArray0.length);
      
      String string3 = StringUtils.substringAfter((String) null, "...");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'N', '9', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(10, charArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("wqJ_h2");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      String string4 = StringUtils.substringAfterLast("...", "/!E");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.rightPad((String) null, (-2228), '>');
      assertNull(string5);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "h=8*2,L^*", (String) null);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string2));
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains('N'));
      
      String string7 = StringUtils.join((List<?>) vector0, "O(&Ygj4", (-1), (-1));
      assertNotNull(string7);
      assertEquals("", string7);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(string7.equals((Object)string2));
      assertFalse(vector0.contains((-2228)));
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "=</3TNdn{";
      charSequenceArray0[1] = (CharSequence) "=</3TNdn{";
      String string0 = StringUtils.wrap("\r", '');
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      CharSequence[] charSequenceArray1 = new CharSequence[9];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "\r";
      charSequenceArray1[1] = (CharSequence) null;
      charSequenceArray1[2] = (CharSequence) "*hPk*hPk";
      charSequenceArray1[0] = (CharSequence) null;
      charSequenceArray1[4] = (CharSequence) "\r";
      charSequenceArray1[5] = (CharSequence) "=</3TNdn{";
      charSequenceArray1[6] = (CharSequence) "\r";
      charSequenceArray1[7] = (CharSequence) null;
      charSequenceArray1[8] = (CharSequence) null;
      String string1 = StringUtils.appendIfMissing((String) null, "\r", charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertNull(string1);
      assertEquals(9, charSequenceArray1.length);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray1.length);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      String string0 = StringUtils.stripToNull("4i`FSm$HwT++mC, 3ength: 0");
      assertNotNull(string0);
      assertEquals("4i`FSm$HwT++mC, 3ength: 0", string0);
      
      String string1 = StringUtils.EMPTY;
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToEmpty(" IXI:iL1\"48h+ik");
      assertNotNull(string2);
      assertEquals("IXI:iL1\"48h+ik", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.appendIfMissing((String) null, (CharSequence) null, (CharSequence[]) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.leftPad(" ", 9, " ");
      assertNotNull(string0);
      assertEquals("         ", string0);
      
      String string1 = StringUtils.appendIfMissing("         ", " ", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("         ", string1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("         ");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "         ", " ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      String string0 = StringUtils.repeat("KE_|y", 33);
      assertNotNull(string0);
      assertEquals("KE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|yKE_|y", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "KE_|y";
      String string1 = StringUtils.replaceEach("k5Bwi 26U", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals("k5Bwi 26U", string1);
      assertEquals(9, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("KE_|y");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'G';
      charArray0[1] = '#';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "|X>p$|", charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'G', '#'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      int int0 = 9;
      String string0 = StringUtils.leftPad(" ", 9, " ");
      assertNotNull(string0);
      assertEquals("         ", string0);
      
      String string1 = ")%*S%Nvk";
      // Undeclared exception!
      try { 
        StringUtils.replaceAll(")%*S%Nvk", "+^iy.BY9LR vs ", " ");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '+' near index 0
         // +^iy.BY9LR vs 
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string0 = StringUtils.replaceChars((String) null, "iZA3[Jd?", "iZA3[Jd?");
      assertNull(string0);
      
      String string1 = StringUtils.substringAfterLast("#y,PG", (String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNotBlank("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, '1');
      assertEquals(0, int0);
      
      String string2 = StringUtils.substringBefore((String) null, 99);
      assertNull(string2);
      
      String string3 = StringUtils.toRootUpperCase((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.swapCase("Cannot store ");
      assertNotNull(string4);
      assertEquals("cANNOT STORE ", string4);
      assertFalse(string4.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      boolean boolean3 = StringUtils.containsAnyIgnoreCase("iZA3[Jd?", charSequenceArray0);
      assertFalse(boolean3);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "#y,PG", 2);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOf((CharSequence) null, 55, 85);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = StringUtils.countMatches((CharSequence) "", (CharSequence) "cANNOT STORE ");
      assertEquals(0, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      
      String string5 = StringUtils.strip("fb3X*xkNQA");
      assertNotNull(string5);
      assertEquals("fb3X*xkNQA", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("]:O:)&;> ", "]:O:)&;> ", "#y,PG");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 3
         // ]:O:)&;> 
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      String string0 = StringUtils.stripToNull("q)gIKFU]:G");
      assertNotNull(string0);
      assertEquals("q)gIKFU]:G", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "q)gIKFU]:G", (-562), (-562));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chop("*vP5,/Q60={");
      assertNotNull(string1);
      assertEquals("*vP5,/Q60=", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("q)gIKFU]:G", "");
      assertNotNull(string2);
      assertEquals("q)gIKFU]:G", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBeforeLast("Pa:{", "");
      assertNotNull(string3);
      assertEquals("Pa:{", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-562);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-562);
      floatArray0[3] = (-562.0F);
      String string4 = StringUtils.join(floatArray0, 'P');
      assertNotNull(string4);
      assertEquals("-562.0P-1.0P-562.0P-562.0", string4);
      assertArrayEquals(new float[] {(-562.0F), (-1.0F), (-562.0F), (-562.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlphanumeric("-562.0P-1.0P-562.0P-562.0");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "q)gIKFU]:G";
      charSequenceArray0[1] = (CharSequence) "*vP5,/Q60=";
      charSequenceArray0[2] = (CharSequence) "Pa:{";
      charSequenceArray0[3] = (CharSequence) "Pa:{";
      charSequenceArray0[1] = (CharSequence) "-562.0P-1.0P-562.0P-562.0";
      charSequenceArray0[5] = (CharSequence) "q)gIKFU]:G";
      charSequenceArray0[6] = (CharSequence) "*vP5,/Q60={";
      charSequenceArray0[7] = (CharSequence) "Pa:{";
      boolean boolean1 = StringUtils.equalsAny("s&#ZhXWH_C#TqO", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      String string0 = "Y?$";
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&,M+Ux5JwBT]Pl)", "&,M+Ux5JwBT]Pl)");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "&,M+Ux5JwBT]Pl)", (CharSequence) "Y?$", (-470));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      String string0 = StringUtils.overlay("oTquVatc8 zWjm", "cImt~Bfuhg:/w-o", 32, 395);
      assertNotNull(string0);
      assertEquals("oTquVatc8 zWjmcImt~Bfuhg:/w-o", string0);
      
      String string1 = StringUtils.wrapIfMissing((String) null, ",06k:Mit%{j}");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("t");
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-162));
      assertNotNull(integer0);
      assertEquals((-162), (int)integer0);
      
      String string2 = StringUtils.leftPad((String) null, 2802, 'u');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 70);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.overlay("", "", 70, 70);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertFalse(boolean1);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.wrap("t<", "ulG");
      assertNotNull(string2);
      assertEquals("ulGt<ulG", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.chomp("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.removeStart("Cloneable type ", ",6CA\"JeG>");
      assertNotNull(string4);
      assertEquals("Cloneable type ", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean2 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      String string0 = StringUtils.stripToNull("q)gIKFU]:G");
      assertNotNull(string0);
      assertEquals("q)gIKFU]:G", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "q)gIKFU]:G", (-562), (-562));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultIfEmpty("", "q)gIKFU]:G");
      assertNotNull(string1);
      assertEquals("q)gIKFU]:G", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("", 0, 1);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "q)gIKFU]:G";
      charSequenceArray0[3] = (CharSequence) "q)gIKFU]:G";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.toRootLowerCase("q)gIKFU]:G");
      assertNotNull(string3);
      assertEquals("q)gikfu]:g", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(int0));
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean0 = priorityQueue0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(priorityQueue0.contains(int1));
      assertFalse(priorityQueue0.contains(int0));
      
      String string4 = StringUtils.join((Iterable<?>) priorityQueue0, "");
      assertNotNull(string4);
      assertEquals("0", string4);
      assertEquals(1, priorityQueue0.size());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(priorityQueue0.contains(int1));
      assertFalse(priorityQueue0.contains(int0));
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      String string0 = StringUtils.unwrap("Minimum abbreviation width is %d", "\"");
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width is %d", string0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("Minimum abbreviation width is %d"));
      
      String string1 = StringUtils.join((Iterable<?>) stack0, "\"");
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(stack0.contains("Minimum abbreviation width is %d"));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.getDigits("$!%Pn74qi");
      assertNotNull(string2);
      assertEquals("74", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.right("Strings must not be null", 53);
      assertNotNull(string3);
      assertEquals("Strings must not be null", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, 'B');
      assertNull(string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.stripEnd(string0, "The type must not be null");
      assertNull(string1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)51;
      shortArray0[1] = (short)51;
      shortArray0[2] = (short)9;
      shortArray0[3] = (short)160;
      shortArray0[4] = (short)824;
      shortArray0[5] = (short)53;
      shortArray0[6] = (short)90;
      String string2 = StringUtils.join(shortArray0, 'B');
      assertNotNull(string2);
      assertEquals("51B51B9B160B824B53B90", string2);
      assertArrayEquals(new short[] {(short)51, (short)51, (short)9, (short)160, (short)824, (short)53, (short)90}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNull(charSequence0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.prependIfMissingIgnoreCase((String) null, (CharSequence) null, stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNull(string3);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.substringBefore("The type must not be null", (String) null);
      assertNotNull(string4);
      assertEquals("The type must not be null", string4);
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.deleteWhitespace("fupz`1");
      assertNotNull(string5);
      assertEquals("fupz`1", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.defaultString((String) null);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      String string0 = StringUtils.join(floatArray0, '\'', (-2017), (-2017));
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      String string1 = StringUtils.replaceChars("", "", (String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Integer integer0 = new Integer((-2017));
      assertNotNull(integer0);
      assertEquals((-2017), (int)integer0);
      
      Integer integer1 = unaryOperator0.apply(integer0);
      assertNotNull(integer1);
      assertEquals((-2017), (int)integer1);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(integer1));
      
      stack0.replaceAll(unaryOperator0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(integer1));
      
      String string2 = StringUtils.join((List<?>) stack0, 'j', 1713, (-2017));
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(string2.equals((Object)string1));
      assertFalse(stack0.contains(integer1));
      
      String string3 = StringUtils.substringAfterLast("", (String) null);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The String must not be empty", '\'');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      stack0.clear();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(integer1));
      
      String string4 = StringUtils.remove("\n", 'j');
      assertNotNull(string4);
      assertEquals("\n", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.substringAfterLast("Gd`w~", (-403));
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "', has a length less than 2";
      stringArray0[1] = "', has a length less than 2";
      stringArray0[2] = "', has a length less than 2";
      stringArray0[4] = "', has a length less than 2";
      stringArray0[5] = "', has a length less than 2";
      stringArray0[6] = "', has a length less than 2";
      stringArray0[7] = "', has a length less than 2";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("', has a length less than 2", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("u6/p", "u6/p", "'5R");
      assertNotNull(string0);
      assertEquals("'5R", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      charArray0[1] = 'h';
      charArray0[2] = 'W';
      charArray0[3] = '8';
      charArray0[4] = '';
      int int0 = StringUtils.indexOfAny((CharSequence) "'5R", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'o', 'h', 'W', '8', ''}, charArray0);
      assertEquals(5, charArray0.length);
      
      String string1 = StringUtils.center("", 756);
      assertNotNull(string1);
      assertEqualsstring1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceChars("Search and Replace array lengths don't match: ", 'C', 'h');
      assertNotNull(string2);
      assertEquals("Search and Replace array lengths don't match: ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.rightPad("yAml<065}1(", 756, "'5R");
      assertNotNull(string3);
      assertEquals("yAml<065}1('5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R'5R", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.leftPad(" ", 9, " ");
      assertNotNull(string0);
      assertEquals("         ", string0);
      
      String string1 = StringUtils.appendIfMissing("         ", " ", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("         ", string1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replace("comparator", (String) null, "^9SU", (-3471));
      assertNotNull(string2);
      assertEquals("comparator", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.contains((CharSequence) " ", 26);
      assertFalse(boolean0);
      
      String string3 = StringUtils.trimToNull("         ");
      assertNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "comparator");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.joinWith("         ", charSequenceArray0);
      assertNotNull(string4);
      assertEquals("                           ", string4);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      int int1 = StringUtils.lastOrdinalIndexOf("         ", (CharSequence) null, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.removeStartIgnoreCase("comparator", (String) null);
      assertNotNull(string5);
      assertEquals("comparator", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      String string0 = StringUtils.overlay("k}Q0%p[C'++Xw;/", "Strings must not be null", 529, 16);
      assertNotNull(string0);
      assertEquals("k}Q0%p[C'++Xw;/Strings must not be null", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("k}Q0%p[C'++Xw;/Strings must not be null");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate("k}Q0%p[C'++Xw;/", "Strings must not be null", 111);
      assertNotNull(string1);
      assertEquals("k}Q0%p[C'++Xw;/", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "maxWith cannot be negative";
      String string2 = StringUtils.prependIfMissingIgnoreCase("maxWith cannot be negative", "k}Q0%p[C'++Xw;/Strings must not be null", charSequenceArray0);
      assertNotNull(string2);
      assertEquals("maxWith cannot be negative", string2);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBefore(" vs +^iy.BY9LR", "1{::d<s'\"74M_A)");
      assertNotNull(string3);
      assertEquals(" vs +^iy.BY9LR", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.toRootUpperCase(" vs +^iy.BY9LR");
      assertNotNull(string4);
      assertEquals(" VS +^IY.BY9LR", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.defaultString("maxWith cannot be negative");
      assertNotNull(string5);
      assertEquals("maxWith cannot be negative", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      String string0 = StringUtils.defaultString("o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNotNull(string0);
      assertEquals("o#5_&V<i,#y", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("o#5_&V<i,#y", "o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) null, "g'\u0001i@NC1#&47w");
      assertNull(string1);
      
      String string2 = StringUtils.chop((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle((String) null, "gZUe2", 48);
      assertNull(string3);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) " vs ";
      charSequenceArray0[1] = (CharSequence) " vs ";
      charSequenceArray0[2] = (CharSequence) " vs ";
      String string0 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.join((List<?>) null, 'Y', 2445, 2328);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.substring(" vs ", 83, 2445);
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'Y');
      assertEquals(0, int0);
      
      String string3 = StringUtils.stripAccents((String) null);
      assertNull(string3);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int1 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[2], charSequenceArray0[0], 2445);
      assertEquals(0, int1);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      String string0 = StringUtils.reverse(";}H04tqpSSycioS`");
      assertNotNull(string0);
      assertEquals("`SoicySSpqt40H};", string0);
      
      boolean boolean0 = StringUtils.isEmpty("`SoicySSpqt40H};");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "`SoicySSpqt40H};";
      objectArray0[1] = (Object) "`SoicySSpqt40H};";
      objectArray0[2] = (Object) "`SoicySSpqt40H};";
      objectArray0[3] = (Object) "`SoicySSpqt40H};";
      objectArray0[4] = (Object) ";}H04tqpSSycioS`";
      objectArray0[5] = (Object) ";}H04tqpSSycioS`";
      String string1 = StringUtils.truncate("*hPk*hPk", 15);
      assertNotNull(string1);
      assertEquals("*hPk*hPk", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chop("Threshold must not be negative");
      assertNotNull(string2);
      assertEquals("Threshold must not be negativ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripStart((String) null, "\r");
      assertNull(string3);
      
      String string4 = StringUtils.substringBeforeLast("v-_O*Q[VXxVuN,(Q1iy", (String) null);
      assertNotNull(string4);
      assertEquals("v-_O*Q[VXxVuN,(Q1iy", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAlphanumeric("v-_O*Q[VXxVuN,(Q1iy");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "Threshold must not be negativ";
      String string5 = StringUtils.join((List<?>) null, 'Y', 2328, 113);
      assertNull(string5);
      
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "Threshold must not be negativ";
      charSequenceArray0[4] = (CharSequence) "Threshold must not be negativ";
      charSequenceArray0[5] = (CharSequence) "`SoicySSpqt40H};";
      charSequenceArray0[6] = (CharSequence) "`SoicySSpqt40H};";
      boolean boolean2 = StringUtils.isNotBlank(charSequenceArray0[4]);
      assertTrue(boolean2);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string6 = StringUtils.substring("br\"lc@Nu", 2328, 15);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      
      int int0 = StringUtils.countMatches((CharSequence) "", '\u001D');
      assertEquals(0, int0);
      
      String string7 = StringUtils.stripAccents(";");
      assertNotNull(string7);
      assertEquals(";", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(8, stringArray0.length);
      
      String string1 = StringUtils.center((String) null, 797, 's');
      assertNull(string1);
      
      String string2 = StringUtils.substringAfterLast(" is not in the range '0' - '9'", 53);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeEnd(";v,x6J.x+'Ty$%}F`", ";$!l3*O");
      assertNotNull(string3);
      assertEquals(";v,x6J.x+'Ty$%}F`", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.countMatches((CharSequence) ";v,x6J.x+'Ty$%}F`", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      String string0 = StringUtils.getDigits("...");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 16, 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.stripToEmpty(string0);
      assertNotNull(string1);
      assertEquals("\\u", string1);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) string0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      String string2 = StringUtils.swapCase(string0);
      assertNotNull(string2);
      assertEquals("\\U", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "U", 127);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.center(string1, (-1), "8[TBBI");
      assertNotNull(string3);
      assertEquals("\\u", string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.right("8[TBBI", 127);
      assertNotNull(string4);
      assertEquals("8[TBBI", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat("", 160);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.remove("K9zr6aBQ~W<ak", "p]V}~`<>");
      assertNotNull(string2);
      assertEquals("K9zr6aBQ~W<ak", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.substringsBetween("@<q", "", "ymz}I.riv\"!\u0001G79q9");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string3 = StringUtils.substringAfter("", "ymz}I.riv\"!\u0001G79q9");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.substring("Sr_d(zDi", 160);
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "p]V}~`<>", 160);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "p]V}~`<>", (CharSequence) "", 3843);
      assertEquals(8, int1);
      assertFalse(int1 == int0);
      
      boolean boolean3 = StringUtils.isNumeric("ymz}I.riv\"!\u0001G79q9");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = StringUtils.containsAny((CharSequence) "Sr_d(zDi", (CharSequence[]) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      
      boolean boolean5 = StringUtils.startsWithAny("", (CharSequence[]) null);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      
      Locale locale0 = new Locale("K9zr6aBQ~W<ak");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("k9zr6abq~w<ak", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("k9zr6abq~w<ak", locale0.getLanguage());
      
      int int2 = StringUtils.getFuzzyDistance("Sr_d(zDi", "ymz}I.riv\"!\u0001G79q9", locale0);
      assertEquals(0, int2);
      assertEquals("", locale0.getCountry());
      assertEquals("k9zr6abq~w<ak", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("k9zr6abq~w<ak", locale0.getLanguage());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.mid("", (-3920), 1840);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "The String must not be empty";
      charSequenceArray0[1] = (CharSequence) "The String must not be empty";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "The String must not be empty";
      charSequenceArray0[4] = (CharSequence) "The String must not be empty";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) null;
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNotNull(charSequence0);
      assertEquals("The String must not be empty", charSequence0);
      assertEquals(9, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "The String must not be empty", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 70);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.unwrap("e ", '>');
      assertNotNull(string1);
      assertEquals("e ", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("FO", "FO", 70);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.unwrap("FO", '>');
      assertNotNull(string0);
      assertEquals("FO", string0);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("CCCCCCCCCCCCCCCCCCC -F?LI3uAzw -F?LI3uAzw", "\r", 622);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.remove((String) null, (String) null);
      assertNull(string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      String string2 = StringUtils.joinWith((String) null, objectArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substring("-.R#x#](sYIdF$v@-o", (-1206), (-966));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "-.R#x#](sYIdF$v@-o", (CharSequence) "");
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.CharUtils";
      String string1 = StringUtils.replace("org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils", 0);
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.CharUtils", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWith("org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "org.apache.commons.lang3.CharUtils", (CharSequence) "org.apache.commons.lang3.CharUtils", 0);
      assertEquals(0, int0);
      
      String string2 = StringUtils.replace("", "org.apache.commons.lang3.CharUtils", " ", 2223);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      short[] shortArray0 = new short[0];
      String string3 = StringUtils.join(shortArray0, 'X');
      assertNotNull(string3);
      assertEquals("", string3);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.repeat("Locale must not be null", "", (int) 'X');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      int int1 = StringUtils.indexOf((CharSequence) "Locale must not be null", 3543);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<CharBuffer> arrayList1 = new ArrayList<CharBuffer>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      String string0 = StringUtils.chomp("1i", (String) null);
      assertNotNull(string0);
      assertEquals("1i", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.unwrap((String) null, "1i");
      assertNull(string1);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      Iterator<Integer> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      
      String string2 = StringUtils.join(iterator0, (String) null);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, priorityQueue0.size());
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Locale must not be null", "\r", 8, 2698);
      assertNotNull(string0);
      assertEquals("Locale must not be null", string0);
      
      String string1 = "";
      String string2 = StringUtils.upperCase("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Locale must not be null", (CharSequence) "");
      assertFalse(boolean0);
      
      String string3 = StringUtils.trim("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = "o%(P]/|$6|gi]";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("o%(P]/|$6|gi]", "Iwcd/at0&srmbo4dv");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      char[] charArray0 = new char[9];
      char char0 = ';';
      charArray0[0] = ';';
      charArray0[1] = 'x';
      charArray0[2] = 'B';
      charArray0[3] = ';';
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(2698));
      
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      stack0.replaceAll(unaryOperator0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(2698));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, '`', (-403), 2698);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -403
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, 'A', (-902), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -902
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      String string0 = StringUtils.swapCase("}=5n4H");
      assertNotNull(string0);
      assertEquals("}=5N4h", string0);
      
      String string1 = StringUtils.substringAfter("}=5N4h", "*hPk*hPk");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("'5R", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.substringAfterLast("<aXMgS{,JZRO", "<aXMgS{,JZRO");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "/!E", "/!E");
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("*hPk*hPk");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(8, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      double[] doubleArray0 = new double[1];
      String string2 = StringUtils.join(doubleArray0, 'y');
      assertNotNull(string2);
      assertEquals("0.0", string2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "", (-1043));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      String string0 = "4M`FSm$HwT++mC, Length: 0";
      String string1 = StringUtils.stripToNull("4M`FSm$HwT++mC, Length: 0");
      assertNotNull(string1);
      assertEquals("4M`FSm$HwT++mC, Length: 0", string1);
      assertTrue(string1.equals((Object)string0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1064;
      shortArray0[1] = (short)1064;
      shortArray0[2] = (short)1064;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'b', (-695), 103);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -695
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      String string0 = StringUtils.getDigits("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat("", 160);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat("", "XWDYI77\"", (-558));
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "XWDYI77\"";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "p]V}~`<>";
      charSequenceArray0[4] = (CharSequence) "K9zr6aBQ~W<ak";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAny("", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string3 = StringUtils.uncapitalize((String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", charSequenceArray0[7]);
      assertTrue(boolean1);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.join((short[]) null, 'V', (-958), 1486);
      assertNull(string4);
      
      String string5 = StringUtils.trimToNull("\r");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      String string0 = StringUtils.difference("org.apache.commons.lang3.exception.CloneFailedException", "', is neither of type Map.Entry nor an Array");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3684.3062F);
      floatArray0[1] = (float) 0;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) '<';
      floatArray0[4] = 649.0F;
      floatArray0[5] = (float) 1480;
      floatArray0[6] = (-3684.3062F);
      floatArray0[7] = 649.0F;
      String string1 = StringUtils.join(floatArray0, 't');
      assertNotNull(string1);
      assertEquals("-3684.3062t0.0t1.0t60.0t649.0t1480.0t-3684.3062t649.0", string1);
      assertArrayEquals(new float[] {(-3684.3062F), 0.0F, 1.0F, 60.0F, 649.0F, 1480.0F, (-3684.3062F), 649.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 't', 0, 1480);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      String string0 = StringUtils.join((boolean[]) null, '-', 530, 530);
      assertNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      charArray0[3] = '-';
      charArray0[4] = '-';
      charArray0[5] = '-';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'-', '-', '-', '-', '-', '-'}, charArray0);
      assertEquals(6, charArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.stripToNull("\"v.aG1F{");
      assertNotNull(string1);
      assertEquals("\"v.aG1F{", string1);
      
      boolean boolean1 = StringUtils.containsIgnoreCase(charSequenceArray0[0], charSequenceArray0[1]);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Locale must not be null", "\r", 8, 2698);
      assertNotNull(string0);
      assertEquals("Locale must not be null", string0);
      
      String string1 = StringUtils.upperCase("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Locale must not be null", (CharSequence) "");
      assertFalse(boolean0);
      
      String string2 = StringUtils.trim("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("o%(P]/|$6|gi]", "Iwcd/at0&srmbo4dv");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = 'x';
      charArray0[2] = 'B';
      charArray0[3] = ';';
      charArray0[4] = 'H';
      charArray0[5] = 'A';
      String string3 = StringUtils.join((boolean[]) null, 'A', 2698, 877);
      assertNull(string3);
      
      String string4 = StringUtils.center("9ORH^,Y9XQX{!2:Cn-", 8192, 'x');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isNoneEmpty(stringArray0);
      assertFalse(boolean1);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.compare("*k*k", "l");
      assertEquals((-66), int0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains('A'));
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains('A'));
      
      String string5 = StringUtils.join((Iterator<?>) listIterator0, "f'@@_jKG!Z");
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(linkedList0.contains('A'));
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Fw#GAL#D#", "offset cannot be negative");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.wrapIfMissing("offset cannot be negative", 'j');
      assertNotNull(string0);
      assertEquals("joffset cannot be negativej", string0);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.repeat("{}", 12);
      assertNotNull(string1);
      assertEquals("{}{}{}{}{}{}{}{}{}{}{}{}", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "K9zr6aBQ~W<ak", "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("p]V}~`<>");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      String string0 = StringUtils.getDigits("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 465);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.strip("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      
      byte[] byteArray0 = StringUtils.getBytes("", (String) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      String string3 = StringUtils.defaultString("}=5n4H", "");
      assertNotNull(string3);
      assertEquals("}=5n4H", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String string0 = "=</3TNdn{";
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "=</3TNdn{";
      charSequenceArray0[1] = (CharSequence) "=</3TNdn{";
      String string1 = " ";
      String string2 = StringUtils.leftPad("*hPk*hPk", 51, " ");
      assertNotNull(string2);
      assertEquals("                                           *hPk*hPk", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      charSequenceArray0[2] = (CharSequence) "                                           *hPk*hPk";
      String string3 = StringUtils.appendIfMissing("=</3TNdn{", "=</3TNdn{", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("=</3TNdn{", string3);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(locale_FilteringMode0));
      
      linkedList0.addLast(locale_FilteringMode0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      
      boolean boolean0 = linkedList0.add(locale_FilteringMode0);
      assertTrue(boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      
      ListIterator<Locale.FilteringMode> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      
      String string4 = "e ";
      String string5 = StringUtils.join((Iterator<?>) listIterator0, "e ");
      assertNotNull(string5);
      assertEquals("IGNORE_EXTENDED_RANGESe IGNORE_EXTENDED_RANGES", string5);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertEquals(2, linkedList0.size());
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      
      String string6 = "Locale must not be null";
      try { 
        StringUtils.getBytes("Locale must not be null", "=</3TNdn{");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Object) "@:TkiY)hI)w^tp(#");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("@:TkiY)hI)w^tp(#"));
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      
      boolean boolean1 = linkedList0.add((Object) "@:TkiY)hI)w^tp(#");
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains("@:TkiY)hI)w^tp(#"));
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(2, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(linkedList0.contains("@:TkiY)hI)w^tp(#"));
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      assertNotNull(linkedList1);
      assertEquals(2, linkedList0.size());
      assertEquals(2, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(linkedList0.contains("@:TkiY)hI)w^tp(#"));
      assertTrue(linkedList1.contains("@:TkiY)hI)w^tp(#"));
      
      linkedList1.replaceAll(unaryOperator0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertEquals(2, linkedList0.size());
      assertEquals(2, linkedList1.size());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(linkedList0.contains("@:TkiY)hI)w^tp(#"));
      assertTrue(linkedList1.contains("@:TkiY)hI)w^tp(#"));
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "@:TkiY)hI)w^tp(#");
      assertNotSame(linkedList0, linkedList1);
      assertNotNull(string0);
      assertEquals("@:TkiY)hI)w^tp(#@:TkiY)hI)w^tp(#@:TkiY)hI)w^tp(#", string0);
      assertEquals(2, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList0.contains("@:TkiY)hI)w^tp(#"));
      
      String string1 = StringUtils.stripEnd("z3=N.~.U^", "Threshold must not be negative");
      assertNotNull(string1);
      assertEquals("z3=N.~.U^", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing(" vs ", "+^iy.BY9LR");
      assertNotNull(string0);
      assertEquals("+^iy.BY9LR vs +^iy.BY9LR", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("+^iy.BY9LR vs +^iy.BY9LR");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[1] = "+^iy.BY9LR vs +^iy.BY9LR";
      stringArray0[2] = "+^iy.BY9LR";
      stringArray0[3] = "+^iy.BY9LR vs +^iy.BY9LR";
      stringArray0[4] = "+^iy.BY9LR vs +^iy.BY9LR";
      stringArray0[5] = "+^iy.BY9LR vs +^iy.BY9LR";
      stringArray0[6] = "+^iy.BY9LR";
      char[] charArray0 = new char[3];
      charArray0[0] = '4';
      charArray0[1] = 'K';
      charArray0[2] = 't';
      String string1 = StringUtils.join(charArray0, '4', (-663), (-4477));
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'4', 'K', 't'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string2 = StringUtils.join((List<?>) linkedList0, "", 3446, (-663));
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, linkedList0.size());
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.joinWith("+^iy.BY9LR vs +^iy.BY9LR", stringArray0);
      assertNotNull(string3);
      assertEquals("+^iy.BY9LR vs +^iy.BY9LR+^iy.BY9LR vs +^iy.BY9LR+^iy.BY9LR vs +^iy.BY9LR+^iy.BY9LR+^iy.BY9LR vs +^iy.BY9LR+^iy.BY9LR vs +^iy.BY9LR+^iy.BY9LR vs +^iy.BY9LR+^iy.BY9LR vs +^iy.BY9LR+^iy.BY9LR vs +^iy.BY9LR+^iy.BY9LR vs +^iy.BY9LR+^iy.BY9LR vs +^iy.BY9LR+^iy.BY9LR", string3);
      assertEquals(7, stringArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      char[] charArray0 = new char[5];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      String string0 = StringUtils.join(charArray0, '6', 1371, 322);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      String string1 = StringUtils.abbreviate("+^iy.BY9LRr", 57);
      assertNotNull(string1);
      assertEquals("+^iy.BY9LRr", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.strip("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = "ymz}I.riv\"!\\1G79q9";
      try { 
        StringUtils.getBytes("", "ymz}I.riv\"!\u0001G79q9");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "=</3TNdn{";
      charSequenceArray0[1] = (CharSequence) "=</3TNdn{";
      String string0 = StringUtils.leftPad("*hPk*hPk", 51, " ");
      assertNotNull(string0);
      assertEquals("                                           *hPk*hPk", string0);
      
      charSequenceArray0[2] = (CharSequence) "                                           *hPk*hPk";
      String string1 = StringUtils.appendIfMissing("=</3TNdn{", "=</3TNdn{", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("=</3TNdn{", string1);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isBlank(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "*hPk*hPk", "");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.chomp("clone");
      assertNotNull(string2);
      assertEquals("clone", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      String string0 = "...Exception cloning Cloneable type ";
      char char0 = 'D';
      String string1 = StringUtils.center("...Exception cloning Cloneable type ", (-342), 'D');
      assertNotNull(string1);
      assertEquals("...Exception cloning Cloneable type ", string1);
      assertTrue(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "...Exception cloning Cloneable type ", (-342), 116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -342
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2380.0F);
      floatArray0[3] = (-3684.3062F);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)17;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-3866);
      shortArray0[3] = (short)13;
      shortArray0[4] = (short)17;
      String string0 = StringUtils.join(shortArray0, '5');
      assertNotNull(string0);
      assertEquals("17505-3866513517", string0);
      assertArrayEquals(new short[] {(short)17, (short)0, (short) (-3866), (short)13, (short)17}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (short)13;
      objectArray0[1] = (Object) (-3684.3062F);
      objectArray0[2] = (Object) (-2380.0F);
      String string1 = "aJ;_#\\u!!y+tx,w7c+}=5n4H";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, string1, (int) (short)13, (int) (short)17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, '1');
      assertNotNull(string0);
      assertEquals("1111111111", string0);
      assertEquals(11, charSequenceArray0.length);
      
      String string1 = StringUtils.substringAfter("*hPk*hPk", "*hPk*hPk");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("*hPk*hPk", 1162, 'g');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.ordinalIndexOf("*hPk*hPk", string2, 988);
      assertEquals((-1), int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.wrap("\"v.aG1F{", 'g');
      assertNotNull(string3);
      assertEquals("g\"v.aG1F{g", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.chomp(string2);
      assertNotNull(string4);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.repeat('-', 18);
      assertNotNull(string5);
      assertEquals("------------------", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      String string0 = "u6/p";
      String[] stringArray0 = StringUtils.split("u6/p");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      String string1 = "\r";
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "u6/p";
      stringArray1[1] = "'5R";
      stringArray1[2] = "'5R";
      stringArray1[3] = "'5R";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("\r", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      String string0 = StringUtils.getDigits("...");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "...";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs +^iy.BY9LR");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string1 = StringUtils.capitalize("f>D 4t^b4t+");
      assertNotNull(string1);
      assertEquals("F>D 4t^b4t+", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase(charSequenceArray0[3], charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)25;
      float[] floatArray0 = new float[5];
      floatArray0[0] = 649.0F;
      floatArray0[1] = (float) 't';
      floatArray0[2] = (float) 't';
      floatArray0[3] = (float) (short)25;
      floatArray0[4] = 649.0F;
      String string2 = StringUtils.join(floatArray0, ' ');
      assertNotNull(string2);
      assertEquals("649.0 116.0 116.0 25.0 649.0", string2);
      assertArrayEquals(new float[] {649.0F, 116.0F, 116.0F, 25.0F, 649.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.splitByCharacterType("}=5n4H");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.lastOrdinalIndexOf("649.0 116.0 116.0 25.0 649.0", "...", 32);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("F>D 4t^b4t+", stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 6 vs 10
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("e ", "e ", 322);
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("e ", "e ");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("7emjB*q", "~~RQ(&");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", ", Length: 0Rq*z`u2h");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("8^)uh1CR<u><tilsorg.apache.commons.lang3.StringU");
      assertNotNull(stringArray0);
      assertEquals(21, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("q)gIKFU]:G", "q)gIKFU]:G", "q)gIKFU]:G");
      assertNotNull(string0);
      assertEquals("q)gIKFU]:G", string0);
      
      String string1 = StringUtils.defaultIfEmpty("", "q)gIKFU]:G");
      assertNotNull(string1);
      assertEquals("q)gIKFU]:G", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "q)gIKFU]:G";
      charSequenceArray0[3] = (CharSequence) "q)gIKFU]:G";
      String[] stringArray0 = StringUtils.split("q)gIKFU]:G");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.equals(charSequenceArray0[1], (CharSequence) "q)gIKFU]:G");
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string2 = StringUtils.substringAfterLast("q)gIKFU]:G", "");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", charSequenceArray0[3], 1);
      assertEquals((-1), int0);
      assertEquals(4, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals((-1), int1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "LL", 3123);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      String string0 = StringUtils.join((List<?>) stack0, '(', 13, (-285));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains('('));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.left("kxb<t?J-_T})o'i4cWq3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-", 13);
      assertNotNull(string1);
      assertEquals("kxb<t?J-_T})o", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.center("", 13, "kxb<t?J-_T})o'i4cWq3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-");
      assertNotNull(string2);
      assertEquals("kxb<t?kxb<t?J", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.leftPad(" ", 9, "maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("maxWith  ", string0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.leftPad("maxWith  ", (-1), 'T');
      assertNotNull(string1);
      assertEquals("maxWith  ", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      String string0 = StringUtils.center("', has a length less than 2", 21, "zM{");
      assertNotNull(string0);
      assertEquals("', has a length less than 2", string0);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      String string0 = StringUtils.center("Strings must not be null", 82, "H5Srh/Rcx_");
      assertNotNull(string0);
      assertEquals("H5Srh/Rcx_H5Srh/Rcx_H5Srh/RcxStrings must not be nullH5Srh/Rcx_H5Srh/Rcx_H5Srh/Rcx", string0);
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      String string0 = StringUtils.replaceFirst((String) null, "", ", Length: 0");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("u6/p", "u6/p", "'5R");
      assertNotNull(string0);
      assertEquals("'5R", string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      String string1 = StringUtils.remove("'5R", "dI89?So`d");
      assertNotNull(string1);
      assertEquals("'5R", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("org.apache.commons.lang3.StringUtils", "g:hZ#tB", "'5R");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("K9zr6aBQ~W<ak");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "g:hZ#tB", "'5R");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("'5R", (CharSequence[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.wrap("dI89?So`d", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.StringUtilsdI89?So`dorg.apache.commons.lang3.StringUtils", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeStart("ymz}I.riv\"!\u0001G79q9", "org.apache.commons.lang3.ObjectUtils$Null");
      assertNotNull(string3);
      assertEquals("ymz}I.riv\"!\u0001G79q9", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.removeIgnoreCase("ymz}I.riv\"!\u0001G79q9", "K9zr6aBQ~W<ak");
      assertNotNull(string4);
      assertEquals("ymz}I.riv\"!\u0001G79q9", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.removeFirst("'5R", "ymz}I.riv\"!\u0001G79q9");
      assertNotNull(string5);
      assertEquals("'5R", string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.substring("\r", 97, (-32768));
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      String string0 = StringUtils.join(byteArray0, '/', 76, 76);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {(byte)76}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 76);
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeFirst("", "");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      String string1 = StringUtils.join(booleanArray0, '<', 1480, 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.center("", 0, '<');
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string3 = StringUtils.removePattern("", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'x', 48, 65);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("Invalid locale format: ", "Invalid locale format: ", "'5R");
      assertNotNull(string0);
      assertEquals("'5R", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      charArray0[1] = 'h';
      charArray0[2] = 'W';
      charArray0[3] = '8';
      charArray0[4] = '';
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center("", 756);
      assertNotNull(string1);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      String string2 = StringUtils.join(booleanArray0, '8');
      assertNotNull(string2);
      assertEquals("false8true8true", string2);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      String string0 = StringUtils.join(booleanArray0, 'y');
      assertNotNull(string0);
      assertEquals("falseyfalseyfalseyfalse", string0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.center((String) null, (-2981), (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.trim((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.wrap("+^iy.BY9LR vs ", '8');
      assertNotNull(string3);
      assertEquals("8+^iy.BY9LR vs 8", string3);
      
      boolean boolean2 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean2);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.capitalize((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.remove("org.apache.commons.lang3.StringUtils", (String) null);
      assertNotNull(string5);
      assertEquals("org.apache.commons.lang3.StringUtils", string5);
      assertFalse(string5.equals((Object)string3));
      
      String[] stringArray1 = StringUtils.substringsBetween((String) null, "#P!vYN/e$HI?-Qy", "aN&o$MHRPLy8;M!T^U");
      assertNull(stringArray1);
      
      boolean boolean3 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      
      boolean boolean5 = StringUtils.equalsAnyIgnoreCase("K9zr6aBQ~W<ak", (CharSequence[]) null);
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      
      String string6 = StringUtils.wrap("Object varargs must not be null", "}=5n4H");
      assertNotNull(string6);
      assertEquals("}=5n4HObject varargs must not be null}=5n4H", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.leftPad("org.apache.commons.lang3.StringUtils", 1165, '8');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      
      String string8 = "aJ;_#\\u!!y+tx,w7c+";
      String string9 = StringUtils.removeStart("}=5n4H", string8);
      assertNotNull(string9);
      assertEquals("}=5n4H", string9);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      
      boolean boolean6 = StringUtils.isEmpty("8+^iy.BY9LR vs 8");
      assertFalse(boolean6);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "aN&o$MHRPLy8;M!T^U", 2428);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      String string0 = StringUtils.substringAfter("', has a length less than 2", 32);
      assertNotNull(string0);
      assertEquals("has a length less than 2", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'U';
      String string1 = StringUtils.normalizeSpace((String) null);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, " vs ", "Rq*z`u2h");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("has a length less than 2", "org.apache.commons.lang3.StringUtils", 2783);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      String string0 = StringUtils.getDigits("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat("", 160);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.remove("K9zr6aBQ~W<ak", "");
      assertNotNull(string2);
      assertEquals("K9zr6aBQ~W<ak", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.substringsBetween("@<q", "", "ymz}I.riv\"!\u0001G79q9");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string3 = StringUtils.substringAfter("", "ymz}I.riv\"!\u0001G79q9");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.substring("Sr_d(zDi", 160);
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "K9zr6aBQ~W<ak", 160);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 128);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.chomp("\n");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat('[', (int) (byte) (-86));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("\r");
      assertTrue(boolean0);
      
      String string1 = StringUtils.getDigits("\r");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.ordinalIndexOf("\r", "", 0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.wrap((String) null, '@');
      assertNull(string2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '[';
      charArray0[4] = '@';
      charArray0[5] = '@';
      charArray0[6] = '@';
      String string3 = StringUtils.chomp("comparator");
      assertNotNull(string3);
      assertEquals("comparator", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.repeat('[', (-1));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      char[] charArray0 = new char[2];
      charArray0[0] = '_';
      charArray0[1] = '_';
      String string0 = StringUtils.center("\"v.aG1F{", 9);
      assertNotNull(string0);
      assertEquals("\"v.aG1F{", string0);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      String string0 = StringUtils.capitalize("+^iy.B(9LR");
      assertNotNull(string0);
      assertEquals("+^iy.B(9LR", string0);
      
      String string1 = StringUtils.strip("+^iy.B(9LR");
      assertNotNull(string1);
      assertEquals("+^iy.B(9LR", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "+^iy.B(9LR", (CharSequence) "+^iy.B(9LR");
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceOnce("Py(gM1WJGol7", "+^iy.B(9LR", "Py(gM1WJGol7");
      assertNotNull(string2);
      assertEquals("Py(gM1WJGol7", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.wrap("+^iy.B(9LR", "Py(gM1WJGol7");
      assertNotNull(string3);
      assertEquals("Py(gM1WJGol7+^iy.B(9LRPy(gM1WJGol7", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      String string4 = StringUtils.toRootLowerCase("Py(gM1WJGol7");
      assertNotNull(string4);
      assertEquals("py(gm1wjgol7", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.defaultString("Py(gM1WJGol7+^iy.B(9LRPy(gM1WJGol7", "+^iy.B(9LR");
      assertNotNull(string5);
      assertEquals("Py(gM1WJGol7+^iy.B(9LRPy(gM1WJGol7", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.center("? a/y5FtMsb<q", (int) (byte)1);
      assertNotNull(string6);
      assertEquals("? a/y5FtMsb<q", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      String string0 = StringUtils.strip((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.replace((String) null, "myWH:a_JY", (String) null, 0);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) null;
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[1], charSequenceArray0[1]);
      assertEquals((-1), int0);
      assertEquals(9, charSequenceArray0.length);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "myWH:a_JY";
      stringArray0[3] = null;
      stringArray0[4] = "Array and element cannot both be null";
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      String string2 = StringUtils.join(intArray0, 'I');
      assertNotNull(string2);
      assertEquals("-1", string2);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'I';
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[1], charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'I'}, charArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.removeEnd("Exception cloning Cloneable type ", "-1");
      assertNotNull(string3);
      assertEquals("Exception cloning Cloneable type ", string3);
      assertFalse(string3.equals((Object)string2));
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[2], (CharSequence) string0);
      assertEquals((-1), int1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.center("maxWith cannot be negative", (-1), 'I');
      assertNotNull(string4);
      assertEquals("maxWith cannot be negative", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.joinWith("maxWith cannot be negative", stringArray0);
      assertNotNull(string5);
      assertEquals("maxWith cannot be negativemaxWith cannot be negativemyWH:a_JYmaxWith cannot be negativemaxWith cannot be negativeArray and element cannot both be null", string5);
      assertEquals(5, stringArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean2 = StringUtils.isNotEmpty("maxWith cannot be negativemaxWith cannot be negativemyWH:a_JYmaxWith cannot be negativemaxWith cannot be negativeArray and element cannot both be null");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      int int0 = StringUtils.getFuzzyDistance("|N", "|N", locale0);
      assertEquals(4, int0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("|N", "|N");
      assertTrue(boolean0);
      
      String string0 = StringUtils.leftPad("|N", 4, "~RQ(&");
      assertNotNull(string0);
      assertEquals("~R|N", string0);
      
      String string1 = StringUtils.chomp("~", "~RQ(&");
      assertNotNull(string1);
      assertEquals("~", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      String string0 = StringUtils.removeStart("gZUe2", (String) null);
      assertNotNull(string0);
      assertEquals("gZUe2", string0);
      
      String string1 = StringUtils.join((long[]) null, 'R', (-2327), 925);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      String string0 = StringUtils.getDigits("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat("", 160);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.remove("K9zr6aBQ~W<ak", "p]V}~`<>");
      assertNotNull(string2);
      assertEquals("K9zr6aBQ~W<ak", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.substringsBetween("@<q", "", "ymz}I.riv\"!\u0001G79q9");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.wrapIfMissing("E,``;>-KA34Z\"4+Z6vF", '>');
      assertNotNull(string3);
      assertEquals(">E,``;>-KA34Z\"4+Z6vF>", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.substringAfter((String) null, "ymz}I.riv\"!\u0001G79q9");
      assertNull(string4);
      
      boolean boolean3 = StringUtils.containsIgnoreCase("", "ymz}I.riv\"!\u0001G79q9");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("", "@<q");
      assertEquals((-3), int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '5';
      charArray0[1] = '_';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '5';
      charArray0[5] = '5';
      charArray0[6] = '>';
      charArray0[7] = '5';
      charArray0[8] = '_';
      String string5 = StringUtils.valueOf(charArray0);
      assertNotNull(string5);
      assertEquals("5_>>55>5_", string5);
      assertArrayEquals(new char[] {'5', '_', '>', '>', '5', '5', '>', '5', '_'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.unwrap("p]V}~`<>", "7I;V})Ipw}t^55T0_");
      assertNotNull(string6);
      assertEquals("p]V}~`<>", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      String string0 = "}a/w!8";
      String string1 = StringUtils.removeStartIgnoreCase("}a/w!8", "}a/w!8");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("", "}a/w!8");
      assertEquals(0.0, double0, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)40;
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfterLast((String) null, "EDB1>BBfb'\",$=`l");
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-520));
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "*k*k");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceFirst((String) null, "*k*k", "org.apache.commons.lang3.Charsets");
      assertNull(string0);
      
      boolean boolean1 = StringUtils.isMixedCase("org.apache.commons.lang3.Charsets");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      String string0 = "*k*k";
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "*k*k");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.substringAfter("*k*k", "...");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "c/h!";
      int int0 = StringUtils.compare("*k*k", "c/h!", true);
      assertEquals((-57), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "*k*k";
      charSequenceArray0[3] = (CharSequence) "...";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = null;
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = null;
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int1);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.compare("*k*k", "...");
      assertEquals((-4), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("offset cannot be negative", ' ');
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance(charSequenceArray0[0], charSequenceArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("Array element ", (String) null, "...");
      assertNotNull(string0);
      assertEquals("Array element ", string0);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      int int0 = StringUtils.getFuzzyDistance("Array element ", "Array element ", locale0);
      assertEquals(40, int0);
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("...");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      String string0 = StringUtils.removeAll("h", "");
      assertNotNull(string0);
      assertEquals("h", string0);
      
      String string1 = StringUtils.replaceFirst("6Nka(\"aeEKonxxPOeu", "uGwx ?El62;=^K", "h");
      assertNotNull(string1);
      assertEquals("6Nka(\"aeEKonxxPOeu", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.difference("g*d#DEko)P.@J", "6Nka(\"aeEKonxxPOeu");
      assertNotNull(string2);
      assertEquals("6Nka(\"aeEKonxxPOeu", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      int int0 = StringUtils.compare("Search and Replace array lengths don't match: ", (String) null, false);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.strip("uGwx ?El62;=^K", "");
      assertNotNull(string3);
      assertEquals("uGwx ?El62;=^K", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphaSpace("h");
      assertTrue(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("h", "uGwx ?El62;=^K");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.center((String) null, (-2981), (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.trim((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 8183;
      floatArray0[1] = (float) (-2981);
      String string3 = StringUtils.join(floatArray0, 'c', 8183, 7);
      assertNotNull(string3);
      assertEquals("", string3);
      assertArrayEquals(new float[] {8183.0F, (-2981.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      String string0 = StringUtils.difference("", "', is neither of type Map.Entry nor an Array");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      String string1 = StringUtils.join(booleanArray0, '<', 1480, 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      String string2 = StringUtils.center("", 0, '<');
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("P\"G", '<');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4545.7924695;
      doubleArray0[1] = (double) '<';
      doubleArray0[2] = (double) '<';
      doubleArray0[3] = (double) 1480;
      doubleArray0[4] = (double) 0;
      String string3 = StringUtils.join(doubleArray0, '=');
      assertNotNull(string3);
      assertEquals("4545.7924695=60.0=60.0=1480.0=0.0", string3);
      assertArrayEquals(new double[] {4545.7924695, 60.0, 60.0, 1480.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      String string0 = StringUtils.capitalize("+^iy.B(9LR");
      assertNotNull(string0);
      assertEquals("+^iy.B(9LR", string0);
      
      String string1 = StringUtils.strip("+^iy.B(9LR");
      assertNotNull(string1);
      assertEquals("+^iy.B(9LR", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "+^iy.B(9LR", (CharSequence) "+^iy.B(9LR");
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceOnce("Py(gM1WJGol7", "+^iy.B(9LR", "Py(gM1WJGol7");
      assertNotNull(string2);
      assertEquals("Py(gM1WJGol7", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.wrap("+^iy.B(9LR", "Py(gM1WJGol7");
      assertNotNull(string3);
      assertEquals("Py(gM1WJGol7+^iy.B(9LRPy(gM1WJGol7", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      String string4 = StringUtils.toRootLowerCase("Py(gM1WJGol7");
      assertNotNull(string4);
      assertEquals("py(gm1wjgol7", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.defaultString("Py(gM1WJGol7+^iy.B(9LRPy(gM1WJGol7", "+^iy.B(9LR");
      assertNotNull(string5);
      assertEquals("Py(gM1WJGol7+^iy.B(9LRPy(gM1WJGol7", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.chomp("py(gm1wjgol7");
      assertNotNull(string6);
      assertEquals("py(gm1wjgol7", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.repeat('#', 54);
      assertNotNull(string7);
      assertEquals("######################################################", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("org.apache.commons.lang3.LocaleUtils", "org.apache.commons.lang3.LocaleUtils", "+^iy.BY9LR vs ");
      assertNull(stringArray0);
      
      String string0 = StringUtils.wrap((String) null, "Cannot clone Cloneable type ");
      assertNull(string0);
      
      String string1 = StringUtils.capitalize("org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string1);
      assertEquals("Org.apache.commons.lang3.LocaleUtils", string1);
      
      String string2 = StringUtils.join((Object[]) null, "g'\u0001i@NC1#&47w");
      assertNull(string2);
      
      String string3 = StringUtils.chop("Org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string3);
      assertEquals("Org.apache.commons.lang3.LocaleUtil", string3);
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.stripStart("gZUe2", (String) null);
      assertNotNull(string4);
      assertEquals("gZUe2", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlphanumeric("Org.apache.commons.lang3.LocaleUtil");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      String string0 = StringUtils.removeStart("...", "...");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.EMPTY;
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.remove("-nS\"y\"i*;", '3');
      assertNotNull(string2);
      assertEquals("-nS\"y\"i*;", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      String string0 = StringUtils.wrap("~~RQ(&", "~~RQ(&");
      assertNotNull(string0);
      assertEquals("~~RQ(&~~RQ(&~~RQ(&", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "7emjB*q";
      charSequenceArray0[1] = (CharSequence) "7emjB*q";
      boolean boolean0 = StringUtils.equalsAny("7emjB*q", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.removeAll("", "V");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.leftPad("V", 4);
      assertNotNull(string1);
      assertEquals("   V", string1);
      assertFalse(string1.equals((Object)string0));
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("   V").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank(charSequenceArray0[0], supplier0);
      assertNotNull(charSequence0);
      assertEquals("   V", charSequence0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string1));
      
      charSequenceArray0[1] = (CharSequence) "   V";
      String string2 = StringUtils.LF;
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      
      charSequenceArray0[2] = (CharSequence) "\n";
      String string3 = StringUtils.removeAll("\n", "V");
      assertNotNull(string3);
      assertEquals("\n", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      
      charSequenceArray0[3] = (CharSequence) "\n";
      String string4 = StringUtils.substringAfter("}/Yn", (-665));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      charSequenceArray0[4] = (CharSequence) "";
      String string5 = StringUtils.capitalize("V");
      assertNotNull(string5);
      assertEquals("V", string5);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      charSequenceArray0[5] = (CharSequence) "V";
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(string4));
      
      ArrayDeque<String> arrayDeque1 = arrayDeque0.clone();
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(arrayDeque1);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque0.contains(string4));
      assertFalse(arrayDeque1.contains(string4));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque1, locale_FilteringMode0);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(list0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque0.contains(string4));
      assertFalse(arrayDeque1.contains(string4));
      assertFalse(list0.contains(string4));
      
      String string6 = StringUtils.join(list0, 'q', 2134, 2134);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(string6);
      assertEquals("", string6);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(arrayDeque0.contains(string4));
      assertFalse(arrayDeque1.contains(string4));
      assertFalse(list0.contains(string4));
      
      charSequenceArray0[6] = (CharSequence) "";
      String string7 = StringUtils.deleteWhitespace("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string7);
      assertEquals("p{InCombiningDiacriticalMarks}+", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string5));
      
      charSequenceArray0[7] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      String string8 = StringUtils.chomp("");
      assertNotNull(string8);
      assertEquals("", string8);
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)charSequence0));
      
      charSequenceArray0[8] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "=</3TNdn{";
      charSequenceArray0[1] = (CharSequence) "=</3TNdn{";
      boolean boolean0 = StringUtils.isEmpty("=</3TNdn{");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("*hPk*hPk");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ", Length: ", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(3, charSequenceArray0.length);
      
      String string0 = StringUtils.join((byte[]) null, ' ');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("\r");
      assertTrue(boolean0);
      
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      int int0 = new Integer(0);
      assertEquals(0, int0);
      
      String string2 = StringUtils.wrap((String) null, '@');
      assertNull(string2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '[';
      charArray0[4] = '@';
      charArray0[5] = '@';
      charArray0[6] = '@';
      charArray0[7] = '';
      charArray0[8] = '@';
      String string3 = StringUtils.center("\r", 0);
      assertNotNull(string3);
      assertEquals("\r", string3);
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.reverse("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string4);
      assertEquals("rehtona fo tupni eht si pool eno fo tuptuo - rorrEwolfrevOkcatS tsniaga tcetorp ot gnitrobA", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, '1');
      assertNotNull(string0);
      assertEquals("1111111111", string0);
      assertEquals(11, charSequenceArray0.length);
      
      String string1 = StringUtils.truncate("uGwx ?El62;=^K", 454);
      assertNotNull(string1);
      assertEquals("uGwx ?El62;=^K", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      String string0 = StringUtils.reverse(";}H04tqpSSycioS`");
      assertNotNull(string0);
      assertEquals("`SoicySSpqt40H};", string0);
      
      boolean boolean0 = StringUtils.isEmpty("`SoicySSpqt40H};");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "`SoicySSpqt40H};";
      objectArray0[1] = (Object) "`SoicySSpqt40H};";
      objectArray0[2] = (Object) "`SoicySSpqt40H};";
      objectArray0[3] = (Object) "`SoicySSpqt40H};";
      objectArray0[4] = (Object) ";}H04tqpSSycioS`";
      objectArray0[5] = (Object) ";}H04tqpSSycioS`";
      String string1 = StringUtils.truncate("*hPk*hPk", 15);
      assertNotNull(string1);
      assertEquals("*hPk*hPk", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chop("Threshold must not be negative");
      assertNotNull(string2);
      assertEquals("Threshold must not be negativ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.stripStart((String) null, "\r");
      assertNull(string3);
      
      String string4 = StringUtils.substringBeforeLast("v-_O*Q[VXxVuN,(Q1iy", (String) null);
      assertNotNull(string4);
      assertEquals("v-_O*Q[VXxVuN,(Q1iy", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlphanumeric("v-_O*Q[VXxVuN,(Q1iy");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "Threshold must not be negativ";
      String string5 = StringUtils.join((List<?>) null, 'Y', 2328, 113);
      assertNull(string5);
      
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "Threshold must not be negativ";
      charSequenceArray0[4] = (CharSequence) "Threshold must not be negativ";
      charSequenceArray0[5] = (CharSequence) "`SoicySSpqt40H};";
      charSequenceArray0[6] = (CharSequence) "`SoicySSpqt40H};";
      boolean boolean2 = StringUtils.equalsAny(";}H04tqpSSycioS`", charSequenceArray0);
      assertFalse(boolean2);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string6 = StringUtils.substring("br\"lc@Nu", 2328, 15);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      
      int int0 = StringUtils.countMatches((CharSequence) "", '*');
      assertEquals(0, int0);
      
      String string7 = StringUtils.stripAccents(";");
      assertNotNull(string7);
      assertEquals(";", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      String string0 = StringUtils.joinWith("", objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(6, objectArray0.length);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char char0 = 'j';
      String string1 = StringUtils.join(objectArray0, 'j', 64, 64);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(6, objectArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("", 17, 'A');
      assertNotNull(string2);
      assertEquals("AAAAAAAAAAAAAAAAA", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("org.apache.commons.lang3.StringUtils", 'N');
      assertNotNull(string0);
      assertEquals("Norg.apache.commons.lang3.StringUtilsN", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Norg.apache.commons.lang3.StringUtilsN");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter("org.apache.commons.lang3.StringUtils", "Norg.apache.commons.lang3.StringUtilsN");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "Norg.apache.commons.lang3.StringUtilsN");
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '_';
      charArray0[1] = 'N';
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Stream<Locale> stream0 = linkedList1.parallelStream();
      assertNotSame(linkedList1, linkedList0);
      assertNotNull(stream0);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList1.size());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) linkedList0, locale_FilteringMode0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(list1.equals((Object)list0));
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      String string2 = locale0.getDisplayLanguage();
      assertNotNull(string2);
      assertEquals("Korean", string2);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Locale locale1 = Locale.UK;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("GB", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_GB", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = StringUtils.lowerCase("Norg.apache.commons.lang3.StringUtilsN", locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string3);
      assertEquals("norg.apache.commons.lang3.stringutilsn", string3);
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("GB", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_GB", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.join((Iterable<?>) linkedList1, '5');
      assertNotSame(linkedList1, linkedList0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(0, linkedList1.size());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(locale1));
      
      String string5 = StringUtils.abbreviate("]", 127);
      assertNotNull(string5);
      assertEquals("]", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      String string0 = StringUtils.trim("=>w<; ^+4@y1ps#*");
      assertNotNull(string0);
      assertEquals("=>w<; ^+4@y1ps#*", string0);
      
      String string1 = StringUtils.normalizeSpace("=>w<; ^+4@y1ps#*");
      assertNotNull(string1);
      assertEquals("=>w<; ^+4@y1ps#*", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.chop("=>w<; ^+4@y1ps#*");
      assertNotNull(string2);
      assertEquals("=>w<; ^+4@y1ps#", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfter(", Length: ", "=>w<; ^+4@y1ps#*");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      Locale locale1 = Locale.ENGLISH;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      
      String string4 = locale1.getDisplayName();
      assertNotSame(locale1, locale0);
      assertNotNull(string4);
      assertEquals("English", string4);
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = locale0.getDisplayVariant(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      Set<Character> set0 = locale1.getExtensionKeys();
      assertNotSame(locale1, locale0);
      assertNotNull(set0);
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(locale1.equals((Object)locale0));
      
      String string6 = locale0.getDisplayVariant();
      assertNotSame(locale0, locale1);
      assertNotNull(string6);
      assertEquals("", string6);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      
      int int0 = StringUtils.getFuzzyDistance("", "=>w<; ^+4@y1ps#", locale0);
      assertNotSame(locale0, locale1);
      assertEquals(0, int0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "English";
      objectArray0[1] = (Object) "English";
      objectArray0[2] = (Object) "=>w<; ^+4@y1ps#*";
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(locale0));
      
      Stream<Locale> stream0 = linkedList0.parallelStream();
      assertNotNull(stream0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(locale0));
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) linkedList0);
      assertNotNull(list0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, linkedList0.size());
      assertFalse(list0.contains(locale0));
      assertFalse(linkedList0.contains(locale0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) linkedList0, locale_FilteringMode0);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(list1.equals((Object)list0));
      assertFalse(list1.contains(locale0));
      assertFalse(linkedList0.contains(locale0));
      
      String string7 = locale1.getDisplayLanguage();
      assertNotSame(locale1, locale0);
      assertNotNull(string7);
      assertEquals("English", string7);
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(locale1.equals((Object)locale0));
      
      String string8 = StringUtils.lowerCase("Exception cloning Cloneable type ", locale0);
      assertNotSame(locale0, locale1);
      assertNotNull(string8);
      assertEquals("exception cloning cloneable type ", string8);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      
      boolean boolean0 = StringUtils.isNumericSpace("English");
      assertFalse(boolean0);
      
      String string9 = StringUtils.join((Iterable<?>) linkedList0, '5');
      assertNotNull(string9);
      assertEquals("", string9);
      assertEquals(0, linkedList0.size());
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(linkedList0.contains(locale0));
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Strings must not be null", (-1320));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.wrap("|N", "");
      assertNotNull(string1);
      assertEquals("|N", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      String string2 = StringUtils.join(booleanArray0, '<', 5, (-1977));
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "+^iy.BY9LR";
      String string4 = StringUtils.center("+^iy.BY9LR", 1480, '?');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "|N";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, '<', (-1977), (-17));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1977
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) " vs ";
      charSequenceArray0[1] = (CharSequence) " vs ";
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.defaultString("!:J6");
      assertNotNull(string1);
      assertEquals("!:J6", string1);
      
      String string2 = StringUtils.repeat('S', (-3120));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOf((CharSequence) "!:J6", (-3120), 1114111);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[3] = (CharSequence) " vs ";
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      Locale locale1 = Locale.FRANCE;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      
      String string0 = locale1.getDisplayVariant();
      assertNotSame(locale1, locale0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      
      String string1 = StringUtils.upperCase("^b|L8<u)@bE7^\u0002(", locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string1);
      assertEquals("^B|L8<U)@BE7^\u0002(", string1);
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("Y^uQVn{ua", (int) (byte)121);
      assertNotNull(string2);
      assertEquals("Y^uQVn{ua", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "Y^uQVn{ua", (int) (byte)121, (int) (byte)121);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      String string0 = StringUtils.leftPad("{lY=!*uIz)S_g<#*[&", (-2570), "{lY=!*uIz)S_g<#*[&");
      assertNotNull(string0);
      assertEquals("{lY=!*uIz)S_g<#*[&", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Comparator should not be null.");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "%", "&,M+Ux5JwBT]Pl)");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '?';
      int int0 = StringUtils.indexOfAny((CharSequence) " ", (String) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("8^)uh1CR<u><tilsorg.apache.commons.lang3.StringU");
      assertNotNull(stringArray0);
      assertEquals(21, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.leftPad(" ", 9, " ");
      assertNotNull(string0);
      assertEquals("         ", string0);
      
      String string1 = StringUtils.appendIfMissing("         ", " ", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("         ", string1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(4, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("         ");
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "         ", " ");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      String string0 = StringUtils.repeat("KE_|y", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "KE_|y";
      String string1 = StringUtils.replaceEach("k5Bwi 26U", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals("k5Bwi 26U", string1);
      assertEquals(9, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("KE_|y");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceAll("|X>p$|", "KE_|y", "<");
      assertNotNull(string2);
      assertEquals("|X>p$|", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.compareIgnoreCase("|X>p$|", "", false);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "=</3TNdn{";
      charSequenceArray0[1] = (CharSequence) "=</3TNdn{";
      String string0 = StringUtils.leftPad("*hPk*hPk", 51, " ");
      assertNotNull(string0);
      assertEquals("                                           *hPk*hPk", string0);
      
      charSequenceArray0[2] = (CharSequence) "                                           *hPk*hPk";
      String string1 = StringUtils.appendIfMissing("=</3TNdn{", "=</3TNdn{", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("=</3TNdn{", string1);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "*hPk*hPk", "");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      String string0 = StringUtils.defaultString("Search and Replace array lengths don't match: *2S,l(_Pc[5{");
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match: *2S,l(_Pc[5{", string0);
      
      String string1 = StringUtils.defaultString("[xA13SL&f");
      assertNotNull(string1);
      assertEquals("[xA13SL&f", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "[xA13SL&f";
      stringArray0[1] = "[xA13SL&f";
      stringArray0[2] = "Search and Replace array lengths don't match: *2S,l(_Pc[5{";
      stringArray0[3] = "[xA13SL&f";
      stringArray0[4] = "[xA13SL&f";
      stringArray0[5] = "[xA13SL&f";
      stringArray0[6] = "oN<dVVy#Gf+9gV}";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string2);
      assertEquals("[xA13SL&f", string2);
      assertEquals(7, stringArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      String string0 = StringUtils.defaultString("org.apache.commons.lang3.LocaleUtils", "org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.LocaleUtils", string0);
      
      boolean boolean0 = StringUtils.startsWith("org.apache.commons.lang3.LocaleUtils", "org.apache.commons.lang3.LocaleUtils");
      assertTrue(boolean0);
      
      String string1 = StringUtils.right("', is neither of type Map.Entry nor an Array", 8192);
      assertNotNull(string1);
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) null);
      assertNull(charSequence0);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.substringBetween("%t @:3[h3e*do;Qa}", "/VgV=gK'*r)epFMl(d5g");
      assertNull(string2);
      
      String string3 = StringUtils.substringBetween("^9SU", "v2Gj/Q\"ht2v");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.center((String) null, (-2981), (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.trim((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.wrap("+^iy.BY9LR vs ", '8');
      assertNotNull(string3);
      assertEquals("8+^iy.BY9LR vs 8", string3);
      
      boolean boolean2 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean2);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.capitalize((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.join(stringArray0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(1, stringArray0.length);
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.mid("@8;*\"C;`=T5ti", (-2981), 256);
      assertNotNull(string6);
      assertEquals("@8;*\"C;`=T5ti", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "*k*k", 256);
      assertEquals((-1), int0);
      
      String string7 = "Wdqaeu";
      // Undeclared exception!
      try { 
        Charset.forName("@8;*\"C;`=T5ti");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // @8;*\"C;`=T5ti
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      String string0 = StringUtils.unwrap("}=5n4H", "}=5n4H");
      assertNotNull(string0);
      assertEquals("}=5n4H", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase(".Is<n-N+");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "}=5n4H", ".IG/=8}~IJx??");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      String string0 = StringUtils.wrap("-1", '[');
      assertNotNull(string0);
      assertEquals("[-1[", string0);
      
      String string1 = StringUtils.chop("[-1[");
      assertNotNull(string1);
      assertEquals("[-1", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "[-1";
      charSequenceArray0[1] = (CharSequence) "[-1[";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.removeEndIgnoreCase((String) null, (String) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.join((byte[]) null, ' ');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      String string1 = StringUtils.abbreviateMiddle("org.apache.commons.lang3.StringUtils", "e`HN$WH5+vZ*qe!])", 730);
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.lang3.StringUtils";
      stringArray0[1] = "e`HN$WH5+vZ*qe!])";
      stringArray0[2] = "org.apache.commons.lang3.StringUtils";
      stringArray0[3] = "org.apache.commons.lang3.StringUtils";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 3168;
      String string2 = StringUtils.join(longArray0, 'A', 102, 102);
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new long[] {3168L}, longArray0);
      assertEquals(1, longArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "e`HN$WH5+vZ*qe!])");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.mid("e`HN$WH5+vZ*qe!])", (-1944), (-1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.firstNonBlank(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string4);
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertTrue(boolean0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte) (-26);
      byteArray0[8] = (byte)94;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'A', 7, (int) (byte)94);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      String string0 = StringUtils.substringAfter("', has a length less than 2", 32);
      assertNotNull(string0);
      assertEquals("has a length less than 2", string0);
      
      char[] charArray0 = new char[8];
      boolean boolean0 = StringUtils.containsIgnoreCase("has a length less than 2", "has a length less than 2");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("LW{PU", "Rn*5");
      assertEquals((-6), int0);
      
      String string1 = StringUtils.valueOf(charArray0);
      assertNotNull(string1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.unwrap("', has a length less than 2", "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      assertNotNull(string2);
      assertEquals("', has a length less than 2", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.truncate("]J <Igt\"Id7", 32);
      assertNotNull(string3);
      assertEquals("]J <Igt\"Id7", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("Search and Replace aray lengths don't match: ");
      assertNotNull(string0);
      assertEquals("search and replace aray lengths don't match: ", string0);
      
      String string1 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-2421), (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      String string0 = StringUtils.stripToNull("q)gIKFU]:G");
      assertNotNull(string0);
      assertEquals("q)gIKFU]:G", string0);
      
      String string1 = StringUtils.defaultIfEmpty("", "q)gIKFU]:G");
      assertNotNull(string1);
      assertEquals("q)gIKFU]:G", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("", 0, 1);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "q)gIKFU]:G";
      charSequenceArray0[3] = (CharSequence) "q)gIKFU]:G";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("q)gIKFU]:G");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)123;
      String string3 = StringUtils.join((Object[]) stringArray0);
      assertNotNull(string3);
      assertEquals("q)gIKFU]:G", string3);
      assertEquals(7, stringArray0.length);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.deleteWhitespace("");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      String string0 = "Pshrzb0nxQAg?R";
      String string1 = null;
      String string2 = StringUtils.abbreviate("", (String) null, 0, 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWith("Pshrzb0nxQAg?R", " vs ");
      assertFalse(boolean0);
      
      LinkedHashSet<CharBuffer> linkedHashSet0 = new LinkedHashSet<CharBuffer>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("minimum abbreviation width with offset is %d", string0);
      
      String string1 = StringUtils.capitalize("Minimum abbreviation width with offset is %d");
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphaSpace("Minimum abbreviation width with offset is %d");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      String string2 = StringUtils.unwrap("R {zo%f.0", '!');
      assertNotNull(string2);
      assertEquals("R {zo%f.0", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((Object[]) null, "Minimum a", Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 290);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.replaceChars((String) null, "dUesW&;{R<_$", "dUesW&;{R<_$");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      String string0 = StringUtils.getDigits("...");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "...";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs +^iy.BY9LR");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string1 = StringUtils.capitalize("f>D 4t^b4t+");
      assertNotNull(string1);
      assertEquals("F>D 4t^b4t+", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase(charSequenceArray0[3], charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)25;
      shortArray0[1] = (short) (-972);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-86);
      shortArray0[4] = (short)17;
      shortArray0[5] = (short)13;
      String string2 = StringUtils.join(shortArray0, '5');
      assertNotNull(string2);
      assertEquals("255-9725-15-86517513", string2);
      assertArrayEquals(new short[] {(short)25, (short) (-972), (short) (-1), (short) (-86), (short)17, (short)13}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((Object[]) stringArray0, " vs +^iy.BY9LR", (int) (short)25, (int) (short) (-1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(10, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, " ");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '?';
      String[] stringArray1 = StringUtils.substringsBetween(" ", " ", "org.apache.commons.lang3.LocaleUtils");
      assertNull(stringArray1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "$.Il&O]STF'b=bV|{+", (CharSequence) " ");
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      String string0 = StringUtils.chomp("'@DxZwgc");
      assertNotNull(string0);
      assertEquals("'@DxZwgc", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("'@DxZwgc");
      assertFalse(boolean0);
      
      String string1 = StringUtils.capitalize("'@DxZwgc");
      assertNotNull(string1);
      assertEquals("'@DxZwgc", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeStartIgnoreCase("'@DxZwgc", "...");
      assertNotNull(string2);
      assertEquals("'@DxZwgc", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "'@DxZwgc", (CharSequence) "'@DxZwgc");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      String string0 = "Q-~mXT\\tTN#89,o";
      String string1 = StringUtils.wrapIfMissing("Q-~mXT\tTN#89,o", "Q-~mXT\tTN#89,o");
      assertNotNull(string1);
      assertEquals("Q-~mXT\tTN#89,o", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Q-~mXT\tTN#89,o", (CharSequence) "p,6+E'tpr}hml3wuyQ");
      assertEquals(18, int0);
      
      String string2 = StringUtils.strip("p,6+E'tpr}hml3wuyQ");
      assertNotNull(string2);
      assertEquals("p,6+E'tpr}hml3wuyQ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      try { 
        StringUtils.getBytes("8y;~Amyo", "5faw&2");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      String string0 = StringUtils.replace("org.apache.commons.lang3.CharUtils", "#Ln", "#Ln", (-1994));
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.CharUtils", string0);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.CharUtils", (CharSequence) null, 0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.CharUtils", (CharSequence) "#Ln");
      assertEquals(33, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.strip("org.apache.commons.lang3.CharUtils");
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.CharUtils", string2);
      assertTrue(string2.equals((Object)string0));
      
      try { 
        StringUtils.getBytes("ymz}I.riv\"!\u0001G79q9", "org.apache.commons.lang3.CharUtils");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      String string0 = StringUtils.stripToNull("q)gIKFU]:G");
      assertNotNull(string0);
      assertEquals("q)gIKFU]:G", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "q)gIKFU]:G", (-562), (-562));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultIfEmpty("", "q)gIKFU]:G");
      assertNotNull(string1);
      assertEquals("q)gIKFU]:G", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("", 0, 1);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) "";
      String string3 = StringUtils.replace("", "", "V'r/G:]? W^26bg", 53);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.valueOf((char[]) null);
      assertNull(string4);
      
      int int1 = StringUtils.indexOf((CharSequence) "q)gIKFU]:G", (CharSequence) "", (-562));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.ArrayUtils";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2380.0F);
      floatArray0[3] = (-3684.3062F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 649.0F;
      String string0 = StringUtils.join(floatArray0, 't');
      assertNotNull(string0);
      assertEquals("1861.1t-1.0t-2380.0t-3684.3062t0.0t649.0", string0);
      assertArrayEquals(new float[] {1861.1F, (-1.0F), (-2380.0F), (-3684.3062F), 0.0F, 649.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("8hq<0<");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf("1861.1t-1.0t-2380.0t-3684.3062t0.0t649.0", "1861.1t-1.0t-2380.0t-3684.3062t0.0t649.0", (-4300));
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("1861.1t-1.0t-2380.0t-3684.3062t0.0t649.0", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("\r", "\r");
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\r", (CharSequence) "\r", 108);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "\r", 108);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = StringUtils.isNumeric("\r");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "\r";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "\r", charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      String string0 = StringUtils.substringBefore("P /g^2g|s!?A0kmh]", (-1999));
      assertNotNull(string0);
      assertEquals("P /g^2g|s!?A0kmh]", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "P /g^2g|s!?A0kmh]";
      charSequenceArray0[1] = (CharSequence) "P /g^2g|s!?A0kmh]";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("P /g^2g|s!?A0kmh]", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      String string0 = StringUtils.capitalize("u6/p");
      assertNotNull(string0);
      assertEquals("U6/p", string0);
      
      String string1 = StringUtils.abbreviateMiddle("kd7Va7", "u6/p", 93);
      assertNotNull(string1);
      assertEquals("kd7Va7", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Cloneable");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      char[] charArray0 = new char[8];
      int int0 = StringUtils.compareIgnoreCase("LW{PU", "Rn*5");
      assertEquals((-6), int0);
      
      String string0 = StringUtils.valueOf(charArray0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      
      String string1 = StringUtils.unwrap("', has a length less than 2", "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      assertNotNull(string1);
      assertEquals("', has a length less than 2", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.truncate("]J <Igt\"Id7", 32);
      assertNotNull(string2);
      assertEquals("]J <Igt\"Id7", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.overlay("Q-~mXT\tTN#89,oQ-~mXT\tTN#89,o", ";yF@(W&)q~zk3H>,~rWI&#C0eA", 32, 10);
      assertNotNull(string3);
      assertEquals("Q-~mXT\tTN#;yF@(W&)q~zk3H>,~rWI&#C0eA", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Q-~mXT\tTN;yF@(W&)q~zk3H>,~rWI&#C0eA", (CharSequence) "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", 10);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      String string0 = StringUtils.substringBefore("8pjL0:z.Zud/xLKGtn*", "0zi'1v56YmQv(<");
      assertNotNull(string0);
      assertEquals("8pjL0:z.Zud/xLKGtn*", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "8pjL0:z.Zud/xLKGtn*", (CharSequence) "0zi'1v56YmQv(<", 6);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      String string0 = StringUtils.trim("=>w<; ^+4@y1ps#*");
      assertNotNull(string0);
      assertEquals("=>w<; ^+4@y1ps#*", string0);
      
      String string1 = StringUtils.normalizeSpace("=>w<; ^+4@y1ps#*");
      assertNotNull(string1);
      assertEquals("=>w<; ^+4@y1ps#*", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string2 = StringUtils.remove("=>w<; ^+4@y1ps#*", "=>w<; ^+4@y1ps#*");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "=>w<; ^+4@y1ps#*";
      charSequenceArray0[2] = (CharSequence) "........................................................................................................ vs ";
      charSequenceArray0[3] = (CharSequence) "=>w<; ^+4@y1ps#*";
      String string3 = StringUtils.prependIfMissingIgnoreCase("........................................................................................................ vs ", "=>w<; ^+4@y1ps#*", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("........................................................................................................ vs ", string3);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.joinWith("#T]A]A;)_Iu=A......", charSequenceArray0);
      assertNotNull(string4);
      assertEquals("#T]A]A;)_Iu=A......=>w<; ^+4@y1ps#*#T]A]A;)_Iu=A.............................................................................................................. vs #T]A]A;)_Iu=A......=>w<; ^+4@y1ps#*", string4);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      String[] stringArray0 = StringUtils.split("+^iy.BY9LR");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.prependIfMissingIgnoreCase("vZ7p", "+^iy.BY9LR", stringArray0);
      assertNotNull(string0);
      assertEquals("+^iy.BY9LRvZ7p", string0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.joinWith("+^iy.BY9LR", stringArray0);
      assertNotNull(string1);
      assertEquals("+^iy.BY9LR", string1);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      String string0 = StringUtils.removePattern((String) null, (String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = '_';
      String string1 = StringUtils.valueOf(charArray0);
      assertNotNull(string1);
      assertEquals("___", string1);
      assertArrayEquals(new char[] {'_', '_', '_'}, charArray0);
      assertEquals(3, charArray0.length);
      
      String string2 = StringUtils.overlay((String) null, (String) null, 108, 108);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.trimToNull("\r");
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      String string0 = StringUtils.overlay("ikMTT\"fUMfyTy*j", "ZF,l])BPkOd*]<u0Qj", 14, 7);
      assertNotNull(string0);
      assertEquals("ikMTT\"fZF,l])BPkOd*]<u0Qjj", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("ikMTT\"fZF,l])BPkOd*]<u0Qjj");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      String string0 = "|N";
      String string1 = StringUtils.wrap("|N", "");
      assertNotNull(string1);
      assertEquals("|N", string1);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "|N", charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char char0 = 'q';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'q', 0, 1371);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("org.apache.commons.lang3.StringUtils", 'N');
      assertNotNull(string0);
      assertEquals("Norg.apache.commons.lang3.StringUtilsN", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Norg.apache.commons.lang3.StringUtilsN");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter("org.apache.commons.lang3.StringUtils", "Norg.apache.commons.lang3.StringUtilsN");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.center("Locale must not be null", 638);
      assertNotNull(string2);
      assertEquals("                                                                                                                                                                                                                                                                                                                   Locale must not be null                                                                                                                                                                                                                                                                                                                    ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringBetween("Norg.apache.commons.lang3.StringUtilsN", "5m;d }6e3Z");
      assertNull(string3);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "org.apache.commons.lang3.StringUtils";
      String string4 = StringUtils.joinWith("-.OtDON`M(|/gg", objectArray0);
      assertNotNull(string4);
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      assertEquals(1, objectArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Paox`K";
      stringArray0[1] = null;
      stringArray0[2] = "Norg.apache.commons.lang3.StringUtilsN";
      stringArray0[3] = "-.OtDON`M(|/gg";
      String string5 = StringUtils.replaceEach("+^iy.BY9LR vs ", stringArray0, stringArray0);
      assertNotNull(string5);
      assertEquals("+^iy.BY9LR vs ", string5);
      assertEquals(4, stringArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.replaceEachRepeatedly("$ V", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("$ V", string0);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("J F6R", "<_Na)}-A0\">SRE{3&;k", "<_Na)}-A0\">SRE{3&;k");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 3
         // <_Na)}-A0\">SRE{3&;k
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("p]V}~`<>");
      assertNotNull(string0);
      assertEquals("p]V}~`<>", string0);
      
      String string1 = StringUtils.remove("", 'W');
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      String string0 = StringUtils.join(floatArray0, '\'', (-2017), (-2017));
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      String string1 = StringUtils.replaceChars("", "", (String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.difference("", "WuKOMI1wZ*=`3{I74");
      assertNotNull(string2);
      assertEquals("WuKOMI1wZ*=`3{I74", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.compare("Aborting to protect against StackOverflowError - output of one loop is the input of another", "", true);
      assertEquals(91, int0);
      
      String string3 = StringUtils.join((int[]) null, '(');
      assertNull(string3);
      
      String string4 = StringUtils.center("WuKOMI1wZ*=`3{I74", 0, "Object varargs must not be null");
      assertNotNull(string4);
      assertEquals("WuKOMI1wZ*=`3{I74", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      
      String string5 = StringUtils.replaceChars("", (String) null, "");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string6 = StringUtils.center("", 91);
      assertNotNull(string6);
      assertEquals("                                                                                           ", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.rightPad("", 0, '\'');
      assertNotNull(string7);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      
      String string8 = StringUtils.appendIfMissingIgnoreCase("", "WuKOMI1wZ*=`3{I74", (CharSequence[]) null);
      assertNotNull(string8);
      assertEquals("WuKOMI1wZ*=`3{I74", string8);
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsWhitespace("                                                                                           ");
      assertTrue(boolean0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-2017));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string9 = StringUtils.trimToEmpty("-)3]tS'Zyygru6V>");
      assertNotNull(string9);
      assertEquals("-)3]tS'Zyygru6V>", string9);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      
      Vector<Object> vector0 = new Vector<Object>(91, 0);
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(91, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains("WuKOMI1wZ*=`3{I74"));
      
      String string10 = StringUtils.join((Iterable<?>) vector0, 'u');
      assertNotNull(string10);
      assertEquals("", string10);
      assertEquals("[]", vector0.toString());
      assertEquals(91, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string5));
      assertTrue(string10.equals((Object)string1));
      assertTrue(string10.equals((Object)string7));
      assertFalse(vector0.contains("WuKOMI1wZ*=`3{I74"));
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      String string0 = StringUtils.substringBefore("tlK'W{U!4/nIf&.U", 1931);
      assertNotNull(string0);
      assertEquals("tlK'W{U!4/nIf&.U", string0);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      String string0 = StringUtils.unwrap(" ", " ");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.difference("Locale must not be null", " ");
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      
      String string2 = StringUtils.upperCase(" ", locale0);
      assertNotNull(string2);
      assertEquals(" ", string2);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Locale must not be null", (CharSequence) " ");
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      
      objectArray0[4] = object4;
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      
      String string0 = StringUtils.upperCase("*hPk*hPk", locale0);
      assertNotNull(string0);
      assertEquals("*HPK*HPK", string0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      
      String string1 = StringUtils.substringBefore(" vs ", 35);
      assertNotNull(string1);
      assertEquals(" vs ", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      String string0 = StringUtils.leftPad("Cloneable", (-269), 'F');
      assertNotNull(string0);
      assertEquals("Cloneable", string0);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      String string0 = StringUtils.trim("=>w<; ^+4@y1ps#*");
      assertNotNull(string0);
      assertEquals("=>w<; ^+4@y1ps#*", string0);
      
      String string1 = StringUtils.normalizeSpace("=>w<; ^+4@y1ps#*");
      assertNotNull(string1);
      assertEquals("=>w<; ^+4@y1ps#*", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.chop("=>w<; ^+4@y1ps#*");
      assertNotNull(string2);
      assertEquals("=>w<; ^+4@y1ps#", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfter(", Length: ", "=>w<; ^+4@y1ps#*");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      Locale locale1 = Locale.ENGLISH;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      
      String string4 = locale1.getDisplayName();
      assertNotSame(locale1, locale0);
      assertNotNull(string4);
      assertEquals("English", string4);
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = locale0.getDisplayVariant(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = locale0.getDisplayVariant();
      assertNotSame(locale0, locale1);
      assertNotNull(string6);
      assertEquals("", string6);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      
      int int0 = StringUtils.getFuzzyDistance("", "=>w<; ^+4@y1ps#", locale0);
      assertNotSame(locale0, locale1);
      assertEquals(0, int0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(locale0.equals((Object)locale1));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "English";
      objectArray0[1] = (Object) "English";
      objectArray0[2] = (Object) "=>w<; ^+4@y1ps#*";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "=>w<; ^+4@y1ps#*";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      char char0 = 'j';
      String string7 = StringUtils.join(objectArray0, 'j', 149, 64);
      assertNotNull(string7);
      assertEquals("", string7);
      assertEquals(8, objectArray0.length);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      
      char char1 = 'A';
      String string8 = StringUtils.leftPad("", 0, 'j');
      assertNotNull(string8);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string7));
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "English");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // English
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      String string0 = StringUtils.getDigits("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 465);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.strip("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultString("}=5n4H", "");
      assertNotNull(string2);
      assertEquals("}=5n4H", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfterLast("", "u_M");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Locale must not be null", "\r", 8, 2698);
      assertNotNull(string0);
      assertEquals("Locale must not be null", string0);
      
      String string1 = StringUtils.upperCase("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Locale must not be null", (CharSequence) "");
      assertFalse(boolean0);
      
      String string2 = StringUtils.trim("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("o%(P]/|$6|gi]", "Iwcd/at0&srmbo4dv");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = 'x';
      charArray0[2] = 'B';
      charArray0[3] = ';';
      charArray0[4] = 'H';
      charArray0[5] = 'A';
      charArray0[6] = '!';
      charArray0[7] = ' ';
      charArray0[8] = '!';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {';', 'x', 'B', ';', 'H', 'A', '!', ' ', '!'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("h=8*2,L^*");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(9, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.substringAfterLast("", "org.apache.commons.lang3.ObjectUtils");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("org.apache.commons.lang3.StringUtils", 'N');
      assertNotNull(string0);
      assertEquals("Norg.apache.commons.lang3.StringUtilsN", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Norg.apache.commons.lang3.StringUtilsN");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter("org.apache.commons.lang3.StringUtils", "Norg.apache.commons.lang3.StringUtilsN");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("Locale must not be null", 638);
      assertNotNull(string2);
      assertEquals("                                                                                                                                                                                                                                                                                                                   Locale must not be null                                                                                                                                                                                                                                                                                                                    ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "org.apache.commons.lang3.StringUtils";
      String string3 = StringUtils.joinWith("Norg.apache.commons.lang3.StringUtilsN", objectArray0);
      assertNotNull(string3);
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      assertEquals(1, objectArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "Norg.apache.commons.lang3.StringUtilsN");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("                                                                                                                                                                                                                                                                                                                   Locale must not be null                                                                                                                                                                                                                                                                                                                    ");
      assertNotNull(stringArray0);
      assertEquals(620, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("dIued`UxTT?3gJ", "dIued`UxTT?3gJ");
      assertNotNull(string0);
      assertEquals("dIued`UxTT?3gJ", string0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1133.0F);
      floatArray0[1] = 0.0F;
      String string1 = StringUtils.join(floatArray0, 'h', 256, 256);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new float[] {(-1133.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("dIued`UxTT?3gJ", "dIued`UxTT?3gJ", 30);
      assertNotNull(stringArray0);
      assertEquals(15, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("org.apache.commons.lang3.StringUtils", 'N');
      assertNotNull(string0);
      assertEquals("Norg.apache.commons.lang3.StringUtilsN", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Norg.apache.commons.lang3.StringUtilsN");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter("org.apache.commons.lang3.StringUtils", "Norg.apache.commons.lang3.StringUtilsN");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.center("Locale must not be null", 638);
      assertNotNull(string2);
      assertEquals("                                                                                                                                                                                                                                                                                                                   Locale must not be null                                                                                                                                                                                                                                                                                                                    ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBetween("Norg.apache.commons.lang3.StringUtilsN", "5m;d }6e3Z");
      assertNull(string3);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "org.apache.commons.lang3.StringUtils";
      String string4 = StringUtils.joinWith("-.OtDON`M(|/gg", objectArray0);
      assertNotNull(string4);
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      assertEquals(1, objectArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean2 = StringUtils.equalsIgnoreCase((CharSequence) null, "-.OtDON`M(|/gg");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string5 = StringUtils.join((List<?>) null, "Norg.apache.commons.lang3.StringUtilsN", 638, 638);
      assertNull(string5);
      
      String string6 = StringUtils.join((List<?>) null, 'N', 0, 1);
      assertNull(string6);
      
      String string7 = StringUtils.leftPad((String) null, 0);
      assertNull(string7);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("                                                                                                                                                                                                                                                                                                                   Locale must not be null                                                                                                                                                                                                                                                                                                                    ");
      assertNotNull(stringArray0);
      assertEquals(620, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("mv.t'", "T9|Z{[0?a,-", "U]1");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("U]1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("org.apache.commons.lang3.LocaleUtils", "org.apache.commons.lang3.LocaleUtils", "+^iy.BY9LR vs ");
      assertNull(stringArray0);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      vector0.clear();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, ';');
      assertNull(string0);
      
      String string1 = StringUtils.rightPad("m", (-1672));
      assertNotNull(string1);
      assertEquals("m", string1);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      String string0 = StringUtils.leftPad("Minimum abbreviation width with offset is %d", 2, '2');
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      
      String string1 = StringUtils.uncapitalize("The character ");
      assertNotNull(string1);
      assertEquals("the character ", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rotate("the character ", 2);
      assertNotNull(string2);
      assertEquals("r the characte", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils", "3%F@_Z\u0006J&m");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Invalid locale format: ";
      charSequenceArray0[1] = (CharSequence) "3%F@_Z\u0006J&m";
      String string1 = StringUtils.defaultString("3%F@_Z\u0006J&m");
      assertNotNull(string1);
      assertEquals("3%F@_Z\u0006J&m", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils", (CharSequence) "3%F@_Z\u0006J&m", (-499));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = '$';
      String string0 = StringUtils.join(charArray0, 'e');
      assertNotNull(string0);
      assertEquals("Pe$", string0);
      assertArrayEquals(new char[] {'P', '$'}, charArray0);
      assertEquals(2, charArray0.length);
      
      double double0 = StringUtils.getJaroWinklerDistance("Pe$", "Pe$");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Pe$", 2045);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      String[] stringArray0 = StringUtils.split("+^iy.BY9LR");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.prependIfMissingIgnoreCase("vZ7p", "+^iy.BY9LR", stringArray0);
      assertNotNull(string0);
      assertEquals("+^iy.BY9LRvZ7p", string0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "+^iy.BY9LR");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("^}uF;@caT($XgyDT");
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertEquals(11, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String string1 = StringUtils.substringAfterLast("3-3-3-3-3-3-3-3-3-3", "-1");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((Object[]) stringArray2, 'E');
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(string2);
      assertEquals("^E}EuEFE;@EcaETE(E$EXgyEDT", string2);
      assertEquals(11, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "3-3-3-3-3-3-3-3-3-3");
      assertNotNull(charBuffer0);
      assertEquals(19, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(19, charBuffer0.capacity());
      assertEquals(19, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("3-3-3-3-3-3-3-3-3-3", charBuffer0.toString());
      assertEquals(19, charBuffer0.remaining());
      
      CharBuffer charBuffer1 = StringUtils.getIfEmpty(charBuffer0, (Supplier<CharBuffer>) null);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      assertEquals(19, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(19, charBuffer0.capacity());
      assertEquals(19, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("3-3-3-3-3-3-3-3-3-3", charBuffer0.toString());
      assertEquals(19, charBuffer0.remaining());
      assertEquals("3-3-3-3-3-3-3-3-3-3", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertEquals(19, charBuffer1.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(19, charBuffer1.capacity());
      assertEquals(19, charBuffer1.length());
      assertEquals(19, charBuffer1.limit());
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) charBuffer0, (String) null);
      assertSame(charBuffer0, charBuffer1);
      assertFalse(boolean0);
      assertEquals(19, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(19, charBuffer0.capacity());
      assertEquals(19, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("3-3-3-3-3-3-3-3-3-3", charBuffer0.toString());
      assertEquals(19, charBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      String string0 = StringUtils.unwrap(" ", " ");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.defaultString("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) " ", (-3543));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("Threshold must not be negative");
      assertFalse(boolean0);
      
      String string0 = StringUtils.rotate("Threshold must not be negative", (-3139));
      assertNotNull(string0);
      assertEquals("be negativeThreshold must not ", string0);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.wrapIfMissing("+o", (String) null);
      assertNotNull(string1);
      assertEquals("+o", string1);
      
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string2);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "+o", 'T');
      assertEquals(0, int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'T'}, charArray0);
      assertEquals(1, charArray0.length);
      
      String string3 = StringUtils.join((Object[]) stringArray0, "m", 0, 0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(1, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ch";
      stringArray0[1] = "AL9dI>{uRZ4";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string0);
      assertEquals("ch", string0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      String string0 = StringUtils.leftPad("%", 27, "%");
      assertNotNull(string0);
      assertEquals("%%%%%%%%%%%%%%%%%%%%%%%%%%%", string0);
      
      String string1 = StringUtils.substringBetween("fY[!~ZpHNf", "]");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.startsWith("%%%%%%%%%%%%%%%%%%%%%%%%%%%", (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.substring("%%%%%%%%%%%%%%%%%%%%%%%%%%%", 8192);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.rightPad((String) null, (-2031), (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.SPACE;
      assertNotNull(string4);
      assertEquals(" ", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2380.0F);
      String string0 = StringUtils.replace("-RG],ksOkbZi6TI", (String) null, "t");
      assertNotNull(string0);
      assertEquals("-RG],ksOkbZi6TI", string0);
      
      String string1 = StringUtils.reverse((String) null);
      assertNull(string1);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string2 = locale0.getDisplayLanguage();
      assertNotNull(string2);
      assertEquals("Chinese", string2);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.lowerCase("Qxb0t=++", locale0);
      assertNotNull(string3);
      assertEquals("qxb0t=++", string3);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      String string0 = StringUtils.chomp("'@DxZwgc");
      assertNotNull(string0);
      assertEquals("'@DxZwgc", string0);
      
      String[] stringArray0 = new String[5];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "'@DxZwgc", (CharSequence[]) stringArray0);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      String string0 = StringUtils.defaultString("*'l@;GA+");
      assertNotNull(string0);
      assertEquals("*'l@;GA+", string0);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "=</3TNdn{";
      charSequenceArray0[1] = (CharSequence) "=</3TNdn{";
      String string0 = StringUtils.defaultString((String) null, "AeU#`/,BkH;e8F");
      assertNotNull(string0);
      assertEquals("AeU#`/,BkH;e8F", string0);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      String string0 = StringUtils.reverse(";}H04tqpSSycioS`");
      assertNotNull(string0);
      assertEquals("`SoicySSpqt40H};", string0);
      
      boolean boolean0 = StringUtils.isEmpty("`SoicySSpqt40H};");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "`SoicySSpqt40H};";
      objectArray0[1] = (Object) "`SoicySSpqt40H};";
      objectArray0[2] = (Object) "`SoicySSpqt40H};";
      objectArray0[3] = (Object) "`SoicySSpqt40H};";
      objectArray0[4] = (Object) ";}H04tqpSSycioS`";
      objectArray0[5] = (Object) ";}H04tqpSSycioS`";
      objectArray0[6] = (Object) "`SoicySSpqt40H};";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      String string1 = StringUtils.join(objectArray0, '4');
      assertNotNull(string1);
      assertEquals(8, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfter(";}H04tqpSSycioS`", "`SoicySSpqt40H};4`SoicySSpqt40H};4`SoicySSpqt40H};4`SoicySSpqt40H};4;}H04tqpSSycioS`4;}H04tqpSSycioS`4`SoicySSpqt40H};4java.lang.Object@2761fa8e");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.join((List<?>) null, '@', 52, 52);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '4');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.remove("`SoicySSpqt40H};", '@');
      assertNotNull(string4);
      assertEquals("`SoicySSpqt40H};", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.substringAfterLast("", (-2955));
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.defaultString((String) null);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertFalse(boolean2);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      String string0 = StringUtils.substringAfter("', has a length less than 2", 32);
      assertNotNull(string0);
      assertEquals("has a length less than 2", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'U';
      charArray0[1] = '$';
      charArray0[2] = '%';
      charArray0[3] = '0';
      charArray0[4] = '$';
      charArray0[5] = '5';
      charArray0[6] = '|';
      charArray0[7] = 't';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "has a length less than 2", charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'U', '$', '%', '0', '$', '5', '|', 't'}, charArray0);
      assertEquals(8, charArray0.length);
      
      String string1 = StringUtils.substring("has a length less than 2", 32);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "', has a length less than 2", (CharSequence) "', has a length less than 2", 32);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("u6/p");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      String string0 = StringUtils.center((String) null, 5, ')');
      assertNull(string0);
      
      String string1 = StringUtils.trim("u6/p");
      assertNotNull(string1);
      assertEquals("u6/p", string1);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      String string0 = "+^iy.BY9LR";
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      String string1 = "vZ7p";
      String string2 = StringUtils.prependIfMissingIgnoreCase("null/empty items", "null/empty items", (CharSequence[]) null);
      assertNotNull(string2);
      assertEquals("null/empty items", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith((String) null, (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("org.apache.commons.lang3.StringUtils", 'N');
      assertNotNull(string0);
      assertEquals("Norg.apache.commons.lang3.StringUtilsN", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Norg.apache.commons.lang3.StringUtilsN");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter("org.apache.commons.lang3.StringUtils", "Norg.apache.commons.lang3.StringUtilsN");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "Norg.apache.commons.lang3.StringUtilsN");
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '_';
      charArray0[1] = 'N';
      String string2 = StringUtils.valueOf(charArray0);
      assertNotNull(string2);
      assertEquals("_N", string2);
      assertArrayEquals(new char[] {'_', 'N'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      String string0 = StringUtils.wrap("|N", "");
      assertNotNull(string0);
      assertEquals("|N", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("|N");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceAll((String) null, "|X>p$|", "}=5n4H");
      assertNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "p4+Q3[C,9|", true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      String string0 = StringUtils.rightPad("u6/p", 4, 'r');
      assertNotNull(string0);
      assertEquals("u6/p", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("u6/p", "u6/p", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.removeAll("", "Lgukj/J]Wm<%#JDC");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(charSequenceArray0[0]).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank(charSequenceArray0[0], supplier0);
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(charSequence0.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.LF;
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      
      charSequenceArray0[2] = (CharSequence) "\n";
      String string2 = StringUtils.removeAll("\n", "Lgukj/J]Wm<%#JDC");
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[3] = (CharSequence) "\n";
      String string3 = StringUtils.substringAfter("}/Yn", (-665));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)charSequence0));
      assertTrue(string3.equals((Object)string0));
      
      charSequenceArray0[4] = (CharSequence) "";
      String string4 = StringUtils.capitalize("Lgukj/J]Wm<%#JDC");
      assertNotNull(string4);
      assertEquals("Lgukj/J]Wm<%#JDC", string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      charSequenceArray0[5] = (CharSequence) "Lgukj/J]Wm<%#JDC";
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(""));
      
      ArrayDeque<String> arrayDeque1 = arrayDeque0.clone();
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotNull(arrayDeque1);
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque1.contains(""));
      assertFalse(arrayDeque0.contains(""));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque1, locale_FilteringMode0);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotNull(list0);
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.contains(""));
      assertFalse(list0.contains(""));
      assertFalse(arrayDeque0.contains(""));
      
      String string5 = StringUtils.join(list0, 'q', 2134, 2134);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.contains(""));
      assertFalse(list0.contains(""));
      assertFalse(arrayDeque0.contains(""));
      
      charSequenceArray0[6] = (CharSequence) "";
      String string6 = StringUtils.deleteWhitespace("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string6);
      assertEquals("p{InCombiningDiacriticalMarks}+", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string3));
      
      charSequenceArray0[7] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      String string7 = StringUtils.chomp("");
      assertNotNull(string7);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)charSequence0));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      
      charSequenceArray0[8] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      
      String string8 = StringUtils.lowerCase("\n", locale0);
      assertNotNull(string8);
      assertEquals("\n", string8);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(string8.equals((Object)charSequence0));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      String string0 = StringUtils.substringAfter("`|VR<%e@Yv0O;", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '=';
      intArray0[1] = (int) '=';
      intArray0[2] = (int) '=';
      intArray0[4] = 830;
      intArray0[5] = (int) '=';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'L', 0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      String string0 = StringUtils.removeStart("Array and element cannot both be null", "b<>3w\"'^#lI@");
      assertNotNull(string0);
      assertEquals("Array and element cannot both be null", string0);
      
      boolean boolean0 = StringUtils.isEmpty("b<>3w\"'^#lI@");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter("Array and element cannot both be null", (String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("3V:Jx]$hp*'}J_r2gr3V:Jx]$hp*'}J_r2gr", 5, (String) null);
      assertNotNull(string2);
      assertEquals("3V:Jx]$hp*'}J_r2gr3V:Jx]$hp*'}J_r2gr", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("u6/p", "u6/p", "'5R");
      assertNotNull(string0);
      assertEquals("'5R", string0);
      
      String string1 = StringUtils.center("", 756);
      assertNotNull(string1);
      assertEqualsstring1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "\\u";
      String string3 = StringUtils.chop(string2);
      assertNotNull(string3);
      assertEquals("\\", string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.stripStart("', is neither of type Map.Entry nor an Array", "8af<]@`?f~)Ln,Co4");
      assertNotNull(string4);
      assertEquals("', is neither of type Map.Entry nor an Array", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.substringBeforeLast("object", "{W");
      assertNotNull(string5);
      assertEquals("object", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumeric("object");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "8af<]@`?f~)Ln,Co4";
      charSequenceArray0[1] = (CharSequence) "{W";
      charSequenceArray0[2] = (CharSequence
      String string6 = StringUtils.lowerCase("'5R");
      assertNotNull(string6);
      assertEquals("'5r", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      
      charSequenceArray0[3] = (CharSequence) "'5r";
      boolean boolean1 = StringUtils.equalsAny("object", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) " vs ";
      charSequenceArray0[1] = (CharSequence) " vs ";
      charSequenceArray0[2] = (CharSequence) " vs ";
      String string0 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(charSequenceArray0[1]);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string1 = StringUtils.join((List<?>) null, 'Y', 2445, 2328);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.equalsAny(charSequenceArray0[0], charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.substring(" vs ", 83, 2445);
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'v');
      assertEquals(0, int0);
      
      String string3 = StringUtils.stripAccents((String) null);
      assertNull(string3);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'G', 2024, 2445);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2024
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      String string0 = StringUtils.substringBetween("i<&oNg)<Z03`A_m", "&aS;8ru/Uhj2{zI`", "i<&oNg)<Z03`A_m");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("U728R!g+kIt-'U(A", "U728R!g+kIt-'U(A");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.mid((String) null, 869, 6);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOfAny("i<&oNg)<Z03`A_m", stringArray0);
      assertEquals(15, int0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.substringBeforeLast("Strings must not be null", (String) null);
      assertNotNull(string2);
      assertEquals("Strings must not be null", string2);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("o#5_&V<i,#y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) null, '9');
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.truncate("an`6)*73.gaYbkS*_=", 76);
      assertNotNull(string0);
      assertEquals("an`6)*73.gaYbkS*_=", string0);
      
      String string1 = StringUtils.repeat("an`6)*73.gaYbkS*_=", 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "an`6)*73.gaYbkS*_=", "Threshold must not be negative");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean2 = StringUtils.equalsAny("Threshold must not be negative", charSequenceArray0);
      assertFalse(boolean2);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "Threshold must not be negative", (CharSequence) "an`6)*73.gaYbkS*_=");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 70);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.overlay("", "", 70, 70);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertFalse(boolean1);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.wrap("t<", "ulG");
      assertNotNull(string2);
      assertEquals("ulGt<ulG", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.chomp("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.substringBeforeLast("", "9k2gAnyj/q");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      
      String[] stringArray1 = StringUtils.substringsBetween("t<", "lA(s%p", "");
      assertNull(stringArray1);
      
      String string5 = StringUtils.wrap("lA(s%p", "'IGRMzjd`{J%z%|\"");
      assertNotNull(string5);
      assertEquals("'IGRMzjd`{J%z%|\"lA(s%p'IGRMzjd`{J%z%|\"", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.capitalize("!6>TxQF4`yC");
      assertNotNull(string6);
      assertEquals("!6>TxQF4`yC", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.join((Object[]) stringArray0, "ulGt<ulG");
      assertNotNull(string7);
      assertEquals("", string7);
      assertEquals(0, stringArray0.length);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      
      String string8 = StringUtils.chop("9k2gAnyj/q");
      assertNotNull(string8);
      assertEquals("9k2gAnyj/", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      
      String string9 = StringUtils.stripStart("O-ptB[4F", "Q0nPuqw");
      assertNotNull(string9);
      assertEquals("O-ptB[4F", string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      
      String string10 = StringUtils.substringBeforeLast("ulG", "d(rNR:a)>z,@&");
      assertNotNull(string10);
      assertEquals("ulG", string10);
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      
      String string11 = StringUtils.center("org.apache.commons.lang3.ObjectUtils$Nullymz}I.riv\"!\u0001G79q9", 1, '2');
      assertNotNull(string11);
      assertEquals("org.apache.commons.lang3.ObjectUtils$Nullymz}I.riv\"!\u0001G79q9", string11);
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string2));
      
      boolean boolean2 = StringUtils.isAlphanumeric("org.apache.commons.lang3.ObjectUtils$Nullymz}I.riv\"!\u0001G79q9");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.equalsAny("'IGRMzjd`{J%z%|\"", stringArray0);
      assertFalse(boolean3);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      String string0 = StringUtils.unwrap("h", "6Nka(\"aeEKonxxPOeu");
      assertNotNull(string0);
      assertEquals("h", string0);
      
      String string1 = StringUtils.replaceFirst("6Nka(\"aeEKonxxPOeu", "uGwx ?El62;=^K", "h");
      assertNotNull(string1);
      assertEquals("6Nka(\"aeEKonxxPOeu", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumeric("h");
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeStartIgnoreCase("-1", "-1");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      String[] stringArray0 = StringUtils.split("uGwx ?El62;=^K", '');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.substringBefore("Arguments cannot both be null", 1972);
      assertNotNull(string3);
      assertEquals("Arguments cannot both be null", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.substring("Vqugtg^2k>2>.bg", 1972, 160);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      int int0 = StringUtils.countMatches((CharSequence) "6Nka(\"aeEKonxxPOeu", '');
      assertEquals(0, int0);
      
      String string5 = StringUtils.stripAccents("offset cannot be negative\"Q;QN>g!4");
      assertNotNull(string5);
      assertEquals("offset cannot be negative\"Q;QN>g!4", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "-1", 1972);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("'5R", ":F4Hh");
      assertNotNull(string0);
      assertEquals("'5R", string0);
      
      String string1 = StringUtils.defaultString("'5R");
      assertNotNull(string1);
      assertEquals("'5R", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      String string0 = StringUtils.reverse(";}H04tqpSSycioS`");
      assertNotNull(string0);
      assertEquals("`SoicySSpqt40H};", string0);
      
      boolean boolean0 = StringUtils.isEmpty("`SoicySSpqt40H};");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "`SoicySSpqt40H};";
      objectArray0[1] = (Object) "`SoicySSpqt40H};";
      objectArray0[2] = (Object) "`SoicySSpqt40H};";
      objectArray0[3] = (Object) "`SoicySSpqt40H};";
      objectArray0[4] = (Object) ";}H04tqpSSycioS`";
      objectArray0[5] = (Object) ";}H04tqpSSycioS`";
      String string1 = StringUtils.center("*hPk*hPk", 15);
      assertNotNull(string1);
      assertEquals("   *hPk*hPk    ", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chop("Threshold must not be negative");
      assertNotNull(string2);
      assertEquals("Threshold must not be negativ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripStart((String) null, "\r");
      assertNull(string3);
      
      String string4 = StringUtils.substringBeforeLast("v-_O*Q[VXxVuN,(Q1iy", (String) null);
      assertNotNull(string4);
      assertEquals("v-_O*Q[VXxVuN,(Q1iy", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAlphanumeric("v-_O*Q[VXxVuN,(Q1iy");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "Threshold must not be negativ";
      String string5 = StringUtils.join((List<?>) null, 'Y', 2328, 113);
      assertNull(string5);
      
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "Threshold must not be negativ";
      charSequenceArray0[4] = (CharSequence) "Threshold must not be negativ";
      charSequenceArray0[5] = (CharSequence) "`SoicySSpqt40H};";
      charSequenceArray0[6] = (CharSequence) "`SoicySSpqt40H};";
      boolean boolean2 = StringUtils.equalsAny(";}H04tqpSSycioS`", charSequenceArray0);
      assertFalse(boolean2);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string6 = StringUtils.substring("br\"lc@Nu", 2328, 15);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      
      int int0 = StringUtils.countMatches((CharSequence) "", '*');
      assertEquals(0, int0);
      
      String string7 = StringUtils.stripAccents(";");
      assertNotNull(string7);
      assertEquals(";", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "", 'O');
      assertEquals(0, int0);
      
      String string0 = "\\u";
      String string1 = StringUtils.replacePattern("", "Search and Replace array lengths don't match: ", string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.removeAll("", "Lgukj/J]Wm<%#JDC");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.abbreviateMiddle(", '", " vs ", 1006);
      assertNotNull(string1);
      assertEquals(", '", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      long[] longArray0 = new long[0];
      String string2 = StringUtils.join(longArray0, '+', 36, 16);
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("Dh0.E=i$hr^", "}=5r:a|Mfzt5 0", (-3002));
      assertNotNull(string0);
      assertEquals("Dh0.E=i$hr^", string0);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("Index: ", "|N", 64);
      assertNotNull(string0);
      assertEquals("Index: ", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("|N");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " in an array of ", "%xGL[Q>n<zvi?Hd");
      assertFalse(boolean0);
      
      String string0 = StringUtils.wrapIfMissing("<iKc6?0dpI1pIS*ZC*}", '>');
      assertNotNull(string0);
      assertEquals("><iKc6?0dpI1pIS*ZC*}>", string0);
      
      String string1 = StringUtils.toRootLowerCase("%xGL[Q>n<zvi?Hd");
      assertNotNull(string1);
      assertEquals("%xgl[q>n<zvi?hd", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviateMiddle("........................................................................................................ vs ", " in an array of ", '>');
      assertNotNull(string2);
      assertEquals("....................... in an array of ................... vs ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastOrdinalIndexOf(" in an array of ", "....................... in an array of ................... vs ", (-4057));
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isNumeric("<iKc6?0dpI1pIS*ZC*}");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) " in an array of ";
      String string4 = StringUtils.wrap("><iKc6?0dpI1pIS*ZC*}>", "%xGL[Q>n<zvi?Hd");
      assertNotNull(string4);
      assertEquals("%xGL[Q>n<zvi?Hd><iKc6?0dpI1pIS*ZC*}>%xGL[Q>n<zvi?Hd", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      charSequenceArray0[1] = (CharSequence) "%xGL[Q>n<zvi?Hd><iKc6?0dpI1pIS*ZC*}>%xGL[Q>n<zvi?Hd";
      String string5 = StringUtils.center(", '", (-656));
      assertNotNull(string5);
      assertEquals(", '", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      charSequenceArray0[2] = (CharSequence) ", '";
      charSequenceArray0[3] = (CharSequence) "%xGL[Q>n<zvi?Hd";
      charSequenceArray0[4] = (CharSequence) "%xgl[q>n<zvi?hd";
      int int1 = StringUtils.lastIndexOfAny(" in an array of ", charSequenceArray0);
      assertEquals(0, int1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[1], charSequenceArray0[2]);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, charSequenceArray0.length);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      String string6 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertNotNull(string6);
      assertEquals("\n\n\n\n\n", string6);
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte)10, (byte)10, (byte)10}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = null;
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.mid("Xl3JOT9Yh_WH(", (-1), (-1));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = StringUtils.lastIndexOfAny("Xl3JOT9Yh_WH(", charSequenceArray0);
      assertEquals((-1), int1);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle((String) null, (String) null, 3168);
      assertNull(string2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 3168;
      longArray0[1] = (long) 3168;
      longArray0[2] = (long) 3168;
      longArray0[3] = (long) 3168;
      longArray0[4] = (long) 3168;
      String string3 = StringUtils.join(longArray0, '+', 2803, 0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertArrayEquals(new long[] {3168L, 3168L, 3168L, 3168L, 3168L}, longArray0);
      assertEquals(5, longArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.mid("", 3168, (-181));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      String string0 = StringUtils.leftPad(" ", 9, " ");
      assertNotNull(string0);
      assertEquals("         ", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = StringUtils.split(" ");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("vZ7p", "vZ7p", stringArray0);
      assertNotNull(string1);
      assertEquals("vZ7p", string1);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.joinWith(" ", stringArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 8192, "");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith(string0, "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substring("", 8192);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("", string0, stringArray0);
      assertNotNull(string2);
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.joinWith(string0, stringArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      String string4 = StringUtils.join(byteArray0, 'T');
      assertNotNull(string4);
      assertEquals("3", string4);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 8192, "");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith(string0, "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substring("", 8192);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("", (-2031), string0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string3 = StringUtils.SPACE;
      assertNotNull(string3);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      charSequenceArray0[3] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) " vs ";
      charSequenceArray0[1] = (CharSequence) " vs ";
      charSequenceArray0[2] = (CharSequence) " vs ";
      charSequenceArray0[3] = (CharSequence) " vs ";
      String string0 = StringUtils.appendIfMissing(" vs ", " vs ", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      assertEquals(4, charSequenceArray0.length);
      
      String string1 = StringUtils.stripEnd("%>$|{*,Th7BqEQVO~", "'[8Dg$h");
      assertNotNull(string1);
      assertEquals("%>$|{*,Th7BqEQVO~", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNotEmpty(charSequenceArray0[3]);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "3", (CharSequence) "3", (-389));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.chomp(" ");
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsWhitespace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing(" vs ", "+^iy.BY9LR");
      assertNotNull(string0);
      assertEquals("+^iy.BY9LR vs +^iy.BY9LR", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("+^iy.BY9LR vs +^iy.BY9LR");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[7];
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "+^iy.BY9LR", (CharSequence) " vs ");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.joinWith("Array and element cannot both be null", stringArray0);
      assertNotNull(string1);
      assertEquals("Array and element cannot both be nullArray and element cannot both be nullArray and element cannot both be nullArray and element cannot both be nullArray and element cannot both be nullArray and element cannot both be null", string1);
      assertEquals(7, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultIfEmpty("B;Au_C~>;Y3U\"z", "%}2:Pn_}");
      assertNotNull(string2);
      assertEquals("B;Au_C~>;Y3U\"z", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsWhitespace("+^iy.BY9LR vs +^iy.BY9LR");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "B;Au_C~>;Y3U\"z", charArray0);
      assertTrue(boolean2);
      assertArrayEquals(new char[] {'b', 'b', 'b', 'b', 'b'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isWhitespace("Array and element cannot both be null");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("+^iy.BY9LR", "I");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.replaceChars(" has no clone method", (String) null, "mBu8lv5qqO\"bF");
      assertNotNull(string3);
      assertEquals(" has no clone method", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      String string0 = StringUtils.getDigits("...");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "...";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs +^iy.BY9LR");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[2], charSequenceArray0[0], 97);
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'l');
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      Object[] objectArray0 = new Object[18];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      assertEquals(18, objectArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("java.lang.Object@55fc76a4");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(11, stringArray0.length);
      
      String string1 = StringUtils.swapCase("java.lang.Object@55fc76a4");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.splitByCharacterType("Pu!Yl#w@}yy+_LD ");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(14, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("Pu!Yl#w@}yy+_LD ", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertTrue(boolean1);
      assertEquals(14, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Cannot store ", (-1735));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "JAVA.LANG.oBJECT@55FC76A4", 85, 80);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) "Cannot store ", (CharSequence) "Cannot store ");
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string2 = StringUtils.strip("Cannot store ");
      assertNotNull(string2);
      assertEquals("Cannot store", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.overlay("Pu!Yl#w@}yy+_LD ", "JAVA.LANG.oBJECT@55FC76A4", 85, 85);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = 'g';
      charArray0[2] = 'e';
      charArray0[3] = 'w';
      charArray0[4] = 'F';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "Pu!Yl#w@}yy+_LD JAVA.LANG.oBJECT@55FC76A4", charArray0);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'e', 'g', 'e', 'w', 'F'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.containsWhitespace("java.lang.Object@55fc76a4");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing(" vs ", "+^iy.BY9LR");
      assertNotNull(string0);
      assertEquals("+^iy.BY9LR vs +^iy.BY9LR", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("+^iy.BY9LR vs +^iy.BY9LR");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[7];
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "+^iy.BY9LR", (CharSequence) " vs ");
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      String string1 = StringUtils.join(intArray0, 'J');
      assertNotNull(string1);
      assertEquals("-1", string1);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripEnd(" vs ", "Array and element cannot both be null");
      assertNotNull(string2);
      assertEquals(" vs", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase(" vs ", stringArray0);
      assertFalse(boolean1);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.substringsBetween(" vs ", "-1", "+^iy.BY9LR vs +^iy.BY9LR");
      assertNull(stringArray1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Array and element cannot both be null", (CharSequence) " vs ", (int) 'J');
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) " vs +^iy.BY9LR", 'J');
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string3 = StringUtils.replacePattern((String) null, "+^iy.BY9LR", " vs");
      assertNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle(",6CA\"JeG>", "-1", 5407);
      assertNotNull(string4);
      assertEquals(",6CA\"JeG>", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.mid("Strings must not be null", (-1), 0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      String string0 = StringUtils.center(" ", (-3022), "p((;v^A~@T?Cf7XV[T");
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      String string0 = StringUtils.substringAfter("', has a length less than 2", 32);
      assertNotNull(string0);
      assertEquals("has a length less than 2", string0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      int int0 = StringUtils.getFuzzyDistance("has a length less than 2", "', has a length less than 2", locale0);
      assertEquals(0, int0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("has a length less than 2", "', has a length less than 2");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("has a length less than 2");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.right((String) null, (-580));
      assertNull(string2);
      
      String string3 = StringUtils.center("Supplied value must be a valid byte literal between -32768 and 32767: [", 10, (String) null);
      assertNotNull(string3);
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.rotate("", 1633);
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      String string0 = StringUtils.leftPad(" ", 9, " ");
      assertNotNull(string0);
      assertEquals("         ", string0);
      
      String string1 = StringUtils.substringBefore("         ", " ");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceChars((String) null, " ", "Rq*z`u2h, Length: 0");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("maxWith cannot be negative", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[1] = (CharSequence) "maxWith cannot be negative";
      String string1 = StringUtils.appendIfMissing("V:c2{A?S*1h> ", "maxWith cannot be negative", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("V:c2{A?S*1h> maxWith cannot be negative", string1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "', has a length less than 2", (CharSequence) "', has a length less than 2");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("Strings must not be null");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compare("Arguments cannot both be null", "cba?|lH/");
      assertEquals((-34), int0);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      String string0 = StringUtils.unwrap("h", "6Nka(\"aeEKonxxPOeu");
      assertNotNull(string0);
      assertEquals("h", string0);
      
      String string1 = StringUtils.replaceFirst("6Nka(\"aeEKonxxPOeu", "uGwx ?El62;=^K", "h");
      assertNotNull(string1);
      assertEquals("6Nka(\"aeEKonxxPOeu", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.difference("g*d#DEko)P.@J", "6Nka(\"aeEKonxxPOeu");
      assertNotNull(string2);
      assertEquals("6Nka(\"aeEKonxxPOeu", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.compare("-1", (String) null, true);
      assertEquals(1, int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "g*d#DEko)P.@J";
      objectArray0[1] = (Object) "6Nka(\"aeEKonxxPOeu";
      objectArray0[2] = (Object) "6Nka(\"aeEKonxxPOeu";
      objectArray0[3] = (Object) "g*d#DEko)P.@J";
      objectArray0[4] = (Object) "uGwx ?El62;=^K";
      String string3 = StringUtils.joinWith("6Nka(\"aeEKonxxPOeu", objectArray0);
      assertNotNull(string3);
      assertEquals("g*d#DEko)P.@J6Nka(\"aeEKonxxPOeu6Nka(\"aeEKonxxPOeu6Nka(\"aeEKonxxPOeu6Nka(\"aeEKonxxPOeu6Nka(\"aeEKonxxPOeug*d#DEko)P.@J6Nka(\"aeEKonxxPOeuuGwx ?El62;=^K", string3);
      assertEquals(5, objectArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.defaultIfEmpty("G8", "o#5_&V<i,#y");
      assertNotNull(string4);
      assertEquals("G8", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsWhitespace("h");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      String string0 = StringUtils.leftPad("{lY=!*uIz)S_g<#*[&", (-2570), "3Vze&R4Ls44_}7C.Q");
      assertNotNull(string0);
      assertEquals("{lY=!*uIz)S_g<#*[&", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string1 = StringUtils.appendIfMissing("Comparator should not be null.", "%", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("Comparator should not be null.%", string1);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Comparator should not be null.");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "3Vze&R4Ls44_}7C.Q", "&,M+Ux5JwBT]Pl)");
      assertEquals(4, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      String string0 = StringUtils.wrap("|N", "");
      assertNotNull(string0);
      assertEquals("|N", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "|N";
      charSequenceArray0[2] = (CharSequence) "|N";
      charSequenceArray0[3] = (CharSequence) "|N";
      charSequenceArray0[4] = (CharSequence) "|N";
      charSequenceArray0[6] = (CharSequence) "|N";
      charSequenceArray0[7] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[8] = (CharSequence) "|N";
      boolean boolean0 = StringUtils.endsWithAny("|N", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[0], charSequenceArray0[6]);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
      
      String string1 = StringUtils.center("|N", 0);
      assertNotNull(string1);
      assertEquals("|N", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("|N", 0, "os,$:sydx ,ne");
      assertNotNull(string2);
      assertEquals("|N", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = StringUtils.split("|Pob! BM#Na", "offset cannot be negative");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      boolean boolean1 = StringUtils.isMixedCase("|N");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "|Pob! BM#Na", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string3 = StringUtils.join((int[]) null, 'F');
      assertNull(string3);
      
      String string4 = StringUtils.stripEnd("", "xPRZ/iw=F;");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("os,$:sydx ,ne", stringArray0);
      assertFalse(boolean2);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) "os,$:sydx ,ne", "xPRZ/iw=F;");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      int int3 = StringUtils.indexOfAny(charSequenceArray0[0], (CharSequence[]) stringArray0);
      assertEquals((-1), int3);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(3, stringArray0.length);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("&,M+Ux5JwBT]Pl)", "Arguments cannot both be null");
      assertNotNull(string0);
      assertEquals("&,M+Ux5JwBT]Pl)", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("&,M+Ux5JwBT]Pl)");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "&,M+Ux5JwBT]Pl)", (CharSequence) "&,M+Ux5JwBT]Pl)");
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'h', (-1), 8183);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      String string0 = StringUtils.replaceChars("e ", 'V', 'E');
      assertNotNull(string0);
      assertEquals("e ", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("e ", "e ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "e ", (CharSequence) "e ", 322);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("e ", "e ", 322);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.getDigits("e ");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBetween("", "e ");
      assertNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "e ");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.join((Object[]) null, 'V');
      assertNull(string3);
      
      String string4 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.center("\n", 322, 'E');
      assertNotNull(string5);
      assertEquals("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\nEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      int int2 = StringUtils.indexOfAny((CharSequence) "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\nEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", charArray0);
      assertEquals(0, int2);
      assertArrayEquals(new char[] {'E', 'E'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string6 = StringUtils.center("Search and Replace array lengths don't match: ", 631);
      assertNotNull(string6);
      assertEquals("                                                                                                                                                                                                                                                                                                    Search and Replace array lengths don't match:                                                                                                                                                                                                                                                                                                      ", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", "U(", 626);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotNull(stringArray2);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = null;
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.replaceEachRepeatedly("'IGRMzjd`{J%z%|\"", (String[]) null, (String[]) null);
      assertNotNull(string0);
      assertEquals("'IGRMzjd`{J%z%|\"", string0);
      
      String string1 = StringUtils.substringAfterLast("<q4P3L]eWbj91WR.X^", Integer.MAX_VALUE);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.lastIndexOf(charSequenceArray0[0], 1, Integer.MAX_VALUE);
      assertEquals((-1), int1);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.substringAfter("%T(;E0Xi/:t84*", (-3225));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.swapCase("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      String string0 = StringUtils.trim("=>w<; ^+4@y1ps#*");
      assertNotNull(string0);
      assertEquals("=>w<; ^+4@y1ps#*", string0);
      
      String string1 = StringUtils.normalizeSpace("=>w<; ^+4@y1ps#*");
      assertNotNull(string1);
      assertEquals("=>w<; ^+4@y1ps#*", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.chop("=>w<; ^+4@y1ps#*");
      assertNotNull(string2);
      assertEquals("=>w<; ^+4@y1ps#", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "=>w<; ^+4@y1ps#", (CharSequence) "=>w<; ^+4@y1ps#*", 1);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replaceAll("=>w<; ^+4@y1ps#*", "=>w<; ^+4@y1ps#*", (String) null);
      assertNotNull(string3);
      assertEquals("=>w<; ^+4@y1ps#*", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, 8, Integer.MAX_VALUE);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("\n");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {10}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      String string0 = StringUtils.swapCase("|NoTquVatc8 zWjmtoTquVatc8 zWjm");
      assertNotNull(string0);
      assertEquals("|nOtQUvATC8 ZwJMTOtQUvATC8 ZwJM", string0);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceChars("m91SlC{(.", '/', ';');
      assertNotNull(string1);
      assertEquals("m91SlC{(.", string1);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      boolean boolean0 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", (CharSequence) " ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      Stack<Locale.LanguageRange> stack1 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack1);
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.equals((Object)stack0));
      
      String string1 = StringUtils.lowerCase(" ", locale0);
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      String string0 = StringUtils.mid("P=WL;lr/AmvI_\fpv#3", 64, (-658));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBeforeLast("P=WL;lr/AmvI_\fpv#3", "Strings must not be null");
      assertNotNull(string1);
      assertEquals("P=WL;lr/AmvI_\fpv#3", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      String string0 = StringUtils.repeat("|WdL$yz:jJ", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "|WdL$yz:jJ";
      String string1 = StringUtils.replaceEach("k5Bwi 26U", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals("k5Bwi 26U", string1);
      assertEquals(9, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("|WdL$yz:jJ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceAll("|X>p$|", "|WdL$yz:jJ", "<");
      assertNotNull(string2);
      assertEquals("<|<X<><p<$<|<", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.compareIgnoreCase("|X>p$|", "", false);
      assertEquals(6, int0);
      
      String string3 = StringUtils.replaceIgnoreCase("3c;*esB4b,gX2AmOH/", "|WdL$yz:jJ", "|WdL$yz:jJ");
      assertNotNull(string3);
      assertEquals("3c;*esB4b,gX2AmOH/", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAlpha("3c;*esB4b,gX2AmOH/");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      String string0 = StringUtils.joinWith("", objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(6, objectArray0.length);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(locale0));
      
      Stream<Locale> stream0 = linkedList0.parallelStream();
      assertNotNull(stream0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(locale0));
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) linkedList0);
      assertNotNull(list0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) list0, locale_FilteringMode0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.equals((Object)list0));
      assertFalse(linkedList0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      
      String string1 = locale0.getDisplayLanguage();
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.lowerCase("", locale0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Cloneable", "Cloneable");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("Cloneable");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.StringUtils";
      char char0 = '=';
      String string1 = StringUtils.wrap("org.apache.commons.lang3.StringUtils", '=');
      assertNotNull(string1);
      assertEquals("=org.apache.commons.lang3.StringUtils=", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = (-1896);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "=org.apache.commons.lang3.StringUtils=", (CharSequence) "=org.apache.commons.lang3.StringUtils=", (-1896));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      String string0 = StringUtils.removeEnd("*hPk", "*hPk");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      try { 
        StringUtils.getBytes("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Y", "Y");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      String string0 = StringUtils.replaceAll("org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsQ9rgdM):dw,dE5;|(iP", ":Tp_^A>o8", ", Length: ");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsQ9rgdM):dw,dE5;|(iP", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ":Tp_^A>o8", "ecp{");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      String string0 = StringUtils.trim("=>w<; ^+4@y1ps#*");
      assertNotNull(string0);
      assertEquals("=>w<; ^+4@y1ps#*", string0);
      
      String string1 = StringUtils.normalizeSpace("=>w<; ^+4@y1ps#*");
      assertNotNull(string1);
      assertEquals("=>w<; ^+4@y1ps#*", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.chop("=>w<; ^+4@y1ps#*");
      assertNotNull(string2);
      assertEquals("=>w<; ^+4@y1ps#", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substring(", Length: ", 1);
      assertNotNull(string3);
      assertEquals(" Length: ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " Length: ", (CharSequence) "=>w<; ^+4@y1ps#*", 1);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string4 = StringUtils.replace(", Length: ", " Length: ", "Z");
      assertNotNull(string4);
      assertEquals(",Z", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      charSequenceArray0[0] = (CharSequence) ",Z";
      charSequenceArray0[1] = (CharSequence) "=>w<; ^+4@y1ps#*";
      charSequenceArray0[2] = (CharSequence) "=>w<; ^+4@y1ps#";
      charSequenceArray0[3] = (CharSequence) "=>w<; ^+4@y1ps#*";
      charSequenceArray0[4] = (CharSequence) " Length: ";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "iZA3[Jd?", "iZA3[Jd?");
      assertEquals(0, int0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "iZA3[Jd?");
      assertNotNull(charBuffer0);
      assertEquals("iZA3[Jd?", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(8, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(8, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(8, charBuffer0.limit());
      
      CharBuffer charBuffer1 = StringUtils.defaultIfEmpty(charBuffer0, charBuffer0);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      assertEquals("iZA3[Jd?", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(8, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(8, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(8, charBuffer0.limit());
      assertEquals(0, charBuffer1.position());
      assertEquals(8, charBuffer1.length());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(8, charBuffer1.capacity());
      assertEquals("iZA3[Jd?", charBuffer1.toString());
      assertEquals(8, charBuffer1.limit());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(8, charBuffer1.remaining());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      String string0 = StringUtils.mid(", Length: 0Rq*z`u2h", (-2687), 24);
      assertNotNull(string0);
      assertEquals(", Length: 0Rq*z`u2h", string0);
      
      String string1 = StringUtils.chop(", Length: 0Rq*z`u2h");
      assertNotNull(string1);
      assertEquals(", Length: 0Rq*z`u2", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      String string0 = StringUtils.wrap("OsIkB]vKgea", '?');
      assertNotNull(string0);
      assertEquals("?OsIkB]vKgea?", string0);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.wrap((String) null, (String) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.join((byte[]) null, ' ');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[0], charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, charArray0.length);
      
      String string0 = StringUtils.reverseDelimited("org.apache.commons.lang3.ObjectUtils$Null", 'i');
      assertNotNull(string0);
      assertEquals("ls$Nulliorg.apache.commons.lang3.ObjectUt", string0);
      
      String string1 = StringUtils.CR;
      assertNotNull(string1);
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("gpV(w$@gW>[(", "Strings must not be null", (-292));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 8192, "");
      assertNotNull(string0);
      
      Locale locale0 = new Locale("P}pM5f");
      assertNotNull(locale0);
      assertEquals("p}pm5f", locale0.getLanguage());
      assertEquals("p}pm5f", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = Locale.forLanguageTag(string0);
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      
      String string1 = StringUtils.upperCase("", locale0);
      assertNotSame(locale0, locale1);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals("p}pm5f", locale0.getLanguage());
      assertEquals("p}pm5f", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrap("", '!');
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.chomp("WaIBQ.R02/l");
      assertNotNull(string3);
      assertEquals("WaIBQ.R02/l", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("\r");
      assertTrue(boolean0);
      
      String string1 = "'[+";
      String string2 = StringUtils.getDigits("'[+");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.ordinalIndexOf("\r", "", 0);
      assertEquals((-1), int0);
      
      String string3 = null;
      String string4 = StringUtils.wrap((String) null, '@');
      assertNull(string4);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, (CharSequence) "'[+");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string5 = StringUtils.wrap("", (String) null);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      String string6 = "ti=fP(";
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null, 0, 1746);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)64;
      shortArray0[1] = (short)64;
      shortArray0[2] = (short)64;
      shortArray0[3] = (short) (-1004);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'O', (-902), 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -902
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      String string0 = StringUtils.strip((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.replace((String) null, "myWH:a_JY", (String) null, 0);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) null;
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[1], charSequenceArray0[1]);
      assertEquals((-1), int0);
      assertEquals(9, charSequenceArray0.length);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "myWH:a_JY";
      stringArray0[3] = null;
      stringArray0[4] = "Array and element cannot both be null";
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      String string2 = StringUtils.join(intArray0, 'M');
      assertNotNull(string2);
      assertEquals("-1", string2);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[1], charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'M'}, charArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      serviceLoader0.reload();
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Iterator<Object> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Iterator<Object> iterator1 = serviceLoader0.iterator();
      assertNotSame(iterator1, iterator0);
      assertNotNull(iterator1);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertFalse(iterator1.equals((Object)iterator0));
      
      String string1 = StringUtils.join(iterator1, "=7,$|5C>,VLj(EM");
      assertNotSame(iterator1, iterator0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(string1.equals((Object)string0));
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      
      String string2 = locale0.toLanguageTag();
      assertNotNull(string2);
      assertEquals("en-US", string2);
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.upperCase("**tQX_`=", locale0);
      assertNotNull(string3);
      assertEquals("**TQX_`=", string3);
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.join((int[]) null, ' ', 7, 46);
      assertNull(string4);
      
      String string5 = StringUtils.join((byte[]) null, ' ', (-32768), (-32768));
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      int[] intArray0 = new int[1];
      String string0 = StringUtils.join(intArray0, 'J');
      assertNotNull(string0);
      assertEquals("0", string0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      char[] charArray0 = new char[0];
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, 'm');
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.valueOf(charArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2084;
      intArray0[2] = 787;
      intArray0[3] = 0;
      intArray0[4] = (-1449);
      intArray0[5] = 0;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'C', 32, 1442);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      char char0 = '^';
      boolean boolean0 = linkedList0.add((Object) iterator0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, '^');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      String string0 = StringUtils.defaultString("o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNotNull(string0);
      assertEquals("o#5_&V<i,#y", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("o#5_&V<i,#y", "o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.substringsBetween("88Sw%wf[9;,hH-*c,", "sI", "~");
      assertNull(stringArray1);
      
      String string1 = StringUtils.stripToNull("sI");
      assertNotNull(string1);
      assertEquals("sI", string1);
      assertFalse(string1.equals((Object)string0));
      
      double[] doubleArray0 = new double[0];
      String string2 = StringUtils.join(doubleArray0, '!');
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.defaultString("}=5n4H", "`_tUX^mN-OC-x7K~3o");
      assertNotNull(string1);
      assertEquals("}=5n4H", string1);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("\n");
      assertTrue(boolean0);
      
      String string1 = StringUtils.getDigits("\n");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.ordinalIndexOf("\n", "", 0);
      assertEquals((-1), int0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("\n"));
      
      boolean boolean1 = stack0.add((Object) null);
      assertTrue(boolean1);
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean1 == boolean0);
      assertFalse(stack0.contains("\n"));
      
      String string2 = StringUtils.join((Iterable<?>) stack0, '@');
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(stack0.contains("\n"));
      
      boolean boolean2 = StringUtils.isMixedCase("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.defaultString("1q7_<,ETn 7|4wDv1q7_<,ETn 7|4wDv=>w<; ^+4@y1ps#*");
      assertNotNull(string3);
      assertEquals("1q7_<,ETn 7|4wDv1q7_<,ETn 7|4wDv=>w<; ^+4@y1ps#*", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean3 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing(" vs ", "+^iy.BY9LR");
      assertNotNull(string0);
      assertEquals("+^iy.BY9LR vs +^iy.BY9LR", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("+^iy.BY9LR vs +^iy.BY9LR");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[7];
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "+^iy.BY9LR", (CharSequence) " vs ");
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      String string1 = StringUtils.join(intArray0, 'J');
      assertNotNull(string1);
      assertEquals("-1", string1);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripEnd(" vs ", "Array and element cannot both be null");
      assertNotNull(string2);
      assertEquals(" vs", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase(" vs ", stringArray0);
      assertFalse(boolean1);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Array and element cannot both be null", (CharSequence) "Array and element cannot both be null", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) " vs +^iy.BY9LR", 'J');
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string3 = StringUtils.replacePattern((String) null, "+^iy.BY9LR", " vs");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace(" ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.rightPad(" ", 13, 'Q');
      assertNotNull(string0);
      assertEquals(" QQQQQQQQQQQQ", string0);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      String string0 = StringUtils.mid("", 208, 208);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 208);
      assertEquals((-1), int0);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.join((List<?>) linkedList0, "", 208, (-1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      String string0 = StringUtils.substringAfter("', has a length less than 2", 32);
      assertNotNull(string0);
      assertEquals("has a length less than 2", string0);
      
      char[] charArray0 = new char[8];
      boolean boolean0 = StringUtils.containsIgnoreCase("has a length less than 2", "has a length less than 2");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "', has a length less than 2", charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.substring("Rn*5", 32);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "LW{PU", (CharSequence) "has a length less than 2", 518);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("*k*k");
      assertNotNull(string0);
      assertEquals("*k*k", string0);
      
      String string1 = StringUtils.toRootLowerCase("...");
      assertNotNull(string1);
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat('e', (-1934));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlpha("...");
      assertFalse(boolean0);
      
      String string3 = StringUtils.wrapIfMissing("gOW39v^hj=%&)'[Q~[e", 'e');
      assertNotNull(string3);
      assertEquals("egOW39v^hj=%&)'[Q~[e", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-2421), (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("'X(jnB'0*0#hn'hq", 16);
      assertNotNull(string1);
      assertEquals("'X(jnB'0*0#hn'hq", string1);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      String string0 = StringUtils.substring("", 31);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-1));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 109);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", 2636);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((List<?>) null, "", (-1773), 2636);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.CR;
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      charSequenceArray0[0] = (CharSequence) "\r";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.leftPad((String) null, 1911, '=');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("'@DxZwgc");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "'@DxZwgc", "'@DxZwgc");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.wrapIfMissing((String) null, '5');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringAfter((String) null, "");
      assertNull(string2);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "/oL<,|nH8CU");
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\'';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = '_';
      charArray0[4] = '5';
      String string3 = StringUtils.valueOf(charArray0);
      assertNotNull(string3);
      assertEquals("'___5", string3);
      assertArrayEquals(new char[] {'\'', '_', '_', '_', '5'}, charArray0);
      assertEquals(5, charArray0.length);
      
      String string4 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2380.0F);
      floatArray0[3] = (-3684.3062F);
      String string0 = StringUtils.join(floatArray0, 'K');
      assertNotNull(string0);
      assertEquals("1861.1K-1.0K-2380.0K-3684.3062K0.0K0.0", string0);
      assertArrayEquals(new float[] {1861.1F, (-1.0F), (-2380.0F), (-3684.3062F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("kxb<t?J-_T})o'i4cWq3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-");
      assertNotNull(stringArray0);
      assertEquals(62, stringArray0.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf("1861.1K-1.0K-2380.0K-3684.3062K0.0K0.0", "kxb<t?J-_T})o'i4cWq3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-3-", 100);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      StringUtils.replaceEachRepeatedly("8hq<0<", stringArray0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("u6/p", "u6/p", "'5R");
      assertNotNull(string0);
      assertEquals("'5R", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      String string1 = StringUtils.remove("'5R", "u6/p");
      assertNotNull(string1);
      assertEquals("'5R", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("org.apache.commons.lang3.StringUtils", "g:hZ#tB", "'5R");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("K9zr6aBQ~W<ak");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "g:hZ#tB", "'5R");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("8@g(8");
      assertNotNull(stringArray1);
      assertEquals(5, stringArray1.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf("8@g(8", (CharSequence) null, 32);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceEachRepeatedly("The type must not be null", (String[]) null, (String[]) null);
      assertNotNull(string2);
      assertEquals("The type must not be null", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("mv.t'", "i<&oNg)<Z03`A_m");
      assertNotNull(string0);
      assertEquals("i<&oNg)<Z03`A_mmv.t'i<&oNg)<Z03`A_m", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("i<&oNg)<Z03`A_mmv.t'i<&oNg)<Z03`A_m", "mv.t'");
      assertEquals(0.71, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("=v<j<XRyaQ;");
      assertNotNull(string0);
      assertEquals("=v<j<XRyaQ;", string0);
      
      String string1 = StringUtils.leftPad("=v<j<XRyaQ;", 31, 'V');
      assertNotNull(string1);
      assertEquals("VVVVVVVVVVVVVVVVVVVV=v<j<XRyaQ;", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isMixedCase("VVVVVVVVVVVVVVVVVVV=v<j<XRyaQ;");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)10;
      String string2 = StringUtils.join(byteArray0, 'V');
      assertNotNull(string2);
      assertEquals("32V10", string2);
      assertArrayEquals(new byte[] {(byte)32, (byte)10}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing(" vs ", "+^iy.BY9LR");
      assertNotNull(string0);
      assertEquals("+^iy.BY9LR vs +^iy.BY9LR", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("+^iy.BY9LR vs +^iy.BY9LR");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = " vs ";
      stringArray0[1] = "+^iy.BY9LR vs +^iy.BY9LR";
      stringArray0[2] = "+^iy.BY9LR";
      stringArray0[3] = "+^iy.BY9LR vs +^iy.BY9LR";
      stringArray0[4] = "+^iy.BY9LR vs +^iy.BY9LR";
      stringArray0[5] = "+^iy.BY9LR vs +^iy.BY9LR";
      stringArray0[6] = "+^iy.BY9LR";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("+^iy.BY9LR", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("@:TkiY)hI)w^tp(#");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("L", "L");
      assertNotNull(string0);
      assertEquals("L", string0);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      floatArray0[1] = (-1.0F);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.lang3.StringUtils";
      stringArray0[1] = "org.apache.commons.lang3.StringUtils";
      stringArray0[2] = " has no clone method";
      stringArray0[3] = "4[";
      stringArray0[4] = "/*0rSH]F//Q>g";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "4[");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertEquals(5, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      boolean boolean0 = StringUtils.containsWhitespace("org.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
      
      String string1 = StringUtils.chomp("Cannot clone Cloneable type ", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertEquals("Cannot clone Cloneable type ", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlpha(" has no clone method");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.trimToNull(" has no clone method");
      assertNotNull(string2);
      assertEquals("has no clone method", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "/*0rSH]F//Q>g", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      String string3 = StringUtils.left("ED", 15);
      assertNotNull(string3);
      assertEquals("ED", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isBlank(" has no clone method");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.substringBefore("4[", "org.apadhe.commons.lang3.CharUtils");
      assertNotNull(string4);
      assertEquals("4[", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (char[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("`XJHNz\"8gARga]'", "|N", 218);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 8192, "");
      assertNotNull(string0);
      
      String string1 = StringUtils.center("`?KHrn6R(&h", 8192, 'C');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "", 8192);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.noneOf(class0);
      assertNotNull(enumSet0);
      assertEquals(0, enumSet0.size());
      
      String string0 = StringUtils.join((Iterable<?>) enumSet0, '&');
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, enumSet0.size());
      
      int int0 = StringUtils.countMatches((CharSequence) "", '&');
      assertEquals(0, int0);
      
      int int1 = StringUtils.length("");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 2.0;
      String string1 = StringUtils.join(doubleArray0, '', 0, 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(comparator0);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      ArrayList<String> arrayList0 = new ArrayList<String>(priorityQueue0);
      assertNotNull(arrayList0);
      assertEquals(0, priorityQueue0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = "\\u";
      boolean boolean0 = priorityQueue0.add(string0);
      assertTrue(boolean0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(priorityQueue0.contains(string0));
      
      String string1 = StringUtils.join((Iterable<?>) arrayList0, 'G');
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(1, priorityQueue0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(string1.equals((Object)string0));
      assertTrue(priorityQueue0.contains(string0));
      assertFalse(priorityQueue0.contains(string1));
      assertFalse(arrayList0.contains(string1));
      
      boolean boolean1 = arrayList0.add("");
      assertTrue(boolean1);
      assertEquals(1, priorityQueue0.size());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(priorityQueue0.contains(string0));
      assertFalse(priorityQueue0.contains(string1));
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.contains(string1));
      
      int int0 = StringUtils.indexOf((CharSequence) "", 2574);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Q-~mXT\tTN#89,o", "Q-~mXT\tTN#89,o");
      assertNotNull(string0);
      assertEquals("Q-~mXT\tTN#89,o", string0);
      
      String string1 = StringUtils.toRootLowerCase("p,6+E'tpr}hml3wuyQ");
      assertNotNull(string1);
      assertEquals("p,6+e'tpr}hml3wuyq", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("oAtG1447h0h-a", "oAtG1447h0h-a");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      String string0 = StringUtils.removeAll("org.apache.commons.lang3.LocaleUtils", "org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '*';
      String string1 = StringUtils.valueOf(charArray0);
      assertNotNull(string1);
      assertEquals("*", string1);
      assertArrayEquals(new char[] {'*'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "*", charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'*'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      String string0 = StringUtils.removeStart("...", "...");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.EMPTY;
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.wrapIfMissing("", "Hu/K.");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      String string0 = StringUtils.strip("Cm8`x.t+z=e4w8", "Cm8`x.t+z=e4w8");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      String string0 = StringUtils.defaultString("o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNotNull(string0);
      assertEquals("o#5_&V<i,#y", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "o#5_&V<i,#y", (CharSequence) "o#5_&V<i,#y");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringBeforeLast("o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.mid("o#5_&V<i,#y", 222, 48);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", "J7");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (-1930));
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = '|';
      charArray0[2] = 'x';
      charArray0[3] = '_';
      charArray0[4] = 'I';
      charArray0[5] = 'O';
      charArray0[6] = '4';
      charArray0[7] = '6';
      String string1 = StringUtils.valueOf(charArray0);
      assertNotNull(string1);
      assertEquals("2|x_IO46", string1);
      assertArrayEquals(new char[] {'2', '|', 'x', '_', 'I', 'O', '4', '6'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      String string0 = StringUtils.repeat("DP*Dn$a", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("DP*Dn$a", 'a');
      assertNotNull(string1);
      assertEquals("DP*Dn$", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((char[]) null, 'a', 0, 0);
      assertNull(string2);
      
      String string3 = "\\u";
      String string4 = StringUtils.abbreviate(string3, 160);
      assertNotNull(string4);
      assertEquals("\\u", string4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.stripEnd("Aq+=f#5u*1I~b7", "DP*Dn$");
      assertNotNull(string5);
      assertEquals("Aq+=f#5u*1I~b7", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.removeStart("', has a length less than 2", " +TV #=<LP");
      assertNotNull(string6);
      assertEquals("', has a length less than 2", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      String string0 = "";
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "%", charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'P', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'P', 0, 1371);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = 'Z';
      charArray0[0] = 'Z';
      char char1 = 'I';
      charArray0[1] = 'I';
      int int0 = (-2914);
      int int1 = 0;
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'Z', (-2914), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2914
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1861.1F;
      String string0 = StringUtils.removeStart("...", "...");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chop("...");
      assertNotNull(string1);
      assertEquals("..", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "..", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.rightPad("", 0, 'r');
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.lastOrdinalIndexOf("", "", 543);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      String string0 = StringUtils.rightPad("Rq*z`u2h", 82, '7');
      assertNotNull(string0);
      assertEquals("Rq*z`u2h77777777777777777777777777777777777777777777777777777777777777777777777777", string0);
      
      String string1 = StringUtils.join((long[]) null, 'n', (-1343), (-1343));
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Rq*z`u2h77777777777777777777777777777777777777777777777777777777777777777777777777", (String) null);
      assertTrue(boolean0);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(82));
      
      Integer integer0 = new Integer((-1343));
      assertNotNull(integer0);
      assertEquals((-1343), (int)integer0);
      
      boolean boolean1 = arrayDeque0.add(integer0);
      assertTrue(boolean1);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayDeque0.contains(82));
      assertTrue(arrayDeque0.contains((-1343)));
      
      Integer integer1 = new Integer((-1343));
      assertNotNull(integer1);
      assertEquals((-1343), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      boolean boolean2 = arrayDeque0.add(integer1);
      assertTrue(boolean2);
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(arrayDeque0.contains(82));
      assertTrue(arrayDeque0.contains((-1343)));
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("Rq*z`u2h77777777777777777777777777777777777777777777777777777777777777777777777777"));
      
      boolean boolean3 = arrayDeque0.containsAll(set0);
      assertTrue(boolean3);
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(arrayDeque0.contains(82));
      assertTrue(arrayDeque0.contains((-1343)));
      assertFalse(set0.contains("Rq*z`u2h77777777777777777777777777777777777777777777777777777777777777777777777777"));
      
      Vector<Object> vector0 = new Vector<Object>(arrayDeque0);
      assertNotNull(vector0);
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[-1343, -1343]", vector0.toString());
      assertEquals(2, vector0.capacity());
      assertFalse(arrayDeque0.contains(82));
      assertTrue(arrayDeque0.contains((-1343)));
      assertFalse(vector0.contains("Rq*z`u2h77777777777777777777777777777777777777777777777777777777777777777777777777"));
      assertTrue(vector0.contains((-1343)));
      
      vector0.ensureCapacity(82);
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[-1343, -1343]", vector0.toString());
      assertEquals(82, vector0.capacity());
      assertFalse(arrayDeque0.contains(82));
      assertTrue(arrayDeque0.contains((-1343)));
      assertFalse(vector0.contains("Rq*z`u2h77777777777777777777777777777777777777777777777777777777777777777777777777"));
      assertTrue(vector0.contains((-1343)));
      
      boolean boolean4 = vector0.add((Object) null);
      assertTrue(boolean4);
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(3, vector0.size());
      assertEquals("[-1343, -1343, null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(82, vector0.capacity());
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(arrayDeque0.contains(82));
      assertTrue(arrayDeque0.contains((-1343)));
      assertFalse(vector0.contains("Rq*z`u2h77777777777777777777777777777777777777777777777777777777777777777777777777"));
      assertTrue(vector0.contains((-1343)));
      
      String string2 = StringUtils.join((Iterable<?>) vector0, 'n');
      assertNotNull(string2);
      assertEquals("-1343n-1343n", string2);
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(3, vector0.size());
      assertEquals("[-1343, -1343, null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(82, vector0.capacity());
      assertFalse(string2.equals((Object)string0));
      assertFalse(arrayDeque0.contains(82));
      assertTrue(arrayDeque0.contains((-1343)));
      assertFalse(vector0.contains("Rq*z`u2h77777777777777777777777777777777777777777777777777777777777777777777777777"));
      assertTrue(vector0.contains((-1343)));
      
      boolean boolean5 = StringUtils.isMixedCase("Rq*z`u2h");
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      
      String string3 = StringUtils.defaultString("Rq*z`u2h");
      assertNotNull(string3);
      assertEquals("Rq*z`u2h", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Rq*z`u2h", (CharSequence) "Rq*z`u2h77777777777777777777777777777777777777777777777777777777777777777777777777");
      assertEquals(8, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "Rq*z`u2h";
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean6 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean6);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      String string0 = "J7";
      String string1 = StringUtils.wrapIfMissing("", "J7");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = (-1882);
      boolean boolean0 = StringUtils.contains((CharSequence) "", (-1882));
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.center((String) null, 0);
      assertNull(string2);
      
      String string3 = "xQDMIav";
      String string4 = StringUtils.substringBetween("xQDMIav", "Locale must not be null");
      assertNull(string4);
      
      String string5 = "\n";
      // Undeclared exception!
      try { 
        StringUtils.joinWith("\n", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      int int0 = StringUtils.indexOfAny((CharSequence) ", Length: 0", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'8'}, charArray0);
      assertEquals(1, charArray0.length);
      
      String string0 = StringUtils.center("", (-1));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      String string0 = "u6/p";
      String string1 = "'5R";
      String string2 = StringUtils.replaceIgnoreCase("u6/p", "u6/p", "'5R");
      assertNotNull(string2);
      assertEquals("'5R", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      charArray0[1] = 'h';
      charArray0[2] = 'W';
      charArray0[3] = '8';
      charArray0[4] = '';
      int int0 = StringUtils.indexOfAny((CharSequence) "'5R", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'o', 'h', 'W', '8', ''}, charArray0);
      assertEquals(5, charArray0.length);
      
      String string3 = "";
      String string4 = StringUtils.center("", 756);
      assertNotNull(string4);
      assertEqualsstring4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, '$', 756, 2294);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 756
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 8192, "");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith(string0, "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substring("", 8192);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) string0;
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.difference(" ", " ");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      String string0 = StringUtils.center("", (int) '8');
      assertNotNull(string0);
      assertEquals("                                                        ", string0);
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      String string0 = StringUtils.join(booleanArray0, '@');
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      String string0 = StringUtils.trim("=>w<; ^+4@y1ps#*");
      assertNotNull(string0);
      assertEquals("=>w<; ^+4@y1ps#*", string0);
      
      String string1 = StringUtils.normalizeSpace("=>w<; ^+4@y1ps#*");
      assertNotNull(string1);
      assertEquals("=>w<; ^+4@y1ps#*", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.chop("=>w<; ^+4@y1ps#*");
      assertNotNull(string2);
      assertEquals("=>w<; ^+4@y1ps#", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "=>w<; ^+4@y1ps#", (CharSequence) "=>w<; ^+4@y1ps#*", 1);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string3 = StringUtils.replace(", Length: ", "=>w<; ^+4@y1ps#*", "Z");
      assertNotNull(string3);
      assertEquals(", Length: ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      charSequenceArray0[0] = (CharSequence) ", Length: ";
      charSequenceArray0[1] = (CharSequence) "=>w<; ^+4@y1ps#*";
      charSequenceArray0[2] = (CharSequence) "=>w<; ^+4@y1ps#";
      charSequenceArray0[3] = (CharSequence) "=>w<; ^+4@y1ps#*";
      String string4 = StringUtils.reverse((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.stripEnd("=>w<; ^+4@y1ps#*", (String) null);
      assertNotNull(string5);
      assertEquals("=>w<; ^+4@y1ps#*", string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      
      String string6 = StringUtils.difference((String) null, "-FU=f?2^.");
      assertNotNull(string6);
      assertEquals("-FU=f?2^.", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      String string0 = StringUtils.difference("@:TkiY)hI)wv^tp(#", "i<&oNg)<Z03`A_mmv.t'");
      assertNotNull(string0);
      assertEquals("i<&oNg)<Z03`A_mmv.t'", string0);
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      String string0 = "...";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)13;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'a', 76, 1855);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      
      String string1 = StringUtils.normalizeSpace("Minimum abbreviation width with offset is %d");
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Minimum abbreviation width with offset is %d";
      stringArray0[1] = "Minimum abbreviation width with offset is %d";
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string2);
      assertEquals("Minimum abbreviation width with offset is %d", string2);
      assertEquals(2, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.SPACE;
      assertNotNull(string3);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      String string0 = StringUtils.trim(" ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.normalizeSpace("\n");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.chop("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) " ", 1);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replaceAll("", " ", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      int int1 = StringUtils.compareIgnoreCase((String) null, " ", false);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      String string0 = StringUtils.repeat('?', 31);
      assertNotNull(string0);
      assertEquals("???????????????????????????????", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("???????????????????????????????");
      assertNotNull(intArray0);
      assertEquals(31, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = '?';
      String string1 = StringUtils.join(charArray0, ',');
      assertNotNull(string1);
      assertEquals("?,?", string1);
      assertArrayEquals(new char[] {'?', '?'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "???????????????????????????????");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      String string2 = locale0.getDisplayVariant((Locale) null);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.getFuzzyDistance("?,?", "?,?", locale0);
      assertEquals(7, int0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("???????????????????????????????", "?,?");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.center((String) null, (-2421), (String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.truncate((String) null, 6);
      assertNull(string2);
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      
      String string3 = locale0.getDisplayVariant();
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      String string0 = StringUtils.removeAll("org.apache.commons.lang3.LocaleUtils", "org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      String string1 = StringUtils.normalizeSpace("{}");
      assertNotNull(string1);
      assertEquals("{}", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumericSpace("{}");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "{}");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      int int0 = StringUtils.getFuzzyDistance("|N", "|N", locale0);
      assertEquals(4, int0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("|N", "|N");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("|N");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("u6/p", "u6/p", "'5R");
      assertNotNull(string0);
      assertEquals("'5R", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      String string1 = StringUtils.remove("'5R", "dI?So`d");
      assertNotNull(string1);
      assertEquals("'5R", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("org.apache.commons.lang3.StringUtils", "g:hZ#tB", "'5R");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("K9zr6aBQ~W<ak");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "g:hZ#tB", "'5R");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("'5R", (CharSequence[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.wrap("dI?So`d", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.StringUtilsdI?So`dorg.apache.commons.lang3.StringUtils", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeStart("ymz}I.riv\"!\u0001G79q9", "org.apache.commons.lang3.ObjectUtils$Null");
      assertNotNull(string3);
      assertEquals("ymz}I.riv\"!\u0001G79q9", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean3 = StringUtils.isEmpty("ymz}I.riv\"!\u0001G79q9");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string4 = StringUtils.removeIgnoreCase("ymz}I.riv\"!\u0001G79q9", "K9zr6aBQ~W<ak");
      assertNotNull(string4);
      assertEquals("ymz}I.riv\"!\u0001G79q9", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.join(charArray0, 'A');
      assertNotNull(string5);
      assertEquals("oA\u0000A\u0000A\u0000A\u0000", string5);
      assertArrayEquals(new char[] {'o', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.substring("\r", 97, (-32768));
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.substring(" ", 322, 4);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripAccents("org.apache.commons.lang3.ObjectUtils$Null");
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.compare("", (String) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      String string0 = StringUtils.reverse(";}H04tqpSSycioS`");
      assertNotNull(string0);
      assertEquals("`SoicySSpqt40H};", string0);
      
      boolean boolean0 = StringUtils.isEmpty("`SoicySSpqt40H};");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "`SoicySSpqt40H};";
      objectArray0[1] = (Object) "`SoicySSpqt40H};";
      objectArray0[2] = (Object) "`SoicySSpqt40H};";
      objectArray0[3] = (Object) "`SoicySSpqt40H};";
      objectArray0[4] = (Object) ";}H04tqpSSycioS`";
      objectArray0[5] = (Object) ";}H04tqpSSycioS`";
      String string1 = StringUtils.join((Iterable<?>) null, '5');
      assertNull(string1);
      
      String string2 = StringUtils.abbreviate((String) null, 56);
      assertNull(string2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      String string3 = StringUtils.toString(byteArray0, (String) null);
      assertNotNull(string3);
      assertEquals(":", string3);
      assertArrayEquals(new byte[] {(byte)58}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.defaultIfEmpty("Search and Replace array lengths don't match: ", "|'it&fc");
      assertNotNull(string4);
      assertEquals("Search and Replace array lengths don't match: ", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("q)gIKFU]:G", "q)gIKFU]:G", "q)gIKFU]:G");
      assertNotNull(string0);
      assertEquals("q)gIKFU]:G", string0);
      
      String string1 = StringUtils.defaultIfEmpty("", "q)gIKFU]:G");
      assertNotNull(string1);
      assertEquals("q)gIKFU]:G", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("q)gIKFU]:G", "q)gIKFU]:G", "q)gIKFU]:G");
      assertNotNull(string0);
      assertEquals("q)gIKFU]:G", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "q)gIKFU]:G", (-562), (-562));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultIfEmpty("", "q)gIKFU]:G");
      assertNotNull(string1);
      assertEquals("q)gIKFU]:G", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("", (-1), 1);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "q)gIKFU]:G";
      charSequenceArray0[3] = (CharSequence) "q)gIKFU]:G";
      String string3 = StringUtils.toRootLowerCase("q)gIKFU]:G");
      assertNotNull(string3);
      assertEquals("q)gikfu]:g", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.unwrap("", "\"");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      String string0 = StringUtils.stripToNull("q)gIKFU]:G");
      assertNotNull(string0);
      assertEquals("q)gIKFU]:G", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "q)gIKFU]:G", (-562), (-562));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultIfEmpty("", " ");
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("", 0, 1);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripEnd("", "'[8Dg$h");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isNotEmpty("'[8Dg$h");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-27);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-111);
      byteArray0[8] = (byte) (-9);
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      String string0 = StringUtils.replaceAll("oYYg<W$Rs1x6.^FG:", "oYYg<W$Rs1x6.^FG:", "org.apache.commo#s.lang3.ArrayUtils");
      assertNotNull(string0);
      assertEquals("oYYg<W$Rs1x6.^FG:", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "oYYg<W$Rs1x6.^FG:", "oYYg<W$Rs1x6.^FG:");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "org.apache.commo#s.lang3.ArrayUtils", 1562, 2303);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.EMPTY;
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("org.apache.commo#s.lang3.ArrayUtils", "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.wrapIfMissing("oYYg<W$Rs1x6.^FG:", "oYYg<W$Rs1x6.^FG:");
      assertNotNull(string2);
      assertEquals("oYYg<W$Rs1x6.^FG:", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("org.apache.commo#s.lang3.ArrayUtils", "4M`FSm$HwT++mC, Length: 0", "KIz2V*op7vKsL]4R");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      String string0 = StringUtils.defaultString("o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNotNull(string0);
      assertEquals("o#5_&V<i,#y", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("o#5_&V<i,#y", '{');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.rightPad("o#5_&V<i,#y", (int) '{', '5');
      assertNotNull(string1);
      assertEquals("o#5_&V<i,#y5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "o#5_&V<i,#y", (CharSequence) "o#5_&V<i,#y");
      assertEquals(0, int0);
      
      String string2 = StringUtils.substringBeforeLast("o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.substringsBetween("o#5_&V<i,#y", "o#5_&V<i,#y", "14@*!Y.rz7uO%");
      assertNull(stringArray1);
      
      String string3 = StringUtils.wrap("o#5_&V<i,#y", "");
      assertNotNull(string3);
      assertEquals("o#5_&V<i,#y", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.capitalize("14@*!Y.rz7uO%");
      assertNotNull(string4);
      assertEquals("14@*!Y.rz7uO%", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.join((Object[]) stringArray0, "14@*!Y.rz7uO%");
      assertNotNull(string5);
      assertEquals("o#5_&V<i,#y", string5);
      assertEquals(1, stringArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "o#5_&V<i,#y";
      charSequenceArray0[1] = (CharSequence) "o#5_&V<i,#y";
      String string6 = StringUtils.chop("o#5_&V<i,#y");
      assertNotNull(string6);
      assertEquals("o#5_&V<i,#", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.stripStart("org.apache.commons.lang3.ObjectUtils$Nullymz}I.riv\"!\u0001G79q9", "org.apache.commons.lang3.ObjectUtils$Nullymz}I.riv\"!\u0001G79q9");
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      
      String string8 = StringUtils.substringBeforeLast("", (String) null);
      assertNotNull(string8);
      assertEquals("", string8);
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsAny("o#5_&V<i,#y", stringArray0);
      assertTrue(boolean1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      assertEquals(1, objectArray0.length);
      
      String string1 = StringUtils.joinWith("org.apache.commons.lang3.Charsets", objectArray0);
      assertNotNull(string1);
      assertEquals(1, objectArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("java.lang.Object@3e7f56bc", "java.lang.Object@3e7f56bc");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("java.lang.Object@3e7f56bc");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing(" vs ", "+^iy.BY9LR");
      assertNotNull(string0);
      assertEquals("+^iy.BY9LR vs +^iy.BY9LR", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("+^iy.BY9LR vs +^iy.BY9LR");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[7];
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "+^iy.BY9LR", (CharSequence) " vs ");
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      String string1 = StringUtils.join(intArray0, 'J');
      assertNotNull(string1);
      assertEquals("-1", string1);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripEnd(" vs ", "Array and element cannot both be null");
      assertNotNull(string2);
      assertEquals(" vs", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsAny((CharSequence) " vs", charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.removeEnd("-1", "+^iy.BY9LR vs +^iy.BY9LR");
      assertNotNull(string3);
      assertEquals("-1", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "-1", (CharSequence) "-1");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.center("", 0, 'L');
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.joinWith("@", stringArray0);
      assertNotNull(string5);
      assertEquals("@@@@@@", string5);
      assertEquals(7, stringArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isNotEmpty("@");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "@", (CharSequence) "@");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      String string0 = StringUtils.stripEnd("TZ9|Z{[0?a,-", "[> :P$3vKrba_P");
      assertNotNull(string0);
      assertEquals("TZ9|Z{[0?a,-", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "TZ9|Z{[0?a,-", (CharSequence) "TZ9|Z{[0?a,-");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      String string1 = StringUtils.center("T&", 4, "T&");
      assertNotNull(string1);
      assertEquals("TT&T", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "TT&T", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      String string2 = StringUtils.substringAfter("uGwx ?El62;=^K", "");
      assertNotNull(string2);
      assertEquals("uGwx ?El62;=^K", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      
      Locale locale1 = Locale.forLanguageTag("uGwx ?El62;=^K");
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 5;
      intArray0[1] = 2605;
      String string3 = StringUtils.join(intArray0, '9', 2605, 5);
      assertNotNull(string3);
      assertEquals("", string3);
      assertArrayEquals(new int[] {5, 2605}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.join((byte[]) null, '9', 6, 56);
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "T&";
      charSequenceArray0[3] = (CharSequence) "T&";
      charSequenceArray0[4] = (CharSequence) "T&";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      String string0 = StringUtils.trim("=>w<; ^+4@y1ps#*");
      assertNotNull(string0);
      assertEquals("=>w<; ^+4@y1ps#*", string0);
      
      String string1 = StringUtils.normalizeSpace("=>w<; ^+4@y1ps#*");
      assertNotNull(string1);
      assertEquals("=>w<; ^+4@y1ps#*", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.chop("=>w<; ^+4@y1ps#*");
      assertNotNull(string2);
      assertEquals("=>w<; ^+4@y1ps#", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfter(", Length: ", "=>w<; ^+4@y1ps#*");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      
      Locale locale1 = Locale.ENGLISH;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      
      String string4 = locale1.getDisplayName();
      assertNotSame(locale1, locale0);
      assertNotNull(string4);
      assertEquals("English", string4);
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = locale0.getDisplayVariant(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = locale0.getDisplayVariant();
      assertNotSame(locale0, locale1);
      assertNotNull(string6);
      assertEquals("", string6);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      
      int int0 = StringUtils.getFuzzyDistance("", "=>w<; ^+4@y1ps#", locale0);
      assertNotSame(locale0, locale1);
      assertEquals(0, int0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(locale0.equals((Object)locale1));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, ']', (int) (byte)0, (int) (byte)121);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      String string0 = StringUtils.join(byteArray0, '/', 76, 76);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {(byte)76}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      String string1 = StringUtils.uncapitalize("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      Object[] objectArray0 = new Object[18];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      assertEquals(18, objectArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("java.lang.Object@2b19953e");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(10, stringArray0.length);
      
      String string1 = StringUtils.swapCase("java.lang.Object@2b19953e");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.splitByCharacterType("Pu!Yl#w@}yy+_LD ");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(14, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("Pu!Yl#w@}yy+_LD ", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertTrue(boolean1);
      assertEquals(14, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Cannot store ", (-1735));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "JAVA.LANG.oBJECT@2B19953E", 85, 55);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) "Cannot store ", (CharSequence) "Cannot store ");
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string2 = StringUtils.strip("Cannot store ");
      assertNotNull(string2);
      assertEquals("Cannot store", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.overlay("Pu!Yl#w@}yy+_LD ", "JAVA.LANG.oBJECT@2B19953E", 85, 85);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = 'g';
      charArray0[2] = '&';
      charArray0[3] = 'w';
      charArray0[4] = 'F';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "Pu!Yl#w@}yy+_LD JAVA.LANG.oBJECT@2B19953E", charArray0);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'e', 'g', '&', 'w', 'F'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Fq/$p");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = StringUtils.countMatches((CharSequence) "5q]iz~zIqj|n`%r", (CharSequence) "Fq/$p");
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "m~}H< ct!]B");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.truncate((String) null, 4);
      assertNull(string1);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      serviceLoader0.reload();
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Iterator<Object> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      String string2 = StringUtils.join(iterator0, (String) null);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      
      String string3 = StringUtils.upperCase("org.apache.commons.lang3.ObjectUtils$Null", locale0);
      assertNotNull(string3);
      assertEquals("ORG.APACHE.COMMONS.LANG3.OBJECTUTILS$NULL", string3);
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.removeStart("ORG.APACHE.COMMONS.LANG3.OBJECTUTILS$NULL", (String) null);
      assertNotNull(string4);
      assertEquals("ORG.APACHE.COMMONS.LANG3.OBJECTUTILS$NULL", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.rightPad((String) null, (-2421), "");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      charSequenceArray0[0] = (CharSequence) " ";
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 3990.2568F;
      floatArray0[4] = 2690.037F;
      floatArray0[5] = 2663.856F;
      String string1 = StringUtils.join(floatArray0, 'b', 86, 71);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 3990.2568F, 2690.037F, 2663.856F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.substringAfter("\r", 71);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "";
      String string3 = StringUtils.truncate("\n", 86);
      assertNotNull(string3);
      assertEquals("\n", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      charSequenceArray0[3] = (CharSequence) "\n";
      String string4 = StringUtils.left("", 109);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string5 = StringUtils.leftPad("Cloneable", 86, "");
      assertNotNull(string5);
      assertEquals("                                                                             Cloneable", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 0.0;
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.abbreviate("", "Pshrzb0nxQAg?R", 6, 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWith("\r", "");
      assertTrue(boolean0);
      
      LinkedHashSet<CharBuffer> linkedHashSet0 = new LinkedHashSet<CharBuffer>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      
      char[] charArray0 = new char[0];
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      assertNotSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      assertTrue(charBuffer1.hasArray());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      
      boolean boolean1 = linkedHashSet0.add(charBuffer0);
      assertNotSame(charBuffer0, charBuffer1);
      assertTrue(boolean1);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains(charBuffer1));
      
      CharBuffer charBuffer2 = CharBuffer.allocate(0);
      assertNotSame(charBuffer2, charBuffer0);
      assertNotSame(charBuffer2, charBuffer1);
      assertNotNull(charBuffer2);
      assertTrue(charBuffer2.hasArray());
      assertEquals(0, charBuffer2.remaining());
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals(0, charBuffer2.length());
      assertFalse(charBuffer2.hasRemaining());
      assertEquals(0, charBuffer2.limit());
      assertFalse(charBuffer2.isDirect());
      assertEquals(0, charBuffer2.position());
      assertEquals("", charBuffer2.toString());
      assertEquals(0, charBuffer2.capacity());
      assertTrue(charBuffer2.equals((Object)charBuffer1));
      assertTrue(charBuffer2.equals((Object)charBuffer0));
      
      boolean boolean2 = linkedHashSet0.add(charBuffer2);
      assertNotSame(charBuffer2, charBuffer0);
      assertNotSame(charBuffer2, charBuffer1);
      assertFalse(boolean2);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(charBuffer2.hasArray());
      assertEquals(0, charBuffer2.remaining());
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals(0, charBuffer2.length());
      assertFalse(charBuffer2.hasRemaining());
      assertEquals(0, charBuffer2.limit());
      assertFalse(charBuffer2.isDirect());
      assertEquals(0, charBuffer2.position());
      assertEquals("", charBuffer2.toString());
      assertEquals(0, charBuffer2.capacity());
      assertTrue(charBuffer2.equals((Object)charBuffer1));
      assertTrue(charBuffer2.equals((Object)charBuffer0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(linkedHashSet0.contains(charBuffer0));
      
      boolean boolean3 = linkedHashSet0.add(charBuffer0);
      assertNotSame(charBuffer0, charBuffer2);
      assertNotSame(charBuffer0, charBuffer1);
      assertFalse(boolean3);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer0.equals((Object)charBuffer2));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(linkedHashSet0.contains(charBuffer0));
      
      String string2 = StringUtils.join((Iterable<?>) linkedHashSet0, '!');
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(linkedHashSet0.contains(charBuffer0));
      
      boolean boolean4 = linkedHashSet0.add(charBuffer0);
      assertNotSame(charBuffer0, charBuffer2);
      assertNotSame(charBuffer0, charBuffer1);
      assertFalse(boolean4);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer0.equals((Object)charBuffer2));
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(linkedHashSet0.contains(charBuffer0));
      
      String string3 = StringUtils.strip("\r");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      
      String string5 = StringUtils.center(";8h{kRDm{DxXkA]", 522);
      assertNotNull(string5);
      assertEquals("                                                                                                                                                                                                                                                             ;8h{kRDm{DxXkA]                                                                                                                                                                                                                                                             ", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean5 = StringUtils.contains((CharSequence) "", 6);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.center("|Pob! BM#Na", (-1));
      assertNotNull(string0);
      assertEquals("|Pob! BM#Na", string0);
      
      String string1 = StringUtils.repeat((String) null, (-1));
      assertNull(string1);
      
      String string2 = StringUtils.remove("9G00k;MC::%.]j&D(S", "K9zr6aBQ~W<ak");
      assertNotNull(string2);
      assertEquals("9G00k;MC::%.]j&D(S", string2);
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("|Pob! BM#Na", "D", "Ju_MJ");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Ju_MJ", "iYT}J");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllUpperCase("K9zr6aBQ~W<ak");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string3 = StringUtils.substringAfter("ymz}I.riv\"!\u0001G79q9", "iYT}J");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.substring(">&02XY:zkH|", (-1));
      assertNotNull(string4);
      assertEquals("|", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "p]V}~`<>", (CharSequence) "p]V}~`<>", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "|Pob! BM#Na", (CharSequence) "iYT}J", 15);
      assertEquals(11, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int3);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      String string0 = StringUtils.replaceAll("oYYg<W$Rs1x6.^FG:", "oYYg<W$Rs1x6.^FG:", "org.apache.commo#s.lang3.ArrayUtils");
      assertNotNull(string0);
      assertEquals("oYYg<W$Rs1x6.^FG:", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "oYYg<W$Rs1x6.^FG:", "oYYg<W$Rs1x6.^FG:");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chomp("0+:h_s>");
      assertNotNull(string1);
      assertEquals("0+:h_s>", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int0 = (-3148);
      int int1 = 10;
      int int2 = StringUtils.lastIndexOf((CharSequence) "", (-3148), 10);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string1 = StringUtils.swapCase("6uOrp8Hb&&my-S;#'");
      assertNotNull(string1);
      assertEquals("6UoRP8hB&&MY-s;#'", string1);
      assertFalse(string1.equals((Object)string0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 10;
      floatArray0[1] = (float) (-3148);
      floatArray0[2] = (float) (-3148);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 10;
      floatArray0[5] = (float) (-1);
      char char0 = 'R';
      int int3 = 0;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'R', (-3148), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3148
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      String string0 = StringUtils.replaceAll("oYYg<W$Rs1x6.^FG:", "oYYg<W$Rs1x6.^FG:", "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string0);
      assertEquals("oYYg<W$Rs1x6.^FG:", string0);
      
      String string1 = StringUtils.defaultString("clone");
      assertNotNull(string1);
      assertEquals("clone", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.chomp("\n");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[1];
      String string2 = StringUtils.join(byteArray0, 'y');
      assertNotNull(string2);
      assertEquals("0", string2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int[] intArray0 = StringUtils.toCodePoints("0");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {48}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      String string0 = StringUtils.replaceChars("H^6HI", "F`#48R6JZYy.W", " vs ");
      assertNotNull(string0);
      assertEquals("H^HI", string0);
      
      String string1 = StringUtils.defaultIfBlank("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((Iterator<?>) null, '+');
      assertNull(string2);
      
      String[] stringArray0 = new String[1];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.toRootLowerCase("A(b8XL{n");
      assertNotNull(string3);
      assertEquals("a(b8xl{n", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      String string0 = StringUtils.stripToNull("gLiOD,PZ>\n");
      assertNotNull(string0);
      assertEquals("gLiOD,PZ>", string0);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = '-';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.remaining());
      assertEquals("T-", charBuffer0.toString());
      assertArrayEquals(new char[] {'T', '-'}, charArray0);
      assertEquals(2, charArray0.length);
      
      CharBuffer charBuffer1 = StringUtils.defaultIfBlank(charBuffer0, charBuffer0);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.remaining());
      assertEquals("T-", charBuffer0.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(2, charBuffer1.length());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(2, charBuffer1.limit());
      assertEquals(2, charBuffer1.remaining());
      assertEquals(2, charBuffer1.capacity());
      assertEquals("T-", charBuffer1.toString());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertArrayEquals(new char[] {'T', '-'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      String string0 = StringUtils.leftPad("SF$#v", (-1174), "in a ara of ");
      assertNotNull(string0);
      assertEquals("SF$#v", string0);
      
      boolean boolean0 = StringUtils.isBlank("SF$#v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      String string0 = StringUtils.replaceAll("oYYg<W$Rs1x6.^FG:", "oYYg<W$Rs1x6.^FG:", "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string0);
      assertEquals("oYYg<W$Rs1x6.^FG:", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "oYYg<W$Rs1x6.^FG:", "oYYg<W$Rs1x6.^FG:");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "org.apache.commons.lang3.ArrayUtils", 1522, 2303);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripToNull("oYYg<W$Rs1x6.^FG:");
      assertNotNull(string1);
      assertEquals("oYYg<W$Rs1x6.^FG:", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.EMPTY;
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("org.apache.commons.lang3.ArrayUtils", "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.remove("oYYg<W$Rs1x6.^FG:", "Minimum abbreviation width is %d");
      assertNotNull(string3);
      assertEquals("oYYg<W$Rs1x6.^FG:", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.defaultIfBlank("org.apache.commons.lang3.ArrayUtils", "oYYg<W$Rs1x6.^FG:");
      assertNotNull(string4);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.join((Iterator<?>) null, '+');
      assertNull(string5);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "oYYg<W$Rs1x6.^FG:";
      stringArray0[1] = "Minimum abbreviation width is %d";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string6 = StringUtils.strip("org.apache.commons.lang3.ArrayUtils", "NZ");
      assertNotNull(string6);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("Object varargs must not be null");
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertEquals(11, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-19);
      String string7 = StringUtils.join(byteArray0, 's', 2696, 579);
      assertNotNull(string7);
      assertEquals("", string7);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-43), (byte) (-94), (byte)7, (byte) (-19)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = "\\uncB\"O";
      String string2 = StringUtils.substringAfter(" ", string1);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, '1');
      assertNotNull(string0);
      assertEquals("1111111111", string0);
      assertEquals(11, charSequenceArray0.length);
      
      String string1 = StringUtils.substringAfter("*hPk*hPk", "*hPk*hPk");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      String string2 = StringUtils.join(charArray0, '!');
      assertNotNull(string2);
      assertEquals("!!\u0000!\u0000!\u0000!\u0000", string2);
      assertArrayEquals(new char[] {'!', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substring("J#/FJRtpI0WKC@AM", 8192, 5);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      int int0 = StringUtils.ordinalIndexOf("", "!!\u0000!\u0000!\u0000!\u0000", (-4472));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substringAfter("Search and Replace array lengths don't match: ", "J#/FJRtpI0WKC@AM");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      
      String string5 = StringUtils.remove("", '\"');
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      String string0 = StringUtils.stripAccents("Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      
      String string1 = StringUtils.substringAfter("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      String string0 = StringUtils.unwrap("}=5n4H", "}=5n4H");
      assertNotNull(string0);
      assertEquals("}=5n4H", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.RegExUtils", "Cloneable");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.substringAfterLast((String) null, (-238));
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, '1');
      assertNotNull(string0);
      assertEquals("1111111111", string0);
      assertEquals(11, charSequenceArray0.length);
      
      String string1 = StringUtils.substringAfter("*hPk*hPk", "*hPk*hPk");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((List<?>) null, '@', (int) '@', 52);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) "1111111111");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("1111111111", ' ');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.remove("1111111111", '1');
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.substringAfterLast("1111111111", 52);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      String string0 = StringUtils.reverse("b&egB9Lm,(H,!<L");
      assertNotNull(string0);
      assertEquals("L<!,H(,mL9Bge&b", string0);
      
      String string1 = StringUtils.unwrap(" vs ", " vs ");
      assertNotNull(string1);
      assertEquals(" vs ", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.difference((String) null, "L<!,H(,mL9Bge&b");
      assertNotNull(string2);
      assertEquals("L<!,H(,mL9Bge&b", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      String string0 = StringUtils.difference("", "', is neither of type Map.Entry nor an Array");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      String string1 = StringUtils.center("T&", 4, "T&");
      assertNotNull(string1);
      assertEquals("TT&T", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "TT&T", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      String string2 = StringUtils.substring("TT&T", 4);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "TT&T", (CharSequence) "', is neither of type Map.Entry nor an Array", 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "%", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'P', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "GfCU%5-5", (CharSequence) "GfCU%5-5", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      String string0 = StringUtils.reverse(";}H04tqpSSycioS`");
      assertNotNull(string0);
      assertEquals("`SoicySSpqt40H};", string0);
      
      boolean boolean0 = StringUtils.isEmpty("`SoicySSpqt40H};");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "`SoicySSpqt40H};";
      objectArray0[1] = (Object) "`SoicySSpqt40H};";
      objectArray0[2] = (Object) "`SoicySSpqt40H};";
      objectArray0[3] = (Object) "`SoicySSpqt40H};";
      objectArray0[4] = (Object) ";}H04tqpSSycioS`";
      objectArray0[5] = (Object) ";}H04tqpSSycioS`";
      objectArray0[6] = (Object) "`SoicySSpqt40H};";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      String string1 = StringUtils.join(objectArray0, '4');
      assertNotNull(string1);
      assertEquals(8, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfter(";}H04tqpSSycioS`", "`SoicySSpqt40H};4`SoicySSpqt40H};4`SoicySSpqt40H};4`SoicySSpqt40H};4;}H04tqpSSycioS`4;}H04tqpSSycioS`4`SoicySSpqt40H};4java.lang.Object@35d5897f");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.join((List<?>) null, '@', 52, 52);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '4');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.remove("`SoicySSpqt40H};", '@');
      assertNotNull(string4);
      assertEquals("`SoicySSpqt40H};", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.substringAfterLast("", (-2955));
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "K9zr6aBQ~W<ak", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "p]V}~`<>");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, " ");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) " ", (CharSequence) " ");
      assertTrue(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.toRootUpperCase(" ");
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.CR;
      assertNotNull(string2);
      assertEquals("\r", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance(" ", "\r");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean1 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      String string0 = "The type must not be null";
      String string1 = "";
      String string2 = StringUtils.replaceIgnoreCase("The type must not be null", "", "");
      assertNotNull(string2);
      assertEquals("The type must not be null", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "The type must not be null", (CharSequence) "The type must not be null");
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 387.8164F;
      floatArray0[1] = 765.11F;
      floatArray0[2] = 1829.0F;
      String string3 = StringUtils.join(floatArray0, '\"');
      assertNotNull(string3);
      assertEquals("387.8164\"765.11\"1829.0", string3);
      assertArrayEquals(new float[] {387.8164F, 765.11F, 1829.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = "";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      
      // Undeclared exception!
      try { 
        charset0.encode((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 'R';
      floatArray0[3] = (float) 'R';
      String string0 = StringUtils.join(floatArray0, '\'', 0, 4);
      assertNotNull(string0);
      assertEquals("0.0'0.0'82.0'82.0", string0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 82.0F, 82.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      String string1 = StringUtils.substringBefore("0.0'0.0'82.0'82.0", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string1);
      assertEquals("0.0'0.0'82.0'82.0", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'R';
      floatArray0[1] = (float) 'R';
      floatArray0[2] = (float) 'R';
      floatArray0[3] = (float) 'R';
      String string0 = StringUtils.join(floatArray0, '\'', (int) 'R', 4);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new float[] {82.0F, 82.0F, 82.0F, 82.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      String string0 = StringUtils.stripToNull(" ");
      assertNull(string0);
      
      String string1 = StringUtils.EMPTY;
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, "");
      assertFalse(boolean0);
      
      String string2 = StringUtils.SPACE;
      assertNotNull(string2);
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripEnd("sZ", "");
      assertNotNull(string3);
      assertEquals("sZ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      String string0 = StringUtils.strip((String) null, (String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) null;
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[1], charSequenceArray0[1]);
      assertEquals((-1), int0);
      assertEquals(9, charSequenceArray0.length);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "myWH:a_JY";
      stringArray0[3] = null;
      stringArray0[4] = string0;
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      String string1 = StringUtils.join(intArray0, 'I');
      assertNotNull(string1);
      assertEquals("-1", string1);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'I';
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[1], charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'I'}, charArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.removeEnd("Exception cloning Cloneable type ", "-1");
      assertNotNull(string2);
      assertEquals("Exception cloning Cloneable type ", string2);
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[2], (CharSequence) string0);
      assertEquals((-1), int1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.center("maxWith cannot be negative", (-1), 'I');
      assertNotNull(string3);
      assertEquals("maxWith cannot be negative", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.joinWith("maxWith cannot be negative", stringArray0);
      assertNotNull(string4);
      assertEquals("maxWith cannot be negativemaxWith cannot be negativemyWH:a_JYmaxWith cannot be negativemaxWith cannot be negative", string4);
      assertEquals(5, stringArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean2 = StringUtils.isNotEmpty("maxWith cannot be negativemaxWith cannot be negativemyWH:a_JYmaxWith cannot be negativemaxWith cannot be negative");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("Exception cloning Cloneable type ", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      String string0 = "u6/p";
      String string1 = StringUtils.replaceIgnoreCase("u6/p", "u6/p", "'5R");
      assertNotNull(string1);
      assertEquals("'5R", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isMixedCase("'5R");
      assertFalse(boolean0);
      
      String string2 = StringUtils.truncate("pd6(%", 114);
      assertNotNull(string2);
      assertEquals("pd6(%", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.repeat((String) null, 114);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.startsWithAny("pd6(%", (CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.substringsBetween("|UpV", (String) null, "'5R");
      assertNull(stringArray1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "Threshold must not be negative", (CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(string2));
      
      // Undeclared exception!
      try { 
        stack0.listIterator(114);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 114
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.center((String) null, (-2981), (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.trim((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.wrap("+^iy.BY9LR vs ", '8');
      assertNotNull(string3);
      assertEquals("8+^iy.BY9LR vs 8", string3);
      
      boolean boolean2 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean2);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = StringUtils.capitalize((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.join(stringArray0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(0, stringArray0.length);
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.substringBetween("offset cannot be negative", "oQqpw<n6rn+");
      assertNull(string6);
      
      boolean boolean3 = StringUtils.isAlphanumericSpace("l@lMoE&Q3F1L");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      
      String string7 = StringUtils.chop((String) null);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'u');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[1] = "+^iy.BY9LR vs +^iy.BY9LR";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isAllLowerCase("+^iy.BY9LR vs +^iy.BY9LR");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      String string0 = StringUtils.substring("", 991);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 991);
      assertEquals(0, int0);
      
      String string1 = StringUtils.repeat("", "N9m,C&Njs}pVd+PP", 991);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "N9m,C&Njs}pVd+PP", 991);
      assertEquals(16, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "N9m,C&Njs}pVd+PP", (CharSequence) "N9m,C&Njs}pVd+PP");
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.leftPad(" ", 9, " ");
      assertNotNull(string0);
      assertEquals("         ", string0);
      
      String string1 = StringUtils.appendIfMissing("         ", " ", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("         ", string1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replace("comparator", (String) null, "^9SU", (-3471));
      assertNotNull(string2);
      assertEquals("comparator", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) " ", 26);
      assertFalse(boolean0);
      
      String string3 = StringUtils.trimToNull("         ");
      assertNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "comparator");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.joinWith("         ", charSequenceArray0);
      assertNotNull(string4);
      assertEquals("                           ", string4);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'u');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chomp("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat('J', 2);
      assertNotNull(string2);
      assertEquals("JJ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      String string0 = StringUtils.chop("+^iy.BY9LR vs ");
      assertNotNull(string0);
      assertEquals("+^iy.BY9LR vs", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("+^iy.BY9LR vs");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("}a/w!8", "}a/w!8");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "}a/w!8");
      assertEquals(0.0, double0, 0.01);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("}a/w!8", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.repeat((String) null, 256);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.startsWithAny(charSequenceArray0[0], charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("'IGRMzjd`{J%z%|\"", "org.apache.commons.lang3.CharUtils", (String) null);
      assertNull(stringArray0);
      
      boolean boolean2 = StringUtils.equalsAny("2[", (CharSequence[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "", (CharSequence) "!}\"A,vt'U");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string2 = StringUtils.abbreviate("org.apache.commons.lang3.CharUtils", 3, 256);
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.CharUtils", string2);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      String string0 = StringUtils.strip((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.replace((String) null, "myWH:a_JY", (String) null, 0);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) null;
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[1], charSequenceArray0[1]);
      assertEquals((-1), int0);
      assertEquals(9, charSequenceArray0.length);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "myWH:a_JY";
      stringArray0[3] = null;
      stringArray0[4] = "Array and element cannot both be null";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      assertEquals(5, stringArray1.length);
      assertEquals(5, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.chop(". H__]$'v2jB");
      assertNotNull(string2);
      assertEquals(". H__]$'v2j", string2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)52;
      String string3 = StringUtils.toString(byteArray0, string0);
      assertNotNull(string3);
      assertEquals("\u0000\uFFFD\u03BF\uFFFD!4", string3);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-20), (byte) (-50), (byte) (-65), (byte) (-60), (byte)33, (byte)52}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.substring("", 31);
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.CR;
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      charSequenceArray0[0] = (CharSequence) "\r";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.wrap(":@9wg", "ulG");
      assertNotNull(string2);
      assertEquals("ulG:@9wgulG", string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replacePattern("^9SU", (String) null, (String) null);
      assertNotNull(string3);
      assertEquals("^9SU", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "\r", 57);
      assertEquals(46, int0);
      
      String string4 = StringUtils.join((long[]) null, 'R', 64, 1514);
      assertNull(string4);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "ulG", (CharSequence) "^9SU");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("org.apache.commons.lang3.StringUtils", 'N');
      assertNotNull(string0);
      assertEquals("Norg.apache.commons.lang3.StringUtilsN", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Norg.apache.commons.lang3.StringUtilsN");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter("org.apache.commons.lang3.StringUtils", "Norg.apache.commons.lang3.StringUtilsN");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = 638;
      String string2 = StringUtils.center("Locale must not be null", 638);
      assertNotNull(string2);
      assertEquals("                                                                                                                                                                                                                                                                                                                   Locale must not be null                                                                                                                                                                                                                                                                                                                    ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringBetween("Norg.apache.commons.lang3.StringUtilsN", "5m;d }6e3Z");
      assertNull(string3);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "org.apache.commons.lang3.StringUtils";
      String string4 = StringUtils.joinWith("-.OtDON`M(|/gg", objectArray0);
      assertNotNull(string4);
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      assertEquals(1, objectArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean2 = StringUtils.equalsIgnoreCase((CharSequence) null, "-.OtDON`M(|/gg");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string5 = StringUtils.join((List<?>) null, "Norg.apache.commons.lang3.StringUtilsN", 638, 638);
      assertNull(string5);
      
      String string6 = StringUtils.join((List<?>) null, 'N', 0, 1);
      assertNull(string6);
      
      String string7 = StringUtils.leftPad((String) null, 0);
      assertNull(string7);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("                                                                                                                                                                                                                                                                                                                   Locale must not be null                                                                                                                                                                                                                                                                                                                    ");
      assertNotNull(stringArray0);
      assertEquals(620, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "org.apache.commons.lang3.StringUtils", (-1457));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = false;
      String string1 = StringUtils.center("T&", 4, "T&");
      assertNotNull(string1);
      assertEquals("TT&T", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "TT&T", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      String string2 = StringUtils.join((List<?>) null, "", 4, 95);
      assertNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "T&", (CharSequence) "", 99);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      String string0 = "o#5_&V<i,#y";
      String string1 = StringUtils.defaultString("o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNotNull(string1);
      assertEquals("o#5_&V<i,#y", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("o#5_&V<i,#y", "o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNull(stringArray0);
      
      String string2 = StringUtils.join((Object[]) null, "g'\u0001i@NC1#&47w");
      assertNull(string2);
      
      String string3 = StringUtils.chop((String) null);
      assertNull(string3);
      
      CharSequence charSequence0 = null;
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "g'\u0001i@NC1#&47w", 105);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "o#5_&V<i,#y", (CharSequence) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.apache.commons.lang3.ArrayUtils", (CharSequence) "org.apache.commons.lang3.ArrayUtils");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.getDigits("org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string0);
      assertEquals("3", string0);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      String string0 = StringUtils.substringBetween("org.apache.commons.lang3.ArrayUtils", "org.apache.commons.lang3.ArrayUtils");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.difference("org.apache.commons.lang3.ArrayUtils", (String) null);
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string1);
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      String string0 = StringUtils.join((List<?>) stack0, "|NoTquVatc8 zWjmtoTquVatc8 zWjm", 1142, 1142);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "|NoTquVatc8 zWjmtoTquVatc8 zWjm", (CharSequence) "}a4aSsX!}1", 1142);
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", (CharSequence) " ");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBetween(" ", " ");
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.normalizeSpace("9Dc@!.%?KZv~4=b");
      assertNotNull(string0);
      assertEquals("9Dc@!.%?KZv~4=b", string0);
      
      charSequenceArray0[1] = (CharSequence) "9Dc@!.%?KZv~4=b";
      String string1 = StringUtils.center("9Dc@!.%?KZv~4=b", 76, "9Dc@!.%?KZv~4=b");
      assertNotNull(string1);
      assertEquals("9Dc@!.%?KZv~4=b9Dc@!.%?KZv~4=b9Dc@!.%?KZv~4=b9Dc@!.%?KZv~4=b9Dc@!.%?KZv~4=b9", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat(";P%`R6?u0", 76);
      assertNotNull(string2);
      assertEquals(";P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.startsWithAny(";P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0;P%`R6?u0", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string3 = "\\u";
      String string4 = StringUtils.wrapIfMissing("ncB\"O", string3);
      assertNotNull(string4);
      assertEquals("\\uncB\"O\\u", string4);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.replaceFirst("ncB\"O", (String) null, "9Dc@!.%?KZv~4=b");
      assertNotNull(string5);
      assertEquals("ncB\"O", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAlphaSpace("ncB\"O");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance(";P%`R6?u0", "9Dc@!.%?KZv~4=b");
      assertEquals(0.45, double0, 0.01);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string4, (CharSequence) null);
      assertEquals((-1), int0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      
      String string6 = StringUtils.rightPad("^>g,", 2531, '\'');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.join((int[]) null, 'X', 116, (-153));
      assertNull(string0);
      
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAny("", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string1 = StringUtils.substringBeforeLast((String) null, "");
      assertNull(string1);
      
      String string2 = StringUtils.repeat("z3=N.~.U^", 1);
      assertNotNull(string2);
      assertEquals("z3=N.~.U^", string2);
      
      String string3 = StringUtils.wrapIfMissing("", "VOgURJ1G\u0006N}H?S");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      String string0 = StringUtils.getDigits("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat("", 160);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.remove("", "p]V}~`<>");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.substringsBetween("@<q", "", "ymz}I.riv\"!\u0001G79q9");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 160;
      floatArray0[1] = (float) 160;
      floatArray0[2] = (float) 160;
      floatArray0[3] = (float) 160;
      String string3 = StringUtils.join(floatArray0, 'x');
      assertNotNull(string3);
      assertEquals("160.0x160.0x160.0x160.0", string3);
      assertArrayEquals(new float[] {160.0F, 160.0F, 160.0F, 160.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "ymz}I.riv\"!\u0001G79q9", 160, (-278));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.CR;
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      charSequenceArray0[0] = (CharSequence) "\r";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.wrap(":@9wg", "ulG");
      assertNotNull(string2);
      assertEquals("ulG:@9wgulG", string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.leftPad("Search and Replace array lengths don't match: ", 5, '');
      assertNotNull(string3);
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.removeStart("ua[*&19'1ea59Sny&P%", (String) null);
      assertNotNull(string4);
      assertEquals("ua[*&19'1ea59Sny&P%", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isEmpty("ua[*&19'1ea59Sny&P%");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      String string0 = StringUtils.repeat("", 8192);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.startsWith("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substring("", 8192);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("", (-2031), "");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat("", 160);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("@<q", "", "ymz}I.riv\"!\u0001G79q9");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Strings must not be null", "Strings must not be null", "Strings must not be null");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Strings must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      String string0 = StringUtils.removeStart("...", "...");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.EMPTY;
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.normalizeSpace("9Dc@!.%?KZv~4=b");
      assertNotNull(string1);
      assertEquals("9Dc@!.%?KZv~4=b", string1);
      
      charSequenceArray0[1] = (CharSequence) "9Dc@!.%?KZv~4=b";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.wrap(":@9wg", "ulG");
      assertNotNull(string2);
      assertEquals("ulG:@9wgulG", string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.leftPad("Search and Replace array lengths don't match: ", 5, '');
      assertNotNull(string3);
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.removeStart("ua[*&19'1ea59Sny&P%", (String) null);
      assertNotNull(string4);
      assertEquals("ua[*&19'1ea59Sny&P%", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean1 = StringUtils.isEmpty("ua[*&19'1ea59Sny&P%");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      String string0 = StringUtils.wrap("}BKHGagOW39v[`", "}BKHGagOW39v[`");
      assertNotNull(string0);
      assertEquals("}BKHGagOW39v[`}BKHGagOW39v[`}BKHGagOW39v[`", string0);
      
      String string1 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "4M`FSm$HwT++mC";
      charSequenceArray0[1] = (CharSequence) "4M`FSm$HwT++mC";
      charSequenceArray0[2] = (CharSequence) "4M`FSm$HwT++mC";
      charSequenceArray0[3] = (CharSequence) "4M`FSm$HwT++mC";
      charSequenceArray0[4] = (CharSequence) "4M`FSm$HwT++mC";
      String string0 = StringUtils.right("Cannot clone Cloneable type ", (-1));
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[6] = (CharSequence) "4M`FSm$HwT++mC";
      String string1 = StringUtils.substring("4M`FSm$HwT++mC", (-1));
      assertNotNull(string1);
      assertEquals("C", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[2], charSequenceArray0[1], (-1));
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.repeat("C", "C", 9);
      assertNotNull(string2);
      assertEquals("CCCCCCCCCCCCCCCCC", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.getLevenshteinDistance(charSequenceArray0[1], charSequenceArray0[3], 5);
      assertEquals(0, int1);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOfIgnoreCase(charSequenceArray0[5], charSequenceArray0[3]);
      assertEquals((-1), int2);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      boolean boolean0 = StringUtils.isNumeric("4M`FSm$HwT++mC");
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[4], charSequenceArray0[1]);
      assertEquals(1.0, double0, 0.01);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAlphaSpace("Cannot clone Cloneable type ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 70);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.remove("", "e ");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.substringsBetween("", "", (String) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      String string0 = StringUtils.substring("DP*Dn$a", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("DP*Dn$a", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      String string0 = StringUtils.getDigits("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat("", 160);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.remove("K9zr6aBQ~W<ak", "p]V}~`<>");
      assertNotNull(string2);
      assertEquals("K9zr6aBQ~W<ak", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("@<q", "", "ymz}I.riv\"!\u0001G79q9");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("K9zr6aBQ~W<ak", (CharSequence[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string3 = StringUtils.wrap("kxb<t?J-_T})o'i4cWq", "br\"lc@Nu");
      assertNotNull(string3);
      assertEquals("br\"lc@Nukxb<t?J-_T})o'i4cWqbr\"lc@Nu", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.leftPad("", 5, '');
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.removeStart("", "br\"lc@Nu");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean3 = StringUtils.isEmpty("kxb<t?J-_T})o'i4cWq");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, stringArray0.length);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string1 = StringUtils.substringBetween("", "kbTH/A\"vKpo");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.rotate(" ", 9);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.chomp(" ");
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '_';
      charArray0[1] = '_';
      int int0 = StringUtils.indexOfAny((CharSequence) " ", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'_', '_'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      String string0 = StringUtils.replace("Y?$", "z7&L|>U}l", "Y?$");
      assertNotNull(string0);
      assertEquals("Y?$", string0);
      
      String string1 = StringUtils.lowerCase((String) null, (Locale) null);
      assertNull(string1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 2620L;
      longArray0[1] = (-2515L);
      longArray0[2] = (-1L);
      String string2 = StringUtils.join(longArray0, 'e');
      assertNotNull(string2);
      assertEquals("2620e-2515e-1", string2);
      assertArrayEquals(new long[] {2620L, (-2515L), (-1L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "2620e-2515e-1", 954);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.chop("Y?$");
      assertNotNull(string3);
      assertEquals("Y?", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      vector0.clear();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      String string4 = StringUtils.join((List<?>) vector0, '_', 954, 32);
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.abbreviate((String) null, 2);
      assertNull(string5);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfBlank("Y?$", supplier0);
      assertNotNull(string6);
      assertEquals("Y?$", string6);
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.substringBefore("z7&L|>U}l", "RY18ulG");
      assertNotNull(string7);
      assertEquals("z7&L|>U}l", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "=</3TNdn{";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "<q4P3L]eWbj91WR.X^";
      stringArray0[1] = "<q4P3L]eWbj91WR.X^";
      stringArray0[2] = "<q4P3L]eWbj91WR.X^";
      stringArray0[3] = "<q4P3L]eWbj91WR.X^";
      stringArray0[4] = "<q4P3L]eWbj91WR.X^";
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      String string0 = StringUtils.substringBetween("<q4P3L]eWbj91WR.X^", "<q4P3L]eWbj91WR.X^");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      String string0 = StringUtils.substringAfter("', has a length less than 2", 32);
      assertNotNull(string0);
      assertEquals("has a length less than 2", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = '$';
      charArray0[2] = '%';
      charArray0[3] = '0';
      charArray0[4] = '$';
      charArray0[5] = '5';
      charArray0[6] = '|';
      charArray0[7] = 't';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "has a length less than 2", charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'[', '$', '%', '0', '$', '5', '|', 't'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      String string0 = StringUtils.center("oTquVatc8 zWjmt", 3, "");
      assertNotNull(string0);
      assertEquals("oTquVatc8 zWjmt", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("oTquVatc8 zWjmt");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfter("oTquVatc8 zWjmt", 3);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'u');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chomp("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat('G', 2);
      assertNotNull(string2);
      assertEquals("GG", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      
      Supplier<CharBuffer> supplier0 = (Supplier<CharBuffer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharBuffer charBuffer1 = StringUtils.getIfBlank(charBuffer0, supplier0);
      assertNull(charBuffer1);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      String string0 = StringUtils.removeAll("org.apache.commons.lang3.LocaleUtils", "org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfter("org.apache.commons.lang3.LocaleUtils", 32);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.capitalize("Search and Replace array lengths don't match: ");
      assertNotNull(string2);
      assertEquals("Search and Replace array lengths don't match: ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("Search and Replace array lengths don't match: "));
      
      boolean boolean0 = arrayDeque0.add("");
      assertTrue(boolean0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.contains("Search and Replace array lengths don't match: "));
      assertTrue(arrayDeque0.contains(""));
      
      String string3 = StringUtils.deleteWhitespace(", Length: 0");
      assertNotNull(string3);
      assertEquals(",Length:0", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string4 = StringUtils.right(", Length: 0", 25);
      assertNotNull(string4);
      assertEquals(", Length: 0", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      charSequenceArray0[0] = (CharSequence) ", Length: 0";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNotNull(charSequence0);
      assertEquals(", Length: 0", charSequence0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string3));
      
      charSequenceArray0[1] = (CharSequence) ", Length: 0";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.LocaleUtils";
      charSequenceArray0[4] = (CharSequence) "null/empty items";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.substringBetween("", "Search and Replace array lengths don't match: ");
      assertNull(string5);
      
      String string6 = StringUtils.substringBetween(", Length: 0", "=))hC");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      String string0 = StringUtils.lowerCase("@:TkiY)hI)wv^tH(#");
      assertNotNull(string0);
      assertEquals("@:tkiy)hi)wv^th(#", string0);
      
      String string1 = StringUtils.capitalize("@:tkiy)hi)wv^th(#");
      assertNotNull(string1);
      assertEquals("@:tkiy)hi)wv^th(#", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "@:tkiy)hi)wv^th(#", (CharSequence) "@:tkiy)hi)wv^th(#");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Lze4n";
      boolean boolean0 = StringUtils.equalsAny("Lze4n", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.repeat("#", 3);
      assertNotNull(string0);
      assertEquals("###", string0);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      
      boolean boolean1 = locale0.hasExtensions();
      assertFalse(boolean1);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.upperCase("org.apache.commons.lang3.ObjectUtils$Null", locale0);
      assertNotNull(string1);
      assertEquals("ORG.APACHE.COMMONS.LANG3.OBJECTUTILS$NULL", string1);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrap(" K`DPqZ!!", '`');
      assertNotNull(string2);
      assertEquals("` K`DPqZ!!`", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.chomp("\r");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.repeat('p', 11);
      assertNotNull(string4);
      assertEquals("ppppppppppp", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      String string0 = StringUtils.removeStart("Exception cloning Cloneable type ", "?HY=IW;7K,~'n~m:");
      assertNotNull(string0);
      assertEquals("Exception cloning Cloneable type ", string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeAll("Exception cloning Cloneable type ", "I^XK9J648`$h>iGV9");
      assertNotNull(string1);
      assertEquals("Exception cloning Cloneable type ", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("T9|Z{[0?2,-");
      assertNotNull(string0);
      assertEquals("T9|Z{[0?2,-", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "T9|Z{[0?2,-", (CharSequence) "T9|Z{[0?2,-");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      String string0 = StringUtils.substringAfter("', has a length less than 2", 32);
      assertNotNull(string0);
      assertEquals("has a length less than 2", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "has a length less than 2", "Strings must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.removeAll("", "Lgukj/J]Wm<%#JDC");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank(charSequenceArray0[0], supplier0);
      assertNull(charSequence0);
      assertEquals(9, charSequenceArray0.length);
      
      charSequenceArray0[1] = null;
      String string1 = StringUtils.LF;
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "\n";
      String string2 = StringUtils.removeAll("\n", "Lgukj/J]Wm<%#JDC");
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[3] = (CharSequence) "\n";
      String string3 = StringUtils.substringAfter("}/Yn", (-665));
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      charSequenceArray0[4] = (CharSequence) "";
      String string4 = StringUtils.capitalize("Lgukj/J]Wm<%#JDC");
      assertNotNull(string4);
      assertEquals("Lgukj/J]Wm<%#JDC", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      charSequenceArray0[5] = (CharSequence) "Lgukj/J]Wm<%#JDC";
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(string2));
      
      ArrayDeque<String> arrayDeque1 = arrayDeque0.clone();
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotNull(arrayDeque1);
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque1.contains(string2));
      assertFalse(arrayDeque0.contains(string2));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque1, locale_FilteringMode0);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotNull(list0);
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.contains(string2));
      assertFalse(list0.contains(string2));
      assertFalse(arrayDeque0.contains(string2));
      
      String string5 = StringUtils.join(list0, 'q', 2134, 2134);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.contains(string2));
      assertFalse(list0.contains(string2));
      assertFalse(arrayDeque0.contains(string2));
      
      charSequenceArray0[6] = (CharSequence) "";
      String string6 = StringUtils.deleteWhitespace("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string6);
      assertEquals("p{InCombiningDiacriticalMarks}+", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      charSequenceArray0[7] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      String string7 = StringUtils.chomp("");
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      
      charSequenceArray0[8] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      String string0 = StringUtils.leftPad(" ", 9, " ");
      assertNotNull(string0);
      assertEquals("         ", string0);
      
      short[] shortArray0 = new short[0];
      String string1 = StringUtils.join(shortArray0, 'c');
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviate("         ", "%xgl[q>n<zvi?hd", (-3124), (int) (short)64);
      assertNotNull(string2);
      assertEquals("         ", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      Integer integer0 = new Integer(122);
      assertNotNull(integer0);
      assertEquals(122, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.rightPad("Q))V!R1H(e#iNu:30r", (-1), "Q))V!R1H(e#iNu:30r");
      assertNotNull(string0);
      assertEquals("Q))V!R1H(e#iNu:30r", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.endsWithAny("|Pob! BM#Na", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      String string0 = StringUtils.defaultString("o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNotNull(string0);
      assertEquals("o#5_&V<i,#y", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("o#5_&V<i,#y", '{');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.rightPad("o#5_&V<i,#y", (int) '{', '4');
      assertNotNull(string1);
      assertEquals("o#5_&V<i,#y4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "o#5_&V<i,#y", (CharSequence) "o#5_&V<i,#y");
      assertEquals(0, int0);
      
      String string2 = StringUtils.substringBeforeLast("o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.indexOf((CharSequence) "o#5_&V<i,#y4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, 'D');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "org.apache.commons.lang3.StringUtils", 917);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      String string0 = StringUtils.replace("org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils", 0);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.CharUtils", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("org.apache.commons.lang3.CharUtils");
      assertNotNull(stringArray0);
      assertEquals(13, stringArray0.length);
      
      String string1 = StringUtils.capitalize("Locale must not be null");
      assertNotNull(string1);
      assertEquals("Locale must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("Locale must not be null", stringArray0);
      assertTrue(boolean0);
      assertEquals(13, stringArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)13;
      shortArray0[1] = (short) (-972);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 8192, "");
      assertNotNull(string0);
      
      String string1 = StringUtils.replace(string0, "", string0);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("", 8192, string1);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)64;
      shortArray0[1] = (short)64;
      shortArray0[2] = (short)64;
      shortArray0[3] = (short) (-1004);
      String string0 = StringUtils.join(shortArray0, 'e');
      assertNotNull(string0);
      assertEquals("64e64e64e-1004", string0);
      assertArrayEquals(new short[] {(short)64, (short)64, (short)64, (short) (-1004)}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      String string1 = StringUtils.wrapIfMissing("gLiOD,PZ>\n", 'e');
      assertNotNull(string1);
      assertEquals("egLiOD,PZ>\ne", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      String string0 = StringUtils.replace("org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils", 0);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.CharUtils", string0);
      
      boolean boolean0 = StringUtils.endsWith("org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "org.apache.commons.lang3.CharUtils", (CharSequence) "org.apache.commons.lang3.CharUtils", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replace("", "org.apache.commons.lang3.CharUtils", " ", 2223);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      short[] shortArray0 = new short[0];
      String string2 = StringUtils.join(shortArray0, 'X');
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.replace("", "Locale must not be null", "Ja=g55J4S");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      int int1 = StringUtils.indexOf((CharSequence) "Locale must not be null", 3543);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayList<CharBuffer> arrayList1 = new ArrayList<CharBuffer>(arrayList0);
      assertNotNull(arrayList1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      String string0 = StringUtils.removeStart("null/empty items", "!Aj.'W");
      assertNotNull(string0);
      assertEquals("null/empty items", string0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, '2', 50, (-2327));
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      String string0 = StringUtils.substringAfter("org.apache.commons.lang3.ArrayUtils", (-12));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviateMiddle("", "6F?E+Dj`K%inE'mJB:", (-129));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("A5J3\\.g/:D/E'c1>\"");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.CR;
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAlphaSpace("9Dc@!.%?KZv~4=b");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("o#5_&V<i,#y", "o#5_&V<i,#y", "o#5_&V<i,#y");
      assertNotNull(string0);
      assertEquals("o#5_&V<i,#y", string0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String string1 = StringUtils.strip("o#5_&V<i,#y", (String) null);
      assertNotNull(string1);
      assertEquals("o#5_&V<i,#y", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat('=', (-1333));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "4M`FSm$HwT++mC";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "4M`FSm$HwT++mC");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("u6/p", "u6/p", "'5R");
      assertNotNull(string0);
      assertEquals("'5R", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.stripEnd((String) null, "'5R");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      String string0 = StringUtils.remove("e ", 'X');
      assertNotNull(string0);
      assertEquals("e ", string0);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      String string0 = StringUtils.join((List<?>) vector0, '2', (-3356), (-3356));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains('2'));
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("\r", "g{{$+tNG ");
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.chop("g{{$+tNG ");
      assertNotNull(string1);
      assertEquals("g{{$+tNG", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.mid("g{{$+tNG", 2, 2);
      assertNotNull(string2);
      assertEquals("{$", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.leftPad("g{{$+tNG", 2, "\r");
      assertNotNull(string3);
      assertEquals("g{{$+tNG", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-1), "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBefore("", "?ER=j");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("', has a length less than 2", "+^iy.BY9LR");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.prependIfMissingIgnoreCase("+^iy.BY9LR", "', has a length less than 2", stringArray0);
      assertNotNull(string0);
      assertEquals("', has a length less than 2+^iy.BY9LR", string0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.startsWith("", "");
      assertTrue(boolean0);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", " 2Ph7;d\"y", (-2786));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      String string0 = StringUtils.rotate("f1U2CUy6w", (-42));
      assertNotNull(string0);
      assertEquals("y6wf1U2CU", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "y6wf1U2CU", (-42), (-42));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "T9|Z{[0?2,-";
      stringArray0[1] = ";'zgO:?DP";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      String string0 = StringUtils.wrap("|N", "");
      assertNotNull(string0);
      assertEquals("|N", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "|N";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(2, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase(" ", " ");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) " vs ";
      charSequenceArray0[1] = (CharSequence) " vs ";
      charSequenceArray0[2] = (CharSequence) " vs ";
      charSequenceArray0[3] = (CharSequence) " vs ";
      String string0 = StringUtils.appendIfMissing(" vs ", " vs ", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      assertEquals(4, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase("Supplied value must be a valid byte literal between -32768 and 32767: [", "Supplied value must be a valid byte literal between -32768 and 32767: [", (CharSequence[]) null);
      assertNotNull(string0);
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string0);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.removePattern("org", "org");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.trimToEmpty("u6/p, Length: 0");
      assertNotNull(string1);
      assertEquals("u6/p, Length: 0", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.appendIfMissing("u6/p, Length: 0", "u6/p, Length: 0", charSequenceArray0);
      assertNotNull(string2);
      assertEquals("u6/p, Length: 0", string2);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.CR;
      assertNotNull(string2);
      assertEquals("\r", string2);
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsWhitespace("\r");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) " ", (char[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      String string0 = StringUtils.stripStart("q)gIKFU]:G", "q)gIKFU]:G");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("Comparator should not be null.", "q)gIKFU]:G");
      assertNotNull(string1);
      assertEquals("Comparator should not be null.", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      String string0 = StringUtils.wrap("|N", "");
      assertNotNull(string0);
      assertEquals("|N", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "|N";
      stringArray0[1] = "|N";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals("|N", string1);
      assertEquals(2, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsAny("", stringArray0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      String string0 = StringUtils.abbreviate("org.apache.commons.lang3.LocaleUtils", "org.apache.commons.lang3.LocaleUtils", 76);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.LocaleUtils", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "org.apache.commons.lang3.LocaleUtils", (CharSequence) "org.apache.commons.lang3.LocaleUtils");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 0.0;
      String string0 = StringUtils.join(doubleArray0, '!', 522, 6);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new double[] {3.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      String string1 = StringUtils.abbreviate("", "Pshrzb0nxQAg?R", 6, 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWith("", "");
      assertTrue(boolean0);
      
      LinkedHashSet<CharBuffer> linkedHashSet0 = new LinkedHashSet<CharBuffer>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      
      char[] charArray0 = new char[0];
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      assertNotSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertEquals("", charBuffer1.toString());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isReadOnly());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      
      boolean boolean1 = linkedHashSet0.add(charBuffer0);
      assertNotSame(charBuffer0, charBuffer1);
      assertTrue(boolean1);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains(charBuffer0));
      
      CharBuffer charBuffer2 = CharBuffer.allocate(0);
      assertNotSame(charBuffer2, charBuffer0);
      assertNotSame(charBuffer2, charBuffer1);
      assertNotNull(charBuffer2);
      assertEquals(0, charBuffer2.limit());
      assertEquals(0, charBuffer2.position());
      assertFalse(charBuffer2.hasRemaining());
      assertEquals(0, charBuffer2.remaining());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals(0, charBuffer2.length());
      assertFalse(charBuffer2.isDirect());
      assertEquals("", charBuffer2.toString());
      assertTrue(charBuffer2.hasArray());
      assertEquals(0, charBuffer2.capacity());
      assertFalse(charBuffer2.isReadOnly());
      assertTrue(charBuffer2.equals((Object)charBuffer1));
      assertTrue(charBuffer2.equals((Object)charBuffer0));
      
      boolean boolean2 = linkedHashSet0.add(charBuffer2);
      assertNotSame(charBuffer2, charBuffer0);
      assertNotSame(charBuffer2, charBuffer1);
      assertFalse(boolean2);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(0, charBuffer2.limit());
      assertEquals(0, charBuffer2.position());
      assertFalse(charBuffer2.hasRemaining());
      assertEquals(0, charBuffer2.remaining());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals(0, charBuffer2.length());
      assertFalse(charBuffer2.isDirect());
      assertEquals("", charBuffer2.toString());
      assertTrue(charBuffer2.hasArray());
      assertEquals(0, charBuffer2.capacity());
      assertFalse(charBuffer2.isReadOnly());
      assertTrue(charBuffer2.equals((Object)charBuffer1));
      assertTrue(charBuffer2.equals((Object)charBuffer0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(linkedHashSet0.contains(charBuffer2));
      
      boolean boolean3 = linkedHashSet0.add(charBuffer0);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer0, charBuffer2);
      assertFalse(boolean3);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.equals((Object)charBuffer2));
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(linkedHashSet0.contains(charBuffer2));
      
      String string2 = StringUtils.join((Iterable<?>) linkedHashSet0, '!');
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(linkedHashSet0.contains(charBuffer2));
      
      boolean boolean4 = linkedHashSet0.add(charBuffer0);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer0, charBuffer2);
      assertFalse(boolean4);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.equals((Object)charBuffer2));
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(linkedHashSet0.contains(charBuffer2));
      
      String string3 = StringUtils.strip("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.substringAfterLast("", 6);
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      
      String string5 = StringUtils.center(";8h{kRDm{DxXkA]", 522);
      assertNotNull(string5);
      assertEquals("                                                                                                                                                                                                                                                             ;8h{kRDm{DxXkA]                                                                                                                                                                                                                                                             ", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean5 = StringUtils.contains((CharSequence) "", 6);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("u6/p", "u6/p", "'5R");
      assertNotNull(string0);
      assertEquals("'5R", string0);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "'5R", (CharSequence) "'5R");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.substringAfter("", "]");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substring("", 2698);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 2698);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 10);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string1));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, "", 0, 629);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 629
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      String string0 = StringUtils.repeat("...", "Strings must not be null", 56);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) string0, (CharSequence) "...");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "...", (CharSequence) string0, 797);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, 'd');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("...");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.remove("...", "org.apache.commons.lang3.Charsets");
      assertNotNull(string1);
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.substringsBetween("...", "Invalid locale format: ", "Invalid locale format: ");
      assertNull(stringArray1);
      
      String string2 = StringUtils.EMPTY;
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "", "xNT5Sa@@2_");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      String string3 = StringUtils.wrapIfMissing(string0, '>');
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean4 = StringUtils.isAllUpperCase("");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      
      String string4 = StringUtils.substringAfter(string3, "XCGv#grK+@5");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.substring((String) null, 797);
      assertNull(string5);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null, (-399));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string6 = StringUtils.upperCase((String) null);
      assertNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "...", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 9, "");
      assertNotNull(string0);
      assertEquals("         ", string0);
      
      String string1 = StringUtils.substringBefore("         ", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Strings must not be null", "Strings must not be null", 9);
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.center((String) null, (-2981), (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.trim((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.wrap("+^iy.BY9LR vs ", '8');
      assertNotNull(string3);
      assertEquals("8+^iy.BY9LR vs 8", string3);
      
      boolean boolean2 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean2);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.capitalize((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.join(stringArray0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(0, stringArray0.length);
      assertFalse(string5.equals((Object)string3));
      
      String string6 = "*k*k";
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      String string1 = StringUtils.defaultString("hPUSN*kH[p1tR_", " vs ");
      assertNotNull(string1);
      assertEquals("hPUSN*kH[p1tR_", string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "hPUSN*kH[p1tR_", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      int int0 = StringUtils.compare("org.apache.commons.lang3.LocaleUtils", "org.apache.commons.lang3.LocaleUtils", true);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("B_nVuzPW", '(');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("B_nVuzPW", "org.apache.commons.lang3.LocaleUtils");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      String string0 = StringUtils.capitalize("trp>swCR$s*4IS`B}j");
      assertEquals("Trp>swCR$s*4IS`B}j", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Trp>swCR$s*4IS`B}j";
      objectArray0[1] = (Object) "Trp>swCR$s*4IS`B}j";
      objectArray0[2] = (Object) "Trp>swCR$s*4IS`B}j";
      String string1 = StringUtils.join(objectArray0, "XQ71I+u");
      assertEquals("Trp>swCR$s*4IS`B}jXQ71I+uTrp>swCR$s*4IS`B}jXQ71I+uTrp>swCR$s*4IS`B}j", string1);
      
      String string2 = "/VgV=gK'*repFMl(d5g#g6G*\\u0";
      String string3 = StringUtils.chop(string2);
      assertEquals("/VgV=gK'*repFMl(d5g#g6G*\\u", string3);
      
      StringUtils.stripStart((String) null, "f\"M5x-Hx");
      String string4 = StringUtils.substringBeforeLast((String) null, "Trp>swCR$s*4IS`B}jXQ71I+uTrp>swCR$s*4IS`B}jXQ71I+uTrp>swCR$s*4IS`B}j");
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAlphanumeric("trp>swCR$s*4IS`B}j");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Trp>swCR$s*4IS`B}jXQ71I+uTrp>swCR$s*4IS`B}jXQ71I+uTrp>swCR$s*4IS`B}j";
      StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      StringUtils.replaceFirst("trp>swCR$s*4IS`B}j", "trp>swCR$s*4IS`B}j", "f0@n?2Lw#>V");
      String string5 = StringUtils.rotate("+^iy.BY9LR vs ", (-1420));
      assertEquals("Y9LR vs +^iy.B", string5);
      
      StringUtils.equals((CharSequence) null, (CharSequence) "o#5_&V<i,#y");
      String string6 = StringUtils.replace(string2, "\r", "h:|");
      assertEquals("/VgV=gK'*repFMl(d5g#g6G*\\u0", string6);
      
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = StringUtils.getBytes("-3", charset0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      StringUtils.stripToNull(" ");
      String string0 = StringUtils.EMPTY;
      StringUtils.equalsIgnoreCase((CharSequence) null, "");
      StringUtils.abbreviate(".................................................................................................. vs ", " ", 3022, 3);
      String[] stringArray0 = StringUtils.substringsBetween(" ", "u(\"5", "$.Il&O]STF'b=bV|{+");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      String string0 = StringUtils.wrap("|N", "");
      assertEquals("|N", string0);
      
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.equalsAny("", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Locale must not be null", "\r", 8, 8);
      assertEquals("\rust no\r", string0);
      
      String string1 = StringUtils.upperCase("\rust no\r");
      assertEquals("\rUST NO\r", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", "EX'O0mj3(L[s\"CIKZ@");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("\r");
      assertFalse(boolean0);
      
      String string2 = StringUtils.defaultString("S");
      assertEquals("S", string2);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      StringUtils.isAllEmpty((CharSequence[]) null);
      String string0 = StringUtils.trim("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "p]V}~`<>", "K9zr6aBQ~W<ak");
      boolean boolean1 = StringUtils.isAllUpperCase("K9zr6aBQ~W<ak");
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "K9zr6aBQ~W<ak", "K9zr6aBQ~W<ak");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 18;
      longArray0[2] = (long) (-4527);
      longArray0[2] = (long) 18;
      String string0 = StringUtils.join(longArray0, '1', 1998, (-4527));
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEachRepeatedly("P;:'Vib", stringArray0, stringArray0);
      assertEquals("P;:'Vib", string1);
      
      String string2 = StringUtils.leftPad("", 1998);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "z3=N.~.U^");
      Locale locale0 = Locale.ITALIAN;
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      linkedList1.replaceAll(unaryOperator0);
      StringUtils.join((Iterator<?>) listIterator0, "...");
      assertTrue(listIterator0.hasPrevious());
      
      String string0 = StringUtils.stripEnd("z3=N.~.U^", "z3=N.~.U^");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "0");
      boolean boolean0 = StringUtils.isAlphanumeric("0");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceEachRepeatedly("", (String[]) null, (String[]) null);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ";9mIJUXj$";
      stringArray0[1] = ")#Fr!Hr>RNM@/N&";
      stringArray0[2] = ")#Fr!Hr>RNM@/N&";
      stringArray0[3] = ")#Fr!Hr>RNM@/N&";
      String string0 = StringUtils.replaceEach(")#Fr!Hr>RNM@/N&", stringArray0, stringArray0);
      String string1 = StringUtils.replaceOnce(")#Fr!Hr>RNM@/N&", " vs ", ";9mIJUXj$");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      StringUtils.substringBetween("'D#;vqYE;lQ>", "i<&oN$)<03`A_m");
      Stack<String> stack0 = new Stack<String>();
      ArrayList<String> arrayList0 = new ArrayList<String>(stack0);
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "'D#;vqYE;lQ>");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Lze4n";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Lze4n", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      StringUtils.repeat("KE_|y", 0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      StringUtils.replaceEach("", stringArray0, stringArray0);
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      linkedList0.addLast(locale_FilteringMode0);
      ListIterator<Locale.FilteringMode> listIterator0 = linkedList0.listIterator();
      StringUtils.join((Iterator<?>) listIterator0, "");
      try { 
        StringUtils.getBytes("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.apache.commons.lang3.StringUtils");
      StringUtils.isAnyEmpty(stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      StringUtils.join(objectArray0);
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("java.lang.Object@436cd98d");
      StringUtils.isAnyEmpty(stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = 1488;
      linkedList0.listIterator();
      // Undeclared exception!
      try { 
        linkedList0.listIterator(1488);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1488, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[2];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      String string0 = StringUtils.join(locale_FilteringModeArray0);
      assertEquals("IGNORE_EXTENDED_RANGESMAP_EXTENDED_RANGES", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("qn\"_*D_5b");
      assertNotNull(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      StringUtils.capitalize("+^iy.BY9LR");
      StringUtils.strip("+^iy.BY9LR");
      StringUtils.equals((CharSequence) "+^iy.BY9LR", (CharSequence) "+^iy.BY9LR");
      StringUtils.replaceOnce("Py(gM1WJGol7", "+^iy.BY9LR", "Py(gM1WJGol7");
      StringUtils.wrap("+^iy.BY9LR", "Py(gM1WJGol7");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "yT066j,Ouw4");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // yT066j,Ouw4
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.leftPad(" ", 9, " ");
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissing("         ", " ", charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastOrdinalIndexOf("         ", "         ", 9);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "         ", (CharSequence) "         ");
      assertEquals(0, int1);
      
      String string2 = StringUtils.substringBefore("         ", "         ");
      boolean boolean0 = StringUtils.isAlpha(" ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringAfter("dIX?2w*7", (-1));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.unwrap("u", 'D');
      assertEquals("u", string4);
      
      String string5 = StringUtils.wrapIfMissing("DEOrI}I8JHCS", 'D');
      assertEquals("DEOrI}I8JHCSD", string5);
      
      StringUtils.isAllUpperCase("");
      double double0 = StringUtils.getJaroWinklerDistance("", " ");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      StringUtils.removePattern("org", "org");
      StringUtils.wrap("22", "");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org";
      stringArray0[1] = "org";
      stringArray0[2] = "22";
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.isAlphanumeric("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "org.apache.commons.lang3.RegExUtils");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.lang3.RegExUtils
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      String string0 = StringUtils.unwrap("", 'M');
      String string1 = StringUtils.wrapIfMissing("", '\u008A');
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      char char0 = 'p';
      int int0 = 149;
      StringUtils.join(objectArray0, 'p', 4150, 149);
      StringUtils.unwrap("", 'p');
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      String string0 = null;
      String string1 = ", Length: ";
      StringUtils.removeIgnoreCase((String) null, ", Length: ");
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) ", Length: ";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) ", Length: ";
      String string2 = "Minimum abbreviation width is %d";
      Locale locale0 = null;
      try {
        locale0 = new Locale((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Locale must not be null", "\r", 8, 2698);
      assertEquals("Locale must not be null", string0);
      
      String string1 = StringUtils.upperCase("");
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Locale must not be null", (CharSequence) "");
      StringUtils.trim("");
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("o%(P]/|$6|gi]", "Iwcd/at0&srmbo4dv");
      assertEquals(3, stringArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = 'x';
      charArray0[2] = 'B';
      charArray0[3] = ';';
      charArray0[4] = 'H';
      charArray0[5] = 'A';
      charArray0[6] = '!';
      charArray0[7] = ' ';
      charArray0[8] = 'g';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.CR;
      charSequenceArray0[0] = (CharSequence) "\r";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      String string2 = StringUtils.wrap(":@9wg", "ulG");
      assertEquals("ulG:@9wgulG", string2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 't';
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertFalse(boolean1 == boolean0);
      
      StringUtils.substring((String) null, 5);
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "ulG:@9wgulG", (CharSequence) "\r", (-495));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("ulG:@9wgulG", "l", 1466);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.ArrayUtils", "Rq*z`u2h, Length: 0");
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      String string0 = StringUtils.replace("org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils", (-1994));
      char[] charArray0 = new char[7];
      charArray0[5] = '[';
      charArray0[2] = '[';
      charArray0[3] = 't';
      charArray0[5] = 'e';
      charArray0[6] = '_';
      int int0 = StringUtils.indexOfAny((CharSequence) "org.apache.commons.lang3.CharUtils", charArray0);
      assertEquals(9, int0);
      
      String string1 = StringUtils.center("org.apache.commons.lang3.CharUtils", 9);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils", 9);
      assertEquals(9, stringArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("org.apache.commons.lang3.CharUtils");
      assertEquals(34, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      String string0 = StringUtils.substringBetween("org.apache.commons.lang3.ArrayUtils", "org.apache.commons.lang3.ArrayUtils");
      assertNull(string0);
      
      StringUtils.containsWhitespace((CharSequence) null);
      String[] stringArray0 = StringUtils.split("Rq*z`u2h, Length: 0", "Rq*z`u2h, Length: 0");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      Object object0 = new Object();
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "=</3TNdn{";
      String[] stringArray0 = new String[1];
      charSequenceArray0[2] = (CharSequence) "*hPk*hPk";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      String string0 = StringUtils.repeat("DP*Dn$a", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("DP*Dn$a", 'a');
      assertEquals("DP*Dn$", string1);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      String string2 = StringUtils.join((List<?>) vector0, 'a', 0, 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("u6/p", "u6/p", "'5R");
      assertEquals("'5R", string0);
      
      StringUtils.isAlpha("'5R");
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "'5R", (CharSequence) "'5R");
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      charArray0[2] = 'F';
      charArray0[3] = 'F';
      charArray0[4] = 'W';
      charArray0[5] = 'F';
      charArray0[6] = 'F';
      charArray0[7] = 'F';
      charArray0[8] = 'F';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "u6/p", charArray0);
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat("'5R", (String) null, 2095);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      String string0 = ", Length: 0";
      char[] charArray0 = null;
      StringUtils.valueOf((char[]) null);
      StringUtils.indexOf((CharSequence) null, (CharSequence) ", Length: 0", 10);
      StringUtils.replaceOnce(", Length: 0", ", Length: 0", (String) null);
      StringUtils.getLevenshteinDistance((CharSequence) ", Length: 0", (CharSequence) ", Length: 0");
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(", Length: 0", ", Length: 0", 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 12
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      char char0 = 'X';
      StringUtils.replaceChars((String) null, 'X', 'X');
      StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 2095);
      StringUtils.getCommonPrefix((String[]) null);
      StringUtils.containsWhitespace("");
      StringUtils.substringAfter(" in an array of ", (-1));
      StringUtils.abbreviate("", "*`:J%q{7pU!LRd", (-1), 2406);
      StringUtils.chop("Locale must not be null");
      StringUtils.chomp(" in an array of ");
      StringUtils.uncapitalize(" in an array of ");
      StringUtils.startsWithAny((CharSequence) null, (CharSequence[]) null);
      StringUtils.removeStart("Rfuq0YJf", (String) null);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-2221);
      shortArray0[2] = (short)411;
      shortArray0[3] = (short)4;
      shortArray0[4] = (short)2453;
      shortArray0[5] = (short)925;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'X', (int) (short) (-2221), (int) (short)925);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2221
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      StringUtils.wrapIfMissing("org.apache.commons.lang3.StringUtils", 'N');
      StringUtils.isAllUpperCase("Norg.apache.commons.lang3.StringUtilsN");
      StringUtils.substringAfter("org.apache.commons.lang3.StringUtils", "Norg.apache.commons.lang3.StringUtilsN");
      StringUtils.removeStart("Locale must not be null", "Rq*z`u2h, Length: 0");
      StringUtils.contains((CharSequence) "Rq*z`u2h, Length: 0", (CharSequence) "");
      StringUtils.abbreviate("_BOOW>!j3St", 56);
      String string0 = StringUtils.join((double[]) null, 'R');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("+^iy.BY9LR", 'u');
      assertNotNull(string0);
      assertEquals("+^iy.BY9LR", string0);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      String string0 = StringUtils.strip((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.replace((String) null, "myWH:a_JY", (String) null, 0);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "myWH:a_JY";
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) null;
      boolean boolean0 = StringUtils.contains(charSequenceArray0[0], 0);
      assertFalse(boolean0);
      
      StringUtils.indexOfIgnoreCase(charSequenceArray0[1], charSequenceArray0[1]);
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "myWH:a_JY";
      stringArray0[3] = null;
      stringArray0[4] = "Array and element cannot both be null";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("n0Y*%vEZo)l ");
      assertEquals(10, stringArray2.length);
      
      String string2 = StringUtils.substringAfterLast("WZ.QidA3B(+mD", (String) null);
      assertEquals("", string2);
      
      String string3 = StringUtils.join((Object[]) stringArray0, '0');
      assertNotSame(stringArray0, stringArray1);
      assertEquals("00myWH:a_JY00Array and element cannot both be null", string3);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      StringUtils.isAllUpperCase("o#5_&V<i,#y");
      String string0 = StringUtils.repeat("o#5_&V<i,#y", "o#5_&V<i,#y", 8192);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, 'Y');
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      String string1 = StringUtils.substringBefore("", (-1));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase((String) null, (String) null, (String) null);
      assertNull(string0);
      
      Locale locale0 = Locale.FRENCH;
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "gLiOD,PZ>\n", (CharSequence) "gLiOD,PZ>\n", 3418);
      Integer integer0 = new Integer(16);
      StringUtils.stripToNull("gLiOD,PZ>\n");
      StringUtils.swapCase((String) null);
      String string0 = StringUtils.removeEnd((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      String string0 = StringUtils.substring("", 8192);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.rightPad("", 8192, "");
      assertNotNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase("", "");
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) string1);
      int int1 = StringUtils.ordinalIndexOf("", "", 8192);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      String string0 = StringUtils.stripEnd("T9|Z{[0?a,-", "T9|Z{[0?a,-");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("\r\r");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      StringUtils.isAnyEmpty(charSequenceArray0);
      String string0 = StringUtils.replaceChars((String) null, "iZA3[Jd?", "iZA3[Jd?");
      assertNull(string0);
      
      StringUtils.substringAfterLast("#y,PG", (String) null);
      StringUtils.isEmpty((CharSequence) null);
      StringUtils.isNotBlank("");
      StringUtils.countMatches((CharSequence) null, '1');
      String string1 = StringUtils.substringBefore((String) null, 99);
      assertNull(string1);
      
      StringUtils.toRootUpperCase((String) null);
      String string2 = StringUtils.swapCase("Cannot store ");
      assertEquals("cANNOT STORE ", string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Cannot store ");
      assertEquals(5, stringArray0.length);
      
      StringUtils.containsAnyIgnoreCase("iZA3[Jd?", charSequenceArray0);
      StringUtils.lastIndexOf((CharSequence) "#y,PG", 2);
      StringUtils.indexOf((CharSequence) null, 55, 85);
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "cANNOT STORE ");
      assertEquals(0, int0);
      
      String string3 = StringUtils.strip("fb3X*xkNQA");
      assertEquals("fb3X*xkNQA", string3);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "fb3X*xkNQA", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("?'G", (-2382));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      StringUtils.defaultIfBlank("", "");
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      Locale.lookup(arrayList0, arrayList1);
      int int1 = StringUtils.getFuzzyDistance("", "", locale0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      CharSequence[] charSequenceArray1 = new CharSequence[7];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("o#5_&V<i,#y", "o#5_&V<i,#y", "o#5_&V<i,#y");
      assertEquals("o#5_&V<i,#y", string0);
      
      String string1 = StringUtils.substringAfter("UpA{-?;'4{pSY,KVc", "offset cannot be negative");
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (-39));
      assertFalse(boolean0);
      
      String string2 = StringUtils.uncapitalize("UpA{-?;'4{pSY,KVc");
      assertEquals("upA{-?;'4{pSY,KVc", string2);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("CCCCCCCCCCCCCCCCCCC -F?LI3uAzw -F?LI3uAzw");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      String string0 = "*k*k";
      StringUtils.containsOnly((CharSequence) null, "*k*k");
      StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      String string1 = "...";
      StringUtils.removeStartIgnoreCase("*k*k", "...");
      char[] charArray0 = new char[0];
      StringUtils.indexOfAnyBut((CharSequence) "*k*k", charArray0);
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'i', (-1), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("ejhlm{fM", "+x~/X@TzkAHL]O", 0);
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      String string0 = StringUtils.removeIgnoreCase("", "G59mx(wEd");
      assertEquals("", string0);
      
      StringUtils.defaultIfBlank("", "");
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (-1));
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.replaceChars("5D2aa1", 'V', 'V');
      assertNotNull(string1);
      assertEquals("5D2aa1", string1);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("ejhlm{fM", string2);
      
      String string3 = StringUtils.repeat("", ">qoGexBGN", (-1));
      String string4 = StringUtils.strip("", "rf`u*x");
      assertTrue(string4.equals((Object)string3));
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      Iterator<CharBuffer> iterator0 = treeSet0.descendingIterator();
      String string5 = StringUtils.join(iterator0, 'V');
      assertNotNull(string5);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) ':';
      doubleArray0[1] = (double) 'V';
      doubleArray0[2] = (double) ':';
      doubleArray0[3] = (double) ':';
      doubleArray0[4] = (double) 'V';
      doubleArray0[5] = (double) ':';
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (-1586.5655113179564);
      String string6 = StringUtils.join(doubleArray0, ':');
      assertNotNull(string6);
      assertEquals("58.0:86.0:58.0:58.0:86.0:58.0:-1.0:-1586.5655113179564", string6);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      String string0 = StringUtils.overlay("org.apache.commons.lang3.LocaleUtils", "Strings must not be null", 529, 16);
      assertEquals("org.apache.commoStrings must not be null", string0);
      
      StringUtils.isAllUpperCase("org.apache.commoStrings must not be null");
      String string1 = StringUtils.abbreviate("org.apache.commons.lang3.LocaleUtils", "Strings must not be null", 111);
      assertEquals("org.apache.commons.lang3.LocaleUtils", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "maxWith cannot be negative";
      String string2 = StringUtils.prependIfMissingIgnoreCase("maxWith cannot be negative", "org.apache.commoStrings must not be null", charSequenceArray0);
      StringUtils.substringBefore(" vs +^iy.BY9LR", "1{::d<s'\"74M_A)");
      String string3 = StringUtils.deleteWhitespace("Strings must not be null");
      assertEquals("Stringsmustnotbenull", string3);
      
      String string4 = StringUtils.defaultString("maxWith cannot be negative");
      assertTrue(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      String string0 = StringUtils.difference("|NoTquVatc8 zWjmtoTquVatc8 zWjm", "|NoTquVatc8 zWjmtoTquVatc8 zWjm");
      String string1 = StringUtils.abbreviate("", "|NoTquVatc8 zWjmtoTquVatc8 zWjm", (-2816), (-2816));
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, "^9SU");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      String string0 = StringUtils.chomp("org.apache.commons.lang3.ObjectUtils$Null");
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string0);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      StringUtils.join((long[]) null, 'n', (-1343), (-1343));
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Integer integer0 = new Integer((-1343));
      arrayDeque0.add(integer0);
      Integer integer1 = new Integer((-1343));
      arrayDeque0.add(integer1);
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      arrayDeque0.containsAll(set0);
      Vector<Object> vector0 = new Vector<Object>(arrayDeque0);
      vector0.add((Object) null);
      String string0 = StringUtils.join((Iterable<?>) vector0, 'n');
      assertEquals("-1343n-1343n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("Rq*z`u2h");
      assertTrue(boolean0);
      
      String string1 = StringUtils.defaultString("Rq*z`u2h");
      assertEquals("Rq*z`u2h", string1);
      
      Integer integer2 = new Integer('n');
      StringUtils.leftPad("3]%7(2Ze", 1711, "F[kS8t[L\"+vz&{");
      String string2 = StringUtils.substringBefore("F[kS8t[L\"+vz&{", "");
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "t#", (-3083));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      String string0 = "";
      StringUtils.substringBefore("", "");
      String string1 = "i2VhlEq7^";
      try { 
        StringUtils.getBytes("i2VhlEq7^", "i2VhlEq7^");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      String string0 = "Minimum abbreviation width is %d";
      try { 
        StringUtils.getBytes("C7~lDk1ed7,", "Minimum abbreviation width is %d");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }
}
