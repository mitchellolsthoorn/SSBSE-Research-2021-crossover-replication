/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:06:29 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Supplier;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      String string0 = StringUtils.difference("Object varargs must not be null", "yoUC=}32{,nDV");
      assertNotNull(string0);
      assertEquals("yoUC=}32{,nDV", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "yoUC=}32{,nDV", (CharSequence) "yoUC=}32{,nDV");
      assertEquals(1, int0);
      
      String string1 = StringUtils.repeat('}', 1);
      assertNotNull(string1);
      assertEquals("}", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "}", (CharSequence) "yoUC=}32{,nDV", 1413);
      assertEquals(13, int1);
      assertFalse(int1 == int0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "}");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("}", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = '}';
      charArray0[5] = '}';
      charArray0[7] = '}';
      charArray0[8] = '}';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) charBuffer0, charArray0);
      assertArrayEquals(new char[] {'/', '}', '}', '}', '}', '}', '\u0000', '}', '}'}, charArray0);
      assertEquals((-1), int2);
      assertEquals(9, charArray0.length);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("}", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, 'q');
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, shortArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (int) 'q');
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("", 0, "org.apache.commons.lang3.Charsets");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "org.apache.commons.lang3.Charsets";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "org.apache.commons.lang3.Charsets";
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[5] = object1;
      objectArray0[6] = (Object) "org.apache.commons.lang3.Charsets";
      String string2 = StringUtils.join(objectArray0, '`');
      assertNotNull(string2);
      assertEquals(7, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.unwrap("Supplied value must be a valid byte literal between -32768 and 32767: [N4", 'q');
      assertNotNull(string3);
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [N4", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.unwrap("2`J", "");
      assertNotNull(string4);
      assertEquals("2`J", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "2`J", 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.join((long[]) null, '`', 1248, 2);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("k$8\"", "k$8\"", 4);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("k$8\"");
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripAccents("`$Q6b\"eY=J");
      assertNotNull(string0);
      assertEquals("`$Q6b\"eY=J", string0);
      
      String string1 = StringUtils.abbreviate("Y]o;", 4, 4);
      assertNotNull(string1);
      assertEquals("Y]o;", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((CharSequence) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) null, supplier0);
      assertNull(charSequence0);
      
      String string0 = StringUtils.stripAccents(" has no clone method");
      assertNotNull(string0);
      assertEquals(" has no clone method", string0);
      
      Supplier<CharSequence> supplier1 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence1 = StringUtils.getIfBlank((CharSequence) " has no clone method", supplier1);
      assertNotNull(charSequence1);
      assertEquals(" has no clone method", charSequence1);
      assertTrue(charSequence1.equals((Object)string0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = 'L';
      charArray0[5] = 'L';
      charArray0[6] = 'L';
      int int0 = StringUtils.indexOfAny((CharSequence) " has no clone method", charArray0);
      assertArrayEquals(new char[] {'L', 'L', 'L', 'L', '\u0000', 'L', 'L'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(7, charArray0.length);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains(" has no clone method"));
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(" has no clone method");
      assertTrue(arrayList0.contains(" has no clone method"));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Iterator<String> iterator0 = arrayList0.iterator();
      assertTrue(arrayList0.contains(" has no clone method"));
      assertNotNull(iterator0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      String string1 = StringUtils.join(iterator0, " has no clone method");
      assertTrue(arrayList0.contains(" has no clone method"));
      assertNotNull(string1);
      assertEquals(" has no clone method", string1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence1));
      
      String string2 = StringUtils.removeStart("JmsK^ZA?", "O");
      assertNotNull(string2);
      assertEquals("JmsK^ZA?", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence1));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      String string0 = StringUtils.leftPad("aQ^ B0KCR%", (-1068), "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("aQ^ B0KCR%", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripToNull("aQ^ B0KCR%");
      assertNotNull(string1);
      assertEquals("aQ^ B0KCR%", string1);
      assertTrue(string1.equals((Object)string0));
      
      Class<CharBuffer> class0 = CharBuffer.class;
      ServiceLoader<CharBuffer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      
      StringWriter stringWriter0 = new StringWriter(2761);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "aQ^ B0KCR%");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("aQ^ B0KCR%", stringWriter0.toString());
      assertEquals("aQ^ B0KCR%", stringWriter1.toString());
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringBuffer0);
      assertEquals("aQ^ B0KCR%", stringWriter0.toString());
      assertEquals("aQ^ B0KCR%", stringWriter1.toString());
      assertEquals(10, stringBuffer0.length());
      assertEquals("aQ^ B0KCR%", stringBuffer0.toString());
      
      boolean boolean1 = StringUtils.equals((CharSequence) "aQ^ B0KCR%", (CharSequence) stringBuffer0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertTrue(boolean1);
      assertEquals("aQ^ B0KCR%", stringWriter0.toString());
      assertEquals("aQ^ B0KCR%", stringWriter1.toString());
      assertEquals(10, stringBuffer0.length());
      assertEquals("aQ^ B0KCR%", stringBuffer0.toString());
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.repeat("*5Xmu4,|,q", 50);
      assertNotNull(string2);
      assertEquals("*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q*5Xmu4,|,q", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.capitalize("{%kXR'");
      assertNotNull(string3);
      assertEquals("{%kXR'", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("ko}T_4b-.P6", "wnMSj%:bB", 5);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("r+)HMdAw0{");
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripAccents("`$Q6b\"eY=J");
      assertNotNull(string0);
      assertEquals("`$Q6b\"eY=J", string0);
      
      boolean boolean1 = StringUtils.startsWithAny("wnMSj%:bB", stringArray0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)256;
      shortArray0[1] = (short)23;
      shortArray0[2] = (short)50;
      shortArray0[3] = (short)23;
      shortArray0[4] = (short)23;
      shortArray0[5] = (short)23;
      shortArray0[6] = (short)256;
      String string1 = StringUtils.join(shortArray0, '<', 4, 5);
      assertArrayEquals(new short[] {(short)256, (short)23, (short)50, (short)23, (short)23, (short)23, (short)256}, shortArray0);
      assertNotNull(string1);
      assertEquals("23", string1);
      assertEquals(7, shortArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.lowerCase("wnMSj%:bB");
      assertNotNull(string2);
      assertEquals("wnmsj%:bb", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.appendIfMissing("wnmsj%:bb", "23", stringArray0);
      assertNotNull(string3);
      assertEquals("wnmsj%:bb23", string3);
      assertEquals(1, stringArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.Charsets";
      charSequenceArray0[1] = (CharSequence) "wnmsj%:bb";
      charSequenceArray0[2] = (CharSequence) "`$Q6b\"eY=J";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "r+)HMdAw0{";
      charSequenceArray0[5] = (CharSequence) "wnMSj%:bB";
      charSequenceArray0[6] = (CharSequence) "wnMSj%:bB";
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean2);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string4 = StringUtils.swapCase("org.apache.commons.lang3.CharUtils");
      assertNotNull(string4);
      assertEquals("ORG.APACHE.COMMONS.LANG3.cHARuTILS", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '1';
      charArray0[4] = '<';
      charArray0[5] = '<';
      charArray0[6] = '<';
      int int0 = StringUtils.indexOfAny((CharSequence) "org.apache.commons.lang3.CharUtils", charArray0);
      assertArrayEquals(new char[] {'<', '<', '<', '1', '<', '<', '<'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      String string0 = StringUtils.stripEnd("{b>;w&ymP^T#/G|(~]R", (String) null);
      assertNotNull(string0);
      assertEquals("{b>;w&ymP^T#/G|(~]R", string0);
      
      String string1 = StringUtils.removeEnd("org.apache.commons.lang3.exception.CloneFailedException", "Index: ");
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n", "\n");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.substringBefore("\n", "\n");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripAccents("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.abbreviate("`m", (-1), 1363);
      assertNotNull(string3);
      assertEquals("`m", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int[] intArray0 = StringUtils.toCodePoints("\n");
      assertArrayEquals(new int[] {10}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\n");
      assertFalse(boolean0);
      
      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<CharBuffer> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String string4 = StringUtils.join(iterator0, "`m");
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.deleteWhitespace("5@m=pQ;IIiDPO4UOv");
      assertNotNull(string0);
      assertEquals("5@m=pQ;IIiDPO4UOv", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "5@m=pQ;IIiDPO4UOv", 64);
      assertEquals(1, int0);
      
      String string1 = StringUtils.removeAll("r+)HMdAw0{", ", Length: ");
      assertNotNull(string1);
      assertEquals("r+)HMdAw0{", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.deleteWhitespace("r+)HMdAw0{]\"@82CP8m_Z zp*J");
      assertNotNull(string2);
      assertEquals("r+)HMdAw0{]\"@82CP8m_Zzp*J", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.rightPad("XZZwgl", 36, ",rsZ)*");
      assertNotNull(string3);
      assertEquals("XZZwgl,rsZ)*,rsZ)*,rsZ)*,rsZ)*,rsZ)*", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.join((Object[]) null, '+');
      assertNull(string4);
      
      String string5 = StringUtils.remove("d&/,\f-@JlM_pT:vRd&/,\f-@JlM_pT:vR", "'");
      assertNotNull(string5);
      assertEquals("d&/,\f-@JlM_pT:vRd&/,\f-@JlM_pT:vR", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.wrapIfMissing((String) null, "org.apache.commons.lang3.StringUtils");
      assertNull(string6);
      
      String string7 = StringUtils.chop((String) null);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = StringUtils.split("", '{');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.normalizeSpace("{b>;w&ymP^T#/G|(~]R");
      assertNotNull(string1);
      assertEquals("{b>;w&ymP^T#/G|(~]R", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripAccents("{b>;w&ymP^T#/G|(~]R");
      assertNotNull(string2);
      assertEquals("{b>;w&ymP^T#/G|(~]R", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-42);
      String string3 = StringUtils.join(byteArray0, '6', 1221, (-3738));
      assertArrayEquals(new byte[] {(byte) (-42)}, byteArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(1, byteArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.rightPad("", (-2685), '6');
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String[] stringArray1 = StringUtils.substringsBetween("", "{b>;w&ymP^T#/G|(~]R", "iIK");
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, ']', (-32768), 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -32768
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      String string0 = StringUtils.repeat("The character ", (-145));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.normalizeSpace("The character ");
      assertNotNull(string1);
      assertEquals("The character", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumeric("The character ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.difference("\r", "");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The character ", (CharSequence) "The character", 3942);
      assertEquals(0, int0);
      
      String string3 = StringUtils.substringBefore((String) null, "\r");
      assertNull(string3);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.uncapitalize((String) null);
      assertNull(string4);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "The character";
      stringArray0[1] = "N]LA{3ZrIL0=R|uVrP8";
      stringArray0[2] = "The character";
      stringArray0[3] = "";
      stringArray0[4] = "The character ";
      stringArray0[5] = null;
      stringArray0[6] = null;
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("The character ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      String string0 = StringUtils.repeat("The character ", (-145));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.normalizeSpace("The character ");
      assertNotNull(string1);
      assertEquals("The character", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumeric("The character ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.difference("\r", "");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The character ", (CharSequence) "The character", 3942);
      assertEquals(0, int0);
      
      String string3 = StringUtils.substringBefore((String) null, "\r");
      assertNull(string3);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.uncapitalize((String) null);
      assertNull(string4);
      
      String[] stringArray0 = new String[7];
      stringArray0[1] = "N]LA{3ZrIL0=R|uVrP8";
      stringArray0[2] = "The character";
      stringArray0[3] = "";
      stringArray0[4] = "The character ";
      stringArray0[5] = null;
      stringArray0[6] = null;
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("The character ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2098;
      shortArray0[1] = (short) (-898);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)476;
      shortArray0[4] = (short)22;
      shortArray0[5] = (short)67;
      shortArray0[6] = (short)19;
      shortArray0[7] = (short)3672;
      String string0 = StringUtils.join(shortArray0, 'k', (-73), (int) (short) (-898));
      assertArrayEquals(new short[] {(short)2098, (short) (-898), (short) (-1), (short)476, (short)22, (short)67, (short)19, (short)3672}, shortArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(8, shortArray0.length);
      
      String string1 = StringUtils.abbreviate("{b>;w&ymP^T#/G|(~]R", 2147483645, 13);
      assertNotNull(string1);
      assertEquals("...^T#/G|(~]R", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "{b>;w&ymP^T#/G|(~]R");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<CharBuffer> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(48);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(48, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(48, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(48, charBuffer0.limit());
      assertEquals(48, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      
      boolean boolean0 = linkedList0.add(charBuffer0);
      assertTrue(linkedList0.contains(charBuffer0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(48, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(48, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(48, charBuffer0.limit());
      assertEquals(48, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, 'V');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      String string0 = StringUtils.getIfBlank("", supplier0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chomp("|iN_.4'WKb", (String) null);
      assertNotNull(string1);
      assertEquals("|iN_.4'WKb", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, '7');
      assertFalse(linkedList0.contains('7'));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string1 = StringUtils.leftPad("Fg4ez'Tvpg9OR|", 44);
      assertNotNull(string1);
      assertEquals("                              Fg4ez'Tvpg9OR|", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("'1']w>>Gz", 11);
      assertNotNull(string2);
      assertEquals(" '1']w>>Gz ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(charSequenceArray0[1]);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string3 = StringUtils.replace("", "{b>;w&ymP^T#/G|(~]R5@m=pQ;IIiDPO4UOv", "Object varargs must not be null");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.strip("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.overlay("NNJJJ(>;Z?(dD:$y^", "", 0, 0);
      assertNotNull(string2);
      assertEquals("NNJJJ(>;Z?(dD:$y^", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.left("", 0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.strip((String) null, (String) null);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "*n@^D47zIYx`#\"ladn", 235);
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase((String) null, "*n@^D47zIYx`#\"ladn", stringArray0);
      assertNull(string2);
      assertEquals(10, stringArray0.length);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("The character ", (CharSequence) null, stringArray0);
      assertNotNull(string3);
      assertEquals("The character ", string3);
      assertEquals(10, stringArray0.length);
      
      String string4 = StringUtils.rightPad((String) null, 62, "The character ");
      assertNull(string4);
      
      String string5 = StringUtils.chomp("The character ");
      assertNotNull(string5);
      assertEquals("The character ", string5);
      assertTrue(string5.equals((Object)string3));
      
      String string6 = StringUtils.substringBefore((String) null, "EUnp");
      assertNull(string6);
      
      boolean boolean0 = StringUtils.isNumericSpace("*n@^D47zIYx`#\"ladn");
      assertFalse(boolean0);
      
      String string7 = StringUtils.deleteWhitespace("*n@^D47zIYx`#\"ladn");
      assertNotNull(string7);
      assertEquals("*n@^D47zIYx`#\"ladn", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      
      String string8 = StringUtils.substringBefore(", Length: ", 235);
      assertNotNull(string8);
      assertEquals(", Length: ", string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      
      String string9 = StringUtils.defaultString("@rxeMy?#JqGE,Rm}");
      assertNotNull(string9);
      assertEquals("@rxeMy?#JqGE,Rm}", string9);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "@rxeMy?#JqGE,Rm}", (CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(10, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOfAny(", Length: ", stringArray0);
      assertEquals(10, int1);
      assertEquals(10, stringArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("H:Wb_hfN^KZfu<q0j;", "...", 1);
      assertNotNull(string0);
      assertEquals("H:Wb_hfN^KZfu<q0j;", string0);
      
      String string1 = StringUtils.defaultString("vZQ");
      assertNotNull(string1);
      assertEquals("vZQ", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "vZQ";
      charSequenceArray0[2] = (CharSequence) "";
      String string2 = StringUtils.appendIfMissingIgnoreCase("", "H:Wb_hfN^KZfu<q0j;", charSequenceArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "...", (CharSequence) "", (-1126));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("U|[GGg4q2m", 'm');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.removeStart("5@m=pQ;IIiDPO4UOv", "{b>;w&ymP^T#/G|(~]R");
      assertNotNull(string0);
      assertEquals("5@m=pQ;IIiDPO4UOv", string0);
      
      String string1 = StringUtils.leftPad("5@m=pQ;IIiDPO4UOv", 5);
      assertNotNull(string1);
      assertEquals("5@m=pQ;IIiDPO4UOv", string1);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'W';
      charArray0[4] = 'm';
      charArray0[5] = 'm';
      charArray0[6] = 'm';
      charArray0[7] = 'm';
      charArray0[8] = 'm';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "5@m=pQ;IIiDPO4UOv", charArray0);
      assertArrayEquals(new char[] {'m', 'm', 'm', 'W', 'm', 'm', 'm', 'm', 'm'}, charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      
      int int0 = new Integer('W');
      assertEquals(87, int0);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("NsULy+-m^YqQL41a5S", 'S');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.removeStart("5@m=pQ;IIiDPO4UOv", "...");
      assertNotNull(string0);
      assertEquals("5@m=pQ;IIiDPO4UOv", string0);
      
      String string1 = StringUtils.leftPad("NsULy+-m^YqQL41a5S", (int) 'S');
      assertNotNull(string1);
      assertEquals("                                                                 NsULy+-m^YqQL41a5S", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "...");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1561.19059667);
      doubleArray0[1] = (double) '';
      doubleArray0[2] = 1.0;
      String string0 = StringUtils.abbreviateMiddle("%9Z85}C#W", "o?", (-370));
      assertNotNull(string0);
      assertEquals("%9Z85}C#W", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "o?", (CharSequence) "%9Z85}C#W");
      assertEquals(9, int0);
      
      boolean boolean0 = StringUtils.isNotBlank("%9Z85}C#W");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "%9Z85}C#W";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "m$:$1s4[Ru/");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "o?", (CharSequence) "o?", (-370));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      String string0 = StringUtils.leftPad("Strings must not be null", (-1517), '7');
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
      
      int int0 = StringUtils.compare("org.apache.commons.lang3.ObjectUtils$Null", "9lFmL}gBKvrl|", false);
      assertEquals(54, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null", 9);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isNumeric("9lFmL}gBKvrl|");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string1 = StringUtils.appendIfMissingIgnoreCase((String) null, "org.apache.commons.lang3.ObjectUtils$Null", charSequenceArray0);
      assertNull(string1);
      assertEquals(0, charSequenceArray0.length);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains('7'));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, " has no clone method", 9, 54);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 54
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      String string0 = StringUtils.prependIfMissingIgnoreCase("...", "...", (CharSequence[]) null);
      assertNotNull(string0);
      assertEquals("...", string0);
      
      String string1 = StringUtils.rightPad("Cannot clone Cloneable type ", (-2942), "...");
      assertNotNull(string1);
      assertEquals("Cannot clone Cloneable type ", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("...{b>;w&ymP^T#/G|(~]R");
      assertNotNull(string2);
      assertEquals("...{b>;w&ymP^T#/G|(~]R", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.getDigits("...");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "...", (CharSequence) "Cannot clone Cloneable type ", 95);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "...{b>;w&ymP^T#/G|(~]R", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("...{b>;w&ymP^T#/G|(~]R");
      assertFalse(boolean0);
      
      String string4 = StringUtils.replacePattern("zb.(V4m9uP", "s;*B%N~", "KgC2l8fG`=p(_o0");
      assertNotNull(string4);
      assertEquals("zb.(V4m9uP", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-2942);
      longArray0[2] = (long) (-1);
      longArray0[3] = 0L;
      longArray0[4] = (long) (-2942);
      longArray0[5] = (long) 'L';
      longArray0[6] = (long) 95;
      longArray0[7] = (long) 'L';
      longArray0[8] = (long) 'L';
      String string5 = StringUtils.rightPad("R/`}=}4K;q/=@-\"c{uI", 2417, 'L');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) string5, (CharSequence) "...{b>;w&ymP^T#/G|(~]R");
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("Threshold must not be negative");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      int int0 = StringUtils.compare("QNZN*t+", (String) null, false);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.wrapIfMissing("{b", 'c');
      assertNotNull(string1);
      assertEquals("c{bc", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrap("Threshold must not be negative", "r{[xc'-");
      assertNotNull(string2);
      assertEquals("r{[xc'-Threshold must not be negativer{[xc'-", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNotBlank("r{[xc'-Threshold must not be negativer{[xc'-");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      String string0 = StringUtils.strip("'$", "JNa-k,*A'+%\"ml>");
      assertNotNull(string0);
      assertEquals("$", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("'$", "$");
      assertEquals(0.0, double0, 0.01);
      
      int int0 = StringUtils.compare("JNa-k,*A'+%\"ml>", (String) null);
      assertEquals(1, int0);
      
      String string1 = StringUtils.EMPTY;
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.difference("org.apache.commons.lang3.CharUtils", "'$");
      assertNotNull(string2);
      assertEquals("'$", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, '@', 2859, 13);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, objectArray0.length);
      
      int int0 = StringUtils.compare("", "", true);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter("n(G:C_w9R}'", 321);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.join((float[]) null, 'C');
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "n(G:C_w9R}'";
      boolean boolean1 = StringUtils.equalsAny("", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean2);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string3 = StringUtils.capitalize("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.wrapIfMissing((String) null, "^,i#");
      assertNull(string4);
      
      String string5 = StringUtils.defaultString((String) null);
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string3));
      
      long[] longArray0 = new long[0];
      String string6 = StringUtils.join(longArray0, '@', 2859, 0);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string6);
      assertEquals("", string6);
      assertEquals(0, longArray0.length);
      assertTrue(string6.equals((Object)string3));
      
      boolean boolean3 = StringUtils.startsWithAny(charSequenceArray0[0], charSequenceArray0);
      assertTrue(boolean3);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String string7 = StringUtils.replaceChars("SKQv#dX", "SKQv#dX", "SKQv#dX");
      assertNotNull(string7);
      assertEquals("SKQv#dX", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      
      int int1 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals((-1), int1);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '@';
      charArray0[1] = 'C';
      charArray0[2] = '@';
      charArray0[3] = '@';
      charArray0[4] = '@';
      charArray0[5] = '@';
      charArray0[6] = 'C';
      boolean boolean4 = StringUtils.containsNone((CharSequence) "^,i#", charArray0);
      assertArrayEquals(new char[] {'@', 'C', '@', '@', '@', '@', 'C'}, charArray0);
      assertTrue(boolean4);
      assertEquals(7, charArray0.length);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      String string0 = StringUtils.appendIfMissingIgnoreCase("Ges+)wRYG", "Ges+)wRYG", (CharSequence[]) null);
      assertNotNull(string0);
      assertEquals("Ges+)wRYG", string0);
      
      String string1 = StringUtils.substringBetween("6C", "Ges+)wRYG");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringAfter((String) null, 2109);
      assertNull(string2);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)9;
      shortArray0[1] = (short) (-678);
      shortArray0[2] = (short)4;
      String string3 = StringUtils.join(shortArray0, 'f', 6, (int) (short)4);
      assertArrayEquals(new short[] {(short)9, (short) (-678), (short)4}, shortArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(3, shortArray0.length);
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) "", (int) (short) (-678));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) null, 'f');
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string4 = StringUtils.capitalize("<1F>Yx3z3)(A$_%");
      assertNotNull(string4);
      assertEquals("<1F>Yx3z3)(A$_%", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.stripToNull((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.wrap("'TvP+g_G", 'f');
      assertNotNull(string6);
      assertEquals("f'TvP+g_Gf", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.substringAfterLast("sY", (String) null);
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 3253);
      assertEquals(0, int0);
      
      String string0 = StringUtils.unwrap("T[D4XSs", "");
      assertNotNull(string0);
      assertEquals("T[D4XSs", string0);
      
      String string1 = StringUtils.leftPad((String) null, 23, "aQ^ B0KCR%");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripToNull("A?");
      assertNotNull(string2);
      assertEquals("A?", string2);
      assertFalse(string2.equals((Object)string0));
      
      Class<CharBuffer> class0 = CharBuffer.class;
      ServiceLoader<CharBuffer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "T[D4XSs");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.repeat("G", 3253);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.capitalize("{%kXR'");
      assertNotNull(string4);
      assertEquals("{%kXR'", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      int int1 = StringUtils.countMatches((CharSequence) "T[D4XSs", (CharSequence) "{%kXR'");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.indexOf((CharSequence) null, (CharSequence) "aQ^ B0KCR%", 0);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      String string0 = StringUtils.abbreviate("JmUywP/OzwgyCa", 8);
      assertNotNull(string0);
      assertEquals("JmUyw...", string0);
      
      int int0 = StringUtils.length("JmUyw...");
      assertEquals(8, int0);
      
      boolean boolean0 = StringUtils.isAlpha("JmUywP/OzwgyCa");
      assertFalse(boolean0);
      
      String string1 = StringUtils.chomp("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceAll("", "org.apache.commons.lang3.CharUtils", "");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("JmUyw..."));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertFalse(linkedList0.contains("JmUyw..."));
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string3 = StringUtils.CR;
      assertNotNull(string3);
      assertEquals("\r", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = StringUtils.length("JmUyw...");
      assertEquals(8, int1);
      assertTrue(int1 == int0);
      
      int[] intArray0 = StringUtils.toCodePoints("JmUyw...");
      assertArrayEquals(new int[] {74, 109, 85, 121, 119, 46, 46, 46}, intArray0);
      assertNotNull(intArray0);
      assertEquals(8, intArray0.length);
      
      String string4 = StringUtils.leftPad("", 53);
      assertNotNull(string4);
      assertEquals("                                                     ", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.stripEnd("Z\b a", "JmUywP/OzwgyCa");
      assertNotNull(string5);
      assertEquals("Z\b ", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "-{RV_kn7cf");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean1);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.compare((String) null, "\"k_g.");
      assertEquals((-1), int0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "-{RV_kn7cf", (CharSequence[]) stringArray0);
      assertEquals(5, int1);
      assertEquals(188, stringArray0.length);
      assertFalse(int1 == int0);
      
      String string0 = StringUtils.rotate("%lt5s]'zx;c_9:^uT*}", 1695);
      assertNotNull(string0);
      assertEquals("uT*}%lt5s]'zx;c_9:^", string0);
      
      boolean boolean2 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Aborting to protect against StackOverflowError - output of one loop is the input of another", "offset cannot be negative", (-1), 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 26
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 108;
      String string0 = StringUtils.stripAccents("aP8/)]*-X");
      assertNotNull(string0);
      assertEquals("aP8/)]*-X", string0);
      
      String string1 = StringUtils.deleteWhitespace("aP8/)]*-X");
      assertNotNull(string1);
      assertEquals("aP8/)]*-X", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "aP8/)]*-X";
      boolean boolean0 = StringUtils.startsWithAny("aP8/)]*-X", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      String string2 = StringUtils.join(booleanArray0, 'C', 99, 99);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(4, booleanArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.wrapIfMissing(":,ba~cgy", "~");
      assertNotNull(string3);
      assertEquals("~:,ba~cgy~", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.join(booleanArray0, '!', 108, 99);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(4, booleanArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      boolean boolean1 = StringUtils.containsNone(charSequenceArray0[0], charArray0);
      assertArrayEquals(new char[] {'C', 'C'}, charArray0);
      assertTrue(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(2, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.defaultIfEmpty("", (String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "";
      stringArray0[1] = "maxWith cannot be negative";
      stringArray0[2] = "maxWith cannot be negative";
      stringArray0[3] = "maxWith cannot be negative";
      stringArray0[4] = "maxWith cannot be negative";
      stringArray0[5] = "maxWith cannot be negative";
      stringArray0[6] = "maxWith cannot be negative";
      stringArray0[7] = "";
      String string0 = StringUtils.strip("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("maxWith cannot be negative", "maxWith cannot be negative", stringArray0);
      assertNotNull(string1);
      assertEquals("maxWith cannot be negative", string1);
      assertEquals(10, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.prependIfMissingIgnoreCase(" ", "", stringArray0);
      assertNotNull(string2);
      assertEquals(" ", string2);
      assertEquals(10, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "maxWith cannot be negative", 13);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.strip("c\"I=3.51qcT'L3", "");
      assertNotNull(string3);
      assertEquals("c\"I=3.51qcT'L3", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string4 = StringUtils.overlay("NNJJJ(>;<?(dD:$y^", "]L3z_%mnt1:Jl", (-329), 2255);
      assertNotNull(string4);
      assertEquals("]L3z_%mnt1:Jl", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "";
      stringArray0[1] = "maxWith cannot be negative";
      stringArray0[2] = "maxWith cannot be negative";
      stringArray0[3] = "maxWith cannot be negative";
      stringArray0[4] = "maxWith cannot be negative";
      stringArray0[5] = "maxWith cannot be negative";
      stringArray0[6] = "maxWith cannot be negative";
      stringArray0[7] = "";
      String string0 = StringUtils.strip("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.lowerCase("maxWith cannot be negative");
      assertNotNull(string1);
      assertEquals("maxwith cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 65536;
      // Undeclared exception!
      StringUtils.leftPad("", 65536, 'S');
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "";
      stringArray0[1] = "maxWith cannot be negative";
      stringArray0[2] = "maxWith cannot be negative";
      stringArray0[3] = "maxWith cannot be negative";
      stringArray0[4] = "maxWith cannot be negative";
      stringArray0[5] = "maxWith cannot be negative";
      stringArray0[6] = "maxWith cannot be negative";
      stringArray0[7] = "";
      String string0 = StringUtils.strip("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.lowerCase("maxWith cannot be negative");
      assertNotNull(string1);
      assertEquals("maxwith cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.unwrap("Threshold must not be negative", '\'');
      assertNotNull(string2);
      assertEquals("Threshold must not be negative", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = 65536;
      // Undeclared exception!
      StringUtils.leftPad("", 65536, 'S');
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints(" ");
      assertArrayEquals(new int[] {32}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      String[] stringArray1 = Locale.getISOLanguages();
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(188, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) " ", (CharSequence[]) stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, int0);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      String string0 = StringUtils.rotate(" ", 0);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(charSequence0);
      assertEquals("aa", charSequence0);
      assertEquals(188, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(charSequence0.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isBlank("aa");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Aborting to protect against StackOverflowError - output of one loop is the input of another", " ", 13, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replace("null/empty items", "", "u");
      assertNotNull(string1);
      assertEquals("null/empty items", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfAny((CharSequence) "null/empty items", "");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.repeat('O', 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.unwrap("", "null/empty items");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.left("j,z;>X:", 963);
      assertNotNull(string4);
      assertEquals("j,z;>X:", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.defaultString("Z6");
      assertNotNull(string5);
      assertEquals("Z6", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.rotate("", 0);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "]^g`?Z|<h.78", "]^g`?Z|<h.78");
      assertTrue(boolean0);
      
      String string0 = StringUtils.rightPad("]^g`?Z|<h.78", 584);
      assertNotNull(string0);
      assertEquals("]^g`?Z|<hstring0);
      
      String string1 = StringUtils.wrapIfMissing("]^g`?Z|<h
      assertNotNull(string1);
      assertEquals("A]^g`?Z|<hstring1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "A]^g`?Z|<h.78                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            A", (CharSequence) "]^g`?Z|<h
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.stripToEmpty("A]^g`?Z|<h.78                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            A");
      assertNotNull(string2);
      assertEquals("A]^g`?Z|<hstring2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.leftPad("]^g`?Z|<hg`?Z|<h.78");
      assertNotNull(string3);
      assertEquals("]^g`?Z|<hstring3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      String string0 = StringUtils.substring("Minimum abbreviation width with offset is %d", (-3237));
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[15];
      charSequenceArray0[3] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[4] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[5] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[7] = (CharSequence) "Minimum abbreviation width with offset is %d";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Minimum abbreviation width with offset is %d", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(15, charSequenceArray0.length);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertEquals(15, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)19;
      boolean boolean1 = StringUtils.isWhitespace(charSequenceArray0[5]);
      assertFalse(boolean1);
      assertEquals(15, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertFalse(vector0.contains("Minimum abbreviation width with offset is %d"));
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      String string2 = StringUtils.abbreviateMiddle("Minimum abbreviation width with offset is %d", "Sm`jMI:r", (byte)19);
      assertNotNull(string2);
      assertEquals("MinimuSm`jMI:ris %d", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[6], (CharSequence) "Minimum abbreviation width with offset is %d");
      assertEquals((-1), int0);
      assertEquals(15, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "MinimuSm`jMI:ris %d", 2037);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, ',', 52, 2037);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "]^g`?OZ|<hS78", "]^g`?OZ|<hS78");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("]^g`?OZ|<hS78");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlphanumeric("]^g`?OZ|<hS78");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string0 = StringUtils.join((float[]) null, '>', 8192, 8192);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 108;
      intArray0[1] = 0;
      intArray0[2] = (-1324);
      intArray0[4] = 64;
      intArray0[5] = (-2212);
      String string0 = StringUtils.join(intArray0, 'A');
      assertArrayEquals(new int[] {108, 0, (-1324), 0, 64, (-2212)}, intArray0);
      assertNotNull(string0);
      assertEquals("108A0A-1324A0A64A-2212", string0);
      assertEquals(6, intArray0.length);
      
      CharSequence[] charSequenceArray0 = null;
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("108A0A-1324A0A64A-2212").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) null, supplier0);
      assertNotNull(charSequence0);
      assertEquals("108A0A-1324A0A64A-2212", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      String string1 = StringUtils.repeat(":,ba~cgy~", 127);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      
      String string2 = StringUtils.join((float[]) null, '/', (-1324), (-1118));
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[0];
      String string3 = StringUtils.join(charArray0, '(', 1133, 3);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(0, charArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("108A0A-1324A0A64A-2212", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", 1396, 1396);
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n", "\n");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.substringBefore("\n", "\n");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int[] intArray0 = StringUtils.toCodePoints(charSequenceArray0[0]);
      assertArrayEquals(new int[] {10}, intArray0);
      assertNotNull(intArray0);
      assertEquals(10, charSequenceArray0.length);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = StringUtils.contains(charSequenceArray0[0], 5);
      assertFalse(boolean0);
      assertEquals(10, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" ", " ", 1154);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", 122);
      assertEquals((-1), int0);
      
      int[] intArray0 = StringUtils.toCodePoints(" ");
      assertArrayEquals(new int[] {32}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(" ", stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.trimToEmpty("0=YbMtT/cuyM^G/~2");
      assertNotNull(string0);
      assertEquals("0=YbMtT/cuyM^G/~2", string0);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean1);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.length("0=YbMtT/cuyM^G/~2");
      assertEquals(18, int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.left("aYx0%eSMrb*sGGN&c", (-608));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[1] = '<';
      charArray0[2] = '}';
      boolean boolean2 = StringUtils.containsAny((CharSequence) "0=YbMtT/cuyM^G/~2", charArray0);
      assertArrayEquals(new char[] {'5', '<', '}'}, charArray0);
      assertFalse(boolean2);
      assertEquals(3, charArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int2 = StringUtils.countMatches((CharSequence) "", 'x');
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string2 = StringUtils.difference(" ", "#3R3<J");
      assertNotNull(string2);
      assertEquals("#3R3<J", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.stripStart("0=YbMtT/cuyM^G/~2", "!X$D6`h");
      assertNotNull(string3);
      assertEquals("0=YbMtT/cuyM^G/~2", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.remove("^I(.*ZAOs~$f)L7", 'x');
      assertNotNull(string4);
      assertEquals("^I(.*ZAOs~$f)L7", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      String string0 = StringUtils.remove("M$x7_ ao*T&5nR,!C ", '1');
      assertNotNull(string0);
      assertEquals("M$x7_ ao*T&5nR,!C ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "M$x7_ ao*T&5nR,!C ";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "M$x7_ ao*T&5nR,!C ";
      String string1 = StringUtils.center("M$x7_ ao*T&5nR,!C ", 21, "\n");
      assertNotNull(string1);
      assertEquals("\nM$x7_ ao*T&5nR,!C \n", string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[4] = (CharSequence) "\n";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "M$x7_ ao*T&5nR,!C ";
      String string2 = StringUtils.appendIfMissing("\n", "M$x7_ ao*T&5nR,!C ", charSequenceArray0);
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.remove(":", "M$x7_ ao*T&5nR,!C ");
      assertNotNull(string3);
      assertEquals(":", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.replaceEach("M$x7_ ao*T&5nR,!C ", (String[]) null, (String[]) null);
      assertNotNull(string4);
      assertEquals("M$x7_ ao*T&5nR,!C ", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.abbreviate("0", "", (-1), 2901);
      assertNotNull(string5);
      assertEquals("0", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = 'L';
      charArray0[2] = '5';
      charArray0[3] = 'b';
      charArray0[4] = ';';
      charArray0[5] = '/';
      charArray0[6] = '{';
      charArray0[7] = '7';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'G', 'L', '5', 'b', ';', '/', '{', '7'}, charArray0);
      assertNotNull(string0);
      assertEquals("GL5b;/{7", string0);
      assertEquals(8, charArray0.length);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "GL5b;/{7", charArray0);
      assertArrayEquals(new char[] {'G', 'L', '5', 'b', ';', '/', '{', '7'}, charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
      
      Locale locale0 = new Locale("offset cannot be negative", " yu3k0bH:Wb_hfN^Zfu<q0]a", "y`z:d?RB6;^Cp21");
      assertNotNull(locale0);
      assertEquals("y`z:d?RB6;^Cp21", locale0.getVariant());
      assertEquals(" YU3K0BH:WB_HFN^ZFU<Q0]A", locale0.getCountry());
      assertEquals("offset cannot be negative_ YU3K0BH:WB_HFN^ZFU<Q0]A_y`z:d?RB6;^Cp21", locale0.toString());
      assertEquals("offset cannot be negative", locale0.getLanguage());
      
      String string1 = StringUtils.upperCase("v|ZVCp", locale0);
      assertNotNull(string1);
      assertEquals("V|ZVCP", string1);
      assertEquals("y`z:d?RB6;^Cp21", locale0.getVariant());
      assertEquals(" YU3K0BH:WB_HFN^ZFU<Q0]A", locale0.getCountry());
      assertEquals("offset cannot be negative_ YU3K0BH:WB_HFN^ZFU<Q0]A_y`z:d?RB6;^Cp21", locale0.toString());
      assertEquals("offset cannot be negative", locale0.getLanguage());
      assertFalse(string1.equals((Object)string0));
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("y`z:d?RB6;^Cp21", locale0.getVariant());
      assertEquals(" YU3K0BH:WB_HFN^ZFU<Q0]A", locale0.getCountry());
      assertEquals("offset cannot be negative_ YU3K0BH:WB_HFN^ZFU<Q0]A_y`z:d?RB6;^Cp21", locale0.toString());
      assertEquals("offset cannot be negative", locale0.getLanguage());
      
      int int0 = StringUtils.indexOfAny((CharSequence) "V|ZVCP", (String) null);
      assertEquals((-1), int0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertFalse(linkedList0.contains(int0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string2 = StringUtils.join((List<?>) linkedList0, ".xsnx9>Ol}n|", (-1), (-1));
      assertFalse(linkedList0.contains((-1)));
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, linkedList0.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.strip((String) null, "108A0A0A-1118A64A-2212");
      assertNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      String string2 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'i'}, charArray0);
      assertNotNull(string2);
      assertEquals("i", string2);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'i';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "*n@^D47zIYx`#\"ladn", charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'i'}, charArray1);
      assertFalse(boolean0);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "108A0A0A-1118A64A-2212", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      String string0 = StringUtils.repeat("The character ", (-145));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.normalizeSpace("The character ");
      assertNotNull(string1);
      assertEquals("The character", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "The character ", (CharSequence) "The character ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("The character ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.difference("\r", "");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The character ", (CharSequence) "The character", 3942);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[1];
      String string3 = StringUtils.join(objectArray0, '\"', 15, 15);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(1, objectArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.center("Minimum abbreviation width wish offset is %d", 3942, "H:Wb_hfN^KZfu<q0j;IkE");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Invalid locale format: ";
      stringArray0[4] = "The character ";
      stringArray0[5] = string4;
      stringArray0[7] = "";
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("2b'uTv<FtxJA", 'A');
      assertNotNull(string0);
      assertEquals("2b'uTv<FtxJ", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "2b'uTv<FtxJA", (CharSequence) "2b'uTv<FtxJA");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripToEmpty("2b'uTv<FtxJA");
      assertNotNull(string1);
      assertEquals("2b'uTv<FtxJA", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("Aborting to protect against StackOverflowError - output of one loop is the input of another", 2, "org.apache.commons.lang3.ObjectUtils");
      assertNotNull(string2);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.truncate((String) null, 2952, 32);
      assertNull(string1);
      
      String string2 = StringUtils.replaceChars((String) null, (String) null, "org.apache.commons.lang3.RegExUtils");
      assertNull(string2);
      
      String string3 = StringUtils.substringBefore((String) null, 32);
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.compare((String) null, (String) null, false);
      assertEquals(0, int0);
      
      String string4 = StringUtils.rightPad((String) null, 2952, (String) null);
      assertNull(string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray1);
      
      String string5 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null, 32);
      assertNull(string6);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'T'}, charArray0);
      assertFalse(boolean1);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string7 = StringUtils.substringBetween(" vs ", ";udkr");
      assertNull(string7);
      
      boolean boolean3 = StringUtils.isAlpha("");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string8 = StringUtils.replaceChars("0qrB^5<*k@7*,C", "w%", (String) null);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-954.3249471797494);
      String string0 = StringUtils.join(doubleArray0, 'K');
      assertArrayEquals(new double[] {(-954.3249471797494)}, doubleArray0, 0.01);
      assertNotNull(string0);
      assertEquals("-954.3249471797494", string0);
      assertEquals(1, doubleArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "-954.3249471797494";
      charSequenceArray0[1] = (CharSequence) "-954.3249471797494";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 15);
      assertNotNull(string0);
      assertEquals("               ", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "               ", (CharSequence) "", 15);
      assertEquals(15, int0);
      
      String string1 = StringUtils.strip("", "               ");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      double double0 = new Integer(15);
      assertEquals(15, double0, 0.01);
      
      String string2 = StringUtils.overlay("NNJJJ(;<?(dD:$y^", "", 15, 15);
      assertNotNull(string2);
      assertEquals("NNJJJ(;<?(dD:$y^", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      byte[] byteArray0 = StringUtils.getBytes("", charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
      
      String string0 = StringUtils.normalizeSpace("cy>0X4^");
      assertNotNull(string0);
      assertEquals("cy>0X4^", string0);
      
      String string1 = StringUtils.stripAccents("`$Q6b\"eY=J");
      assertNotNull(string1);
      assertEquals("`$Q6b\"eY=J", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.appendIfMissing("!MW)^::aE+G,V2", "org.apache.commons.lang3.Charsets", stringArray0);
      assertNotNull(string2);
      assertEquals("!MW)^::aE+G,V2", string2);
      assertEquals(2, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.remove("r-", "', is neither of type Map.Entry nor an Array");
      assertNotNull(string3);
      assertEquals("r-", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.stripToEmpty("`$Q6b\"eY=J");
      assertNotNull(string4);
      assertEquals("`$Q6b\"eY=J", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.removeEndIgnoreCase("\r", "`$Q6b\"eY=J");
      assertNotNull(string5);
      assertEquals("\r", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.difference("The String must not be empty", "\r");
      assertNotNull(string6);
      assertEquals("\r", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      
      int int0 = StringUtils.ordinalIndexOf("r-", "', is neither of type Map.Entry nor an Array", 5);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("\r");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      String string0 = StringUtils.left("iH.Z[Rw0y21u", 1296);
      assertNotNull(string0);
      assertEquals("iH.Z[Rw0y21u", string0);
      
      boolean boolean0 = StringUtils.equalsAny("iH.Z[Rw0y21u", (CharSequence[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '#';
      charArray0[3] = '2';
      charArray0[4] = 'x';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "iH.Z[Rw0y21u", charArray0);
      assertArrayEquals(new char[] {'2', '2', '#', '2', 'x'}, charArray0);
      assertFalse(boolean1);
      assertEquals(5, charArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      String string0 = StringUtils.mid("Ii", 3500, 3500);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripAccents("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.toRootUpperCase("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.chop("Ii");
      assertNotNull(string3);
      assertEquals("I", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertTrue(boolean2);
      assertEquals(1, charArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = StringUtils.substring("Strings must not be null", 3500);
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertFalse(linkedList0.contains(3500));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string5 = StringUtils.join((List<?>) linkedList0, "Ii", 3500, 3500);
      assertFalse(linkedList0.contains(3500));
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(0, linkedList0.size());
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      
      String string6 = StringUtils.abbreviate(",m;DANSva8FMabh", "", 160);
      assertNotNull(string6);
      assertEquals(",m;DANSva8FMabh", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string7 = StringUtils.firstNonBlank(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNull(string7);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      String string0 = StringUtils.mid("Ii", 3500, 3500);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripAccents("|Z9UZpK{");
      assertNotNull(string1);
      assertEquals("|Z9UZpK{", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.toRootUpperCase("|Z9UZpK{");
      assertNotNull(string2);
      assertEquals("|Z9UZPK{", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "|Z9UZPK{", "|Z9UZpK{");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Integer integer0 = new Integer(576);
      assertNotNull(integer0);
      assertEquals(576, (int)integer0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.CharSequenceUtils", "Ii", 2950);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = "\\u";
      String string4 = StringUtils.rightPad("org.apache.commons.lang3.StringUtils", 2950, 'e');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String[] stringArray1 = StringUtils.substringsBetween(string3, "^N+AYPv,J5ub", "/hRxioeES>uw.)s(l'l");
      assertNull(stringArray1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      
      boolean boolean2 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean2);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string5 = StringUtils.abbreviate("^N+AYPv,J5ub", "", 1);
      assertNotNull(string5);
      assertEquals("^", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("{b>;w&ymP^T#/G|(~]R", "{b>;w&ymP^T#/G|(~]R");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = "...";
      String string1 = null;
      String string2 = "E0\"-N.<s";
      // Undeclared exception!
      StringUtils.rightPad("E0\"-N.<s", 65536, "org.apache.commons.lang3.CharsetsK`ZyvoJLw,hUARC$*ly");
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.overlay("\n", "B3erwgW#I", 13, 13);
      assertNotNull(string1);
      assertEquals("\nB3erwgW#I", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rotate("B3erwgW#I", 13);
      assertNotNull(string2);
      assertEquals("gW#IB3erw", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllLowerCase("\nB3erwgW#I");
      assertFalse(boolean0);
      
      String string3 = StringUtils.repeat("_48feD'", "gW#IB3erw", 59);
      assertNotNull(string3);
      assertEquals("_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAlphanumeric("_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.difference("4k&owb^e", "{b>;w&ymP^T#/G|(~]R{b>;w&ymP^T#/G|(~]R");
      assertNotNull(string4);
      assertEquals("{b>;w&ymP^T#/G|(~]R{b>;w&ymP^T#/G|(~]R", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\nB3erwgW#I", (CharSequence) "_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'", (-419));
      assertEquals((-1), int0);
      
      String string5 = StringUtils.abbreviateMiddle("ZCwxfK&QS>`", "%9Z85}C#W", 13);
      assertNotNull(string5);
      assertEquals("ZCwxfK&QS>`", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "{b>;w&ymP^T#/G|(~]R{b>;w&ymP^T#/G|(~]R", (CharSequence) "\nB3erwgW#I");
      assertEquals(36, int1);
      assertFalse(int1 == int0);
      
      boolean boolean2 = StringUtils.isNotBlank("{b>;w&ymP^T#/G|(~]R{b>;w&ymP^T#/G|(~]R");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ZCwxfK&QS>`";
      stringArray0[1] = "4k&owb^e";
      stringArray0[2] = "', is neither of type Map.Entry nor an Array";
      stringArray0[3] = "5 `|Y2Li%";
      stringArray0[4] = "%9Z85}C#W";
      stringArray0[5] = "m$:$1s4[Ru/";
      stringArray0[6] = "', is neither of type Map.Entry nor an Array";
      stringArray0[7] = "B3erwgW#I";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "', is neither of type Map.Entry nor an Array");
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      assertEquals(8, stringArray1.length);
      assertEquals(8, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "ZCwxfK&QS>`");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotNull(stringArray2);
      assertEquals(8, stringArray2.length);
      assertEquals(8, stringArray0.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("5 `|Y2Li%", 13, (-419));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = '&';
      charArray0[2] = 'E';
      charArray0[3] = '=';
      String string0 = StringUtils.join(charArray0, 'A');
      assertArrayEquals(new char[] {'a', '&', 'E', '='}, charArray0);
      assertNotNull(string0);
      assertEquals("aA&AEA=", string0);
      assertEquals(4, charArray0.length);
      
      String string1 = StringUtils.substringBefore("*n@^D47zIYx`#\"ladn", 1);
      assertNotNull(string1);
      assertEquals("*n@^D47zIYx`#\"ladn", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equalsAny("*n@^D47zIYx`#\"ladn", stringArray0);
      assertFalse(boolean1);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "aA&AEA=", (CharSequence) "*n@^D47zIYx`#\"ladn");
      assertEquals(0, int0);
      
      String string2 = StringUtils.join((Object[]) stringArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(2, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      String string0 = StringUtils.remove("M$x7_ ao*T&5nR,!C ", '1');
      assertNotNull(string0);
      assertEquals("M$x7_ ao*T&5nR,!C ", string0);
      
      String string1 = StringUtils.overlay("", "M$x7_ ao*T&5nR,!C ", 1, (-2371));
      assertNotNull(string1);
      assertEquals("M$x7_ ao*T&5nR,!C ", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByCharacterType("M$x7_ ao*T&5nR,!C ");
      assertNotNull(stringArray0);
      assertEquals(17, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "M$x7_ ao*T&5nR,!C ", 53);
      assertEquals(12, int0);
      
      String string2 = StringUtils.chop("M$x7_ ao*T&5nR,!C ");
      assertNotNull(string2);
      assertEquals("M$x7_ ao*T&5nR,!C", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "M$x7_ ao*T&5nR,!C", (char[]) null);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("M$x7_ ao*T&5nR,!C ", '1');
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.upperCase("offset cannot be negative");
      assertNotNull(string3);
      assertEquals("OFFSET CANNOT BE NEGATIVE", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "!>");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("!>");
      assertFalse(boolean0);
      
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "!>";
      String string2 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertNull(string2);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("\r");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int1 = StringUtils.compareIgnoreCase((String) null, "!>", false);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string3);
      
      String string4 = StringUtils.getCommonPrefix(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNull(charSequence0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "\r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      String string0 = StringUtils.mid("Ii", 3500, 3500);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripAccents("Ii");
      assertNotNull(string1);
      assertEquals("Ii", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.toRootUpperCase("Ii");
      assertNotNull(string2);
      assertEquals("II", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.difference("II", "'NS*X'=Z+eF0 $b{c");
      assertNotNull(string3);
      assertEquals("'NS*X'=Z+eF0 $b{c", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      String string0 = StringUtils.right("", 30);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("gu[VJ^", "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.removeEndIgnoreCase("", "Minimum abbreviation width is %d");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.strip("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.overlay("NNJJJ(>;<?(dD:$y^", "", 0, 0);
      assertNotNull(string2);
      assertEquals("NNJJJ(>;<?(dD:$y^", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      String string0 = StringUtils.center("\r", (-270), '*');
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.getDigits("U:*]{!Ag+U&f!J3i+");
      assertNotNull(string1);
      assertEquals("3", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfterLast((String) null, (-1023));
      assertNull(string2);
      
      String string3 = StringUtils.deleteWhitespace("3");
      assertNotNull(string3);
      assertEquals("3", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      String string0 = StringUtils.abbreviate("JmUywP/OzwgyCa", 8);
      assertNotNull(string0);
      assertEquals("JmUyw...", string0);
      
      int int0 = StringUtils.length("JmUyw...");
      assertEquals(8, int0);
      
      int[] intArray0 = StringUtils.toCodePoints("JmUyw...");
      assertArrayEquals(new int[] {74, 109, 85, 121, 119, 46, 46, 46}, intArray0);
      assertNotNull(intArray0);
      assertEquals(8, intArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "JmUyw...";
      charSequenceArray0[1] = (CharSequence) "JmUywP/OzwgyCa";
      charSequenceArray0[2] = (CharSequence) "JmUyw...";
      charSequenceArray0[3] = (CharSequence) "JmUyw...";
      charSequenceArray0[4] = (CharSequence) "JmUywP/OzwgyCa";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)68;
      String string1 = StringUtils.join(byteArray0, '^');
      assertArrayEquals(new byte[] {(byte)2, (byte) (-95), (byte)68}, byteArray0);
      assertNotNull(string1);
      assertEquals("2^-95^68", string1);
      assertEquals(3, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[5] = (CharSequence) "2^-95^68";
      charSequenceArray0[6] = (CharSequence) "JmUywP/OzwgyCa";
      charSequenceArray0[7] = (CharSequence) "JmUyw...";
      charSequenceArray0[8] = (CharSequence) "JmUywP/OzwgyCa";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int1);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOf(charSequenceArray0[5], 8, (-2540));
      assertEquals((-1), int2);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      String string0 = StringUtils.unwrap("aWs{O&;7e)$", ")");
      assertNotNull(string0);
      assertEquals("aWs{O&;7e)$", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase(" is not in the range '0' - '9'");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "aWs{O&;7e)$";
      stringArray0[1] = " is not in the range '0' - '9'";
      stringArray0[2] = "KR8WEn'@j*D";
      stringArray0[3] = ")";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(4, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ")", (CharSequence) "KR8WEn'@j*D");
      assertEquals(11, int0);
      
      String string2 = StringUtils.strip("aWs{O&;7e)$", "cBe2T6m");
      assertNotNull(string2);
      assertEquals("aWs{O&;7e)$", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isNotBlank("\r");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.join((String[]) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      String string0 = StringUtils.join((List<?>) stack0, '3', 2238, (-1820));
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      String string1 = StringUtils.chop("");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.chop("H5eyaHr");
      assertNotNull(string2);
      assertEquals("H5eyaH", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '3';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'3', '3', '3', '3'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      boolean boolean1 = StringUtils.isAlpha("V}&<PLmQB;c5O;");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "H5eyaH", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.leftPad("V}&<PLmQB;c5O;", 16, "H5eyaH");
      assertNotNull(string3);
      assertEquals("H5V}&<PLmQB;c5O;", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "H5V}&<PLmQB;c5O;";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "H5eyaH";
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean2 = StringUtils.startsWithAny("H5V}&<PLmQB;c5O;", charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\r";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-601.1334);
      String string2 = StringUtils.replaceEachRepeatedly("Nsn[-", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals("Nsn[-", string2);
      assertEquals(1, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.chomp((String) null, "\r");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isEmpty("Nsn[-");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = '|';
      charArray0[2] = '(';
      charArray0[3] = 's';
      charArray0[4] = 'J';
      charArray0[5] = 'V';
      charArray0[6] = 'P';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Nsn[-", charArray0);
      assertArrayEquals(new char[] {'>', '|', '(', 's', 'J', 'V', 'P'}, charArray0);
      assertEquals(0, int0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Threshold must not be negative", "$]~{)rS|vBIU(l/,k><");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      int int0 = (-145);
      String string1 = StringUtils.repeat("f:u|1L]_T)r&Vuy(", (-145));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("f:u|1L]_T)r&Vuy(", "Threshold must not be negative");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "$]~{)rS|vBIU(l/,k><";
      stringArray0[1] = "t8DH sBx)VJ";
      stringArray0[2] = "$]~{)rS|vBIU(l/,k><";
      stringArray0[3] = "f:u|1L]_T)r&Vuy(";
      stringArray0[5] = "Threshold must not be negative";
      stringArray0[6] = "Threshold must not be negative";
      String string2 = StringUtils.strip("$]~{)rS|vBIU(l/,k><", "Threshold must not be negative");
      assertNotNull(string2);
      assertEquals("$]~{)rS|vBIU(l/,k><", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "$]~{)rS|vBIU(l/,k><", (CharSequence) "Threshold must not be negative");
      assertEquals(30, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.isNotBlank("$]~{)rS|vBIU(l/,k><");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Threshold must not be negative");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1, "$]~{)rS|vBIU(l/,k><");
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotNull(stringArray2);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertEquals(7, stringArray2.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      String[] stringArray3 = StringUtils.splitByWholeSeparator((String) null, "$]~{)rS|vBIU(l/,k><");
      assertNull(stringArray3);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Threshold must not be negative", "$]~{)rS|vBIU(l/,k><", (-145));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 20
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      int[] intArray0 = new int[9];
      intArray0[0] = 18;
      intArray0[1] = 104;
      intArray0[2] = 25;
      intArray0[3] = 1475;
      intArray0[4] = 313;
      intArray0[5] = (-1869);
      intArray0[6] = 465;
      intArray0[7] = 3;
      intArray0[8] = (-1615);
      String string0 = StringUtils.join(intArray0, 'a', 104, 25);
      assertArrayEquals(new int[] {18, 104, 25, 1475, 313, (-1869), 465, 3, (-1615)}, intArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(9, intArray0.length);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.SPACE;
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) " ";
      String string2 = StringUtils.replaceAll("F5N_xWk<@lrk_", (String) null, (String) null);
      assertNotNull(string2);
      assertEquals("F5N_xWk<@lrk_", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "F5N_xWk<@lrk_";
      String string3 = StringUtils.stripToEmpty("\n");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      charSequenceArray0[3] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) " ", charSequenceArray0[0]);
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string3));
      
      charSequenceArray0[4] = (CharSequence) "";
      String string4 = StringUtils.unwrap("cP}Wti", '@');
      assertNotNull(string4);
      assertEquals("cP}Wti", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      charSequenceArray0[5] = (CharSequence) "cP}Wti";
      String string5 = StringUtils.chomp("", "F5N_xWk<@lrk_");
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)charSequence0));
      
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 0);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.difference((String) null, "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.rightPad("3*:c1ex#H2[qrE{", 5, (String) null);
      assertNotNull(string0);
      assertEquals("3*:c1ex#H2[qrE{", string0);
      
      String string1 = StringUtils.chomp((String) null);
      assertNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string2 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string2);
      
      String string3 = StringUtils.center((String) null, 5, 'L');
      assertNull(string3);
      
      String string4 = StringUtils.getDigits((String) null);
      assertNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "?kGI]Y4b", (CharSequence) "3*:c1ex#H2[qrE{", 5);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "#r1S[x", (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("3*:c1ex#H2[qrE{");
      assertFalse(boolean0);
      
      String string5 = StringUtils.replacePattern("#r1S[x", "#", "36'n{pLbIl!Sv5c!P");
      assertNotNull(string5);
      assertEquals("36'n{pLbIl!Sv5c!Pr1S[x", string5);
      assertFalse(string5.equals((Object)string0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 894;
      longArray0[1] = (long) (-1);
      longArray0[2] = 0L;
      String string6 = StringUtils.join(longArray0, 'V', 2041, 49);
      assertArrayEquals(new long[] {894L, (-1L), 0L}, longArray0);
      assertNotNull(string6);
      assertEquals("", string6);
      assertEquals(3, longArray0.length);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-3948L);
      longArray0[1] = 1541L;
      longArray0[2] = 1L;
      String string1 = StringUtils.strip("\n");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("\n");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBetween("\n", "\n", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.center("C@oXvl<g+C", 29, 'i');
      assertNotNull(string4);
      assertEquals("iiiiiiiiiC@oXvl<g+Ciiiiiiiiii", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "apxY~CL6T&{#F*cK|$]~{)rS|vBIU(l/,k><", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "\n", charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string5 = StringUtils.strip("");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      
      String string6 = StringUtils.prependIfMissingIgnoreCase("", "iiiiiiiiiC@oXvl<g+Ciiiiiiiiii", charSequenceArray0);
      assertNotNull(string6);
      assertEquals("iiiiiiiiiC@oXvl<g+Ciiiiiiiiii", string6);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.rightPad("Strings must not be null", 740, "}F");
      assertNotNull(string7);
      assertEquals("Strings must not be null}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F}F", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string8 = StringUtils.substringBeforeLast("I", "");
      assertNotNull(string8);
      assertEquals("I", string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'i');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string9 = StringUtils.removeStart("I", "");
      assertNotNull(string9);
      assertEquals("I", string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      
      int int1 = StringUtils.ordinalIndexOf("{b>;w&ymP^T#/G|(~]R", "I", 77);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean3 = StringUtils.equalsAnyIgnoreCase("...", stringArray0);
      assertFalse(boolean3);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      String string10 = StringUtils.repeat('T', 104);
      assertNotNull(string10);
      assertEquals("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", string10);
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      String string0 = StringUtils.right("", 30);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "", 30);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.replaceFirst("", "", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      byte[] byteArray0 = StringUtils.getBytes("Eb6o<essDb7", (Charset) null);
      assertNotNull(byteArray0);
      assertEquals(11, byteArray0.length);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertFalse(boolean1);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.uncapitalize("maxWith cannot be negative");
      assertNotNull(string2);
      assertEquals("maxWith cannot be negative", string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, '}', 30, 2626);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\r";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertEquals("\r", string2);
      assertEquals(1, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertNotNull(charSequence0);
      assertEquals("\r", charSequence0);
      assertEquals(1, stringArray0.length);
      assertTrue(charSequence0.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("\r", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.repeat("\r", (String) null, 1776);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "]^g`?OZ|<hS78";
      stringArray0[1] = "]^g`?OZ|<hS78";
      String string0 = StringUtils.repeat('f', 5);
      assertNotNull(string0);
      assertEquals("fffff", string0);
      
      String string1 = StringUtils.normalizeSpace("]^g`?OZ|<hS78");
      assertNotNull(string1);
      assertEquals("]^g`?OZ|<hS78", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "]^g`?OZ|<hS78", (CharSequence) "]^g`?OZ|<hS78");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("]^g`?OZ|<hS78");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.repeat(",i/BT~Z*{", (-300));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("J?JW,9o<\"N0", "]^g`?OZ|<hS78");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.repeat('$', 350);
      assertNotNull(string3);
      assertEquals("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean3 = StringUtils.equals((CharSequence) "]^g`?OZ|<hS78", (CharSequence) "J?JW,9o<\"N0");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String string4 = StringUtils.replacePattern("]^g`?OZ|<hS78", "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$", "]^g`?OZ|<hS78");
      assertNotNull(string4);
      assertEquals("]^g`?OZ|<hS78]^g`?OZ|<hS78", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean4 = StringUtils.isAllLowerCase("");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      
      String string5 = StringUtils.replaceChars("89,5AC@Xf", "", "1x[e/W:");
      assertNotNull(string5);
      assertEquals("89,5AC@Xf", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "J?JW,9o<\"N0", (CharSequence) "1x[e/W:", (-300));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      String string0 = StringUtils.overlay("wY", (String) null, 3733, 2924);
      assertNotNull(string0);
      assertEquals("wY", string0);
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      String string0 = StringUtils.replace("#rvOt8y", "#rvOt8y", "-ops'lU/+D>Z\"[nU_");
      assertNotNull(string0);
      assertEquals("-ops'lU/+D>Z\"[nU_", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "-ops'lU/+D>Z\"[nU_", "org.apache.commons.lang3.exception.CloneFailedException");
      assertEquals(1, int0);
      
      String string1 = StringUtils.repeat('d', 1);
      assertNotNull(string1);
      assertEquals("d", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.unwrap("-ops'lU/+D>Z\"[nU_", "-ops'lU/+D>Z\"[nU_");
      assertNotNull(string2);
      assertEquals("-ops'lU/+D>Z\"[nU_", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.left((String) null, 1);
      assertNull(string3);
      
      String string4 = StringUtils.toRootLowerCase("Ga");
      assertNotNull(string4);
      assertEquals("ga", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.remove(" ", "org.apache.commons.lang3.exception.CloneFailedException");
      assertNotNull(string5);
      assertEquals(" ", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.left("_", 1);
      assertNotNull(string6);
      assertEquals("_", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", (CharSequence) "Ga");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isAlpha("m+~HFP[wd\u0005Ktws");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)16;
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, 'd');
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, longArray0.length);
      
      String string1 = StringUtils.capitalize("]");
      assertNotNull(string1);
      assertEquals("]", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String string2 = StringUtils.join(booleanArray0, 'd', 1501, (-1927));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(2, booleanArray0.length);
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringBetween("]", "]");
      assertNull(string3);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("object");
      assertNotNull(string0);
      assertEquals("object", string0);
      
      String string1 = StringUtils.abbreviateMiddle("object", "Strings must not be null", 256);
      assertNotNull(string1);
      assertEquals("object", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "object";
      charSequenceArray0[1] = (CharSequence) "object";
      String string2 = StringUtils.chomp("0<8_^&Ok+qp!0O{ZPs", "&^#WVtb>WbmaQE;");
      assertNotNull(string2);
      assertEquals("0<8_^&Ok+qp!0O{ZPs", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "0<8_^&Ok+qp!0O{ZPs";
      charSequenceArray0[3] = (CharSequence) "object";
      charSequenceArray0[4] = (CharSequence) "object";
      charSequenceArray0[5] = (CharSequence) "object";
      charSequenceArray0[6] = (CharSequence) "object";
      String string3 = StringUtils.appendIfMissingIgnoreCase("object", "object", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("object", string3);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints(charSequenceArray0[2]);
      assertNotNull(intArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(19, intArray0.length);
      
      String string4 = StringUtils.getDigits("0<8_^&Ok+qp!0O{ZPs");
      assertNotNull(string4);
      assertEquals("080", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.removeEndIgnoreCase("0<8_^&Ok+qp!0O{ZPs", "object");
      assertNotNull(string5);
      assertEquals("0<8_^&Ok+qp!0O{ZPs", string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      int int0 = StringUtils.countMatches((CharSequence) "0<8_^&Ok+qp!0O{ZPs", (CharSequence) "0<8_^&Ok+qp!0O{ZPs");
      assertEquals(1, int0);
      
      String string6 = StringUtils.joinWith((String) null, charSequenceArray0);
      assertNotNull(string6);
      assertEquals("objectobject0<8_^&Ok+qp!0O{ZPsobjectobjectobjectobject", string6);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.truncate("0<8_^&Ok+qp!0O{ZPs", 256, 78);
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      
      String string8 = StringUtils.defaultString("\r", (String) null);
      assertNotNull(string8);
      assertEquals("\r", string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      
      String string9 = StringUtils.defaultIfBlank("Minimum abbreviation width is %d", ", Length: ");
      assertNotNull(string9);
      assertEquals("Minimum abbreviation width is %d", string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      
      String string10 = StringUtils.repeat("objectobject0<8_^&Ok+qp!0O{ZPsobjectobjectobjectobject", 1);
      assertNotNull(string10);
      assertEquals("objectobject0<8_^&Ok+qp!0O{ZPsobjectobjectobjectobject", string10);
      assertTrue(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      
      double double0 = StringUtils.getJaroWinklerDistance("Minimum abbreviation width is %d", "objectobject0<8_^&Ok+qp!0O{ZPsobjectobjectobjectobject");
      assertEquals(0.4, double0, 0.01);
      
      String string11 = StringUtils.unwrap("080", 'w');
      assertNotNull(string11);
      assertEquals("080", string11);
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string2));
      assertTrue(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string9));
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", '{');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("", '{', ']');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.lowerCase("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsAny("b\"fVn7+f#`2^9r^)Y", stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", (char[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)38;
      String string2 = StringUtils.leftPad("", (int) (byte)71, "");
      assertNotNull(string2);
      assertEquals("                                                                       ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string3 = StringUtils.stripToNull("w-L7$6Pn");
      assertNotNull(string3);
      assertEquals("w-L7$6Pn", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      Class<CharBuffer> class0 = CharBuffer.class;
      ServiceLoader<CharBuffer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      
      String string4 = StringUtils.defaultString("Mi>Am<eFO&u8_");
      assertNotNull(string4);
      assertEquals("Mi>Am<eFO&u8_", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.remove("A?", "");
      assertNotNull(string5);
      assertEquals("A?", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean3 = StringUtils.equals((CharSequence) "Mi>Am<eFO&u8_", (CharSequence) "A?");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      String string6 = StringUtils.repeat("aQ^ B0KCR%", (int) (byte)1);
      assertNotNull(string6);
      assertEquals("aQ^ B0KCR%", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.capitalize("{%kXR'");
      assertNotNull(string7);
      assertEquals("{%kXR'", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      int[] intArray0 = new int[8];
      String string0 = StringUtils.chomp("Supplied value must be a valid byte literal between -128 and 127: [");
      assertNotNull(string0);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [";
      String string1 = StringUtils.substringAfter("Supplied value must be a valid byte literal between -32768 and 32767: [", 13);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.truncate("Supplied value must be a valid byte literal between -128 and 127: [", 248, 320);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [";
      charSequenceArray0[4] = (CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [";
      charSequenceArray0[5] = (CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [";
      String string3 = StringUtils.join(intArray0, '#', 1343, Integer.MIN_VALUE);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(8, intArray0.length);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      charSequenceArray0[6] = (CharSequence) "";
      CharSequence[] charSequenceArray1 = new CharSequence[7];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [", charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray1.length);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[1], charSequenceArray0);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.strip("Supplied value must be a valid byte literal between -128 and 127: [");
      assertNotNull(string4);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("H:Wb_hfN^KZfu<q0j;IkE", "", charSequenceArray0);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertNotNull(string5);
      assertEquals("H:Wb_hfN^KZfu<q0j;IkE", string5);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      
      String string6 = StringUtils.rightPad("", 231, "Supplied value must be a valid byte literal between -128 and 127: [");
      assertNotNull(string6);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [Supplied value must be a valid byte literal between -128 and 127: [Supplied value must be a valid byte literal between -128 and 127: [Supplied value must be a valid", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      
      String string7 = StringUtils.substringBeforeLast("Minimum abbreviation width is %d", "gW#IB3erw");
      assertNotNull(string7);
      assertEquals("Minimum abbreviation width is %d", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      
      String string8 = StringUtils.center("", 3999, '#');
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      
      CharBuffer charBuffer0 = StringUtils.defaultIfBlank((CharBuffer) null, (CharBuffer) null);
      assertNull(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      String string0 = null;
      int int0 = (-861);
      String string1 = StringUtils.repeat((String) null, (-861));
      assertNull(string1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      // Undeclared exception!
      try { 
        ByteBuffer.allocate((-861));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      String string0 = StringUtils.getDigits("$_m\"{&,L&zW");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("$_m\"{&,L&zW", "$_m\"{&,L&zW");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("", "", (-918));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.removeStart("$_m\"{&,L&zW", "H:Wb_hfN^KZfu<q0j;IkE");
      assertNotNull(string1);
      assertEquals("$_m\"{&,L&zW", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "\\u";
      String string3 = StringUtils.replaceAll(string2, (String) null, (String) null);
      assertNotNull(string3);
      assertEquals("\\u", string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.removeStart("", "~`}v&)5g0");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string3, (CharSequence) "");
      assertEquals(2, int0);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      
      String string5 = StringUtils.removeAll((String) null, "");
      assertNull(string5);
      
      int int1 = StringUtils.indexOf((CharSequence) "$_m\"{&,L&zW", (CharSequence) "$_m\"{&,L&zW", 2);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.substringBetween("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Cannot store ");
      assertNull(string6);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("$_m\"{&,L&zW");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      String string0 = StringUtils.substring("Minimum abbreviation width with offset is %d", (-3237));
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[3] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[4] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[5] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[6] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[7] = (CharSequence) "Minimum abbreviation width with offset is %d";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Minimum abbreviation width with offset is %d", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("Uqu", "Minimum abbreviation width with offset is %d", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width with offset is %dUqu", string1);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)19;
      String string2 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertArrayEquals(new byte[] {(byte)95, (byte)19}, byteArray0);
      assertNotNull(string2);
      assertEquals("_\u0013", string2);
      assertEquals(2, byteArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isWhitespace(charSequenceArray0[5]);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertFalse(vector0.contains("Minimum abbreviation width with offset is %d"));
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      String string3 = StringUtils.replaceOnceIgnoreCase(")M", "$-pr(C;Zlc#S3!~>9", "Uqu");
      assertNotNull(string3);
      assertEquals(")M", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.countMatches(charSequenceArray0[4], charSequenceArray0[6]);
      assertEquals(1, int0);
      assertEquals(8, charSequenceArray0.length);
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("Minimum abbreviation width with offset is %d", charSequenceArray0[0], charSequenceArray0);
      assertNotNull(string4);
      assertEquals("Minimum abbreviation width with offset is %d", string4);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 108;
      intArray0[1] = 0;
      intArray0[2] = (-1324);
      intArray0[3] = (-1118);
      intArray0[4] = 64;
      intArray0[5] = (-2212);
      String string0 = StringUtils.join(intArray0, 'A');
      assertArrayEquals(new int[] {108, 0, (-1324), (-1118), 64, (-2212)}, intArray0);
      assertNotNull(string0);
      assertEquals("108A0A-1324A-1118A64A-2212", string0);
      assertEquals(6, intArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("108A0A-1324A-1118A64A-2212").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) null, supplier0);
      assertNotNull(charSequence0);
      assertEquals("108A0A-1324A-1118A64A-2212", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'A';
      int int0 = StringUtils.indexOfAny((CharSequence) "108A0A-1324A-1118A64A-2212", charArray0);
      assertArrayEquals(new char[] {'L', 'A'}, charArray0);
      assertEquals(3, int0);
      assertEquals(2, charArray0.length);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains(string0));
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Iterator<String> iterator0 = arrayList0.iterator();
      assertFalse(arrayList0.contains(string0));
      assertNotNull(iterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string1 = StringUtils.join(iterator0, "108A0A-1324A-1118A64A-2212");
      assertFalse(arrayList0.contains(string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeStart("", "");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = (-1315);
      intArray0[3] = (-1138);
      intArray0[4] = 64;
      intArray0[5] = (-2212);
      String string0 = StringUtils.join(intArray0, 'A');
      assertArrayEquals(new int[] {0, 0, (-1315), (-1138), 64, (-2212)}, intArray0);
      assertNotNull(string0);
      assertEquals("0A0A-1315A-1138A64A-2212", string0);
      assertEquals(6, intArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.overlay("0A0A-1315A-1138A64A-2212", "0A0A-1315A-1138A64A-2212", (-1315), (-2212));
      assertNotNull(string1);
      assertEquals("0A0A-1315A-1138A64A-22120A0A-1315A-1138A64A-2212", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'A';
      int int0 = StringUtils.indexOfAny((CharSequence) "0A0A-1315A-1138A64A-22120A0A-1315A-1138A64A-2212", charArray0);
      assertArrayEquals(new char[] {'L', 'A'}, charArray0);
      assertEquals(1, int0);
      assertEquals(2, charArray0.length);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains(string1));
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Iterator<String> iterator0 = arrayList0.iterator();
      assertFalse(arrayList0.contains(string1));
      assertNotNull(iterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string2 = StringUtils.join(iterator0, "0A0A-1315A-1138A64A-2212");
      assertFalse(arrayList0.contains(string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeStart("", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", " is not in the range '0' - '9'", "Ik");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Ik", charArray0);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertFalse(boolean1);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "Ik", charArray0);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertFalse(boolean2);
      assertEquals(1, charArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.removeStartIgnoreCase("...", "^`a=p");
      assertNotNull(string1);
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) " is not in the range '0' - '9'";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) " is not in the range '0' - '9'";
      charSequenceArray0[6] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("Ik", charSequenceArray0);
      assertEquals(2, int0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean3 = StringUtils.isMixedCase("...");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      String string0 = "=DiK#y?7";
      String string1 = StringUtils.replaceAll("=DiK#y?7", "cy>0X4^cy>0X4^", "AS|o\"NR_j-{+\"5G*h");
      assertNotNull(string1);
      assertEquals("=DiK#y?7", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumeric("=DiK#y?7");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat("AS|o\"NR_j-{+\"5G*h", "AS|o\"NR_j-{+\"5G*h", (-1816));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.abbreviateMiddle((String) null, "M$x7_ ao*T&5nR,!C ", 8);
      assertNull(string3);
      
      String string4 = StringUtils.normalizeSpace("=DiK#y?7");
      assertNotNull(string4);
      assertEquals("=DiK#y?7", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.getDigits(">5d");
      assertNotNull(string5);
      assertEquals("5", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.repeat('S', 8);
      assertNotNull(string6);
      assertEquals("SSSSSSSS", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)497;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '(', (-1816), 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1816
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
      
      String string0 = StringUtils.repeat((String) null, 2557);
      assertNull(string0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.repeat('n', 108);
      assertNotNull(string1);
      assertEquals("nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn", string1);
      
      boolean boolean2 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.replacePattern("", (String) null, "Locale must not be nullSupplied value must be a valid byte literal between -128 and 127: [FI&&p>MPx");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean3 = StringUtils.isAllLowerCase(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string3 = StringUtils.replaceChars("Cannot clone Cloneable type ", "\r", "jnL)p6HL=`K%.J':");
      assertNotNull(string3);
      assertEquals("Cannot clone Cloneable type ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.replacePattern("Cannot clone Cloneable type ", "dFB,z I} ", "ZQ')O@>3cP(]|d");
      assertNotNull(string4);
      assertEquals("Cannot clone Cloneable type ", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Cannot clone Cloneable type ", (CharSequence) "Cannot clone Cloneable type ", 15);
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType(", Length: ");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.substringsBetween("Z}vENT]hXB", "\r", "Invalid locale format:");
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "{.s8N";
      charSequenceArray0[1] = (CharSequence) "{.s8N";
      charSequenceArray0[2] = (CharSequence) "{.s8N";
      charSequenceArray0[3] = (CharSequence) "{.s8N";
      String string0 = StringUtils.lowerCase("Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("minimum abbreviation width with offset is %d", string0);
      
      charSequenceArray0[4] = (CharSequence) "minimum abbreviation width with offset is %d";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Minimum abbreviation width with offset is %d";
      stringArray0[1] = "{.s8N";
      stringArray0[2] = "Minimum abbreviation width with offset is %d";
      String string1 = StringUtils.replaceEach("Minimum abbreviation width with offset is %d", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertEquals(3, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[5] = (CharSequence) "Minimum abbreviation width with offset is %d";
      String string2 = StringUtils.prependIfMissing("{.s8N", "{.s8N", charSequenceArray0);
      assertNotNull(string2);
      assertEquals("{.s8N", string2);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsAny("{.s8N", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("Minimum abbreviation width with offset is %d", charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      String string0 = StringUtils.substringBefore(":{dx d~e=", ":{dx d~e=");
      assertNotNull(string0);
      assertEquals("", string0);
      
      StringWriter stringWriter0 = new StringWriter(48);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      stringWriter0.write(48);
      assertEquals("0", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("0", stringWriter0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("0", stringBuffer0.toString());
      
      boolean boolean0 = StringUtils.containsWhitespace(stringBuffer0);
      assertFalse(boolean0);
      assertEquals("0", stringWriter0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("0", stringBuffer0.toString());
      
      boolean boolean1 = StringUtils.isMixedCase(":{dx d~e=");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.uncapitalize("wratMTvqG7");
      assertNotNull(string1);
      assertEquals("wratMTvqG7", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastOrdinalIndexOf("wratMTvqG7", "", 48);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      String string0 = null;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      String string1 = StringUtils.joinWith((String) null, objectArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(1, objectArray0.length);
      
      String[] stringArray0 = StringUtils.split("", (String) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Array element ");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      int int0 = 95;
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 95);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = 971;
      int int3 = StringUtils.lastOrdinalIndexOf("", "", 971);
      assertEquals(0, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      String string0 = "";
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 11.745617858254109;
      String string1 = "Jf7jXemhh&aJ";
      // Undeclared exception!
      try { 
        StringUtils.repeat("Jf7jXemhh&aJ", Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.strip((String) null, (String) null);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "*n@^D47zIYx`#\"ladn", 235);
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase((String) null, "*n@^D47zIYx`#\"ladn", stringArray0);
      assertNull(string2);
      assertEquals(10, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 235);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("The character ", (CharSequence) null, stringArray0);
      assertNotNull(string3);
      assertEquals("The character ", string3);
      assertEquals(10, stringArray0.length);
      
      String string4 = StringUtils.rightPad((String) null, 62, "The character ");
      assertNull(string4);
      
      String string5 = StringUtils.chomp("The character ");
      assertNotNull(string5);
      assertEquals("The character ", string5);
      assertTrue(string5.equals((Object)string3));
      
      String string6 = StringUtils.getIfBlank(", Length: ", (Supplier<String>) null);
      assertNotNull(string6);
      assertEquals(", Length: ", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string7 = StringUtils.substringBefore((String) null, "EUnp");
      assertNull(string7);
      
      boolean boolean1 = StringUtils.isNumericSpace("*n@^D47zIYx`#\"ladn");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string8 = StringUtils.deleteWhitespace("*n@^D47zIYx`#\"ladn");
      assertNotNull(string8);
      assertEquals("*n@^D47zIYx`#\"ladn", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      
      String string9 = StringUtils.substringAfter((String) null, 1716);
      assertNull(string9);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "k0r");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(10, stringArray0.length);
      assertEquals(10, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      String string0 = StringUtils.repeat('a', (-128));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.normalizeSpace(" is not in the range '0' - '9'");
      assertNotNull(string1);
      assertEquals("is not in the range '0' - '9'", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Ik", (CharSequence) "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("Ik");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.replace("Ik", "|D|tRj", "");
      assertNotNull(string2);
      assertEquals("Ik", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isAlphanumeric("Ik");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string3 = StringUtils.difference("Ik", "HVLyftE]0<\"");
      assertNotNull(string3);
      assertEquals("HVLyftE]0<\"", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " is not in the range '0' - '9'", (CharSequence) "Ik", 140);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      boolean boolean3 = StringUtils.containsNone((CharSequence) "|D|tRj", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean3);
      assertEquals(0, charArray0.length);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      String string4 = StringUtils.substringAfter((String) null, (-1467));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      String string0 = StringUtils.replace("'$", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("'$", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "'$", "'$");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "'$", 177, 177);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("'$", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.substringBefore("'$", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string1);
      assertEquals("'$", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceOnceIgnoreCase("Arguments cannot both be null", (String) null, " Xw#");
      assertNotNull(string2);
      assertEquals("Arguments cannot both be null", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceChars("'$", "Arguments cannot both be null", "Strings must not be null");
      assertNotNull(string3);
      assertEquals("'$", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.join((Object[]) null, "Minimum abbreviation width with offset is %d", 1396, 1726);
      assertNull(string4);
      
      int int2 = StringUtils.countMatches((CharSequence) "'$", (CharSequence) null);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string5 = StringUtils.appendIfMissingIgnoreCase("$-pr(C;Zlc#S3!~>9", "'$", stringArray0);
      assertNotNull(string5);
      assertEquals("$-pr(C;Zlc#S3!~>9'$", string5);
      assertEquals(1, stringArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.overlay("\n", "B3erwgW#I", 13, 13);
      assertNotNull(string1);
      assertEquals("\nB3erwgW#I", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rotate("B3erwgW#I", 13);
      assertNotNull(string2);
      assertEquals("gW#IB3erw", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAllLowerCase("\nB3erwgW#I");
      assertFalse(boolean0);
      
      String string3 = StringUtils.repeat("_48feD'", "gW#IB3erw", 59);
      assertNotNull(string3);
      assertEquals("_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAlphanumeric("_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.difference("4k&owb^e", "{b>;w&ymP^T#/G|(~]R{b>;w&ymP^T#/G|(~]R");
      assertNotNull(string4);
      assertEquals("{b>;w&ymP^T#/G|(~]R{b>;w&ymP^T#/G|(~]R", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\nB3erwgW#I", (CharSequence) "_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'", (-419));
      assertEquals((-1), int0);
      
      String string5 = "%9Z85}C#W";
      String string6 = StringUtils.abbreviateMiddle("ZCwxfK&QS>`", "%9Z85}C#W", 13);
      assertNotNull(string6);
      assertEquals("ZCwxfK&QS>`", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "B3erwgW#I", (CharSequence) null);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, '8', 83, 313);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 83
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("@oXvl<g+");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      
      char[] charArray0 = new char[8];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("@oXvl<g+");
      assertArrayEquals(new int[] {64, 111, 88, 118, 108, 60, 103, 43}, intArray0);
      assertNotNull(intArray0);
      assertEquals(8, intArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("@oXvl<g+", "", (-1705));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.prependIfMissingIgnoreCase("Minimum abbreviation width is %d", "@oXvl<g+", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(string0);
      assertEquals("@oXvl<g+Minimum abbreviation width is %d", string0);
      assertEquals(7, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "@oXvl<g+", 4026);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.abbreviateMiddle("@oXvl<g+", (String) null, 4026);
      assertNotNull(string1);
      assertEquals("@oXvl<g+", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "@oXvl<g+Minimum abbreviation width is %d", (CharSequence) null);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      String string2 = StringUtils.replaceOnceIgnoreCase("Minimum abbreviation width is %d", "@oXvl<g+", (String) null);
      assertNotNull(string2);
      assertEquals("Minimum abbreviation width is %d", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\r";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\r", 25, (-1));
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      String string2 = locale0.toLanguageTag();
      assertNotNull(string2);
      assertEquals("de-DE", string2);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.toRootLowerCase("<\"N0");
      assertNotNull(string3);
      assertEquals("<\"n0", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("de-DE", 'm');
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.leftPad("<\"n0", 16);
      assertNotNull(string5);
      assertEquals("            <\"n0", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      String string0 = StringUtils.right("", 30);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.chop("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (char[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.swapCase("comparator");
      assertNotNull(string2);
      assertEquals("COMPARATOR", string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "COMPARATOR", (CharSequence) "");
      assertEquals(0, int0);
      
      String string3 = StringUtils.leftPad((String) null, 48, "");
      assertNull(string3);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)8192;
      shortArray0[1] = (short)13;
      shortArray0[2] = (short)59;
      shortArray0[3] = (short)5;
      shortArray0[4] = (short)1197;
      shortArray0[5] = (short)644;
      shortArray0[6] = (short)82;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '1', (int) (short)644, (int) (short)8192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 644
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 1848, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 865.6F;
      floatArray0[3] = 1393.5938F;
      String string1 = StringUtils.join(floatArray0, ';');
      assertArrayEquals(new float[] {0.0F, 1.0F, 865.6F, 1393.5938F}, floatArray0, 0.01F);
      assertNotNull(string1);
      assertEquals("0.0;1.0;865.6;1393.5938", string1);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.strip((String) null, "108A0A0A-1118A64A-2212");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "", 235);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("108A0A0A-1118A64A-2212", "", stringArray0);
      assertNotNull(string2);
      assertEquals("108A0A0A-1118A64A-2212", string2);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, 778);
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceOnce("`$Q6b\"eY=J", (String) null, (String) null);
      assertNotNull(string3);
      assertEquals("`$Q6b\"eY=J", string3);
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isBlank("`$Q6b\"eY=J");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.center("", 0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.truncate("", 0, 1615);
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.reverse((String) null);
      assertNull(string6);
      
      boolean boolean2 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean2);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string7 = StringUtils.overlay("`$Q6b\"eY=J", "P\"hI#{s6ED%#]]", 1615, 1615);
      assertNotNull(string7);
      assertEquals("`$Q6b\"eY=JP\"hI#{s6ED%#]]", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.truncate("", 76);
      assertNotNull(string8);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string4));
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "$_J#Ze95PgXg3,f0";
      stringArray0[1] = ")_F8_%J>*D5|L0y";
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) ")_F8_%J>*D5|L0y";
      charSequenceArray0[1] = (CharSequence) ")_F8_%J>*D5|L0y";
      charSequenceArray0[2] = (CharSequence) ")_F8_%J>*D5|L0y";
      charSequenceArray0[3] = (CharSequence) "$_J#Ze95PgXg3,f0";
      charSequenceArray0[4] = (CharSequence) "$_J#Ze95PgXg3,f0";
      String string0 = StringUtils.prependIfMissingIgnoreCase("Locale must not be null", "$_J#Ze95PgXg3,f0", charSequenceArray0);
      assertNotNull(string0);
      assertEquals("$_J#Ze95PgXg3,f0Locale must not be null", string0);
      assertEquals(5, charSequenceArray0.length);
      
      String string1 = StringUtils.substringBetween(" vs ", "$_J#Ze95PgXg3,f0", (String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase(charSequenceArray0[1]);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string2 = StringUtils.defaultString("6Eg}rdy?-g", (String) null);
      assertNotNull(string2);
      assertEquals("6Eg}rdy?-g", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.overlay("yt,q~5.\"+q-ZT\"Er5", "$_J#Ze95PgXg3,f0Locale must not be null", (-1117), (-1117));
      assertNotNull(string3);
      assertEquals("$_J#Ze95PgXg3,f0Locale must not be nullyt,q~5.\"+q-ZT\"Er5", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean1 = StringUtils.endsWithAny("Locale must not be null", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.unwrap("Locale must not be null", '\"');
      assertNotNull(string4);
      assertEquals("Locale must not be null", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[2] = '';
      charArray0[4] = '';
      charArray0[2] = 'i';
      charArray0[7] = '';
      String string1 = StringUtils.difference("\r", "\r");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\r", (CharSequence) "\r", 6);
      assertEquals(0, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'i';
      objectArray0[1] = (Object) '';
      String string2 = StringUtils.joinWith("#bX*1lc^La7;d1", objectArray0);
      assertNotNull(string2);
      assertEquals("i#bX*1lc^La7;d1", string2);
      assertEquals(2, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) '';
      floatArray0[1] = (float) '';
      floatArray0[2] = (float) 'i';
      floatArray0[3] = (float) '';
      floatArray0[4] = (float) 'i';
      String string3 = StringUtils.join(floatArray0, '3');
      assertArrayEquals(new float[] {127.0F, 127.0F, 105.0F, 127.0F, 105.0F}, floatArray0, 0.01F);
      assertNotNull(string3);
      assertEquals("127.03127.03105.03127.03105.0", string3);
      assertEquals(5, floatArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isBlank("\r");
      assertTrue(boolean0);
      
      String string4 = StringUtils.center("#bX*1lc^La7;d1", 0);
      assertNotNull(string4);
      assertEquals("#bX*1lc^La7;d1", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.substringBefore("uB", "127.03127.03105.03127.03105.0");
      assertNotNull(string5);
      assertEquals("uB", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      boolean boolean1 = StringUtils.containsWhitespace("#bX*1lc^La7;d1");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isMixedCase("uB");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte)50;
      byteArray0[8] = (byte)48;
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, (int) (byte) (-115), 17);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      String[] stringArray0 = new String[4];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, '.');
      assertFalse(linkedList0.contains('.'));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      String string1 = StringUtils.wrap("7qgL[^^KV&<7P=]o", "");
      assertNotNull(string1);
      assertEquals("7qgL[^^KV&<7P=]o", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertEquals(4, stringArray0.length);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = StringUtils.split("", "7qgL[^^KV&<7P=]o", 380);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
      
      String string0 = StringUtils.repeat("cy>0X4^", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(string0);
      assertEquals("cy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]acy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]acy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]acy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]acy>0X4^", string0);
      
      String string1 = StringUtils.defaultString("cy>0X4^", "cy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]acy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]acy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]acy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]acy>0X4^");
      assertNotNull(string1);
      assertEquals("cy>0X4^", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.startsWithAny("org.apache.commons.lang3.Charsets", stringArray0);
      assertTrue(boolean1);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("WD~^;^Yo;Z6H", '1');
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("...", "cy>0X4^", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string2);
      assertEquals("...cy>0X4^", string2);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfAny("`$Q6b\"eY=&J", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string3);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "...cy>0X4^", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      String string0 = StringUtils.swapCase("2");
      assertNotNull(string0);
      assertEquals("2", string0);
      
      String string1 = StringUtils.abbreviate((String) null, "JW&D4``", (-499), 51);
      assertNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) "2");
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-432);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '3', (int) (short) (-432), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -432
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      String string0 = StringUtils.difference("Object varargs must not be null", "Object varargs must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.repeat('}', 0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      
      CharBuffer charBuffer1 = StringUtils.defaultIfBlank(charBuffer0, charBuffer0);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer1.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      String string0 = StringUtils.right("", 30);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.remove("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains(""));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      String string2 = StringUtils.chop("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)charSequence0));
      
      String string3 = StringUtils.mid((String) null, (-646), (-1));
      assertNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ".%pg{({'-h&|]MaHw", (-1601));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = '*';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'/', '*'}, charArray0);
      assertFalse(boolean0);
      assertEquals(2, charArray0.length);
      
      String string4 = StringUtils.substringBetween("=gvoQ^n-k0*[+f", "=gvoQ^n-k0*[+f", "object");
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) ".%pg{({'-h&|]MaHw";
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) "";
      int int1 = StringUtils.indexOfAny((CharSequence) "object", charSequenceArray0);
      assertEquals(0, int1);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "offset cannot be negative");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.trim((String) null);
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      String string2 = StringUtils.join((Object[]) charSequenceArray0, 'i');
      assertNotNull(string2);
      assertEquals("iii", string2);
      assertEquals(4, charSequenceArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-97);
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'f');
      assertNull(stringArray0);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("iii", "{b>;w&ymP^T#/G|(~]R", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("iii{b>;w&ymP^T#/G|(~]R", string3);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, (-2970));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.leftPad((String) null, 8192, '4');
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.offerFirst("', has a length less than 2");
      assertTrue(linkedList0.contains("', has a length less than 2"));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Iterator<String> iterator0 = linkedList0.iterator();
      assertTrue(linkedList0.contains("', has a length less than 2"));
      assertNotNull(iterator0);
      assertEquals(1, linkedList0.size());
      
      String string0 = StringUtils.substringBefore("Eb6o<essDb7", 0);
      assertNotNull(string0);
      assertEquals("Eb6o<essDb7", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Eb6o<essDb7";
      charSequenceArray0[1] = (CharSequence) "', has a length less than 2";
      charSequenceArray0[2] = (CharSequence) "Eb6o<essDb7";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equals(charSequenceArray0[0], charSequenceArray0[1]);
      assertFalse(boolean2);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string1 = StringUtils.swapCase("Eb6o<essDb7");
      assertNotNull(string1);
      assertEquals("eB6O<ESSdB7", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.reverse("N-`)Kj8(fJ+1gYw%0p({Rsl");
      assertNotNull(string2);
      assertEquals("lsR{(p0%wYg1+Jf(8jK)`-N", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "', has a length less than 2", charSequenceArray0[0], 1785);
      assertEquals(24, int0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean3 = StringUtils.isBlank("Eb6o<essDb7");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string3 = StringUtils.repeat('0', 6);
      assertNotNull(string3);
      assertEquals("000000", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.wrap("000000", '1');
      assertNotNull(string4);
      assertEquals("10000001", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      int int1 = StringUtils.indexOf((CharSequence) "10000001", (CharSequence) "000000");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      int[] intArray0 = new int[24];
      intArray0[0] = (int) 'P';
      intArray0[1] = (int) 'P';
      intArray0[2] = (int) 'P';
      intArray0[4] = (int) 'P';
      intArray0[5] = (int) 'P';
      intArray0[6] = (int) 'P';
      intArray0[7] = (int) 'P';
      String string0 = StringUtils.join(intArray0, 'b', 80, 80);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(24, intArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      String string1 = StringUtils.getIfEmpty("", supplier0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("{b>;w&ymP^T#/G|(~]R");
      assertNotNull(string0);
      assertEquals("{b>;w&ymP^T#/G|(~]R", string0);
      
      String string1 = StringUtils.trimToNull("Sxa=R^J*mCV}S");
      assertNotNull(string1);
      assertEquals("Sxa=R^J*mCV}S", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviateMiddle(" in an array of ", "Sxa=R^J*mCV}S", 62);
      assertNotNull(string2);
      assertEquals(" in an array of ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.ordinalIndexOf("Sxa=R^J*mCV}S", "{b>;w&ymP^T#/G|(~]R", (-1294));
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(0, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.appendIfMissing((String) null, (CharSequence) null, stringArray0);
      assertNull(string4);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "Sxa=R^J*mCV}S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      String string0 = StringUtils.replace("clone", "clone", "clone");
      assertNotNull(string0);
      assertEquals("clone", string0);
      
      String string1 = StringUtils.join((long[]) null, 'g');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("clone");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "clone", (CharSequence) "clone");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("clone");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.difference(" in an array of ", "P6j");
      assertNotNull(string2);
      assertEquals("P6j", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.unwrap("S=]`jMI:r", '5');
      assertNotNull(string3);
      assertEquals("S=]`jMI:r", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.truncate("S=]`jMI:r", 11);
      assertNotNull(string4);
      assertEquals("S=]`jMI:r", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "S=]`jMI:r", (CharSequence) null, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains(string2));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains(string2));
      assertNotNull(set0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      
      boolean boolean2 = linkedList0.addAll((Collection<? extends String>) set0);
      assertFalse(linkedList0.contains(string2));
      assertFalse(set0.contains(string2));
      assertTrue(boolean2);
      assertEquals(2, linkedList0.size());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = linkedList0.removeFirstOccurrence("S=]`jMI:r");
      assertFalse(linkedList0.contains(string2));
      assertFalse(boolean3);
      assertEquals(2, linkedList0.size());
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      Iterator<String> iterator0 = linkedList0.iterator();
      assertFalse(linkedList0.contains(string2));
      assertNotNull(iterator0);
      assertEquals(2, linkedList0.size());
      
      String string5 = StringUtils.join(iterator0, '5');
      assertFalse(linkedList0.contains(string2));
      assertNotNull(string5);
      assertEquals("unicode-1-1-utf-85UTF8", string5);
      assertEquals(2, linkedList0.size());
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean4 = StringUtils.isAlphaSpace("clone");
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "]^g`?OZ|<hS78";
      stringArray0[1] = "]^g`?OZ|<hS78";
      String string0 = StringUtils.repeat('f', 5);
      assertNotNull(string0);
      assertEquals("fffff", string0);
      
      String string1 = StringUtils.normalizeSpace("]^g`?OZ|<hS78");
      assertNotNull(string1);
      assertEquals("]^g`?OZ|<hS78", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "]^g`?OZ|<hS78", (CharSequence) "]^g`?OZ|<hS78");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("]^g`?OZ|<hS78");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "]^g`?OZ|<hS78", 5, 3);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "]^g`?OZ|<hS78", "]^g`?OZ|<hS78");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.mid(".%pg{({'-h&|]MaHw", (-1116), (-1601));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "]^g`?OZ|<hS78", 3);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      boolean boolean3 = StringUtils.containsAny((CharSequence) "]^g`?OZ|<hS78", charArray0);
      assertArrayEquals(new char[] {'f', 'f', 'f', 'f', 'f'}, charArray0);
      assertFalse(boolean3);
      assertEquals(5, charArray0.length);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string3 = StringUtils.substringBetween("]^g`?OZ|<hS78", "]^g`?OZ|<hS78", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      int int2 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int2);
      assertEquals(4, stringArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      boolean boolean4 = StringUtils.isAlphanumeric("Minimum abbreviation width is %d");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      float[] floatArray0 = new float[10];
      String string0 = StringUtils.join(floatArray0, 'S');
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals("0.0S0.0S0.0S0.0S0.0S0.0S0.0S0.0S0.0S0.0", string0);
      assertEquals(10, floatArray0.length);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.difference("0.0S0.0S0.0S0.0S0.0S0.0S0.0S0.0S0.0S0.0", "0.0S0.0S0.0S0.0S0.0S0.0S0.0S0.0S0.0S0.0");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      charArray0[3] = 'S';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "0.0S0.0S0.0S0.0S0.0S0.0S0.0S0.0S0.0S0.0", charArray0);
      assertArrayEquals(new char[] {'S', 'S', 'S', 'S'}, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      String string0 = StringUtils.right("", 30);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.defaultString("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      
      String string2 = StringUtils.join((long[]) null, 'l');
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      String string0 = StringUtils.replace("clone", "clone", "clone");
      assertNotNull(string0);
      assertEquals("clone", string0);
      
      String string1 = StringUtils.join((long[]) null, 's');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("clone");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "clone", (CharSequence) "clone");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("clone");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      ByteBuffer byteBuffer0 = charset0.encode("clone");
      assertNotNull(byteBuffer0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(5, byteBuffer0.limit());
      assertEquals(5, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=5 cap=5]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(5, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      
      // Undeclared exception!
      try { 
        Charset.forName("clone");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // clone
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase((String) null, ", Length: 0");
      assertNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = ", Length: 0";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      String string1 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string1);
      assertEquals(4, stringArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 12;
      intArray0[1] = (-1325);
      intArray0[2] = 50;
      intArray0[3] = 67;
      intArray0[4] = 54;
      String string2 = StringUtils.join(intArray0, '.', 67, 16);
      assertArrayEquals(new int[] {12, (-1325), 50, 67, 54}, intArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(5, intArray0.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(string0, stringArray0);
      assertTrue(boolean0);
      assertEquals(4, stringArray0.length);
      
      String string3 = StringUtils.substringAfterLast("\"lU4$", (String) null);
      assertNotNull(string3);
      assertEquals("", string3);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)13;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      String string0 = StringUtils.right("", 30);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.wrapIfMissing("jv$K", 'J');
      assertNotNull(string1);
      assertEquals("Jjv$KJ", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "Jjv$KJ", 30);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.lowerCase("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      byte[] byteArray0 = StringUtils.getBytes("Eb6o<essDb7", (Charset) null);
      assertNotNull(byteArray0);
      assertEquals(11, byteArray0.length);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertFalse(boolean1);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String string3 = StringUtils.uncapitalize("maxWith cannot be negative");
      assertNotNull(string3);
      assertEquals("maxWith cannot be negative", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, '}', 30, 2626);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{b>;w&ymP^T#/G|(~]R", 'm');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1, "r+)HMdAw0{]\"@82CP8m_Z zp*J");
      assertNotSame(stringArray1, stringArray0);
      assertSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      assertNotNull(stringArray2);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'd';
      intArray0[1] = (int) 'd';
      intArray0[2] = (int) 'd';
      intArray0[4] = (int) 'd';
      intArray0[5] = (int) 'd';
      intArray0[6] = (int) 'd';
      intArray0[7] = (int) 'd';
      String string0 = StringUtils.join(intArray0, 'b', 100, 100);
      assertArrayEquals(new int[] {100, 100, 100, 0, 100, 100, 100, 100}, intArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(8, intArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.center("Aborting to protect against StackOverflowError - output of one loop is the input of another", 100, 'd');
      assertNotNull(string1);
      assertEquals("ddddAborting to protect against StackOverflowError - output of one loop is the input of anotherddddd", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.getDigits("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "ddddAborting to protect against StackOverflowError - output of one loop is the input of anotherddddd", (CharSequence) "", 100);
      assertEquals(100, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "ddddAborting to protect against StackOverflowError - output of one loop is the input of anotherddddd");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = 'd';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      charArray0[5] = 'B';
      charArray0[6] = 'd';
      charArray0[7] = 'B';
      charArray0[8] = 'B';
      String string0 = StringUtils.join(charArray0, '(', 1541, 729);
      assertArrayEquals(new char[] {'B', 'd', 'B', 'B', 'B', 'B', 'd', 'B', 'B'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(9, charArray0.length);
      
      double double0 = StringUtils.getJaroWinklerDistance("{b>;w&ymP^T#/G|(~]R", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.defaultString("org.apache.commons.lang3.exception.CloneFailedException");
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.strip((String) null, "108A0A0A-1118A64A-2212");
      assertNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("p{InCombiningDiacriticalMarks}+", "*n@^D47zIYx`#\"ladn");
      assertEquals(0.4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      String string0 = StringUtils.trim("Cannot clone Cloneable type ");
      assertNotNull(string0);
      assertEquals("Cannot clone Cloneable type", string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string0));
      assertNotNull(treeSet0);
      
      treeSet0.clear();
      assertFalse(treeSet0.contains(string0));
      
      boolean boolean0 = treeSet0.add("M$x7_ ao*T&5nR,!C ");
      assertFalse(treeSet0.contains(string0));
      assertTrue(treeSet0.contains("M$x7_ ao*T&5nR,!C "));
      assertTrue(boolean0);
      
      boolean boolean1 = treeSet0.add("Cannot clone Cloneable type");
      assertFalse(treeSet0.contains("Cannot clone Cloneable type "));
      assertTrue(treeSet0.contains("M$x7_ ao*T&5nR,!C "));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Cannot clone Cloneable type");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("", (String) null, "Cannot clone Cloneable type ");
      assertNull(stringArray1);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("Arguments cannot both be null", "M$x7_ ao*T&5nR,!C ", (CharSequence[]) null);
      assertNotNull(string1);
      assertEquals("M$x7_ ao*T&5nR,!C Arguments cannot both be null", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", 1396, 1396);
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n", "\n");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.substringBefore("\n", "\n");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      short[] shortArray0 = new short[0];
      String string2 = StringUtils.replaceOnceIgnoreCase("\n", "$-pr(C;Zlc#S3!~>9", "ch");
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.countMatches((CharSequence) "\n", (CharSequence) "$-pr(C;Zlc#S3!~>9");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("\n", "\n", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("\n", string3);
      assertEquals(10, charSequenceArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      String string0 = StringUtils.difference("Object varargs must not be null", "yoUC=}32{,nDV");
      assertNotNull(string0);
      assertEquals("yoUC=}32{,nDV", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "yoUC=}32{,nDV", (CharSequence) "yoUC=}32{,nDV");
      assertEquals(1, int0);
      
      String string1 = StringUtils.uncapitalize("yoUC=}32{,nDV");
      assertNotNull(string1);
      assertEquals("yoUC=}32{,nDV", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Supplied value must be a valid byte literal between -128 and 127: [", "Supplied value must be a valid byte literal between -128 and 127: [", "Supplied value must be a valid byte literal between -128 and 127: [");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.substring((String) null, (-2044));
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("Arguments cannot both be null");
      assertTrue(boolean0);
      
      String string2 = StringUtils.wrapIfMissing((String) null, 'Q');
      assertNull(string2);
      
      String string3 = StringUtils.chomp((String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      String string0 = StringUtils.strip("u-|z#%q$qf5u.iq<", "u-|z#%q$qf5u.iq<");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = 585;
      String string1 = StringUtils.repeat("jnB,N]5|>~;C8j8*O]t", 585);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isBlank("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) string1;
      charSequenceArray0[1] = (CharSequence) "jnB,N]5|>~;C8j8*O]t";
      charSequenceArray0[2] = (CharSequence) "u-|z#%q$qf5u.iq<";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) string1;
      charSequenceArray0[6] = (CharSequence) string1;
      boolean boolean2 = StringUtils.equalsAny("", charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string2);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      StringUtils.capitalize(string1);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("", "Minimum abbreviation width is %d");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      String string0 = StringUtils.right("", 30);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.replaceChars("B@AY.eP583xP(PHWv;Y", '9', '9');
      assertNotNull(string1);
      assertEquals("B@AY.eP583xP(PHWv;Y", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      
      String string2 = StringUtils.lowerCase("#;}gJJ{$k{ ,&:x0+R0");
      assertNotNull(string2);
      assertEquals("#;}gjj{$k{ ,&:x0+r0", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "B@AY.eP583xP(PHWv;Y";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAny("b\"fVn7+f#`2^9r^)Y", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "b\"fVn7+f#`2^9r^)Y", (char[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)59;
      String string3 = StringUtils.join(byteArray0, '9');
      assertArrayEquals(new byte[] {(byte)38, (byte)12, (byte)38, (byte)31, (byte)1, (byte)59}, byteArray0);
      assertNotNull(string3);
      assertEquals("3891293893191959", string3);
      assertEquals(6, byteArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.stripStart(", Length: ", "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertNotNull(string4);
      assertEquals(", Length: ", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'd';
      intArray0[1] = (int) 'd';
      intArray0[2] = (int) 'd';
      String[] stringArray0 = new String[1];
      stringArray0[0] = "f:u|1L]_T)r&Vuy(true.false@X)I2?)|<u::SA~3=e";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("f:u|1L]_T)r&Vuy(true.false@X)I2?)|<u::SA~3=e", string0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "f:u|1L]_T)r&Vuy(true.false@X)I2?)|<u::SA~3=e", (CharSequence) "f:u|1L]_T)r&Vuy(true.false@X)I2?)|<u::SA~3=e");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      String string1 = StringUtils.join(charArray0, 'm', 0, 0);
      assertArrayEquals(new char[] {'m'}, charArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(1, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.leftPad("", 52, "}op");
      assertNotNull(string2);
      assertEquals("}op}op}op}op}op}op}op}op}op}op}op}op}op}op}op}op}op}", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripAccents("`$Q6b\"eY=J");
      assertNotNull(string0);
      assertEquals("`$Q6b\"eY=J", string0);
      
      boolean boolean1 = StringUtils.startsWithAny("0", stringArray0);
      assertFalse(boolean1);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String[] stringArray1 = StringUtils.splitByCharacterType(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(21, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int[] intArray0 = StringUtils.toCodePoints("`$Q6b\"eY=J");
      assertNotNull(intArray0);
      assertEquals(11, intArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, int0);
      assertEquals(21, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 108;
      intArray0[1] = 0;
      intArray0[2] = (-1324);
      intArray0[3] = (-1118);
      intArray0[4] = 64;
      intArray0[5] = (-2212);
      String string0 = StringUtils.join(intArray0, 'A');
      assertArrayEquals(new int[] {108, 0, (-1324), (-1118), 64, (-2212)}, intArray0);
      assertNotNull(string0);
      assertEquals("108A0A-1324A-1118A64A-2212", string0);
      assertEquals(6, intArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'A';
      floatArray0[1] = (float) (-2212);
      String string1 = StringUtils.join(floatArray0, 'A');
      assertArrayEquals(new float[] {65.0F, (-2212.0F)}, floatArray0, 0.01F);
      assertNotNull(string1);
      assertEquals("65.0A-2212.0", string1);
      assertEquals(2, floatArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isBlank("108A0A-1324A-1118A64A-2212");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.center((String) null, (-1118));
      assertNull(string2);
      
      boolean boolean2 = StringUtils.containsWhitespace("\r");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isMixedCase("108A0A-1324A-1118A64A-2212");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      boolean boolean4 = StringUtils.contains((CharSequence) "108A0A-1324A-1118A64A-2212", 108);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      
      String string3 = StringUtils.remove((String) null, 'Q');
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("Supplied value must be a valid byte literal between -32768 and 32767: [", (-1118));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
      
      String string0 = StringUtils.normalizeSpace(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertNotNull(string0);
      assertEquals("yu3k0bH:Wb_hfN^Zfu<q0]a", string0);
      
      boolean boolean1 = StringUtils.startsWithAny("org.apache.commons.lang3.Charsets", stringArray0);
      assertTrue(boolean1);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)256;
      shortArray0[1] = (short)23;
      String string1 = StringUtils.lowerCase((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("Minimum abbreviation width with offset is %dComparator should not be null.");
      assertNotNull(string2);
      assertEquals("Minimumabbreviationwidthwithoffsetis%dComparatorshouldnotbenull.", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.defaultIfBlank(" yu3k0bH:Wb_hfN^Zfu<q0]a", "-}-}");
      assertNotNull(string3);
      assertEquals(" yu3k0bH:Wb_hfN^Zfu<q0]a", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripAccents("`$Q6b\"eY=J");
      assertNotNull(string0);
      assertEquals("`$Q6b\"eY=J", string0);
      
      boolean[] booleanArray0 = new boolean[2];
      String string1 = StringUtils.lowerCase((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.swapCase(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertNotNull(string2);
      assertEquals(" YU3K0Bh:wB_HFn^zFU<Q0]A", string2);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "]^g`?OZ|<hS78";
      stringArray0[1] = "]^g`?OZ|<hS78";
      String string0 = StringUtils.repeat('f', 5);
      assertNotNull(string0);
      assertEquals("fffff", string0);
      
      String string1 = StringUtils.normalizeSpace("]^g`?OZ|<hS78");
      assertNotNull(string1);
      assertEquals("]^g`?OZ|<hS78", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "]^g`?OZ|<hS78", (CharSequence) "]^g`?OZ|<hS78");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("]^g`?OZ|<hS78");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlphanumeric("]^g`?OZ|<hS78");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.difference("fffff", "fffff");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.unwrap("fffff", 'd');
      assertNotNull(string3);
      assertEquals("fffff", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "fffff", (CharSequence) "fffff", 11);
      assertEquals(0, int0);
      
      Iterator<Locale.LanguageRange> iterator0 = (Iterator<Locale.LanguageRange>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      String string4 = StringUtils.join(iterator0, 'f');
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean3 = StringUtils.isAlphaSpace("]^g`?OZ|<hS78");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.strip("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("", "#?IflX/%8Giqher");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.substringBefore("Minimum abbreviation width is %d", "#?IflX/%8Giqher");
      assertNotNull(string2);
      assertEquals("Minimum abbreviation width is %d", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Minimum abbreviation width is %d", (CharSequence[]) stringArray0);
      assertFalse(boolean1);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.chomp("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Minimum abbreviation width is %d");
      assertNotNull(charBuffer0);
      assertEquals(32, charBuffer0.remaining());
      assertEquals(32, charBuffer0.capacity());
      assertEquals(32, charBuffer0.length());
      assertEquals(32, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals("Minimum abbreviation width is %d", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("#?IflX/%8Giqher"));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.MAP_EXTENDED_RANGES, locale_FilteringMode0);
      
      boolean boolean2 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("Minimum abbreviation width is %d", ")fO>r0*:IBr8V#", stringArray0);
      assertNotNull(string4);
      assertEquals("Minimum abbreviation width is %d)fO>r0*:IBr8V#", string4);
      assertEquals(0, stringArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.leftPad("K`ZyvoJLw,hUARC$*ly", (-1678), 'D');
      assertNotNull(string5);
      assertEquals("K`ZyvoJLw,hUARC$*ly", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.defaultString((String) null);
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "K`ZyvoJLw,hUARC$*ly", (-3344));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string7 = StringUtils.swapCase("#?IflX/%8Giqher");
      assertNotNull(string7);
      assertEquals("#?iFLx/%8gIQHER", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.replaceAll("-}", "-}", "-}");
      assertNotNull(string0);
      assertEquals("-}", string0);
      
      charSequenceArray0[0] = (CharSequence) "-}";
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 'd';
      doubleArray0[1] = (double) 'd';
      doubleArray0[1] = (double) 'd';
      doubleArray0[3] = (double) 'd';
      doubleArray0[4] = (double) 'd';
      doubleArray0[5] = (double) 'd';
      String string1 = StringUtils.join(doubleArray0, 'c', 3852, 5);
      assertArrayEquals(new double[] {0.0, 100.0, 0.0, 100.0, 100.0, 100.0}, doubleArray0, 0.01);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(6, doubleArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.substringBefore((String) null, "-}");
      assertNull(string2);
      
      charSequenceArray0[2] = (CharSequence) null;
      String string3 = StringUtils.join((Object[]) charSequenceArray0, ';', 313, (-2107));
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, "e036iIIW(jhf");
      assertNull(stringArray0);
      
      String string4 = StringUtils.capitalize((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.trimToNull("?/~<L=$*}^2cm.ZsI3O");
      assertNotNull(string5);
      assertEquals("?/~<L=$*}^2cm.ZsI3O", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.rightPad(" iJe{GYjJ|Kx=S", 32, 'g');
      assertNotNull(string0);
      assertEquals(" iJe{GYjJ|Kx=Sggggggggggggggggg", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "Omp!\"?\"1fnI jR", "a:*;.");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      String string0 = StringUtils.substring("Minimum abbreviation width with offset is %d", (-3256));
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = 'U';
      charArray0[2] = 'O';
      charArray0[3] = 'f';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Minimum abbreviation width with offset is %d", charArray0);
      assertArrayEquals(new char[] {'3', 'U', 'O', 'f'}, charArray0);
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" in an array of ", " in an array of ", 98);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.wrapIfMissing("Comparator should not be null.", "Minimum abbreviation width with offset is %d");
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width with offset is %dComparator should not be null.Minimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripAccents(", Length: 0");
      assertNotNull(string2);
      assertEquals(", Length: 0", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.startsWithAny("Minimum abbreviation width with offset is %d", stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      String string3 = StringUtils.stripToEmpty("q4E}pQ$ v");
      assertNotNull(string3);
      assertEquals("q4E}pQ$ v", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.removeEndIgnoreCase("g 5", "H:Wb_hfN^Zfu<q0]");
      assertNotNull(string4);
      assertEquals("g 5", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      int int1 = StringUtils.ordinalIndexOf("Minimum abbreviation width with offset is %d", "H:Wb_hfN^Zfu<q0]", 15);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("+rQ8ZS+m`jMI:r", stringArray0);
      assertTrue(boolean1);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[2] = '';
      charArray0[4] = '';
      String string1 = StringUtils.remove("\r", '');
      assertNotNull(string1);
      assertEquals("\r", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripAccents("\r");
      assertNotNull(string2);
      assertEquals("\r", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.trim("Minimum abbreviation width is %d");
      assertNotNull(string3);
      assertEquals("Minimum abbreviation width is %d", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string3));
      assertNotNull(treeSet0);
      
      boolean boolean0 = treeSet0.add("\r");
      assertFalse(treeSet0.contains(string3));
      assertTrue(treeSet0.contains("\r"));
      assertTrue(boolean0);
      
      boolean boolean1 = treeSet0.add("Minimum abbreviation width is %d");
      assertTrue(treeSet0.contains(string3));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = treeSet0.floor("d=Mjx'vgFIR");
      assertFalse(treeSet0.contains("d=Mjx'vgFIR"));
      assertTrue(treeSet0.contains(string3));
      assertNotNull(string4);
      assertEquals("Minimum abbreviation width is %d", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>(92);
      assertFalse(arrayDeque0.contains(92));
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Integer integer0 = new Integer(92);
      assertNotNull(integer0);
      assertEquals(92, (int)integer0);
      
      boolean boolean2 = arrayDeque0.add(integer0);
      assertTrue(arrayDeque0.contains(92));
      assertTrue(boolean2);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string5 = StringUtils.join((Iterable<?>) arrayDeque0, '');
      assertTrue(arrayDeque0.contains(92));
      assertNotNull(string5);
      assertEquals("92", string5);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.replaceFirst("Minimum abbreviation width is %d", "ov7", "b}+uqI`tA$j(UQ");
      assertNotNull(string6);
      assertEquals("Minimum abbreviation width is %d", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      
      String string7 = StringUtils.toRootUpperCase("UM-^ID6J^3{/");
      assertNotNull(string7);
      assertEquals("UM-^ID6J^3{/", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.join((short[]) null, '', 92, (-715));
      assertNull(string8);
      
      String string9 = StringUtils.substringAfter("Minimum abbreviation width is %d", (String) null);
      assertNotNull(string9);
      assertEquals("", string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      
      String[] stringArray0 = StringUtils.split("), Length", "\r");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.repeat('a', 75);
      assertNotNull(string1);
      assertEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
      assertNotNull(string2);
      assertEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", string2);
      assertTrue(string2.equals((Object)string1));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = 'a';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", charArray0);
      assertArrayEquals(new char[] {'a', 'a', 'a', 'a'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      String string3 = StringUtils.substring("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", 39);
      assertNotNull(string3);
      assertEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.substringAfter("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", (String) null);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      String string0 = StringUtils.prependIfMissingIgnoreCase("...", "...", (CharSequence[]) null);
      assertNotNull(string0);
      assertEquals("...", string0);
      
      String string1 = StringUtils.rightPad("Cannot clone Cloneable type ", (-2942), "...");
      assertNotNull(string1);
      assertEquals("Cannot clone Cloneable type ", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("...{b>;w&ymP^T#/G|(~]R");
      assertNotNull(string2);
      assertEquals("...{b>;w&ymP^T#/G|(~]R", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfEmpty("?kGI]Y4b", supplier0);
      assertNotNull(string3);
      assertEquals("?kGI]Y4b", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.center("#r1S[x", 740, 'L');
      assertNotNull(string4);
      assertEquals("LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL#r1S[xLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      StringUtils.getDigits("#r1S[x");
      StringUtils.indexOfIgnoreCase((CharSequence) "...", (CharSequence) "Cannot clone Cloneable type ", 95);
      StringUtils.indexOfIgnoreCase((CharSequence) "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL#r1S[xLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL", (CharSequence) "1");
      StringUtils.isAlphanumericSpace("...{b>;w&ymP^T#/G|(~]R");
      StringUtils.replacePattern("zb.(V4m9uP", "s;*B%N~", "KgC2l8fG`=p(_o0");
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 369;
      longArray0[1] = (long) (-2942);
      longArray0[2] = (long) (-1);
      longArray0[3] = 0L;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 'L';
      longArray0[6] = (long) 95;
      longArray0[7] = (long) 'L';
      longArray0[8] = (long) 'L';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'L', 894, 1195);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 894
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      String string0 = StringUtils.stripAccents("org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.LocaleUtils", string0);
      
      String string1 = StringUtils.trim((String) null);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\n", "org.apache.commons.lang3.LocaleUtils", 3);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("Cannot clone Cloneable type ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceIgnoreCase("', has a length less than 2", "', has a length less than 2", "1;.z5R?");
      assertNotNull(string2);
      assertEquals("1;.z5R?", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.trimToNull("H5eyaHrS+m`jMI:r");
      assertNotNull(string3);
      assertEquals("H5eyaHrS+m`jMI:r", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.replaceIgnoreCase((String) null, (String) null, "LM?w`KI>c$");
      assertNull(string4);
      
      String string5 = StringUtils.unwrap((String) null, '}');
      assertNull(string5);
      
      String string6 = StringUtils.abbreviate((String) null, 1738);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.offerFirst("', has a length less than 2");
      assertTrue(linkedList0.contains("', has a length less than 2"));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      int[] intArray0 = StringUtils.toCodePoints("', has a length less than 2");
      assertNotNull(intArray0);
      assertEquals(27, intArray0.length);
      
      String string0 = StringUtils.wrap("', has a length less than 2", "]_T)r&Vuy(");
      assertNotNull(string0);
      assertEquals("]_T)r&Vuy(', has a length less than 2]_T)r&Vuy(", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "]_T)r&Vuy(', has a length less than 2]_T)r&Vuy(";
      charSequenceArray0[1] = (CharSequence) "]_T)r&Vuy(', has a length less than 2]_T)r&Vuy(";
      charSequenceArray0[2] = (CharSequence) "]_T)r&Vuy(";
      String string1 = StringUtils.removePattern("', has a length less than 2", "', has a length less than 2");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean1 = StringUtils.isEmpty("]_T)r&Vuy(");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.rightPad("\r", 32, "kJ-l8|wK?Z");
      assertNotNull(string2);
      assertEquals("\rkJ-l8|wK?ZkJ-l8|wK?ZkJ-l8|wK?Zk", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      String string3 = StringUtils.join(floatArray0, 'o', 16, (-634));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(1, floatArray0.length);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.difference((String) null, "]_T)r&Vuy(");
      assertNotNull(string4);
      assertEquals("]_T)r&Vuy(", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.defaultString("Invalid locale format: ", "\rkJ-l8|wK?ZkJ-l8|wK?ZkJ-l8|wK?Zk");
      assertNotNull(string5);
      assertEquals("Invalid locale format: ", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "'Li>FhbI iObject varargs must not be null", 32);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.difference((String) null, "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "-{RV_kn7cf");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "!>";
      String string0 = StringUtils.center("!>", 29, ':');
      assertNotNull(string0);
      assertEquals(":::::::::::::!>::::::::::::::", string0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "-{RV_kn7cf", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string1 = StringUtils.strip((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("|WJ|?=Cannot clone Cloneable type ", (CharSequence) null, charSequenceArray0);
      assertNotNull(string2);
      assertEquals("|WJ|?=Cannot clone Cloneable type ", string2);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.rightPad("Strings must not be null", 740, "...{b>;w&ymP^T#/G|(~]R");
      assertNotNull(string3);
      assertEquals("Strings must not be null...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.chomp("-{RV_kn7cf");
      assertNotNull(string4);
      assertEquals("-{RV_kn7cf", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("#r1S[x", supplier0);
      assertNotNull(string5);
      assertEquals("#r1S[x", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.center("Supplied value must be a valid byte literal between -128 and 127: [", 1, 's');
      assertNotNull(string6);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.getDigits("f:u|1L]_T)r&Vuy(Zpr?Zf-|");
      assertNotNull(string7);
      assertEquals("1", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [", (CharSequence) "|WJ|?=Cannot clone Cloneable type ", (-3608));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [");
      assertEquals((-1), int1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllUpperCase("\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat("", (-317));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("\n", "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.repeat('E', 256);
      assertNotNull(string2);
      assertEquals("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean2 = StringUtils.equals(charSequenceArray0[0], (CharSequence) "\n");
      assertTrue(boolean2);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.normalizeSpace("\n");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1541L;
      longArray0[1] = (long) 'E';
      String string4 = StringUtils.join(longArray0, 'E', 76, 5);
      assertArrayEquals(new long[] {1541L, 69L}, longArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(2, longArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.center("{b>;w&ymP^T#/G|(~]R{b>;w&ymP^T#/G|(~]R", 868, "org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string5);
      assertEquals("org.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.{b>;w&ymP^T#/G|(~]R{b>;w&ymP^T#/G|(~]Rorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      String string0 = StringUtils.abbreviate("U|[GGg4q2m", 33);
      assertNotNull(string0);
      assertEquals("U|[GGg4q2m", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("U|[GGg4q2m");
      assertTrue(boolean0);
      
      String string1 = StringUtils.overlay("U|[GGg4q2m", "U|[GGg4q2m", (-2), (-2));
      assertNotNull(string1);
      assertEquals("U|[GGg4q2mU|[GGg4q2m", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.endsWith("U|[GGg4q2m", "U|[GGg4q2m");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.wrapIfMissing("U|[GGg4q2m", 'L');
      assertNotNull(string2);
      assertEquals("LU|[GGg4q2mL", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("U|[GGg4q2m", "7d$YhG=RYw#Go-x^2");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.lowerCase("U|[GGg4q2m");
      assertNotNull(string3);
      assertEquals("u|[ggg4q2m", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean2 = StringUtils.isAsciiPrintable("u|[ggg4q2m");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      byte[] byteArray0 = StringUtils.getBytes("p{InCombiningDiacriticalMarks}+", (Charset) null);
      assertNotNull(byteArray0);
      assertEquals(31, byteArray0.length);
      
      boolean boolean3 = StringUtils.equalsAnyIgnoreCase("U|[GGg4q2m", stringArray0);
      assertTrue(boolean3);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "u|[ggg4q2m";
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String string4 = StringUtils.uncapitalize(")`[K=VT~k");
      assertNotNull(string4);
      assertEquals(")`[K=VT~k", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, ',', (-2), 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      int int0 = 322;
      String string0 = StringUtils.truncate(" is not in the range '0' - '9'", 322);
      assertNotNull(string0);
      assertEquals(" is not in the range '0' - '9'", string0);
      
      boolean boolean0 = StringUtils.isWhitespace(" is not in the range '0' - '9'");
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " is not in the range '0' - '9'", (CharSequence) " is not in the range '0' - '9'");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string1 = "%.X.>XD:b|ihm>'^";
      String[] stringArray0 = StringUtils.substringsBetween("%.X.>XD:b|ihm>'^", "%zMZo+L>$w", "org.apache.commons.lang3.StringUtils");
      assertNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("%.X.>XD:b|ihm>'^");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      assertEquals("UTF-8", charset1.displayName());
      assertEquals("UTF-8", charset1.name());
      assertTrue(charset1.canEncode());
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.toString());
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "org.apache.commons.lang3.StringUtils", 322, 6202);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      String string0 = StringUtils.removeFirst("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width with offset is %d", "), Length");
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) "", '6');
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string1 = StringUtils.substringAfterLast("{b>", 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.unwrap("", "{b>");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.center("", 0, "Minimum abbreviation width with offset is %d");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.substringAfterLast("", "y%5;.9S.r`!T]k`V");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = StringUtils.substringBetween("", "");
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '8';
      charArray0[3] = 'V';
      charArray0[4] = '6';
      charArray0[5] = '6';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'6', '6', '8', 'V', '6', '6'}, charArray0);
      assertFalse(boolean1);
      assertEquals(6, charArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("y", "]^g`?OZ|<hS78", 321);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.difference(" }D?i;QL&xp0#k*kc^0DPqh", "k=7RC)%so0%x:g");
      assertNotNull(string0);
      assertEquals("k=7RC)%so0%x:g", string0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chop(" }D?i;QL&xp0#k*kc^0DPqh");
      assertNotNull(string2);
      assertEquals(" }D?i;QL&xp0#k*kc^0DPq", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfter("y", 321);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "F<?xB3erwgW#I";
      stringArray0[2] = "";
      String string1 = StringUtils.substringBeforeLast("", "F<?xB3erwgW#I");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "F<?xB3erwgW#I", (CharSequence) "F<?xB3erwgW#I");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "]^g`?OZ|<hS78", (CharSequence[]) stringArray0);
      assertTrue(boolean1);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertFalse(boolean2);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("{YJo", "", stringArray0);
      assertNotNull(string2);
      assertEquals("{YJo", string2);
      assertEquals(4, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.rightPad("{YJo", 1, (String) null);
      assertNotNull(string3);
      assertEquals("{YJo", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.chomp("F<?xB3erwgW#I");
      assertNotNull(string4);
      assertEquals("F<?xB3erwgW#I", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfBlank(";6=jP:m|NyF.Kl", supplier0);
      assertNotNull(string5);
      assertEquals(";6=jP:m|NyF.Kl", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean3 = StringUtils.equalsIgnoreCase("]^g`?OZ|<hS78", "");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      String string6 = StringUtils.substringBefore("org.apache.commons.lang3.Charsets", "f ");
      assertNotNull(string6);
      assertEquals("org.apache.commons.lang3.Charsets", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      
      boolean boolean4 = StringUtils.isNumericSpace("hZVh\" >E0(");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      
      String string7 = StringUtils.deleteWhitespace("b'=_jED");
      assertNotNull(string7);
      assertEquals("b'=_jED", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      
      String string8 = StringUtils.toRootUpperCase("");
      assertNotNull(string8);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "b'=_jED", (CharSequence) "", 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.normalizeSpace("', has a length less than 2");
      assertNotNull(string0);
      assertEquals("', has a length less than 2", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "', has a length less than 2", (CharSequence) "', has a length less than 2");
      assertTrue(boolean0);
      
      String string1 = StringUtils.unwrap("clone", 'Q');
      assertNotNull(string1);
      assertEquals("clone", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAllLowerCase("clone");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlphanumeric("clone");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.difference("{b>;w&ymP^T#/G|(~]R{b>;w&ymP^T#/G|(~]R", "', has a length less than 2");
      assertNotNull(string2);
      assertEquals("', has a length less than 2", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "clone", (CharSequence) "', has a length less than 2", (-3865));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.abbreviateMiddle("ZCwxfK&QS>`", (String) null, (-1));
      assertNotNull(string3);
      assertEquals("ZCwxfK&QS>`", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "ZCwxfK&QS>`", (CharSequence) "', has a length less than 2");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[1];
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[0] = object2;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'n', (-3865), 313);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3865
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      String string0 = StringUtils.substring("Minimum abbreviation width with offset is %d", (-3237));
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[3] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[4] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[5] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[6] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[7] = (CharSequence) "Minimum abbreviation width with offset is %d";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Minimum abbreviation width with offset is %d", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.substringBefore("Uqu", (-3237));
      assertNotNull(string1);
      assertEquals("Uqu", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.unwrap("#99aM+#ARb~x", '_');
      assertNotNull(string2);
      assertEquals("#99aM+#ARb~x", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.join((boolean[]) null, '_', 1, 7);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, charSequenceArray0[3]);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.substringBetween("@X)I2?)|<u::SA~3=ef:u|1L]_T)r&Vuy(true.false", (String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      String string0 = StringUtils.repeat("The character ", (-145));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat('a', 16);
      assertNotNull(string1);
      assertEquals("aaaaaaaaaaaaaaaa", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.normalizeSpace("The character ");
      assertNotNull(string2);
      assertEquals("The character", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "The character ", (CharSequence) "The character ");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("aaaaaaaaaaaaaaaa");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isAlphanumeric("The character ");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      String string3 = StringUtils.difference("\r", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The character ", (CharSequence) "The character", 3942);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "The character ";
      objectArray0[1] = (Object) "The character ";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "The character ";
      objectArray0[4] = (Object) "The character ";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "The character";
      String string4 = StringUtils.joinWith("The character", objectArray0);
      assertNotNull(string4);
      assertEquals(7, objectArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      float[] floatArray0 = new float[0];
      String string5 = StringUtils.join(floatArray0, 'R');
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(0, floatArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean4 = StringUtils.isBlank("The character ");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      
      String string6 = StringUtils.center("l6%76r>(Z0\"i", 16);
      assertNotNull(string6);
      assertEquals("  l6%76r>(Z0\"i  ", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      
      String string7 = StringUtils.substringBefore((String) null, "#P");
      assertNull(string7);
      
      boolean boolean5 = StringUtils.containsWhitespace("");
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      
      boolean boolean6 = StringUtils.isMixedCase("\r");
      assertFalse(boolean6);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Array element ");
      assertNotNull(string0);
      assertEquals("Array element", string0);
      
      String string1 = StringUtils.replaceChars("_P{@(<`x", "Array element ", "Array element ");
      assertNotNull(string1);
      assertEquals("_P{@(<`x", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("_P{@(<`x", "/ H");
      assertNotNull(string2);
      assertEquals("_P{@(<`x", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllUpperCase("_P{@(<`x");
      assertFalse(boolean0);
      
      String string3 = StringUtils.abbreviate("Array element", 2047, 2047);
      assertNotNull(string3);
      assertEquals("Array element", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.replaceChars("", "org.apache.commons.lang3.ObjectUtils$Null", (String) null);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.join((byte[]) null, '9', 157, 37);
      assertNull(string5);
      
      Locale locale0 = Locale.forLanguageTag("+'WD+:C]rDi|>b-");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Vector<Locale> vector0 = new Vector<Locale>();
      assertFalse(vector0.contains(locale0));
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) vector0, locale_FilteringMode0);
      assertFalse(vector0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertNotNull(list0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string6 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string6);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "/ H", (String) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
      
      String[] stringArray0 = new String[4];
      String string1 = StringUtils.getDigits("F<?xB3erwgW#I");
      assertNotNull(string1);
      assertEquals("3", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.center("", (-965), "Arguments cannot both be null");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.deleteWhitespace("Arguments cannot both be null");
      assertNotNull(string3);
      assertEquals("Argumentscannotbothbenull", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.rightPad("Cannot clone Cloneable type ", 108, "Argumentscannotbothbenull");
      assertNotNull(string4);
      assertEquals("Cannot clone Cloneable type ArgumentscannotbothbenullArgumentscannotbothbenullArgumentscannotbothbenullArgum", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.join((Object[]) stringArray0, 'C');
      assertNotNull(string5);
      assertEquals("CCC", string5);
      assertEquals(4, stringArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.remove("Cannot clone Cloneable type ", "Cannot clone Cloneable type ");
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.RegExUtils", (CharSequence) "U~Z");
      assertEquals(34, int1);
      assertFalse(int1 == int0);
      
      String string7 = StringUtils.abbreviate("", "Cannot clone Cloneable type ArgumentscannotbothbenullArgumentscannotbothbenullArgumentscannotbothbenullArgum", 14);
      assertNotNull(string7);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "F<?xB3erwgW#I";
      stringArray0[2] = "";
      String string1 = StringUtils.substringBeforeLast("", "F<?xB3erwgW#I");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "F<?xB3erwgW#I", (CharSequence) "F<?xB3erwgW#I");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "]^g`?OZ|<hS78", (CharSequence[]) stringArray0);
      assertTrue(boolean1);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertFalse(boolean2);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("{YJo", "", stringArray0);
      assertNotNull(string2);
      assertEquals("{YJo", string2);
      assertEquals(4, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.rightPad("{YJo", 1, (String) null);
      assertNotNull(string3);
      assertEquals("{YJo", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.chomp("F<?xB3erwgW#I");
      assertNotNull(string4);
      assertEquals("F<?xB3erwgW#I", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfBlank(";6=jP:mG|NyF.Kl", supplier0);
      assertNotNull(string5);
      assertEquals(";6=jP:mG|NyF.Kl", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean3 = StringUtils.equalsIgnoreCase("]^g`?OZ|<hS78", "");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = StringUtils.isAllUpperCase("hZVh\" >E0(");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      
      String string6 = StringUtils.mid("P9;nKD:eZ3", 322, 322);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      
      boolean boolean5 = StringUtils.isAsciiPrintable("hZVh\" >E0(");
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      
      String string7 = StringUtils.center("|iN_.4'WKbIk", 322, "R");
      assertNotNull(string7);
      assertEquals("RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR|iN_.4'WKbIkRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      int int0 = StringUtils.length("\r");
      assertEquals(1, int0);
      
      int[] intArray0 = StringUtils.toCodePoints("\r");
      assertArrayEquals(new int[] {13}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[2] = (CharSequence) "\r";
      charSequenceArray0[3] = (CharSequence) "\r";
      charSequenceArray0[4] = (CharSequence) "\r";
      String string1 = StringUtils.stripEnd("...", "\r");
      assertNotNull(string1);
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAsciiPrintable(charSequenceArray0[4]);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[2] = '';
      charArray0[4] = '';
      boolean boolean0 = StringUtils.isNotBlank("\r");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBetween("pdptFw", "\r", ", '");
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isMixedCase("maxWith cannot be negative");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.strip("(tgB9#_ef,");
      assertNotNull(string2);
      assertEquals("(tgB9#_ef,", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.wrapIfMissing("H5eyaHr", '#');
      assertNotNull(string3);
      assertEquals("#H5eyaHr#", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'', '', '', '\u0000', '', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string4);
      assertEquals("\u0000\u0000\u0000\u0000", string4);
      assertEquals(8, charArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "(tgB9#_ef,", charArray0);
      assertArrayEquals(new char[] {'', '', '', '\u0000', '', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean2);
      assertEquals(8, charArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string5 = StringUtils.mid("\"Ms=d!Tw:tDa", 3, 30);
      assertNotNull(string5);
      assertEquals("=d!Tw:tDa", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("T;l1\"eed_!/^i(r((,");
      assertNotNull(string0);
      assertEquals("t;l1\"eed_!/^i(r((,", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "T;l1\"eed_!/^i(r((,";
      charSequenceArray0[1] = (CharSequence) "t;l1\"eed_!/^i(r((,";
      charSequenceArray0[2] = (CharSequence) "T;l1\"eed_!/^i(r((,";
      charSequenceArray0[3] = (CharSequence) "t;l1\"eed_!/^i(r((,";
      charSequenceArray0[4] = (CharSequence) "t;l1\"eed_!/^i(r((,";
      charSequenceArray0[5] = (CharSequence) "T;l1\"eed_!/^i(r((,";
      charSequenceArray0[6] = (CharSequence) "t;l1\"eed_!/^i(r((,";
      charSequenceArray0[7] = (CharSequence) "t;l1\"eed_!/^i(r((,";
      String string1 = StringUtils.wrapIfMissing((String) null, 's');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[5], (char[]) null);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      assertTrue(charset1.isRegistered());
      assertTrue(charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.toString());
      assertEquals("UTF-8", charset1.displayName());
      
      byte[] byteArray0 = StringUtils.getBytes("', has a length less than 2=gvoQ^n-k0*[+f", charset0);
      assertSame(charset0, charset1);
      assertNotNull(byteArray0);
      assertEquals(41, byteArray0.length);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      
      String string2 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.removeFirst("t;l1\"eed_!/^i(r((,", (String) null);
      assertNotNull(string3);
      assertEquals("t;l1\"eed_!/^i(r((,", string3);
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("', has a length less than 2=gvoQ^n-k0*[+f", "t;l1\"eed_!/^i(r((,", charSequenceArray0);
      assertNotNull(string4);
      assertEquals("', has a length less than 2=gvoQ^n-k0*[+ft;l1\"eed_!/^i(r((,", string4);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      String string0 = StringUtils.substring("Minimum abbreviation width with offset is %d", (-3237));
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[3] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[4] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[5] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[6] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[7] = (CharSequence) "Minimum abbreviation width with offset is %d";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Minimum abbreviation width with offset is %d", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)19;
      boolean boolean1 = StringUtils.isWhitespace(charSequenceArray0[5]);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertFalse(vector0.contains("Minimum abbreviation width with offset is %d"));
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      String string2 = StringUtils.abbreviateMiddle("Minimum abbreviation width with offset is %d", "S+m`jMI:r", (byte)19);
      assertNotNull(string2);
      assertEquals("MinimS+m`jMI:ris %d", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[6], (CharSequence) "Minimum abbreviation width with offset is %d");
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      String string0 = StringUtils.substring("Minimum abbreviation width with offset is %d", (-3237));
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[3] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[4] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[5] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[6] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[7] = (CharSequence) "Minimum abbreviation width with offset is %d";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Minimum abbreviation width with offset is %d", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("Uqu", "Minimum abbreviation width with offset is %d", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width with offset is %dUqu", string1);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)19;
      String string2 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertArrayEquals(new byte[] {(byte)95, (byte)19}, byteArray0);
      assertNotNull(string2);
      assertEquals("_\u0013", string2);
      assertEquals(2, byteArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isWhitespace(charSequenceArray0[5]);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertFalse(vector0.contains("Minimum abbreviation width with offset is %d"));
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      String string3 = StringUtils.abbreviateMiddle("Minimum abbreviation width with offset is %d", "S+m`jMI:r", (byte)19);
      assertNotNull(string3);
      assertEquals("MinimS+m`jMI:ris %d", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[6], (CharSequence) "Uqu");
      assertEquals((-1), int0);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'd';
      intArray0[1] = (int) 'd';
      intArray0[2] = (int) 'd';
      intArray0[4] = (int) 'd';
      intArray0[5] = (int) 'd';
      intArray0[6] = (int) 'd';
      String string0 = StringUtils.abbreviate((String) null, 577, 100);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBetween("AY_~*)Egw", "maxWith cannot be negative", (String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.strip((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("maxWith cannot be negative", '#');
      assertNotNull(string3);
      assertEquals("#maxWith cannot be negative#", string3);
      
      String string4 = StringUtils.valueOf((char[]) null);
      assertNull(string4);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "org.apache.commons.lang3.CharSequenceUtils", (char[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      boolean boolean3 = StringUtils.containsAnyIgnoreCase("maxWith cannot be negative", charSequenceArray0);
      assertFalse(boolean3);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      String string5 = StringUtils.substring((String) null, 577, 100);
      assertNull(string5);
      
      boolean boolean4 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      String string0 = StringUtils.defaultString("H5eyaHrS+m`jMI:r", "H5eyaHrS+m`jMI:r");
      assertNotNull(string0);
      assertEquals("H5eyaHrS+m`jMI:r", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "H5eyaHrS+m`jMI:r", (CharSequence) "H5eyaHrS+m`jMI:r");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "H5eyaHrS+m`jMI:r";
      charSequenceArray0[1] = (CharSequence) "H5eyaHrS+m`jMI:r";
      String string1 = StringUtils.abbreviate("H5eyaHrS+m`jMI:r", "Minimum abbreviation width with offset is %d", 64);
      assertNotNull(string1);
      assertEquals("H5eyaHrS+m`jMI:r", string1);
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "H5eyaHrS+m`jMI:r";
      charSequenceArray0[3] = (CharSequence) "H5eyaHrS+m`jMI:r";
      charSequenceArray0[4] = (CharSequence) "H5eyaHrS+m`jMI:r";
      charSequenceArray0[5] = (CharSequence) "H5eyaHrS+m`jMI:r";
      charSequenceArray0[6] = (CharSequence) "H5eyaHrS+m`jMI:r";
      charSequenceArray0[7] = (CharSequence) "H5eyaHrS+m`jMI:r";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'C';
      charArray0[1] = 'F';
      charArray0[2] = '2';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'C', 'F', '2'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(3, charArray0.length);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals("CF2", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      
      Supplier<CharBuffer> supplier0 = (Supplier<CharBuffer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharBuffer charBuffer1 = StringUtils.getIfEmpty(charBuffer0, supplier0);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertArrayEquals(new char[] {'C', 'F', '2'}, charArray0);
      assertNotNull(charBuffer1);
      assertEquals(3, charArray0.length);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals("CF2", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer1.position());
      assertEquals(3, charBuffer1.limit());
      assertEquals("CF2", charBuffer1.toString());
      assertEquals(3, charBuffer1.length());
      assertEquals(3, charBuffer1.remaining());
      assertEquals(3, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 522L;
      longArray0[3] = 540L;
      String string0 = StringUtils.join(longArray0, '1');
      assertArrayEquals(new long[] {0L, 0L, 522L, 540L}, longArray0);
      assertNotNull(string0);
      assertEquals("01015221540", string0);
      assertEquals(4, longArray0.length);
      
      String string1 = StringUtils.capitalize("F<?xB3erwgW#I");
      assertNotNull(string1);
      assertEquals("F<?xB3erwgW#I", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "F<?xB3erwgW#I", (CharSequence) "F<?xB3erwgW#I");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.getDigits((String) null);
      assertNull(string2);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      
      String string3 = StringUtils.unwrap((String) null, "01015221540");
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("x9S_Sy", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, '7');
      assertFalse(linkedList0.contains('7'));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.unwrap("", '7');
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      boolean boolean0 = linkedList0.add((Object) "");
      assertFalse(linkedList0.contains('7'));
      assertTrue(linkedList0.contains(""));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "f:u|1L]_T)r&Vuy(Zpr?Zf-|";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "f:u|1L]_T)r&Vuy(Zpr?Zf-|";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "f:u|1L]_T)r&Vuy(Zpr?Zf-|", charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsAny(charSequenceArray0[2], charSequenceArray0);
      assertFalse(boolean2);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string2 = StringUtils.strip("|WJ|?=Cannot clone Cloneable type ");
      assertNotNull(string2);
      assertEquals("|WJ|?=Cannot clone Cloneable type", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("Mn)>kTF;W4z:", (CharSequence) null, charSequenceArray0);
      assertNotNull(string3);
      assertEquals("Mn)>kTF;W4z:", string3);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.rightPad((String) null, 12, "Mn)>kTF;W4z:");
      assertNull(string4);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
      
      String string5 = StringUtils.substringBeforeLast("...{b>;w&ymP^T#/G|(~]R", "");
      assertNotNull(string5);
      assertEquals("...{b>;w&ymP^T#/G|(~]R", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.join((Object[]) charSequenceArray0, (String) null);
      assertNotNull(string6);
      assertEquals("f:u|1L]_T)r&Vuy(Zpr?Zf-|f:u|1L]_T)r&Vuy(Zpr?Zf-|", string6);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      boolean boolean3 = StringUtils.equals((CharSequence) "", (CharSequence) "f:u|1L]_T)r&Vuy(Zpr?Zf-|f:u|1L]_T)r&Vuy(Zpr?Zf-|");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      boolean boolean4 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean4);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = (-23);
      intArray0[4] = (-1118);
      String string0 = StringUtils.substringAfter("K", (-626));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfter("_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erwgW#IB3erw", (String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.deleteWhitespace((String) null);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "K";
      charSequenceArray0[1] = (CharSequence) null;
      String string3 = StringUtils.rightPad((String) null, (-626), ".E[K|U3>+HF~+!dk");
      assertNull(string3);
      
      charSequenceArray0[2] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.overlay("\n", "B3erwgW#I", 13, 13);
      assertNotNull(string1);
      assertEquals("\nB3erwgW#I", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rotate("B3erwgW#I", 13);
      assertNotNull(string2);
      assertEquals("gW#IB3erw", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.lowerCase("\nB3erwgW#I");
      assertNotNull(string3);
      assertEquals("\nb3erwgw#i", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.unwrap("\n", '\'');
      assertNotNull(string4);
      assertEquals("\n", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsIgnoreCase("\n", "gW#IB3erw");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = '\'';
      charArray0[2] = 'x';
      charArray0[3] = '\'';
      charArray0[4] = '!';
      charArray0[5] = 'x';
      charArray0[6] = '!';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\nB3erwgW#I", charArray0);
      assertArrayEquals(new char[] {'!', '\'', 'x', '\'', '!', 'x', '!'}, charArray0);
      assertEquals(0, int0);
      assertEquals(7, charArray0.length);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "B3erwgW#I", "f:u|1L]_T)r&Vuy(Zpr?Zf-|");
      assertEquals(3, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string1 = StringUtils.getIfBlank("", supplier0);
      assertNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = '^';
      charArray0[2] = 'l';
      charArray0[3] = 'O';
      charArray0[4] = '(';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'B', '^', 'l', 'O', '('}, charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      
      int int0 = StringUtils.compare("q_E:EzOvZ~,%u%", "q_E:EzOvZ~,%u%");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "hZVh\" >E0(", charArray0);
      assertArrayEquals(new char[] {'B', '^', 'l', 'O', '('}, charArray0);
      assertFalse(boolean1);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      String string2 = StringUtils.substring("", 0, 321);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "-{RV_kn7cf");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "!>";
      String string0 = StringUtils.center("apxY~CL6T&{#F*cK|$]~{)rS|vBIU(l/,k><", 29, ':');
      assertNotNull(string0);
      assertEquals("apxY~CL6T&{#F*cK|$]~{)rS|vBIU(l/,k><", string0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "-{RV_kn7cf", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string1 = StringUtils.strip((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("|WJ|?=Cannot clone Cloneable type ", (CharSequence) null, charSequenceArray0);
      assertNotNull(string2);
      assertEquals("|WJ|?=Cannot clone Cloneable type ", string2);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.rightPad("Strings must not be null", 740, "...{b>;w&ymP^T#/G|(~]R");
      assertNotNull(string3);
      assertEquals("Strings must not be null...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.chomp("-{RV_kn7cf");
      assertNotNull(string4);
      assertEquals("-{RV_kn7cf", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("#r1S[x", supplier0);
      assertNotNull(string5);
      assertEquals("#r1S[x", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.center("Supplied value must be a valid byte literal between -128 and 127: [", 1, 's');
      assertNotNull(string6);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.getDigits("f:u|1L]_T)r&Vuy(Zpr?Zf-|");
      assertNotNull(string7);
      assertEquals("1", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [", (CharSequence) "|WJ|?=Cannot clone Cloneable type ", (-3608));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [");
      assertEquals((-1), int1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(int1 == int0);
      
      String string8 = StringUtils.leftPad((String) null, (-1));
      assertNull(string8);
      
      String string9 = StringUtils.repeat("Supplied value must be a valid byte literal between -128 and 127: [", 29);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.strip((String) null, "108A0A0A-1118A64A-2212");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "", 235);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.rotate((String) null, (-1265));
      assertNull(string2);
      
      String string3 = StringUtils.lowerCase("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string3);
      assertEquals("p{incombiningdiacriticalmarks}+", string3);
      
      String string4 = StringUtils.unwrap("Sm`jMI:r", '\'');
      assertNotNull(string4);
      assertEquals("Sm`jMI:r", string4);
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean0 = StringUtils.containsIgnoreCase("p{InCombiningDiacriticalMarks}+", (CharSequence) null);
      assertFalse(boolean0);
      
      String string5 = StringUtils.appendIfMissing("hHS6[=0)D'.$lClnm", "Sm`jMI:r", (CharSequence[]) null);
      assertNotNull(string5);
      assertEquals("hHS6[=0)D'.$lClnmSm`jMI:r", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string6 = StringUtils.EMPTY;
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("Sm`jMI:r", " ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertFalse(arrayList0.contains((-1265)));
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string7 = StringUtils.join((List<?>) arrayList0, (String) null, 32, 32);
      assertFalse(arrayList0.contains(32));
      assertNotNull(string7);
      assertEquals("", string7);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "!>");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "!>";
      String string2 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertNull(string2);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("\r");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int1 = StringUtils.compareIgnoreCase((String) null, "!>", false);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.unwrap("org.apache.commons.lang3.StringUtils", 'p');
      assertNotNull(string3);
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, "!>");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.leftPad((String) null, 235);
      assertNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) null, 235);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      String string0 = StringUtils.overlay(";U8z;", "H:Wb_hfN^Zfu<q0]", 1317, 1317);
      assertNotNull(string0);
      assertEquals(";U8z;H:Wb_hfN^Zfu<q0]", string0);
      
      String string1 = StringUtils.overlay(";U8z;", "-}-}", 1317, 102);
      assertNotNull(string1);
      assertEquals(";U8z;-}-}", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rotate((String) null, 13);
      assertNull(string2);
      
      String string3 = StringUtils.lowerCase("h<0VV#llkOi>^RlAsE3");
      assertNotNull(string3);
      assertEquals("h<0vv#llkoi>^rlase3", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.unwrap((String) null, '`');
      assertNull(string4);
      
      String string5 = StringUtils.substringBetween("", "r}>_i", "yswi{}(r1NC");
      assertNull(string5);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = '`';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      charArray0[5] = '!';
      charArray0[6] = 'x';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "h<0vv#llkoi>^rlase3", charArray0);
      assertArrayEquals(new char[] {'x', 'x', '`', '\'', '\'', '!', 'x'}, charArray0);
      assertEquals(0, int0);
      assertEquals(7, charArray0.length);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "h<0vv#llkoi>^rlase3";
      stringArray0[1] = ";U8z;";
      stringArray0[2] = ";U8z;";
      stringArray0[3] = "h<0vv#llkoi>^rlase3";
      stringArray0[4] = null;
      stringArray0[5] = "h<0VV#llkOi>^RlAsE3";
      stringArray0[6] = ";U8z;-}-}";
      stringArray0[7] = "-}-}";
      String string6 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string6);
      assertEquals("h<0vv#llkoi>^rlase3", string6);
      assertEquals(8, stringArray0.length);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      String string0 = StringUtils.swapCase("2");
      assertNotNull(string0);
      assertEquals("2", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "2", (CharSequence) "2");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "2";
      String string1 = StringUtils.substringBeforeLast("S+m`jMI:r", "iWz9e?$Cu");
      assertNotNull(string1);
      assertEquals("S+m`jMI:r", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) "S+m`jMI:r");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertFalse(boolean2);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "S+m`jMI:r", charSequenceArray0);
      assertFalse(boolean3);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("H5eyaHr", charSequenceArray0[0], charSequenceArray0);
      assertNotNull(string2);
      assertEquals("2H5eyaHr", string2);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.rightPad("", 1, (String) null);
      assertNotNull(string3);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.chomp(" ");
      assertNotNull(string4);
      assertEquals(" ", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfBlank("hZVh\" >E0(", supplier0);
      assertNotNull(string5);
      assertEquals("hZVh\" >E0(", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      char[] charArray0 = new char[0];
      boolean boolean4 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean4);
      assertEquals(0, charArray0.length);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      
      int int0 = StringUtils.compare((String) null, "");
      assertEquals((-1), int0);
      
      boolean boolean5 = StringUtils.containsOnly((CharSequence) "H5eyaHr", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean5);
      assertEquals(0, charArray0.length);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints(" ");
      assertArrayEquals(new int[] {32}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      String string6 = StringUtils.substring(" ", (-2305), 1);
      assertNotNull(string6);
      assertEquals(" ", string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "-{RV_kn7cf");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean1);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.compare((String) null, "\"u_g`");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, '7');
      assertFalse(linkedList0.contains('7'));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("", 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.unwrap("_Fxh `ug", '7');
      assertNotNull(string3);
      assertEquals("_Fxh `ug", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", (-352));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("_Fxh `ug");
      assertFalse(boolean0);
      
      String string4 = StringUtils.normalizeSpace("cy>0X4^");
      assertNotNull(string4);
      assertEquals("cy>0X4^", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.stripAccents("/qt");
      assertNotNull(string5);
      assertEquals("/qt", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.abbreviate("", 51, 51);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'd';
      intArray0[1] = (int) 'd';
      intArray0[2] = (int) 'd';
      intArray0[4] = (int) 'd';
      intArray0[5] = (int) 'd';
      intArray0[6] = (int) 'd';
      intArray0[7] = (int) 'd';
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 100;
      doubleArray0[1] = (double) 100;
      doubleArray0[2] = (double) 100;
      doubleArray0[3] = (double) 'd';
      doubleArray0[4] = (double) 'd';
      String string1 = StringUtils.join(doubleArray0, 'r');
      assertArrayEquals(new double[] {100.0, 100.0, 100.0, 100.0, 100.0}, doubleArray0, 0.01);
      assertNotNull(string1);
      assertEquals("100.0r100.0r100.0r100.0r100.0", string1);
      assertEquals(5, doubleArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultString("", "");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, '7');
      assertFalse(linkedList0.contains('7'));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 'i';
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) '7';
      floatArray0[5] = 2853.66F;
      floatArray0[6] = (float) '7';
      floatArray0[7] = (float) 'i';
      floatArray0[8] = (float) (-1);
      String string1 = StringUtils.join(floatArray0, '7', 1160, 1160);
      assertArrayEquals(new float[] {0.0F, 105.0F, (-1.0F), (-1.0F), 55.0F, 2853.66F, 55.0F, 105.0F, (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(9, floatArray0.length);
      
      String string2 = StringUtils.difference("h~gx}U{$K", "h~gx}U{$K");
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.defaultString("vs", "");
      assertNotNull(string3);
      assertEquals("vs", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "", (-1));
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      String string0 = "!>";
      String string1 = null;
      boolean boolean0 = StringUtils.isNumericSpace("!>");
      assertFalse(boolean0);
      
      String string2 = StringUtils.deleteWhitespace((String) null);
      assertNull(string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "!>";
      String[] stringArray1 = StringUtils.split("\r");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "!>", false);
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.removeAll("!>", "[");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 0
         // [
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'd';
      intArray0[1] = (int) 'd';
      intArray0[2] = (int) 'd';
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 14, (-4270));
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      
      String string1 = locale0.toLanguageTag();
      assertNotNull(string1);
      assertEquals("de-DE", string1);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      
      String string2 = StringUtils.toRootLowerCase((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.truncate((String) null, 100);
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      String string0 = StringUtils.unwrap("=", ")");
      assertNotNull(string0);
      assertEquals("=", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("=");
      assertFalse(boolean0);
      
      String string1 = StringUtils.strip("\r", "tOh C5>^|O5POsCd");
      assertNotNull(string1);
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isNotBlank("\r");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'd';
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'d', 'd', 'd'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(3, charArray0.length);
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.capacity());
      assertEquals("ddd", charBuffer0.toString());
      assertEquals(3, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      
      double double0 = StringUtils.getJaroWinklerDistance(charBuffer0, charBuffer0);
      assertArrayEquals(new char[] {'d', 'd', 'd'}, charArray0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(3, charArray0.length);
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.capacity());
      assertEquals("ddd", charBuffer0.toString());
      assertEquals(3, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      
      int int0 = StringUtils.indexOfAny((CharSequence) charBuffer0, charArray0);
      assertArrayEquals(new char[] {'d', 'd', 'd'}, charArray0);
      assertEquals(0, int0);
      assertEquals(3, charArray0.length);
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.capacity());
      assertEquals("ddd", charBuffer0.toString());
      assertEquals(3, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) charBuffer0;
      String string0 = StringUtils.swapCase(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertNotNull(string0);
      assertEquals(" YU3K0Bh:wB_HFn^zFU<Q0]A", string0);
      
      charSequenceArray0[1] = (CharSequence) " YU3K0Bh:wB_HFn^zFU<Q0]A";
      charSequenceArray0[2] = (CharSequence) charBuffer0;
      charSequenceArray0[3] = (CharSequence) charBuffer0;
      charSequenceArray0[4] = (CharSequence) charBuffer0;
      charSequenceArray0[5] = (CharSequence) charBuffer0;
      charSequenceArray0[6] = (CharSequence) charBuffer0;
      charSequenceArray0[7] = (CharSequence) charBuffer0;
      charSequenceArray0[8] = (CharSequence) charBuffer0;
      int int1 = StringUtils.lastIndexOfAny(charBuffer0, charSequenceArray0);
      assertArrayEquals(new char[] {'d', 'd', 'd'}, charArray0);
      assertEquals(0, int1);
      assertEquals(3, charArray0.length);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.capacity());
      assertEquals("ddd", charBuffer0.toString());
      assertEquals(3, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.trimToEmpty(" YU3K0Bh:wB_HFn^zFU<Q0]A");
      assertNotNull(string1);
      assertEquals("YU3K0Bh:wB_HFn^zFU<Q0]A", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWithAny(" yu3k0bH:Wb_hfN^Zfu<q0]a", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", " is not in the range '0' - '9'", "Ik");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeIgnoreCase(" is not in the range '0' - '9'", "");
      assertNotNull(string1);
      assertEquals(" is not in the range '0' - '9'", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlpha(" is not in the range '0' - '9'");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase(" is not in the range '0' - '9'");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.repeat("BE~ooE1*W@M)Py2DqB", 64);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean3 = StringUtils.equalsIgnoreCase(string2, " is not in the range '0' - '9'");
      assertFalse(boolean3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      String string3 = StringUtils.repeat('y', 4);
      assertNotNull(string3);
      assertEquals("yyyy", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean4 = StringUtils.equals((CharSequence) "Ik", (CharSequence) " is not in the range '0' - '9'");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      
      String string4 = StringUtils.replacePattern("fjlf", " is not in the range '0' - '9'", "");
      assertNotNull(string4);
      assertEquals("fjlf", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean5 = StringUtils.isAllLowerCase("");
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      
      String string5 = StringUtils.replaceChars("PSH1#", "BE~ooE1*W@M)Py2DqB", "...{b>;w&ymP^T#/G|(~]R");
      assertNotNull(string5);
      assertEquals("^SH;#", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "\r", 4);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "fjlf", "aw/8Z45v!RH7dA?HVF7");
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      
      String[] stringArray2 = new String[0];
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      String string6 = StringUtils.replaceEachRepeatedly("Cannot", stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotNull(string6);
      assertEquals("Cannot", string6);
      assertEquals(0, stringArray2.length);
      assertEquals(0, stringArray0.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(stringArray0.equals((Object)stringArray2));
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      String string0 = StringUtils.substringBetween("r+)HMdAw0{", "r+)HMdAw0{");
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "r+)HMdAw0{", 1403);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.trimToEmpty(", Length: ");
      assertNotNull(string1);
      assertEquals(", Length:", string1);
      
      String string2 = StringUtils.substringAfterLast(", Length: ", 1403);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = '5';
      int int1 = StringUtils.indexOfAny((CharSequence) "r+)HMdAw0{", charArray0);
      assertArrayEquals(new char[] {'s', '5'}, charArray0);
      assertEquals((-1), int1);
      assertEquals(2, charArray0.length);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "P~`0jSFD&<<J\"PPM&";
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "";
      stringArray0[6] = ", Length: ";
      stringArray0[7] = "";
      String string3 = StringUtils.replaceEachRepeatedly(", Length:", (String[]) null, stringArray0);
      assertNotNull(string3);
      assertEquals(", Length:", string3);
      assertEquals(8, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.repeat('5', (-1));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.wrap("", 'Z');
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      
      String string6 = StringUtils.remove(", Length:", ')');
      assertNotNull(string6);
      assertEquals(", Length:", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      
      boolean boolean0 = StringUtils.containsWhitespace(", Length:");
      assertTrue(boolean0);
      
      int int2 = StringUtils.countMatches((CharSequence) ", Length: ", '1');
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("T;l1\"eed_!/^i(r((,");
      assertNotNull(string0);
      assertEquals("t;l1\"eed_!/^i(r((,", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "T;l1\"eed_!/^i(r((,";
      charSequenceArray0[1] = (CharSequence) "t;l1\"eed_!/^i(r((,";
      charSequenceArray0[2] = (CharSequence) "T;l1\"eed_!/^i(r((,";
      charSequenceArray0[3] = (CharSequence) "t;l1\"eed_!/^i(r((,";
      charSequenceArray0[4] = (CharSequence) "t;l1\"eed_!/^i(r((,";
      charSequenceArray0[5] = (CharSequence) "T;l1\"eed_!/^i(r((,";
      charSequenceArray0[6] = (CharSequence) "t;l1\"eed_!/^i(r((,";
      charSequenceArray0[7] = (CharSequence) "t;l1\"eed_!/^i(r((,";
      charSequenceArray0[8] = (CharSequence) "T;l1\"eed_!/^i(r((,";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '';
      charArray0[1] = '9';
      charArray0[2] = 'y';
      charArray0[3] = 'A';
      charArray0[4] = 'R';
      charArray0[5] = 'F';
      charArray0[6] = 'm';
      charArray0[7] = '%';
      charArray0[8] = 'H';
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[6], charArray0);
      assertArrayEquals(new char[] {'', '9', 'y', 'A', 'R', 'F', 'm', '%', 'H'}, charArray0);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(9, charArray0.length);
      
      String string1 = StringUtils.substringAfterLast("apxY~CL6T&{#F*cK|$]~{)rS|vBIU(l/,k><", "r?:DAd4rfX7b");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      Vector<Object> vector0 = new Vector<Object>();
      assertFalse(vector0.contains("T;l1\"eed_!/^i(r((,"));
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      String string2 = StringUtils.join((List<?>) vector0, "", 0, (-954));
      assertFalse(vector0.contains("T;l1\"eed_!/^i(r((,"));
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'N';
      floatArray0[1] = (float) 'N';
      floatArray0[2] = (float) 'N';
      floatArray0[3] = (float) 'N';
      floatArray0[4] = (float) 'N';
      floatArray0[5] = (float) 'N';
      floatArray0[6] = (float) 'N';
      floatArray0[7] = (float) 'N';
      floatArray0[8] = (float) 'N';
      String string0 = StringUtils.join(floatArray0, 'N');
      assertArrayEquals(new float[] {78.0F, 78.0F, 78.0F, 78.0F, 78.0F, 78.0F, 78.0F, 78.0F, 78.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals("78.0N78.0N78.0N78.0N78.0N78.0N78.0N78.0N78.0", string0);
      assertEquals(9, floatArray0.length);
      
      boolean boolean0 = StringUtils.isBlank("78.0N78.0N78.0N78.0N78.0N78.0N78.0N78.0N78.0");
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad("78.0N78.0N78.0N78.0N78.0N78.0N78.0N78.0N78.0", (int) 'N', "78.0N78.0N78.0N78.0N78.0N78.0N78.0N78.0N78.0");
      assertNotNull(string1);
      assertEquals("78.0N78.0N78.0N78.0N78.0N78.0N78.0N78.0N78.078.0N78.0N78.0N78.0N78.0N78.0N78.0", string1);
      assertFalse(string1.equals((Object)string0));
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains(string0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = linkedList0.offerFirst(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertTrue(linkedList0.contains(" yu3k0bH:Wb_hfN^Zfu<q0]a"));
      assertFalse(linkedList0.contains(string0));
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      
      Iterator<String> iterator0 = linkedList0.iterator();
      assertTrue(linkedList0.contains(" yu3k0bH:Wb_hfN^Zfu<q0]a"));
      assertFalse(linkedList0.contains(string0));
      assertNotNull(iterator0);
      assertEquals(1, linkedList0.size());
      
      String string2 = StringUtils.join((short[]) null, 'N');
      assertNull(string2);
      
      boolean boolean2 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      String string0 = StringUtils.substringBefore(":{dx d~e=", ":{dx d~e=");
      assertNotNull(string0);
      assertEquals("", string0);
      
      StringWriter stringWriter0 = new StringWriter(48);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string1 = StringUtils.join((short[]) null, '9');
      assertNull(string1);
      
      String string2 = StringUtils.center("&_n+f.48q1C?|w#^)B", (-625));
      assertNotNull(string2);
      assertEquals("&_n+f.48q1C?|w#^)B", string2);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "-{RV_kn7cf");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "!>";
      String string0 = StringUtils.center("apxY~CL6T&{#F*cK|$]~{)rS|vBIU(l/,k><", 29, ':');
      assertNotNull(string0);
      assertEquals("apxY~CL6T&{#F*cK|$]~{)rS|vBIU(l/,k><", string0);
      
      charSequenceArray0[1] = (CharSequence) "apxY~CL6T&{#F*cK|$]~{)rS|vBIU(l/,k><";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "-{RV_kn7cf", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = StringUtils.strip((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("|WJ|?=Cannot clone Cloneable type ", (CharSequence) null, charSequenceArray0);
      assertNotNull(string2);
      assertEquals("|WJ|?=Cannot clone Cloneable type ", string2);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.rightPad("Strings must not be null", 740, "...{b>;w&ymP^T#/G|(~]R");
      assertNotNull(string3);
      assertEquals("Strings must not be null...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string4 = StringUtils.substringBeforeLast((String) null, "...{b>;w&ymP^T#/G|(~]R");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeIgnoreCase(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.swapCase("org.apache.commons.lang3.Charsets");
      assertNotNull(string1);
      assertEquals("ORG.APACHE.COMMONS.LANG3.cHARSETS", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.startsWithAny("org.apache.commons.lang3.Charsets", stringArray0);
      assertTrue(boolean1);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 5;
      longArray0[1] = (long) '1';
      longArray0[2] = (long) 8;
      longArray0[3] = (long) '1';
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string2);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "org.apache.commons.lang3.Charsets", 5, 13);
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      
      Locale locale1 = Locale.UK;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = locale1.toLanguageTag();
      assertNotSame(locale1, locale0);
      assertNotNull(string3);
      assertEquals("en-GB", string3);
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int1 = StringUtils.getFuzzyDistance("cy>0X4^", "cy>0X4^", locale0);
      assertNotSame(locale0, locale1);
      assertEquals(19, int1);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertFalse(int1 == int0);
      assertFalse(locale0.equals((Object)locale1));
      
      String string4 = StringUtils.leftPad("en-GB", 19);
      assertNotNull(string4);
      assertEquals("              en-GB", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      String string0 = StringUtils.left(" vs ", 51);
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertFalse(linkedHashSet0.contains(51));
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.rightPad("...", 0);
      assertNotNull(string1);
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " vs ", (CharSequence) "...", 15);
      assertEquals(4, int0);
      
      String string2 = StringUtils.strip(" vs ", " vs ");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("n");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.leftPad("", (-665));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.replaceChars("k*", " iL-", "...");
      assertNotNull(string4);
      assertEquals("k*", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      charSequenceArray0[0] = (CharSequence) "n";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) " vs ";
      charSequenceArray0[4] = (CharSequence) "";
      String string5 = StringUtils.replaceAll((String) null, "...", "object");
      assertNull(string5);
      
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "k*";
      charSequenceArray0[8] = (CharSequence) " vs ";
      String string6 = StringUtils.replaceIgnoreCase(" vs ", (String) null, " vs ");
      assertNotNull(string6);
      assertEquals(" vs ", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "object", (CharSequence) " vs ", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[0];
      String string7 = StringUtils.join(shortArray0, 'J');
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string7);
      assertEquals("", string7);
      assertEquals(0, shortArray0.length);
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(250, stringArray0.length);
      
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.wrapIfMissing((String) null, 'T');
      assertNull(string1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'D';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = 'i';
      charArray0[5] = 'T';
      charArray0[6] = 'T';
      charArray0[7] = 'T';
      String string2 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'D', 'T', 'T', 'T', 'i', 'T', 'T', 'T'}, charArray0);
      assertNotNull(string2);
      assertEquals("DTTTiTTT", string2);
      assertEquals(8, charArray0.length);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "DTTTiTTT", charArray0);
      assertArrayEquals(new char[] {'D', 'T', 'T', 'T', 'i', 'T', 'T', 'T'}, charArray0);
      assertTrue(boolean1);
      assertEquals(8, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "DTTTiTTT", "y`z:d?RB6;^Cp21");
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("y`z:d?RB6;^Cp21");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      int int1 = StringUtils.countMatches((CharSequence) "DTTTiTTT", 'T');
      assertEquals(6, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'f');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase("NkDu!1]r2/", "Ik", stringArray0);
      assertNotNull(string0);
      assertEquals("NkDu!1]r2/Ik", string0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny("...", stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
      
      String string1 = "\\u";
      String string2 = StringUtils.stripEnd(string1, "|@#nc*q&~B$BCL");
      assertNotNull(string2);
      assertEquals("\\u", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      String string0 = StringUtils.center("Supplied value must be a valid byte literal between -128 and 127: [", 1, '~');
      assertNotNull(string0);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string0);
      
      String string1 = StringUtils.getDigits("Search and Replace array lengths don't match: ");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "-{RV_kn7cf");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "!>";
      String string0 = StringUtils.center("apxY~CL6T&{#F*cK|$]~{)rS|vBIU(l/,k><", 29, ':');
      assertNotNull(string0);
      assertEquals("apxY~CL6T&{#F*cK|$]~{)rS|vBIU(l/,k><", string0);
      
      charSequenceArray0[1] = (CharSequence) "apxY~CL6T&{#F*cK|$]~{)rS|vBIU(l/,k><";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "-{RV_kn7cf", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string1 = StringUtils.strip((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("|WJ|?=Cannot clone Cloneable type ", (CharSequence) null, charSequenceArray0);
      assertNotNull(string2);
      assertEquals("|WJ|?=Cannot clone Cloneable type ", string2);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.rightPad("Strings must not be null", 740, "...{b>;w&ymP^T#/G|(~]R");
      assertNotNull(string3);
      assertEquals("Strings must not be null...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP^T#/G|(~]R...{b>;w&ymP", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.chomp("-{RV_kn7cf");
      assertNotNull(string4);
      assertEquals("-{RV_kn7cf", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfBlank("Supplied value must be a valid byte literal between -32768 and 32767: [", supplier0);
      assertNotNull(string5);
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      int int0 = StringUtils.lastOrdinalIndexOf("Supplied value must be a valid byte literal between -32768 and 32767: [", "|WJ|?=Cannot clone Cloneable type ", 29);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.chop("apxY~CL6T&{#F*cK|$]~{)rS|vBIU(l/,k><");
      assertNotNull(string6);
      assertEquals("apxY~CL6T&{#F*cK|$]~{)rS|vBIU(l/,k>", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, 'q');
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, shortArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, '7');
      assertFalse(linkedList0.contains('7'));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string1 = StringUtils.wrap("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int1);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.isNumeric("\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.getDigits("\n");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "JmUyw...Vz#u", (CharSequence) "\n", (-1197));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.unwrap("", 'r');
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.overlay("\n", "B3erwgW#I", 13, 13);
      assertNotNull(string1);
      assertEquals("\nB3erwgW#I", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rotate("B3erwgW#I", 13);
      assertNotNull(string2);
      assertEquals("gW#IB3erw", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\nB3erwgW#I", (char[]) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.abbreviate((String) null, "^RI%52/", (-4));
      assertNull(string3);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      // Undeclared exception!
      try { 
        stack0.removeElementAt((-128));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -128
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      String string0 = StringUtils.substring("Minimum abbreviation width with offset is %d", (-3237));
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[3] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[4] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[5] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[6] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[7] = (CharSequence) "Minimum abbreviation width with offset is %d";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Minimum abbreviation width with offset is %d", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("Uqu", "Minimum abbreviation width with offset is %d", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width with offset is %dUqu", string1);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("8Jn", 16, "Minimum abbreviation width with offset is %dUqu");
      assertNotNull(string2);
      assertEquals("8JnMinimum abbre", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.chomp("e/ME`E<W]/sbry,");
      assertNotNull(string3);
      assertEquals("e/ME`E<W]/sbry,", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string4 = StringUtils.getIfBlank("", supplier0);
      assertNull(string4);
      
      String string5 = StringUtils.replaceIgnoreCase("e/ME`E<W]/sbry,", "Minimum abbreviation width with offset is %dUqu", "...");
      assertNotNull(string5);
      assertEquals("e/ME`E<W]/sbry,", string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      int int0 = StringUtils.lastOrdinalIndexOf(charSequenceArray0[4], "Minimum abbreviation width with offset is %d", (-3362));
      assertEquals((-1), int0);
      assertEquals(8, charSequenceArray0.length);
      
      String string6 = StringUtils.chop("cy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]acy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]acy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]acy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]acy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]a yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertNotNull(string6);
      assertEquals("cy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]acy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]acy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]acy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]acy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]a yu3k0bH:Wb_hfN^Zfu<q0]", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.rightPad("maxWith annot be negative", (-1), "x9q03<C");
      assertNotNull(string7);
      assertEquals("maxWith annot be negative", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.overlay("\n", "B3erwgW#I", 13, 13);
      assertNotNull(string1);
      assertEquals("\nB3erwgW#I", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rotate("B3erwgW#I", 13);
      assertNotNull(string2);
      assertEquals("gW#IB3erw", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.lowerCase("\nB3erwgW#I");
      assertNotNull(string3);
      assertEquals("\nb3erwgw#i", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.unwrap("\n", '\'');
      assertNotNull(string4);
      assertEquals("\n", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean0 = StringUtils.containsIgnoreCase("\n", "gW#IB3erw");
      assertFalse(boolean0);
      
      String string5 = StringUtils.replace("\n", "\n", "B3erwgW#I");
      assertNotNull(string5);
      assertEquals("B3erwgW#I", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.removePattern(" ", "Array element ");
      assertNotNull(string6);
      assertEquals(" ", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("gW#IB3erw", "XF>u5hbSoaeR", 13);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\n", "Mn)>kTF;W4z:", (-4638));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.isEmpty("B3erwgW#I");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string7 = StringUtils.normalizeSpace("\nB3erwgW#I");
      assertNotNull(string7);
      assertEquals("B3erwgW#I", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      
      CharBuffer charBuffer0 = CharBuffer.allocate(7);
      assertNotNull(charBuffer0);
      assertEquals(7, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charBuffer0.capacity());
      assertEquals(7, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(7, charBuffer0.remaining());
      
      boolean boolean2 = StringUtils.equals((CharSequence) " ", (CharSequence) charBuffer0);
      assertFalse(boolean2);
      assertEquals(7, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charBuffer0.capacity());
      assertEquals(7, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(7, charBuffer0.remaining());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isAllLowerCase(" ");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      String string8 = StringUtils.stripToEmpty("B3erwgW#I");
      assertNotNull(string8);
      assertEquals("B3erwgW#I", string8);
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      
      boolean boolean4 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\n";
      String string1 = StringUtils.normalizeSpace("\n");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertEquals(1, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertNotNull(charSequence0);
      assertEquals("\n", charSequence0);
      assertEquals(1, stringArray0.length);
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("\n", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.repeat("\n", "", 1776);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", " is not in the range '0' - '9'", "Ik");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeIgnoreCase(" is not in the range '0' - '9'", "");
      assertNotNull(string1);
      assertEquals(" is not in the range '0' - '9'", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlpha(" is not in the range '0' - '9'");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase(" is not in the range '0' - '9'");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) " is not in the range '0' - '9'";
      charSequenceArray0[1] = (CharSequence) "Ik";
      charSequenceArray0[2] = (CharSequence) "";
      String string2 = StringUtils.uncapitalize("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) " is not in the range '0' - '9'";
      charSequenceArray0[6] = (CharSequence) "Ik";
      boolean boolean3 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean3);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      int int1 = StringUtils.indexOfAnyBut(charSequenceArray0[0], (char[]) null);
      assertEquals((-1), int1);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", " is not in the range '0' - '9'", "Ik");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(""));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertFalse(linkedList0.contains(""));
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.join(iterator0, 'j');
      assertFalse(linkedList0.contains(""));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, linkedList0.size());
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultString("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringBefore("t^P.V`[4X\"eHgkJ", (-1));
      assertNotNull(string3);
      assertEquals("t^P.V`[4X\"eHgkJ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.leftPad("ijZz^UWB-j@<", (-1));
      assertNotNull(string4);
      assertEquals("ijZz^UWB-j@<", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      
      String string5 = StringUtils.upperCase("", locale0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.replace("L0", "", "L0");
      assertNotNull(string0);
      assertEquals("L0", string0);
      
      String[] stringArray0 = StringUtils.split("L0");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("DfH5tD@K5AhO1/b'", "N-`)Kj8(fJ+1gYw%0p({Rsl", false);
      assertEquals((-10), int0);
      
      int int1 = StringUtils.compareIgnoreCase("kyIEC%?.#", "Qm");
      assertEquals((-6), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = StringUtils.split("O}D|", " ");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.wrap("L0", 'b');
      assertNotNull(string1);
      assertEquals("bL0b", string1);
      assertFalse(string1.equals((Object)string0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      
      byte[] byteArray0 = new byte[0];
      String string2 = StringUtils.toEncodedString(byteArray0, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, byteArray0.length);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "6PX7cn[nhJtr=", (CharSequence) "O}D|");
      assertEquals(13, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("Yz~wR{o>j;@~", "kyIEC%?.#", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(string3);
      assertEquals("kyIEC%?.#Yz~wR{o>j;@~", string3);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      String string0 = StringUtils.stripStart("Z", "r+)HMdAw0{");
      assertNotNull(string0);
      assertEquals("Z", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "Z", (CharSequence) "r+)HMdAw0{");
      assertNotNull(charSequence0);
      assertEquals("Z", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Z");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.split("r+)HMdAw0{", "Z", 6);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.join((Object[]) stringArray0, '-', (-2664), (-2664));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("H:Wb_hfN^KZfu<q0j;", "...", 47);
      assertNotNull(string0);
      assertEquals("H:Wb_hfN^KZfu<q0j;", string0);
      
      String string1 = StringUtils.replaceAll("...{b>;w&ymP^T#/G|(~]R", "", "/*\"4QM/");
      assertNotNull(string1);
      assertEquals("/*\"4QM/./*\"4QM/./*\"4QM/./*\"4QM/{/*\"4QM/b/*\"4QM/>/*\"4QM/;/*\"4QM/w/*\"4QM/&/*\"4QM/y/*\"4QM/m/*\"4QM/P/*\"4QM/^/*\"4QM/T/*\"4QM/#/*\"4QM///*\"4QM/G/*\"4QM/|/*\"4QM/(/*\"4QM/~/*\"4QM/]/*\"4QM/R/*\"4QM/", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("...{b>;w&ymP^T#/G|(~]R", "");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      String string0 = StringUtils.right("", 30);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.overlay("", "", 1663, 1);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      int int0 = 0;
      String string0 = StringUtils.rightPad("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = "Z";
      String string1 = StringUtils.leftPad("H:Wb_hfN^Zfu<q0]a", 65, "f:u|1L]_T)");
      assertNotNull(string1);
      assertEquals("f:u|1L]_T)f:u|1L]_T)f:u|1L]_T)f:u|1L]_T)f:u|1L]_H:Wb_hfN^Zfu<q0]a", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "f:u|1L]_T)", (CharSequence) "f:u|1L]_T)f:u|1L]_T)f:u|1L]_T)f:u|1L]_T)f:u|1L]_H:Wb_hfN^Zfu<q0]a");
      assertNotNull(charSequence0);
      assertEquals("f:u|1L]_T)", charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("f:u|1L]_T)", "f:u|1L]_T)");
      assertTrue(boolean0);
      
      String string2 = StringUtils.repeat('Z', 65);
      assertNotNull(string2);
      assertEquals("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Z", (CharSequence) "f:u|1L]_T)");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("f:u|1L]_T)f:u|1L]_T)f:u|1L]_T)f:u|1L]_T)f:u|1L]_H:Wb_hfN^Zfu<q0]a", "veTrSb%0.X?hC*0(s0[", "H:Wb_hfN^Zfu<q0]a");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 18
         // veTrSb%0.X?hC*0(s0[
         //                   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
      
      String string0 = StringUtils.normalizeSpace("cy>0X4^");
      assertNotNull(string0);
      assertEquals("cy>0X4^", string0);
      
      String string1 = StringUtils.stripAccents("`$Q6b\"eY=J");
      assertNotNull(string1);
      assertEquals("`$Q6b\"eY=J", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviate("Y]o;", 5, 5);
      assertNotNull(string2);
      assertEquals("Y]o;", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 5;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'c', (-282), 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -282
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.rightPad("", (-9));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", (-9));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.rightPad("", 32, "");
      assertNotNull(string2);
      assertEquals("                                ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 32;
      floatArray0[1] = (float) 32;
      floatArray0[2] = 455.03F;
      floatArray0[3] = (float) 32;
      floatArray0[4] = (float) 32;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'i', (-9), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", '{');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("", '{', ']');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.lowerCase("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsAny("b\"fVn7+f#`2^9r^)Y", stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", (char[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte)59;
      String string2 = StringUtils.join(byteArray0, '{');
      assertArrayEquals(new byte[] {(byte)6, (byte)1, (byte)38, (byte)71, (byte) (-58), (byte) (-58), (byte)59}, byteArray0);
      assertNotNull(string2);
      assertEquals("6{1{38{71{-58{-58{59", string2);
      assertEquals(7, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripStart("h~N<dS", (String) null);
      assertNotNull(string3);
      assertEquals("h~N<dS", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.leftPad(";c3", (int) (byte)59, ']');
      assertNotNull(string4);
      assertEquals("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];c3", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];c3", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: 0", 1120, 1846);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) ", Length: 0", 0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.replaceOnce("", "', has a length less than 2", "', has a length less than 2");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = 'X';
      charArray0[2] = 'O';
      charArray0[3] = 'w';
      charArray0[4] = '&';
      charArray0[5] = '\\';
      charArray0[6] = 'c';
      charArray0[7] = '\"';
      charArray0[8] = '=';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "', has a length less than 2", charArray0);
      assertArrayEquals(new char[] {'1', 'X', 'O', 'w', '&', '\\', 'c', '\"', '='}, charArray0);
      assertFalse(boolean2);
      assertEquals(9, charArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      String string2 = StringUtils.abbreviateMiddle("", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (-1364));
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringAfter("Search and Replace array lengths don't match: ", "Mn^ dhe/Slqx:n");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      
      objectArray0[3] = object3;
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      assertEquals(4, objectArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "java.lang.Object@2c45e86bjava.lang.Object@6e2c65a5java.lang.Object@3acf32cdjava.lang.Object@6f756263", 610);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)7;
      String string1 = StringUtils.toString(byteArray0, (String) null);
      assertArrayEquals(new byte[] {(byte)3, (byte)44, (byte) (-119), (byte)112, (byte)61, (byte)32, (byte)7}, byteArray0);
      assertNotNull(string1);
      assertEquals("\u0003,\uFFFDp= \u0007", string1);
      assertEquals(7, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isMixedCase("java.lang.Object@2c45e86bjava.lang.Object@6e2c65a5java.lang.Object@3acf32cdjava.lang.Object@6f756263");
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "\u0003,\uFFFDp= \u0007", (CharSequence) null, 10);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\u0003,\uFFFDp= \u0007", (String) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.replaceFirst((String) null, (String) null, (String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "-{RV_kn7cf");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean1);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.compare("DI/QejXMzjH!R", "DI/QejXMzjH!R");
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "-{RV_kn7cf", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean2);
      assertEquals(0, charArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("-{RV_kn7cf");
      assertArrayEquals(new int[] {45, 123, 82, 86, 95, 107, 110, 55, 99, 102}, intArray0);
      assertNotNull(intArray0);
      assertEquals(10, intArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.join((Object[]) charSequenceArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(6, charSequenceArray0.length);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "DI/QejXMzjH!R";
      charSequenceArray0[2] = (CharSequence) "DI/QejXMzjH!R";
      charSequenceArray0[3] = (CharSequence) "-{RV_kn7cf";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "DI/QejXMzjH!R";
      boolean boolean3 = StringUtils.endsWithAny("DI/QejXMzjH!R", charSequenceArray0);
      assertTrue(boolean3);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", " is not in the range '0' - '9'", "Ik");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string1 = StringUtils.replace("Ik", "", "Ik");
      assertNotNull(string1);
      assertEquals("Ik", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removePattern("Ik", " ");
      assertNotNull(string2);
      assertEquals("Ik", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Ik", "", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.normalizeSpace("`$Q6b\"eY=J");
      assertNotNull(string3);
      assertEquals("`$Q6b\"eY=J", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = StringUtils.indexOfAny((CharSequence) "`$Q6b\"eY=J", (char[]) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[8];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[5] = locale_FilteringMode5;
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[6] = locale_FilteringMode6;
      Locale.FilteringMode locale_FilteringMode7 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[7] = locale_FilteringMode7;
      String string4 = StringUtils.join(locale_FilteringModeArray0);
      assertNotNull(string4);
      assertEquals("MAP_EXTENDED_RANGESMAP_EXTENDED_RANGESAUTOSELECT_FILTERINGREJECT_EXTENDED_RANGESREJECT_EXTENDED_RANGESAUTOSELECT_FILTERINGIGNORE_EXTENDED_RANGESREJECT_EXTENDED_RANGES", string4);
      assertEquals(8, locale_FilteringModeArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean3 = StringUtils.isNumeric(" is not in the range '0' - '9'");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      String string0 = StringUtils.repeat("The character ", (-145));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat('a', 16);
      assertNotNull(string1);
      assertEquals("aaaaaaaaaaaaaaaa", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.normalizeSpace("The character ");
      assertNotNull(string2);
      assertEquals("The character", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "The character ", (CharSequence) "The character ");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("aaaaaaaaaaaaaaaa");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isAlphanumeric("The character ");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      String string3 = StringUtils.difference("\r", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The character ", (CharSequence) "The character", 3942);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "The character ";
      objectArray0[1] = (Object) "The character ";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "The character ";
      objectArray0[4] = (Object) "The character ";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "The character";
      String string4 = StringUtils.joinWith("Cannot clone Cloneable type |WJ|?=", objectArray0);
      assertNotNull(string4);
      assertEquals(7, objectArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.abbreviate("org.apache.commons.lang3.StringUtils", 1997);
      assertNotNull(string5);
      assertEquals("org.apache.commons.lang3.StringUtils", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.substringsBetween("-wpJ6ykpEL1;", ">cj", "Cannot clone Cloneable type |WJ|?=");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "F<?xB3erwgW#I";
      stringArray0[2] = "";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = 2821.54485223203;
      doubleArray0[2] = (double) 5;
      String string1 = StringUtils.join(doubleArray0, 'c', 5, 5);
      assertArrayEquals(new double[] {5.0, 2821.54485223203, 5.0}, doubleArray0, 0.01);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(3, doubleArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("F<?xB3erwgW#I", "+NFw'Sz(wG[KD:Dr");
      assertNotNull(string2);
      assertEquals("F<?xB3erwgW#I", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.rightPad((String) null, 5);
      assertNull(string3);
      
      String string4 = StringUtils.substringBetween("xW<!~kq[QsB,8$#", "*/1|$>$qSGO");
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      String string5 = StringUtils.stripToEmpty("Locale must not be null");
      assertNotNull(string5);
      assertEquals("Locale must not be null", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.wrapIfMissing((String) null, "");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.defaultString("-}");
      assertNotNull(string0);
      assertEquals("-}", string0);
      
      charSequenceArray0[0] = (CharSequence) "-}";
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'd';
      doubleArray0[1] = (double) 'd';
      doubleArray0[2] = (double) 'd';
      doubleArray0[3] = (double) 'd';
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-}";
      stringArray0[1] = "-}";
      stringArray0[2] = "]^g`?OZ|<hS78";
      stringArray0[3] = "-}";
      stringArray0[4] = "-}";
      stringArray0[5] = "-}";
      stringArray0[6] = "]^g`?OZ|<hS78";
      stringArray0[7] = "]^g`?OZ|<hS78";
      stringArray0[8] = "!/L@;Z=lm:";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(9, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replace("!/L@;Z=lm:", "Minimum abbreviation width with offset is %d", "");
      assertNotNull(string2);
      assertEquals("!/L@;Z=lm:", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "!/L@;Z=lm:", (CharSequence) "!/L@;Z=lm:");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNotBlank("!/L@;Z=lm:");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.strip((String) null, "108A0A0A-1118A64A-2212");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "", 235);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("108A0A0A-1118A64A-2212", "", stringArray0);
      assertNotNull(string2);
      assertEquals("108A0A0A-1118A64A-2212", string2);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.substringBetween((String) null, (String) null, "maxWith cannot be negative");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isMixedCase("108A0A0A-1118A64A-2212");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null, (-1119));
      assertNull(stringArray1);
      
      boolean boolean1 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.normalizeSpace((String) null);
      assertNull(string4);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "", (CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string5 = StringUtils.stripToEmpty("XamQ,-a/d_+=S");
      assertNotNull(string5);
      assertEquals("XamQ,-a/d_+=S", string5);
      assertFalse(string5.equals((Object)string2));
      
      boolean boolean4 = StringUtils.isAlphanumeric("XamQ,-a/d_+=S");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("gD", 'p');
      assertNotNull(string0);
      assertEquals("gD", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "gD", (CharSequence) "gD");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripToEmpty(",;");
      assertNotNull(string1);
      assertEquals(",;", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("The Array must not be null", 4075, "J");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1812.977651236);
      String string0 = StringUtils.leftPad("object", 3276);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[0];
      String string1 = StringUtils.join(floatArray0, '}');
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, floatArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.removePattern(string0, (String) null);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceChars("Object varargs must not be null", "object", (String) null);
      assertNotNull(string3);
      assertEquals("O varargs mus n  null", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.unwrap("O varargs mus n  null", "object");
      assertNotNull(string4);
      assertEquals("O varargs mus n  null", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
      
      String string0 = "`$Q6b\"eY=J";
      String string1 = StringUtils.normalizeSpace("cy>0X4^");
      assertNotNull(string1);
      assertEquals("cy>0X4^", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripAccents("`$Q6b\"eY=J");
      assertNotNull(string2);
      assertEquals("`$Q6b\"eY=J", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.startsWithAny("org.apache.commons.lang3.Charsets", stringArray0);
      assertTrue(boolean1);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      String string3 = StringUtils.join(booleanArray0, '.');
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertNotNull(string3);
      assertEquals("true.false", string3);
      assertEquals(2, booleanArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string4);
      assertEquals(2, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("true.false", "true.false", 5, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 11
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'N';
      floatArray0[1] = (float) 'N';
      floatArray0[2] = (float) 'N';
      floatArray0[3] = (float) 'N';
      floatArray0[4] = (float) 'N';
      floatArray0[5] = (float) 'N';
      floatArray0[6] = (float) 'N';
      floatArray0[8] = (float) 'N';
      String string0 = StringUtils.join(floatArray0, 'N');
      assertArrayEquals(new float[] {78.0F, 78.0F, 78.0F, 78.0F, 78.0F, 78.0F, 78.0F, 0.0F, 78.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals("78.0N78.0N78.0N78.0N78.0N78.0N78.0N0.0N78.0", string0);
      assertEquals(9, floatArray0.length);
      
      boolean boolean0 = StringUtils.isBlank("78.0N78.0N78.0N78.0N78.0N78.0N78.0N0.0N78.0");
      assertFalse(boolean0);
      
      String string1 = StringUtils.center("\r", (-22));
      assertNotNull(string1);
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("N$(N_jxhOV>WA", (String) null);
      assertNotNull(string2);
      assertEquals("N$(N_jxhOV>WA", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.containsWhitespace("78.0N78.0N78.0N78.0N78.0N78.0N78.0N0.0N78.0");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isMixedCase("\r");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.overlay("\n", "B3erwgW#I", 13, 13);
      assertNotNull(string1);
      assertEquals("\nB3erwgW#I", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rotate("B3erwgW#I", 13);
      assertNotNull(string2);
      assertEquals("gW#IB3erw", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.lowerCase("\nB3erwgW#I");
      assertNotNull(string3);
      assertEquals("\nb3erwgw#i", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.unwrap("S+m`jMI:r", '\'');
      assertNotNull(string4);
      assertEquals("S+m`jMI:r", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean0 = StringUtils.containsIgnoreCase("S+m`jMI:r", "gW#IB3erw");
      assertFalse(boolean0);
      
      String string5 = StringUtils.appendIfMissing("gW#IB3erw", "S+m`jMI:r", charSequenceArray0);
      assertNotNull(string5);
      assertEquals("gW#IB3erwS+m`jMI:r", string5);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string6 = StringUtils.EMPTY;
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "\nb3erwgw#i");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string7 = StringUtils.unwrap("\r", '&');
      assertNotNull(string7);
      assertEquals("\r", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      
      String[] stringArray0 = new String[0];
      String string8 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string8);
      assertEquals(0, stringArray0.length);
      
      String string9 = StringUtils.join((Object[]) stringArray0, ']');
      assertNotNull(string9);
      assertEquals("", string9);
      assertEquals(0, stringArray0.length);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      
      String string10 = StringUtils.swapCase("\r");
      assertNotNull(string10);
      assertEquals("\r", string10);
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "gW#IB3erwS+m`jMI:r", (CharSequence) "", 629);
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " yu3k0bH:Wb_hfN^Zfu<q0]a", charArray0);
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      
      String string0 = StringUtils.toRootUpperCase("ejX");
      assertNotNull(string0);
      assertEquals("EJX", string0);
      
      String string1 = StringUtils.right("EJX", 1);
      assertNotNull(string1);
      assertEquals("X", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("&m&x \"@2a6Rl^|?B+.", " yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertNotNull(string2);
      assertEquals("&m&x \"@2a6Rl^|?B+.", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " yu3k0bH:Wb_hfN^Zfu<q0]a", charArray0);
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      
      String string3 = StringUtils.join(charArray0, 'U');
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertNotNull(string3);
      assertEquals("U", string3);
      assertEquals(1, charArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int[] intArray0 = StringUtils.toCodePoints("ejX");
      assertArrayEquals(new int[] {101, 106, 88}, intArray0);
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      
      try { 
        StringUtils.getBytes("{$U>2)\"yP#", " yu3k0bH:Wb_hfN^Zfu<q0]a");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = '=';
      String string0 = StringUtils.remove("q<wn!3B", "q<wn!3B");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "q<wn!3B", "4fu,qu~6&6N2?{/");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.unwrap("r%~>Wqs?|", '&');
      assertNotNull(string2);
      assertEquals("r%~>Wqs?|", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "4fu,qu~6&6N2?{/";
      String string3 = StringUtils.strip("xW<!~kq[QsB,8$#");
      assertNotNull(string3);
      assertEquals("xW<!~kq[QsB,8$#", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.wrapIfMissing("[[", 'C');
      assertNotNull(string4);
      assertEquals("C[[C", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'&', '=', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string5);
      assertEquals("&=\u0000\u0000\u0000\u0000\u0000", string5);
      assertEquals(7, charArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "C[[C", charArray0);
      assertArrayEquals(new char[] {'&', '=', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
      
      String string6 = StringUtils.right("r%~>Wqs?|", 3);
      assertNotNull(string6);
      assertEquals("s?|", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean1);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      String string0 = "s37T5zG:y\"Z/dRij4.";
      String string1 = StringUtils.replaceChars("s37T5zG:y\"Z/dRij4.", "s37T5zG:y\"Z/dRij4.", "s37T5zG:y\"Z/dRij4.");
      assertNotNull(string1);
      assertEquals("s37T5zG:y\"Z/dRij4.", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = " in an array of ";
      String string3 = StringUtils.reverseDelimited(" in an array of ", 'W');
      assertNotNull(string3);
      assertEquals(" in an array of ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith(" in an array of ", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("Dd", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.substringAfterLast((String) null, "H:Wb_hfN^Zfu<q0");
      assertNull(string1);
      
      char char0 = 'a';
      int int0 = StringUtils.countMatches((CharSequence) null, 'a');
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int1 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int1);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "H:Wb_hfN^Zfu<q0", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "P", (-2442));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.chop("YQ-aB7eO2p}I");
      assertNotNull(string0);
      assertEquals("YQ-aB7eO2p}", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "YQ-aB7eO2p}I", (char[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split((String) null, 'i');
      assertNull(stringArray0);
      
      String string1 = StringUtils.upperCase("iBWm&");
      assertNotNull(string1);
      assertEquals("IBWM&", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1162);
      String string0 = StringUtils.join(shortArray0, '_');
      assertArrayEquals(new short[] {(short) (-1162)}, shortArray0);
      assertNotNull(string0);
      assertEquals("-1162", string0);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("&_n+f.48q1C?|w#^)B");
      assertNotNull(intArray0);
      assertEquals(18, intArray0.length);
      
      String[] stringArray0 = StringUtils.split((String) null, '_');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllUpperCase("\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripToNull("\n");
      assertNull(string1);
      
      Class<CharBuffer> class0 = CharBuffer.class;
      ServiceLoader<CharBuffer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      
      int int0 = 3469;
      String string2 = StringUtils.right((String) null, 307);
      assertNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, ", '", 307, 3469);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 307
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("JmUywP/OzwgyCa");
      assertNotNull(string0);
      assertEquals("JmUywP/OzwgyCa", string0);
      
      String string1 = StringUtils.repeat("JmUywP/OzwgyCa", 10);
      assertNotNull(string1);
      assertEquals("JmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCa", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceIgnoreCase(".$WcKB0?!53f4,s!", (String) null, "JmUywP/OzwgyCa");
      assertNotNull(string2);
      assertEquals(".$WcKB0?!53f4,s!", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.chop("JmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCa");
      assertNotNull(string3);
      assertEquals("JmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyC", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.overlay("\n", "B3erwgW#I", 13, 13);
      assertNotNull(string1);
      assertEquals("\nB3erwgW#I", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rotate("B3erwgW#I", 13);
      assertNotNull(string2);
      assertEquals("gW#IB3erw", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.lowerCase("\nB3erwgW#I");
      assertNotNull(string3);
      assertEquals("\nb3erwgw#i", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.unwrap("S+m`jMI:r", '\'');
      assertNotNull(string4);
      assertEquals("S+m`jMI:r", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsIgnoreCase("S+m`jMI:r", "gW#IB3erw");
      assertFalse(boolean0);
      
      String string5 = StringUtils.appendIfMissing("gW#IB3erw", "S+m`jMI:r", charSequenceArray0);
      assertNotNull(string5);
      assertEquals("gW#IB3erwS+m`jMI:r", string5);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string6 = StringUtils.EMPTY;
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "\nb3erwgw#i");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string7 = StringUtils.remove("L)g?By#gU`", "\"*\"~Sr2x1QRx51%klx");
      assertNotNull(string7);
      assertEquals("L)g?By#gU`", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      
      String string8 = StringUtils.substringAfterLast("org.apache.commons.lang3.ArrayUtils", "E>C_[z");
      assertNotNull(string8);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      
      boolean boolean2 = StringUtils.containsIgnoreCase("gW#IB3erw", "\nb3erwgw#i");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("...");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "L)g?By#gU`", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Nlx7xhycqC", (CharSequence) "");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Mn^ dhe/Slqx:n");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int2 = StringUtils.lastIndexOfAny(" ", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals((-1), int2);
      assertEquals(1, stringArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(stringArray0.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.trim("1'}BLnfz0Zgr !tQ");
      assertNotNull(string0);
      assertEquals("1'}BLnfz0Zgr !tQ", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "1'}BLnfz0Zgr !tQ", (CharSequence) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Threshold must not be negative", "$]~{)rS|vBIU(l/,k><");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      String string1 = StringUtils.substringBetween("v", "Threshold must not be negative", "Threshold must not be negative");
      assertNull(string1);
      
      String string2 = StringUtils.repeat("f:u|1L]_T)r&Vuy(", (-145));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("f:u|1L]_T)r&Vuy(", (CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.repeat('i', 1);
      assertNotNull(string3);
      assertEquals("i", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.normalizeSpace((String) null);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("v");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isAlphanumeric("v");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      String string5 = StringUtils.difference("", "");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "i", (CharSequence) "i", 11);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.overlay("\n", "B3erwgW#I", 13, 13);
      assertNotNull(string1);
      assertEquals("\nB3erwgW#I", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rotate("B3erwgW#I", 13);
      assertNotNull(string2);
      assertEquals("gW#IB3erw", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.lowerCase("\nB3erwgW#I");
      assertNotNull(string3);
      assertEquals("\nb3erwgw#i", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.unwrap("\n", '\'');
      assertNotNull(string4);
      assertEquals("\n", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.leftPad("\nB3erwgW#I", 13);
      assertNotNull(string5);
      assertEquals("   \nB3erwgW#I", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "B3erwgW#I", (CharSequence) "gW#IB3erw", 13);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'N';
      floatArray0[1] = (float) 'S';
      floatArray0[2] = (float) 'N';
      floatArray0[3] = (float) 'S';
      floatArray0[4] = (float) 'N';
      floatArray0[5] = (float) 'N';
      floatArray0[6] = (float) 'S';
      floatArray0[7] = (float) 'N';
      floatArray0[8] = (float) 'N';
      String string0 = StringUtils.join(floatArray0, 'N');
      assertArrayEquals(new float[] {78.0F, 83.0F, 78.0F, 83.0F, 78.0F, 78.0F, 83.0F, 78.0F, 78.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals("78.0N83.0N78.0N83.0N78.0N78.0N83.0N78.0N78.0", string0);
      assertEquals(9, floatArray0.length);
      
      boolean boolean0 = StringUtils.isBlank("78.0N83.0N78.0N83.0N78.0N78.0N83.0N78.0N78.0");
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "78.0N83.0N78.0N83.0N78.0N78.0N83.0N78.0N78.0", (CharSequence) "78.0N83.0N78.0N83.0N78.0N78.0N83.0N78.0N78.0");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isNotBlank("78.0N83.0N78.0N83.0N78.0N78.0N83.0N78.0N78.0");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "78.0N83.0N78.0N83.0N78.0N78.0N83.0N78.0N78.0", (CharSequence) "78.0N83.0N78.0N83.0N78.0N78.0N83.0N78.0N78.0");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      String string1 = StringUtils.join(booleanArray0, 'N', 0, 0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(3, booleanArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceAll("Arguments cannot both be null", "Arguments cannot both be null", "Arguments cannot both be null");
      assertNotNull(string2);
      assertEquals("Arguments cannot both be null", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[25];
      charSequenceArray0[0] = (CharSequence) "v";
      charSequenceArray0[1] = (CharSequence) "v";
      charSequenceArray0[2] = (CharSequence) "v";
      charSequenceArray0[3] = (CharSequence) "v";
      charSequenceArray0[4] = (CharSequence) "v";
      String string0 = StringUtils.substringBefore("Threshold must not be negative", "$]~{)rS|vBIU(l/,k><");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      charSequenceArray0[5] = (CharSequence) "Threshold must not be negative";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "v", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(25, charSequenceArray0.length);
      
      String string1 = StringUtils.chomp("Threshold must not be negative");
      assertNotNull(string1);
      assertEquals("Threshold must not be negative", string1);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      CharBuffer charBuffer0 = CharBuffer.wrap(charSequenceArray0[5]);
      assertNotNull(charBuffer0);
      assertEquals(25, charSequenceArray0.length);
      assertEquals(30, charBuffer0.remaining());
      assertEquals(30, charBuffer0.length());
      assertEquals(30, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals("Threshold must not be negative", charBuffer0.toString());
      assertEquals(30, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.MAP_EXTENDED_RANGES, locale_FilteringMode0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("Threshold must not be negative");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("Threshold must not be negative", charSequenceArray0[5], charSequenceArray0);
      assertNotNull(string2);
      assertEquals("Threshold must not be negative", string2);
      assertEquals(25, charSequenceArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.leftPad("$]~{)rS|vBIU(l/,k><", 8192, 'm');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.defaultString("vNZ${35a)i;`LU=sx0");
      assertNotNull(string4);
      assertEquals("vNZ${35a)i;`LU=sx0", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      String string0 = StringUtils.removeAll("Comparator should not be null.", "Comparator should not be null.");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.swapCase("y.dX5h+Vvm{!l.]");
      assertNotNull(string1);
      assertEquals("Y.Dx5H+vVM{!L.]", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("Comparator should not be null.", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "y.dX5h+Vvm{!l.]");
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) (-1);
      String string2 = StringUtils.join(floatArray0, '3');
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(string2);
      assertEquals("-1.03-1.030.03-1.03-1.03-1.03-1.03-1.0", string2);
      assertEquals(8, floatArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = StringUtils.indexOf((CharSequence) "Comparator should not be null.", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.removeStartIgnoreCase("Y.Dx5H+vVM{!L.]", "Y.Dx5H+vVM{!L.]");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.mid("=7BJH", 577, 1792);
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, 'q');
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, shortArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.rotate("q^rXp[gO4Y]~.,", (-1));
      assertNotNull(string1);
      assertEquals("^rXp[gO4Y]~.,q", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.unwrap("'6Ys74X", "B3erwgW#I");
      assertNotNull(string2);
      assertEquals("'6Ys74X", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "'6Ys74X", 1171);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 'q';
      floatArray0[4] = (float) 1171;
      String string3 = StringUtils.join(floatArray0, 'q', 1, (-1));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 113.0F, 1171.0F}, floatArray0, 0.01F);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(5, floatArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.toRootUpperCase("Supplied value must be a valid byte literal between -128 and 127: [");
      assertNotNull(string1);
      assertEquals("SUPPLIED VALUE MUST BE A VALID BYTE LITERAL BETWEEN -128 AND 127: [", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("SUPPLIED VALUE MUST BE A VALID BYTE LITERAL BETWEEN -128 AND 127: [", stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.swapCase("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.stripToEmpty("Array and element cannot both be null");
      assertNotNull(string3);
      assertEquals("Array and element cannot both be null", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean1 = StringUtils.startsWith("Array and element cannot both be null", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "SUPPLIED VALUE MUST BE A VALID BYTE LITERAL BETWEEN -128 AND 127: [", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.compareIgnoreCase("#}\")K_N", "<^U>P~lmeDdkQ)*Z=", false);
      assertEquals((-25), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase("x^a\u0001RW3Gk(S", ">(eTEC#bKwcx%N#WJ");
      assertEquals(58, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      byte[] byteArray0 = new byte[0];
      String string4 = StringUtils.join(byteArray0, '2');
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(0, byteArray0.length);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'d'}, charArray0);
      assertEquals((-1), int3);
      assertEquals(1, charArray0.length);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "maxWith cannot be negative";
      stringArray0[2] = "maxWith cannot be negative";
      stringArray0[3] = "maxWith cannot be negative";
      stringArray0[4] = "maxWith cannot be negative";
      stringArray0[5] = "maxWith cannot be negative";
      stringArray0[6] = "maxWith cannot be negative";
      stringArray0[7] = "";
      String string0 = StringUtils.replaceEach("maxWith cannot be negative", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("maxWith cannot be negative", string0);
      assertEquals(8, stringArray0.length);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("maxWith cannot be negative", "maxWith cannot be negative", stringArray0);
      assertNotNull(string1);
      assertEquals("maxWith cannot be negative", string1);
      assertEquals(8, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.prependIfMissingIgnoreCase(" ", "", stringArray0);
      assertNotNull(string2);
      assertEquals(" ", string2);
      assertEquals(8, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "maxWith cannot be negative", (CharSequence[]) stringArray0);
      assertTrue(boolean1);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.center("A", 10, "g|]");
      assertNotNull(string3);
      assertEquals("g|]gAg|]g|", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) " ", (CharSequence[]) stringArray0);
      assertTrue(boolean2);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string4 = StringUtils.wrapIfMissing(" has no clone method", 'R');
      assertNotNull(string4);
      assertEquals("R has no clone methodR", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      String string0 = StringUtils.swapCase("2");
      assertNotNull(string0);
      assertEquals("2", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "2", (CharSequence) "2");
      assertTrue(boolean0);
      
      String string1 = StringUtils.rotate("2", 1820);
      assertNotNull(string1);
      assertEquals("2", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.right("2", 98);
      assertNotNull(string2);
      assertEquals("2", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("2", "j-@@>41j<i(fyuug!");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.join((Object[]) stringArray0, 'f', 3197, (int) 'f');
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(1, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.left("2", 45);
      assertNotNull(string4);
      assertEquals("2", string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "2", (CharSequence) "");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" vs ", ':');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase("...{b>;w&ymP^T#/G|(~]R", "...{b>;w&ymP^T#/G|(~]R", stringArray0);
      assertNotNull(string0);
      assertEquals("...{b>;w&ymP^T#/G|(~]R", string0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny("...{b>;w&ymP^T#/G|(~]R", stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.stripEnd("...{b>;w&ymP^T#/G|(~]R", " vs ");
      assertNotNull(string1);
      assertEquals("...{b>;w&ymP^T#/G|(~]R", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAny("...{b>;w&ymP^T#/G|(~]R", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.endsWithAny("...{b>;w&ymP^T#/G|(~]R", stringArray0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "26CJXt-_}NS.");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("5i}Om-C8f(K$d@S", "K{#`xZCKDIRSwO/=j", "5i}Om-C8f(K$d@S");
      assertNotNull(string0);
      assertEquals("5i}Om-C8f(K$d@S", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "K{#`xZCKDIRSwO/=j";
      charSequenceArray0[1] = (CharSequence) "K{#`xZCKDIRSwO/=j";
      charSequenceArray0[2] = (CharSequence) "5i}Om-C8f(K$d@S";
      charSequenceArray0[3] = (CharSequence) "K{#`xZCKDIRSwO/=j";
      charSequenceArray0[4] = (CharSequence) "5i}Om-C8f(K$d@S";
      boolean boolean0 = StringUtils.endsWithAny("5i}Om-C8f(K$d@S", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "v";
      charSequenceArray0[1] = (CharSequence) "v";
      charSequenceArray0[2] = (CharSequence) "v";
      charSequenceArray0[3] = (CharSequence) "v";
      charSequenceArray0[4] = (CharSequence) "v";
      String string0 = StringUtils.substringBefore("Threshold must not be negative", "$]~{)rS|vBIU(l/,k><");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      charSequenceArray0[5] = (CharSequence) "Threshold must not be negative";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "v", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string1 = StringUtils.chomp("Threshold must not be negative");
      assertNotNull(string1);
      assertEquals("Threshold must not be negative", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat("f:u|1L]_T)r&Vuy(", (-145));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("f:u|1L]_T)r&Vuy(", "Threshold must not be negative");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.repeat('m', 1);
      assertNotNull(string3);
      assertEquals("m", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.normalizeSpace("Threshold must not be negative");
      assertNotNull(string4);
      assertEquals("Threshold must not be negative", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean2 = StringUtils.equals((CharSequence) "", (CharSequence) "Threshold must not be negative");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isAllLowerCase(charSequenceArray0[2]);
      assertTrue(boolean3);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      boolean boolean4 = StringUtils.isAlphanumeric(charSequenceArray0[3]);
      assertTrue(boolean4);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      
      String[] stringArray0 = StringUtils.split("Y1", "f:u|1L]_T)r&Vuy(", 77);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string5 = StringUtils.removeStartIgnoreCase((String) null, "2                                                                                                                                                                ");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, 'q');
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, shortArray0.length);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.normalizeSpace("tb?F0UD2nWKr?;m@");
      assertNotNull(string2);
      assertEquals("tb?F0UD2nWKr?;m@", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.stripAccents("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isAlphaSpace("tb?F0UD2nWKr?;m@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, 'q');
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, shortArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Ik");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("N-`)Kj8(fJ+1gYw%0p({Rsl", "Ik", false);
      assertEquals(5, int0);
      
      int int1 = StringUtils.compareIgnoreCase("kyIEC%?.#", "}=bY+");
      assertEquals((-18), int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      String string0 = StringUtils.join(byteArray0, '\"', (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte) (-97), (byte) (-97), (byte) (-97), (byte)0, (byte)0, (byte) (-97), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(9, byteArray0.length);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAlphaSpace("Ik");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.wrap((String) null, "H:Wb_hfN^Zfu<q0]a");
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 31, 31);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.lowerCase("H:Wb_hfN^Zfu<q0]a");
      assertNotNull(string2);
      assertEquals("h:wb_hfn^zfu<q0]a", string2);
      
      int int1 = StringUtils.countMatches((CharSequence) "h:wb_hfn^zfu<q0]a", 'L');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.repeat('D', 1);
      assertNotNull(string3);
      assertEquals("D", string3);
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "D", (CharSequence) "h:wb_hfn^zfu<q0]a");
      assertFalse(boolean0);
      
      String string4 = StringUtils.chomp("*%U:");
      assertNotNull(string4);
      assertEquals("*%U:", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean1 = StringUtils.isAllLowerCase("*%U:");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      String string5 = StringUtils.join(byteArray0, 'I');
      assertArrayEquals(new byte[] {(byte) (-34), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertNotNull(string5);
      assertEquals("-34I-1I-1I-1I-1", string5);
      assertEquals(5, byteArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      charArray0[1] = 'D';
      charArray0[2] = 'D';
      charArray0[3] = 'I';
      charArray0[4] = 'I';
      charArray0[5] = 'D';
      charArray0[6] = 'I';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "D", charArray0);
      assertArrayEquals(new char[] {')', 'D', 'D', 'I', 'I', 'D', 'I'}, charArray0);
      assertTrue(boolean2);
      assertEquals(7, charArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("R-X=Pe[T+.ht", "^RI%52/", (int) (byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Ik");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.join((Object[]) stringArray0, "+rQ8Z", 722, 722);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isNumeric("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      String string0 = StringUtils.swapCase("2");
      assertNotNull(string0);
      assertEquals("2", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "2", (CharSequence) "2");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "2";
      charSequenceArray0[1] = (CharSequence) "2";
      String string1 = StringUtils.center("!6k7ys}#50GR.w", 1065, "org.apache.commons.lang3.RegExUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) string1;
      objectArray0[1] = (Object) "!6k7ys}#50GR.w";
      objectArray0[2] = (Object) "2";
      objectArray0[3] = (Object) charSequenceArray0[1];
      objectArray0[4] = (Object) "!6k7ys}#50GR.w";
      objectArray0[5] = (Object) "org.apache.commons.lang3.RegExUtils";
      objectArray0[6] = (Object) charSequenceArray0[0];
      objectArray0[7] = (Object) "org.apache.commons.lang3.RegExUtils";
      objectArray0[8] = (Object) charSequenceArray0[1];
      String string2 = StringUtils.join(objectArray0, "E+");
      assertNotNull(string2);
      assertEquals(9, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) string2, charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(9, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints(" ");
      assertArrayEquals(new int[] {32}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      String string0 = StringUtils.join((char[]) null, '<', 8192, 8192);
      assertNull(string0);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertFalse(treeSet0.contains(" "));
      assertNotNull(treeSet0);
      
      TreeSet<Object> treeSet1 = new TreeSet<Object>((SortedSet<Object>) treeSet0);
      assertFalse(treeSet0.contains(" "));
      assertFalse(treeSet1.contains(" "));
      assertNotNull(treeSet1);
      assertTrue(treeSet1.equals((Object)treeSet0));
      
      String string1 = StringUtils.join((Iterable<?>) treeSet1, (String) null);
      assertNotSame(treeSet0, treeSet1);
      assertNotSame(treeSet1, treeSet0);
      assertFalse(treeSet0.contains(" "));
      assertFalse(treeSet1.contains(" "));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertTrue(treeSet1.equals((Object)treeSet0));
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "-{RV_kn7cf");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "-{RV_kn7cf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", '{');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("", '{', ']');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.lowerCase("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsAny("b\"fVn7+f#`2^9r^)Y", stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", (char[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte)59;
      String string2 = StringUtils.join(byteArray0, '{');
      assertArrayEquals(new byte[] {(byte)6, (byte)1, (byte)38, (byte)71, (byte) (-58), (byte) (-58), (byte)59}, byteArray0);
      assertNotNull(string2);
      assertEquals("6{1{38{71{-58{-58{59", string2);
      assertEquals(7, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripStart("h~N<dS", (String) null);
      assertNotNull(string3);
      assertEquals("h~N<dS", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(0, stringArray0.length);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<CharBuffer> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string5 = StringUtils.join(iterator0, "Search and Replace array lengths don't match: ");
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(0, linkedList0.size());
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean2 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNotBlank("Minimum abbreviation width with offset is %d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[3] = (-1118);
      String string0 = StringUtils.rightPad("Ghn`#lShi6", 127, 'N');
      assertNotNull(string0);
      assertEquals("Ghn`#lShi6NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = StringUtils.join(objectArray0, "r(hO9oxaUtN");
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Ghn`#lShi6NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
      String string2 = StringUtils.appendIfMissingIgnoreCase("sJ'tzbV\"P:%ZG", "Ghn`#lShi6", charSequenceArray0);
      assertNotNull(string2);
      assertEquals("sJ'tzbV\"P:%ZG", string2);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'U';
      charArray0[3] = 'N';
      charArray0[4] = 'g';
      charArray0[5] = '@';
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[0], charArray0);
      assertArrayEquals(new char[] {'N', 'N', 'U', 'N', 'g', '@'}, charArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(6, charArray0.length);
      
      String string3 = StringUtils.substring("4t_Nh$D?b\"fVn7+f#`2^9r^)Y", 8);
      assertNotNull(string3);
      assertEquals("b\"fVn7+f#`2^9r^)Y", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.substringBefore("Ghn`#lShi6NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", "Ghn`#lShi6NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isMixedCase("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      Object[] objectArray0 = new Object[4];
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[2] = (Object) "g0G TP03bAj$ES1=";
      objectArray0[3] = object0;
      String string0 = StringUtils.join(objectArray0, '=', 446, 1);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(4, objectArray0.length);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "IkE", "@LI@*E1<xSBGLW1&k");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = (-23);
      intArray0[4] = (-1118);
      intArray0[4] = 78;
      String string0 = StringUtils.repeat("", (-23));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat(')', 78);
      assertNotNull(string1);
      assertEquals("))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 78;
      String string2 = StringUtils.replacePattern("))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))", "", "");
      assertNotNull(string2);
      assertEquals("))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.replaceChars("))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))", "\r", "\r");
      assertNotNull(string3);
      assertEquals("))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 51);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))", "                                                                                                                                                                2");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.strip("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)50;
      String string2 = StringUtils.join(byteArray0, 'x');
      assertArrayEquals(new byte[] {(byte) (-1), (byte)50}, byteArray0);
      assertNotNull(string2);
      assertEquals("-1x50", string2);
      assertEquals(2, byteArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, '\\', (-4811), 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -4811
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-2287));
      assertEquals((-1), int0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertFalse(stack0.contains(int0));
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, 'n', (-2287), 3003);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -2287
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", " is not in the range '0' - '9'", "Ik");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat("'4", 15);
      assertNotNull(string1);
      assertEquals("'4'4'4'4'4'4'4'4'4'4'4'4'4'4'4", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceIgnoreCase(" yu3k0bH:Wb_hfN^Zfu<q0]a", "s2L'n&[/", " vs ");
      assertNotNull(string0);
      assertEquals(" yu3k0bH:Wb_hfN^Zfu<q0]a", string0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)584;
      shortArray0[0] = (short)584;
      shortArray0[3] = (short)0;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("s2L'n&[/", (int) (short)584, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceIgnoreCase(" yu3k0bH:Wb_hfN^Zfu<q0]a", "org.apache.commons.lang3.Charsets", " vs ");
      assertNotNull(string0);
      assertEquals(" yu3k0bH:Wb_hfN^Zfu<q0]a", string0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)579;
      shortArray0[2] = (short)482;
      shortArray0[3] = (short)0;
      String string1 = StringUtils.join(shortArray0, 'Z', (int) (short)579, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)579, (short)482, (short)0}, shortArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(4, shortArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("org.apache.commons.lang3.Charsets", (int) (short)579, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.offerFirst("', has a length less than 2");
      assertTrue(linkedList0.contains("', has a length less than 2"));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Iterator<String> iterator0 = linkedList0.iterator();
      assertTrue(linkedList0.contains("', has a length less than 2"));
      assertNotNull(iterator0);
      assertEquals(1, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, 't');
      assertTrue(linkedList0.contains("', has a length less than 2"));
      assertNotNull(string0);
      assertEquals("', has a length less than 2", string0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      String string0 = StringUtils.removeStart("2yT", "2yT");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceChars("2yT", "aN?/Tp.EPLFCU", "");
      assertNotNull(string1);
      assertEquals("2y", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBetween(" vs ", "Mn^ dhe/Slqx:n");
      assertNull(string2);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1528).when(comparator0).compare(any() , any());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      assertFalse(treeSet0.contains(string0));
      assertNotNull(treeSet0);
      
      boolean boolean0 = treeSet0.add(" vs ");
      assertFalse(treeSet0.contains(string0));
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("R7ZGQgITS?", "Mn^ dhe/Slqx:n", 13);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.replaceIgnoreCase("2yT", "", " is not in the range '0' - '9'");
      assertNotNull(string3);
      assertEquals("2yT", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.remove("Mn^ dhe/Slqx:n", "Array and element cannot both be null");
      assertNotNull(string4);
      assertEquals("Mn^ dhe/Slqx:n", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.replaceIgnoreCase("Array and element cannot both be null", "2yT", (String) null);
      assertNotNull(string5);
      assertEquals("Array and element cannot both be null", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.unwrap((String) null, '`');
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      int int0 = new Integer(1396);
      assertEquals(1396, int0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n", "\n");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      Locale locale1 = Locale.UK;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("en_GB", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      
      String string1 = locale0.getDisplayScript(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = locale0.toLanguageTag();
      assertNotSame(locale0, locale1);
      assertNotNull(string2);
      assertEquals("de-DE", string2);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      short[] shortArray0 = new short[0];
      String string3 = StringUtils.join(shortArray0, ':');
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(0, shortArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int1 = StringUtils.getFuzzyDistance("", "", locale0);
      assertNotSame(locale0, locale1);
      assertEquals(0, int1);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("\n", "$-pr(C;Zlc#S3!~>9", "ch");
      assertNotNull(string4);
      assertEquals("\n", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      int int2 = StringUtils.compare("ch", "!Z", true);
      assertEquals(66, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      String string0 = StringUtils.replace("'$", "'$", "'$");
      assertNotNull(string0);
      assertEquals("'$", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "'$", "'$");
      assertEquals(0, int0);
      
      String string1 = StringUtils.repeat('O', 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.unwrap("'$", "");
      assertNotNull(string2);
      assertEquals("'$", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "'$";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "'$";
      String string3 = StringUtils.appendIfMissing("'$", "'$", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("'$", string3);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.remove("jMI:r", "'$");
      assertNotNull(string4);
      assertEquals("jMI:r", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.replaceEach("1-<znAQ(vF=G.&}Qnx$", (String[]) null, (String[]) null);
      assertNotNull(string5);
      assertEquals("1-<znAQ(vF=G.&}Qnx$", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.abbreviate("'$", "", 282, 0);
      assertNotNull(string6);
      assertEquals("'$", string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      String string0 = StringUtils.center("F<?xB3erwgW#I", 2626);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("F<?xB3erwgW#I");
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad("', has a length less than 2", (-2535), "");
      assertNotNull(string1);
      assertEquals("', has a length less than 2", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripAccents(" ");
      assertNotNull(string2);
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.toRootUpperCase(" ");
      assertNotNull(string3);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.chop(" ");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "', has a length less than 2";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) string0;
      charSequenceArray0[4] = (CharSequence) " ";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "F<?xB3erwgW#I";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, " ", (-2535), 2626);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2535
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      String string0 = StringUtils.swapCase("2");
      assertNotNull(string0);
      assertEquals("2", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "2", (CharSequence) "2");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "2";
      charSequenceArray0[1] = (CharSequence) "2";
      String string1 = StringUtils.rightPad((String) null, 8, 'g');
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "2", (String) null);
      assertNull(stringArray0);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("edMaS", (CharSequence) null, charSequenceArray0);
      assertNotNull(string2);
      assertEquals("edMaS", string2);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      Class<CharBuffer> class0 = CharBuffer.class;
      ServiceLoader<CharBuffer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      
      String string0 = StringUtils.truncate("<G52%>=\"rhh|&GkAD2p", 728, 32);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((Object[]) null, "<G52%>=\"rhh|&GkAD2p");
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "<G52%>=\"rhh|&GkAD2p";
      charSequenceArray0[1] = (CharSequence) "<G52%>=\"rhh|&GkAD2p";
      charSequenceArray0[2] = (CharSequence) "<G52%>=\"rhh|&GkAD2p";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      String string2 = StringUtils.appendIfMissing("", (CharSequence) null, charSequenceArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.stripToEmpty("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      int int0 = StringUtils.ordinalIndexOf("", (CharSequence) null, (-1071));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("@oXvl<g+");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      
      String string0 = "";
      char[] charArray0 = new char[8];
      String string1 = "";
      String string2 = StringUtils.repeat("", 9);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllLowerCase("@oXvl<g+");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'B', 25, 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[3] = (-1118);
      intArray0[4] = 78;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 78;
      String string0 = StringUtils.repeat("", 78);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'B', 7, 25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-3948L);
      longArray0[1] = 1541L;
      longArray0[2] = 1L;
      String string1 = StringUtils.strip("\n");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("\n");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      int int0 = 50;
      String string3 = StringUtils.substringBetween("\n", "\n", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.getDigits("Ujq`/:yhY%ZBW");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      
      CharSequence[] charSequenceArray1 = new CharSequence[2];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      String string5 = "108A0A0A-1118A64A-2212";
      String string6 = StringUtils.center("108A0A0A-1118A64A-2212", 2328);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      
      charSequenceArray1[0] = (CharSequence) string6;
      charSequenceArray1[1] = (CharSequence) "}F";
      String string7 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertNotNull(string7);
      assertEquals("", string7);
      assertEquals(2, charSequenceArray1.length);
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      String string8 = StringUtils.removePattern("ib#P(al`Z^s4", "");
      assertNotNull(string8);
      assertEquals("ib#P(al`Z^s4", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      
      Locale locale1 = Locale.JAPANESE;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      
      String string9 = locale0.getDisplayCountry(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string9);
      assertEquals("", string9);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      
      String string10 = StringUtils.lowerCase("", locale0);
      assertNotSame(locale0, locale1);
      assertNotNull(string10);
      assertEquals("", string10);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string10.equals((Object)string6));
      assertTrue(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string3));
      assertTrue(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "u", 7, 2328);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chop("");
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = '';
      charArray0[2] = 'c';
      charArray0[3] = 'e';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'.', '', 'c', 'e'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'N';
      floatArray0[1] = (float) 'S';
      floatArray0[2] = (float) 'N';
      floatArray0[3] = (float) 'N';
      floatArray0[4] = (float) 'N';
      floatArray0[5] = (float) 'N';
      floatArray0[6] = (float) 'S';
      floatArray0[7] = (float) 'N';
      floatArray0[8] = (float) 'N';
      String string0 = StringUtils.join(floatArray0, 'N');
      assertArrayEquals(new float[] {78.0F, 83.0F, 78.0F, 78.0F, 78.0F, 78.0F, 83.0F, 78.0F, 78.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals("78.0N83.0N78.0N78.0N78.0N78.0N83.0N78.0N78.0", string0);
      assertEquals(9, floatArray0.length);
      
      boolean boolean0 = StringUtils.isBlank("78.0N83.0N78.0N78.0N78.0N78.0N83.0N78.0N78.0");
      assertFalse(boolean0);
      
      String string1 = StringUtils.center("\r", (-22));
      assertNotNull(string1);
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.left("maxWith cannot be negative", 1424);
      assertNotNull(string2);
      assertEquals("maxWith cannot be negative", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "\r", (CharSequence) "maxWith cannot be negative");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "78.0N83.0N78.0N78.0N78.0N78.0N83.0N78.0N78.0";
      charSequenceArray0[1] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[2] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[3] = (CharSequence) "\r";
      charSequenceArray0[4] = (CharSequence) "maxWith cannot be negative";
      boolean boolean2 = StringUtils.containsAny((CharSequence) "maxWith cannot be negative", charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "78.0N83.0N78.0N78.0N78.0N78.0N83.0N78.0N78.0", charSequenceArray0);
      assertTrue(boolean3);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("\r", charSequenceArray0[1], charSequenceArray0);
      assertNotNull(string3);
      assertEquals("\r", string3);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.rightPad("maxWith cannot be negative", (-1127), "\r");
      assertNotNull(string4);
      assertEquals("maxWith cannot be negative", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.chomp("\r");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string6 = StringUtils.getIfBlank("", supplier0);
      assertNull(string6);
      
      String string7 = StringUtils.replaceIgnoreCase("org.apache.commons.lang3.StringUtils", "maxWith cannot be negative", "maxWith cannot be negative");
      assertNotNull(string7);
      assertEquals("org.apache.commons.lang3.StringUtils", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      
      int int0 = StringUtils.lastOrdinalIndexOf("maxWith cannot be negative", "org.apache.commons.lang3.StringUtils", (-22));
      assertEquals((-1), int0);
      
      String string8 = StringUtils.chop("");
      assertNotNull(string8);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.remove("kjNrpj%!JFMMV4r`&", '*');
      assertNotNull(string1);
      assertEquals("kjNrpj%!JFMMV4r`&", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripAccents("\n");
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceOnceIgnoreCase("kjNrpj%!JFMMV4r`&", "KF", (String) null);
      assertNotNull(string3);
      assertEquals("kjNrpj%!JFMMV4r`&", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.removePattern("kjNrpj%!JFMMV4r`&", "\n");
      assertNotNull(string4);
      assertEquals("kjNrpj%!JFMMV4r`&", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      Locale locale1 = Locale.ITALIAN;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      
      String string5 = locale1.getDisplayScript(locale0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.lowerCase("j-@@>41j<i(fyuug!", locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string6);
      assertEquals("j-@@>41j<i(fyuug!", string6);
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      String[] stringArray0 = new String[0];
      String string7 = StringUtils.replaceEach("xS\"v*=a8Fr-\"2`+\"i[Y", stringArray0, stringArray0);
      assertNotNull(string7);
      assertEquals("xS\"v*=a8Fr-\"2`+\"i[Y", string7);
      assertEquals(0, stringArray0.length);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      
      String string8 = StringUtils.difference("TvAqw<xP", (String) null);
      assertNotNull(string8);
      assertEquals("TvAqw<xP", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      
      int int0 = StringUtils.indexOf((CharSequence) "kjNrpj%!JFMMV4r`&", (CharSequence) "\n");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      String string0 = StringUtils.difference(" is not in the range '0' - '9'", (String) null);
      assertNotNull(string0);
      assertEquals(" is not in the range '0' - '9'", string0);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 108;
      intArray0[1] = 0;
      intArray0[2] = (-1324);
      intArray0[3] = (-1118);
      String string0 = StringUtils.repeat((String) null, (String) null, (-1118));
      assertNull(string0);
      
      String string1 = StringUtils.abbreviate((String) null, (String) null, 315, (-1324));
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      String string0 = StringUtils.remove("M$x7_ ao*T&5nR,!C ", '1');
      assertNotNull(string0);
      assertEquals("M$x7_ ao*T&5nR,!C ", string0);
      
      String string1 = StringUtils.overlay("", "M$x7_ ao*T&5nR,!C ", 1, (-2371));
      assertNotNull(string1);
      assertEquals("M$x7_ ao*T&5nR,!C ", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat("M$x7_ ao*T&5nR,!C ", "", 96);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      String string0 = StringUtils.trim("Cannot clone Cloneable type ");
      assertNotNull(string0);
      assertEquals("Cannot clone Cloneable type", string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("Cannot clone Cloneable type "));
      assertNotNull(treeSet0);
      
      treeSet0.clear();
      assertFalse(treeSet0.contains("Cannot clone Cloneable type "));
      
      boolean boolean0 = treeSet0.add("M$x7_ ao*T&5nR,!C ");
      assertTrue(treeSet0.contains("M$x7_ ao*T&5nR,!C "));
      assertFalse(treeSet0.contains("Cannot clone Cloneable type "));
      assertTrue(boolean0);
      
      boolean boolean1 = treeSet0.add("Cannot clone Cloneable type");
      assertTrue(treeSet0.contains("M$x7_ ao*T&5nR,!C "));
      assertFalse(treeSet0.contains("Cannot clone Cloneable type "));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.join((Iterable<?>) treeSet0, '1');
      assertTrue(treeSet0.contains("M$x7_ ao*T&5nR,!C "));
      assertFalse(treeSet0.contains("Cannot clone Cloneable type "));
      assertNotNull(string1);
      assertEquals("Cannot clone Cloneable type1M$x7_ ao*T&5nR,!C ", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("Cannot clone Cloneable type", (CharSequence[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.repeat("Cannot clone Cloneable type ", (String) null, 448);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.replaceEachRepeatedly("", (String[]) null, (String[]) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.chomp("!!", "");
      assertNotNull(string2);
      assertEquals("!!", string2);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.chop("Y>R`+t");
      assertNotNull(string1);
      assertEquals("Y>R`+", string1);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'A', 108, 5);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("<E>q*ZcwNu9yq[UIae", "Minimum abbreviation width with offset is %d", "G;.*`;^BG,");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.strip((String) null, (String) null);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "", 235);
      assertNull(stringArray0);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase((String) null, "", (CharSequence[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.substringBetween((String) null, (String) null, "maxWith cannot be negative");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.defaultString("comparator", "h annot be negative");
      assertNotNull(string4);
      assertEquals("comparator", string4);
      
      String string5 = StringUtils.overlay((String) null, "B3erwgW#I", 235, 235);
      assertNull(string5);
      
      String string6 = StringUtils.rotate("comparator", 1820);
      assertNotNull(string6);
      assertEquals("comparator", string6);
      assertTrue(string6.equals((Object)string4));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("comparator", "JmUyw...Vz#u");
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      
      String string7 = StringUtils.join((Object[]) null, '@', 45, 321);
      assertNull(string7);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(235));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string8 = StringUtils.join((List<?>) linkedList0, "wv", 321, 1);
      assertFalse(linkedList0.contains(235));
      assertNotNull(string8);
      assertEquals("", string8);
      assertEquals(0, linkedList0.size());
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.strip((String) null, "108A0A0A-1118A64A-2212");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("p{InCombiningDiacriticalMarks}+", (String) null, "108A0A0A-1118A64A-2212");
      assertNull(stringArray0);
      
      String string2 = StringUtils.removeFirst("", (String) null);
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, 778);
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceOnce("`$Q6b\"eY=J", (String) null, (String) null);
      assertNotNull(string3);
      assertEquals("`$Q6b\"eY=J", string3);
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isBlank("`$Q6b\"eY=J");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.center("", 0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.truncate("", 0, 1615);
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      
      String string6 = StringUtils.reverse((String) null);
      assertNull(string6);
      
      boolean boolean2 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      charArray0[2] = '!';
      charArray0[3] = 'x';
      charArray0[4] = '+';
      charArray0[5] = '!';
      charArray0[6] = 'M';
      charArray0[7] = 'x';
      String string7 = StringUtils.center("_", 778, "");
      assertNotNull(string7);
      assertEqualsstring7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'n', (-2437), 385);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2437
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.remove("kjNrpj%!JFMMV4r`&", '*');
      assertNotNull(string1);
      assertEquals("kjNrpj%!JFMMV4r`&", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripAccents("\n");
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceOnceIgnoreCase("kjNrpj%!JFMMV4r`&", "KF", (String) null);
      assertNotNull(string3);
      assertEquals("kjNrpj%!JFMMV4r`&", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.removePattern("kjNrpj%!JFMMV4r`&", "\n");
      assertNotNull(string4);
      assertEquals("kjNrpj%!JFMMV4r`&", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      
      Locale locale1 = Locale.ITALIAN;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      
      String string5 = locale1.getDisplayScript(locale0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.lowerCase("j-@@>41j<i(fyuug!", locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string6);
      assertEquals("j-@@>41j<i(fyuug!", string6);
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, '`', 832, 1516);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 832
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = StringUtils.join((List<?>) arrayList0, 'E', (-206), (-206));
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string1 = StringUtils.chop("V}&<PLmQB;c5O;");
      assertNotNull(string1);
      assertEquals("V}&<PLmQB;c5O", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chop((String) null);
      assertNull(string2);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "V}&<PLmQB;c5O;", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "V}&<PLmQB;c5O;");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.leftPad("Ecc%x~O#D", 48, "clone");
      assertNotNull(string3);
      assertEquals("cloneclonecloneclonecloneclonecloneclonEcc%x~O#D", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      String string0 = StringUtils.upperCase("s37T5zG:y\"Z/dRij4.`$Q6b\"eY=J");
      assertNotNull(string0);
      assertEquals("S37T5ZG:Y\"Z/DRIJ4.`$Q6B\"EY=J", string0);
      
      String string1 = StringUtils.overlay("v1(PnkSt*", "/@;de{bA30{z", 1813, 1813);
      assertNotNull(string1);
      assertEquals("v1(PnkSt*/@;de{bA30{z", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeStart("v1(PnkSt*", "2b'uTv<FtxJA");
      assertNotNull(string2);
      assertEquals("v1(PnkSt*", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOf((CharSequence) "s37T5zG:y\"Z/dRij4.`$Q6b\"eY=J", (CharSequence) "v1(PnkSt*/@;de{bA30{z", 30);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringBefore("maxWith annot be negative", "s37T5zG:y\"Z/dRij4.`$Q6b\"eY=J");
      assertNotNull(string3);
      assertEquals("maxWith annot be negative", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlphanumeric("v1(PnkSt*/@;de{bA30{z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '^';
      String string0 = StringUtils.capitalize("h annot be negative");
      assertNotNull(string0);
      assertEquals("H annot be negative", string0);
      
      String string1 = StringUtils.rightPad("H annot be negative", 29, '^');
      assertNotNull(string1);
      assertEquals("H annot be negative^^^^^^^^^^", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("+a>hW5&wB08V5b&", " iJe{GYjJ|Kx=S", "h annot be negative");
      assertNull(stringArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)1;
      String string2 = StringUtils.join(byteArray0, '^');
      assertArrayEquals(new byte[] {(byte) (-9), (byte) (-79), (byte)2, (byte)25, (byte) (-66), (byte) (-96), (byte)1}, byteArray0);
      assertNotNull(string2);
      assertEquals("-9^-79^2^25^-66^-96^1", string2);
      assertEquals(7, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "-{RV_kn7cf", (CharSequence) "-{RV_kn7cf");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "-{RV_kn7cf", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean1);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.compare("-{RV_kn7cf", "\"u_g`");
      assertEquals(11, int0);
      
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", " is not in the range '0' - '9'", "Ik");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string1 = StringUtils.replace("Ik", "", "Ik");
      assertNotNull(string1);
      assertEquals("Ik", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean3 = StringUtils.isAlphanumeric(" ");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String string2 = StringUtils.substringBetween("!s", "TN!8IcQZ*iN", "null/empty items");
      assertNull(string2);
      
      boolean boolean4 = StringUtils.isMixedCase("!s");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      
      String string3 = StringUtils.strip("org.apache.commons.lang3.CharSequenceUtils");
      assertNotNull(string3);
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.wrapIfMissing("", 'T');
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.valueOf((char[]) null);
      assertNull(string5);
      
      boolean boolean5 = StringUtils.containsAny((CharSequence) " ", (char[]) null);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Ik";
      String string6 = StringUtils.mid("", (-1), 5);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "null/empty items";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "!s";
      charSequenceArray0[6] = (CharSequence) "Ik";
      charSequenceArray0[7] = (CharSequence) "";
      boolean boolean6 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertTrue(boolean6);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("{b>;w&ymP^T#/G|(~]R", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.removeStart("offset cannot be negative", "{b>;w&ymP^T#/G|(~]R");
      assertNotNull(string0);
      assertEquals("offset cannot be negative", string0);
      
      int int0 = StringUtils.ordinalIndexOf("{b>;w&ymP^T#/G|(~]R", "{b>;w&ymP^T#/G|(~]R", 65536);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "...", (CharSequence) "...");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.trimToNull("]^g`?OZ|<hS78");
      assertNotNull(string0);
      assertEquals("]^g`?OZ|<hS78", string0);
      
      String string1 = StringUtils.trim("]^g`?OZ|<hS78");
      assertNotNull(string1);
      assertEquals("]^g`?OZ|<hS78", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.ordinalIndexOf("]^g`?OZ|<hS78", "]^g`?OZ|<hS78", (-395));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.chomp("]^g`?OZ|<hS78", "]^g`?OZ|<hS78");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.indexOf((CharSequence) "]^g`?OZ|<hS78", 2187);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.center("", 2187, "]^g`?OZ|<hS78");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.deleteWhitespace("");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.join((Object[]) stringArray0, ';');
      assertNotNull(string5);
      assertEquals(";;;", string5);
      assertEquals(4, stringArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.remove("`'l5bP$^&b", "1!3d0b0y3Dm[M{U&*o");
      assertNotNull(string6);
      assertEquals("`'l5bP$^&b", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      String string0 = StringUtils.removeEnd("s*3wEOb<^", "s*3wEOb<^");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "s*3wEOb<^", (CharSequence) "s*3wEOb<^", 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "v";
      charSequenceArray0[1] = (CharSequence) "v";
      charSequenceArray0[2] = (CharSequence) "v";
      charSequenceArray0[3] = (CharSequence) "v";
      charSequenceArray0[4] = (CharSequence) "v";
      String string0 = StringUtils.substringBefore("Threshold must not be negative", "$]~{)rS|vBIU(l/,k><");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      charSequenceArray0[5] = (CharSequence) "Threshold must not be negative";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "v", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string1 = StringUtils.chomp("Threshold must not be negative");
      assertNotNull(string1);
      assertEquals("Threshold must not be negative", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("Threshold must not be negative", 10, 'm');
      assertNotNull(string2);
      assertEquals("Threshold must not be negative", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "Threshold must not be negative");
      assertNotNull(string3);
      assertEquals("vThreshold must not be negativevThreshold must not be negativevThreshold must not be negativevThreshold must not be negativevThreshold must not be negativeThreshold must not be negative", string3);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("Threshold must not be negative", "v", charSequenceArray0);
      assertNotNull(string4);
      assertEquals("Threshold must not be negative", string4);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = '@';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Threshold must not be negative", charArray0);
      assertArrayEquals(new char[] {'m', 'm', '@', 'm', 'm'}, charArray0);
      assertTrue(boolean1);
      assertEquals(5, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.substring((String) null, 39);
      assertNull(string5);
      
      String string6 = StringUtils.substringBefore("~G( 38P:uuFvnt-A(5r", "v");
      assertNotNull(string6);
      assertEquals("~G( 38P:uuF", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      
      boolean boolean2 = StringUtils.containsWhitespace("Threshold must not be negative");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isMixedCase(charSequenceArray0[1]);
      assertFalse(boolean3);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.strip((String) null, "108A0A0A-1118A64A-2212");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "", 235);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.LF;
      assertNotNull(string2);
      assertEquals("\n", string2);
      
      String string3 = StringUtils.substringBetween((String) null, (String) null, "maxWith cannot be negative");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isMixedCase("\n");
      assertFalse(boolean0);
      
      String string4 = StringUtils.defaultString("comparator", "h annot be negative");
      assertNotNull(string4);
      assertEquals("comparator", string4);
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.overlay((String) null, "B3erwgW#I", 235, 235);
      assertNull(string5);
      
      boolean boolean1 = StringUtils.endsWithAny("comparator", stringArray0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.repeat("\n", 7);
      assertNotNull(string1);
      assertEquals("\n\n\n\n\n\n\n", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceIgnoreCase("2yT", (String) null, "\n");
      assertNotNull(string2);
      assertEquals("2yT", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumericSpace("\n");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '7';
      charArray0[5] = '7';
      int int0 = StringUtils.indexOfAny((CharSequence) "2yT", charArray0);
      assertArrayEquals(new char[] {'7', '7', '7', '7', '7', '7'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(6, charArray0.length);
      
      String string3 = StringUtils.repeat('7', 7);
      assertNotNull(string3);
      assertEquals("7777777", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "7777777", (CharSequence) "2yT");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.replacePattern((String) null, "2yT", (String) null);
      assertNull(string4);
      
      boolean boolean2 = StringUtils.isAllLowerCase("\n");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string5 = StringUtils.join((byte[]) null, '7');
      assertNull(string5);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      String string6 = StringUtils.join((List<?>) stack0, '', (-1), (int) (byte) (-1));
      assertNotNull(string6);
      assertEquals("", string6);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[4] = (-1118);
      intArray0[4] = 78;
      String string0 = StringUtils.repeat("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 78;
      doubleArray0[4] = (double) ',';
      doubleArray0[5] = (double) 78;
      String string1 = StringUtils.join(doubleArray0, '9');
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 78.0, 44.0, 78.0}, doubleArray0, 0.01);
      assertNotNull(string1);
      assertEquals("0.091.091.0978.0944.0978.0", string1);
      assertEquals(6, doubleArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("R%2qv\"IszF$", 0);
      assertNotNull(string2);
      assertEquals("R%2qv\"IszF$", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      String string0 = "-]A9b+[OL";
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("U*tr.WQ=!)s0NLy", "-]A9b+[OL", "-]A9b+[OL");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 8
         // -]A9b+[OL
         //         ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("null/empty items");
      assertNotNull(string0);
      assertEquals("null/empty items", string0);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.normalizeSpace("`$Q6b\"eY=J");
      assertNotNull(string1);
      assertEquals("`$Q6b\"eY=J", string1);
      
      String string2 = StringUtils.leftPad((String) null, 321);
      assertNull(string2);
      
      String string3 = StringUtils.center("]~,ih6Ll", 321);
      assertNotNull(string3);
      assertEquals("                                                                                                                                                            ]~,ih6Ll                                                                                                                                                             ", string3);
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("]~,ih6Ll");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      String string0 = StringUtils.swapCase("2");
      assertNotNull(string0);
      assertEquals("2", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "2", (CharSequence) "2");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "2";
      charSequenceArray0[1] = (CharSequence) "2";
      String string1 = StringUtils.substringBeforeLast("S+m`jMI:r", "iWz9e?$Cu");
      assertNotNull(string1);
      assertEquals("S+m`jMI:r", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) "S+m`jMI:r");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertFalse(boolean2);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "S+m`jMI:r", charSequenceArray0);
      assertFalse(boolean3);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("H5eyaHr", charSequenceArray0[0], charSequenceArray0);
      assertNotNull(string2);
      assertEquals("2H5eyaHr", string2);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.rightPad("", 1, (String) null);
      assertNotNull(string3);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.chomp(" ");
      assertNotNull(string4);
      assertEquals(" ", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfBlank("hZVh\" >E0(", supplier0);
      assertNotNull(string5);
      assertEquals("hZVh\" >E0(", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      String string0 = StringUtils.swapCase("2");
      assertNotNull(string0);
      assertEquals("2", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "2", (CharSequence) "2");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "2";
      String string1 = StringUtils.substringBeforeLast("S+m`jMI:r", "iWz9e?$Cu");
      assertNotNull(string1);
      assertEquals("S+m`jMI:r", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) "S+m`jMI:r");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertFalse(boolean2);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "S+m`jMI:r", charSequenceArray0);
      assertFalse(boolean3);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("H5eyaHr", charSequenceArray0[0], charSequenceArray0);
      assertNotNull(string2);
      assertEquals("2H5eyaHr", string2);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.rightPad("", 1, (String) null);
      assertNotNull(string3);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.chomp(" ");
      assertNotNull(string4);
      assertEquals(" ", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = StringUtils.getDigits("S+m`jMI:r");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "2", (CharSequence) "2H5eyaHr", 2130);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "H5eyaHr");
      assertEquals((-1), int1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-3948L);
      longArray0[1] = 1562L;
      longArray0[1] = (-3948L);
      String string1 = StringUtils.strip("\n");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("\n");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBetween("\n", "\n", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      String string0 = StringUtils.upperCase("s37T5zG:y\"Z/dRij4.`$Q6b\"eY=J");
      assertNotNull(string0);
      assertEquals("S37T5ZG:Y\"Z/DRIJ4.`$Q6B\"EY=J", string0);
      
      String string1 = StringUtils.capitalize("h annot be negative");
      assertNotNull(string1);
      assertEquals("H annot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad(" iJe{GYjJ|Kx=S", 1782, 'g');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.substringsBetween("2b'uTv<FtxJA", "2b'uTv<FtxJA", ";.i*");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      String string0 = StringUtils.upperCase("s37T5zG:y\"Z/dRij4.`$Q6b\"eY=J");
      assertNotNull(string0);
      assertEquals("S37T5ZG:Y\"Z/DRIJ4.`$Q6B\"EY=J", string0);
      
      String string1 = StringUtils.capitalize("s37T5zG:y\"Z/dRij4.`$Q6b\"eY=J");
      assertNotNull(string1);
      assertEquals("S37T5zG:y\"Z/dRij4.`$Q6b\"eY=J", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad(" iJe{GYjJ|Kx=S", 1782, 'g');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.substringsBetween("2b'uTv<FtxJA", "2b'uTv<FtxJA", ";.i*");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      String string0 = StringUtils.rightPad("5NLdgFU%?vZ8n/uY>6L", 5137, 'J');
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("offset cannot be negative", "|iN_.4'WKb", "LL");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("xOt');)3Ib");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("org.apache.commons.lang3.exception.CloneFailedException", "xOt');)3Ib", false);
      assertEquals((-9), int0);
      
      String string0 = StringUtils.unwrap("xOt');)3Ib", 'd');
      assertNotNull(string0);
      assertEquals("xOt');)3Ib", string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("org.apache.commons.lang3.StringUtils", "xOt');)3Ib");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.leftPad("org.apache.commons.lang3.exception.CloneFailedException", 56);
      assertNotNull(string1);
      assertEquals(" org.apache.commons.lang3.exception.CloneFailedException", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "xOt');)3Ib", (CharSequence) " org.apache.commons.lang3.exception.CloneFailedException", 2032);
      assertEquals(54, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      String string0 = StringUtils.strip("'$", "JNa-k,*A'+%\"ml>");
      assertNotNull(string0);
      assertEquals("$", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("'$", "$");
      assertEquals(0.0, double0, 0.01);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "$";
      String string1 = StringUtils.appendIfMissingIgnoreCase("JNa-k,*A'+%\"ml>", "$", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("JNa-k,*A'+%\"ml>$", string1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("JNa-k,*A'+%\"ml>", 10, '4');
      assertNotNull(string2);
      assertEquals("JNa-k,*A'+%\"ml>", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.defaultString("JNa-k,*A'+%\"ml>");
      assertNotNull(string3);
      assertEquals("JNa-k,*A'+%\"ml>", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string1 = StringUtils.EMPTY;
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("2yT", (-1));
      assertNotNull(string2);
      assertEquals("2yT", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.defaultString("\n", "comparator");
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAllUpperCase("\n");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase((String) null, "\n", "o$|+^_'");
      assertNull(string2);
      
      String string3 = StringUtils.center("o$|+^_'", 52);
      assertNotNull(string3);
      assertEquals("                      o$|+^_'                       ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      Locale locale0 = new Locale("FG.J(E&m.s8HC4BO_]b");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fg.j(e&m.s8hc4bo_]b", locale0.toString());
      assertEquals("fg.j(e&m.s8hc4bo_]b", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "                      o$|+^_'                       ", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("\n", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.toRootUpperCase("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-1174));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.strip((String) null, "108A0A0A-1118A64A-2212");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "", 235);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("108A0A0A-1118A64A-2212", "", stringArray0);
      assertNotNull(string2);
      assertEquals("108A0A0A-1118A64A-2212", string2);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, 778);
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceOnce("`$Q6b\"eY=J", (String) null, (String) null);
      assertNotNull(string3);
      assertEquals("`$Q6b\"eY=J", string3);
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isBlank("`$Q6b\"eY=J");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.center("", 0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.truncate("", 0, 1615);
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.reverse((String) null);
      assertNull(string6);
      
      boolean boolean2 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean2);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[2] = '!';
      charArray0[3] = 'x';
      charArray0[4] = '+';
      charArray0[5] = '!';
      charArray0[6] = 'M';
      charArray0[7] = 'x';
      String string7 = StringUtils.center("_", 778, "");
      assertNotNull(string7);
      assertEqualsstring7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      
      String string8 = StringUtils.wrapIfMissing("", 'k');
      assertNotNull(string8);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string4));
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "CbsBWNS&Ns($");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      String string0 = StringUtils.truncate("<G52%>=\"rhh|&GkAD2p", 728, 728);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((Object[]) null, "<G52%>=\"rhh|&GkAD2p");
      assertNull(string1);
      
      String string2 = StringUtils.left("Locale must not be null", 2);
      assertNotNull(string2);
      assertEquals("Lo", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.toRootUpperCase("-8");
      assertNotNull(string3);
      assertEquals("-8", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.center("_", 20, "A!y");
      assertNotNull(string4);
      assertEquals("A!yA!yA!y_A!yA!yA!yA", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      byte[] byteArray0 = StringUtils.getBytes("ALnZ&~tJ~cCS#F", (String) null);
      assertNotNull(byteArray0);
      assertEquals(14, byteArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "A!y";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "ALnZ&~tJ~cCS#F";
      charSequenceArray0[3] = (CharSequence) "_";
      charSequenceArray0[4] = (CharSequence) "Locale must not be null";
      charSequenceArray0[5] = (CharSequence) "<G52%>=\"rhh|&GkAD2p";
      boolean boolean0 = StringUtils.startsWithAny("A!yA!yA!y_A!yA!yA!yA", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string5 = StringUtils.remove("e5PcBA<]-=KS+q9", "PJ&cTlR6~4a");
      assertNotNull(string5);
      assertEquals("e5PcBA<]-=KS+q9", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      char[] charArray0 = new char[6];
      charArray0[0] = '&';
      charArray0[1] = ';';
      charArray0[2] = '%';
      charArray0[3] = '5';
      charArray0[4] = '@';
      charArray0[5] = '!';
      int int0 = StringUtils.indexOfAny((CharSequence) "<G52%>=\"rhh|&GkAD2p", charArray0);
      assertArrayEquals(new char[] {'&', ';', '%', '5', '@', '!'}, charArray0);
      assertEquals(2, int0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      String string0 = StringUtils.left(" vs ", 51);
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ';';
      charArray0[1] = '^';
      charArray0[2] = 'L';
      String[] stringArray0 = new String[5];
      stringArray0[0] = " vs ";
      String string1 = StringUtils.overlay(" vs ", " vs ", 51, 1);
      assertNotNull(string1);
      assertEquals("  vs ", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeStart(" vs ", "oT1;lF+3te");
      assertNotNull(string2);
      assertEquals(" vs ", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) " vs ", (CharSequence) " vs ", (-519));
      assertEquals(0, int0);
      
      String string3 = StringUtils.substringBefore(" vs ", " vs ");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[3] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[4] = (CharSequence) "?BG{?lA\"";
      String string0 = StringUtils.prependIfMissingIgnoreCase("?BG{?lA\"", "Arguments cannot both be null", charSequenceArray0);
      assertNotNull(string0);
      assertEquals("?BG{?lA\"", string0);
      assertEquals(5, charSequenceArray0.length);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("Arguments cannot both be null", "?BG{?lA\"", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("Arguments cannot both be null", string1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.replaceEach("+rQ8Z", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals("+rQ8Z", string2);
      assertEquals(0, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.split("R(`(aEFcI");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.center("SsB;ISQh[-jq[VP*", 810);
      assertNotNull(string3);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                             SsB;ISQh[-jq[VP*                                                                                                                                                                                                                                                                                                                                                                                                             ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, '7');
      assertFalse(linkedList0.contains('7'));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string1 = StringUtils.wrap("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int1);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      String string0 = StringUtils.right(":{dx d~e=", (-1404));
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) ":{dx d~e=";
      String string1 = StringUtils.unwrap(":{dx d~e=", ":{dx d~e=");
      assertNotNull(string1);
      assertEquals(":{dx d~e=", string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) ":{dx d~e=";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.rightPad(":{dx d~e=", 0);
      assertNotNull(string2);
      assertEquals(":{dx d~e=", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      int int0 = StringUtils.getLevenshteinDistance(charSequenceArray0[1], (CharSequence) "", 323);
      assertEquals(9, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string3 = StringUtils.strip("", "Iz/ p YW");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      CharSequence[] charSequenceArray1 = new CharSequence[1];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "Iz/ p YW";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray1.length);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.leftPad("", 1332);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.SPACE;
      assertNotNull(string5);
      assertEquals(" ", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.stripStart("GorV(&", "=");
      assertNotNull(string6);
      assertEquals("GorV(&", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "GorV(&", (CharSequence) "=", 1332);
      assertEquals(6, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1812.977651236);
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(4, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) stringArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      String string0 = StringUtils.unwrap("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[1] = "";
      String string1 = StringUtils.chop(stringArray0[0]);
      assertNull(string1);
      assertEquals(9, stringArray0.length);
      
      String string2 = StringUtils.stripStart("", "YN+01H}dt");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[4] = (-1118);
      intArray0[4] = 78;
      String string0 = StringUtils.repeat("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat(')', 78);
      assertNotNull(string1);
      assertEquals("))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 78;
      String string2 = StringUtils.replacePattern("))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))", "", "");
      assertNotNull(string2);
      assertEquals("))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-1);
      String string3 = StringUtils.join(byteArray0, ',');
      assertArrayEquals(new byte[] {(byte)50, (byte) (-1)}, byteArray0);
      assertNotNull(string3);
      assertEquals("50,-1", string3);
      assertEquals(2, byteArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      String string4 = StringUtils.join((List<?>) stack0, '4', 3, 0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1856.20852332191;
      doubleArray0[1] = 0.7;
      doubleArray0[2] = (double) 'j';
      doubleArray0[3] = (double) 'j';
      doubleArray0[4] = (-1123.77485);
      String string1 = StringUtils.join(doubleArray0, 'j');
      assertArrayEquals(new double[] {1856.20852332191, 0.7, 106.0, 106.0, (-1123.77485)}, doubleArray0, 0.01);
      assertNotNull(string1);
      assertEquals("1856.20852332191j0.7j106.0j106.0j-1123.77485", string1);
      assertEquals(5, doubleArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.lowerCase("\n");
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("1856.20852332191j0.7j106.0j106.0j-1123.77485", "1856.20852332191j0.7j106.0j106.0j-1123.77485");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.repeat("\n", 7);
      assertNotNull(string1);
      assertEquals("\n\n\n\n\n\n\n", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceIgnoreCase("2yT", (String) null, "\n");
      assertNotNull(string2);
      assertEquals("2yT", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isNumericSpace("\n");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '7';
      charArray0[5] = '7';
      int int0 = StringUtils.indexOfAny((CharSequence) "2yT", charArray0);
      assertArrayEquals(new char[] {'7', '7', '7', '7', '7', '7'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(6, charArray0.length);
      
      boolean boolean1 = StringUtils.isAlpha("2yT");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 7;
      longArray0[1] = (long) '7';
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) '7';
      longArray0[4] = (long) '7';
      longArray0[5] = (long) '7';
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) '7';
      String string3 = StringUtils.join(longArray0, '7');
      assertArrayEquals(new long[] {7L, 55L, (-1L), 55L, 55L, 55L, (-1L), 55L}, longArray0);
      assertNotNull(string3);
      assertEquals("77557-17557557557-1755", string3);
      assertEquals(8, longArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean2 = StringUtils.isAllLowerCase("77557-17557557557-1755");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.replace("2yT", "2                                                                                                                                                                ", (String) null);
      assertNotNull(string4);
      assertEquals("2yT", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean3 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("\n\n\n\n\n\n\n");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean4 = StringUtils.startsWith("2yT", "2yT");
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      
      String string5 = StringUtils.joinWith("2                                                                                                                                                                ", stringArray0);
      assertNotNull(string5);
      assertEquals("\n\n\n\n\n\n\n", string5);
      assertEquals(1, stringArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      String string0 = StringUtils.center("F<?xB3erwgW#I", 2626);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("H5eyaHr", "S+m`jMI:r");
      assertNotNull(string1);
      assertEquals("H5eyaHr", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBeforeLast("H5eyaHr", "");
      assertNotNull(string2);
      assertEquals("H5eyaHr", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "H5eyaHr", (CharSequence) "H5eyaHr");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("H5eyaHr");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertFalse(stack0.contains(2626));
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      String string3 = StringUtils.join((List<?>) stack0, "H5eyaHr", 3, 3);
      assertFalse(stack0.contains(3));
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[17];
      charSequenceArray0[1] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[3] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[4] = (CharSequence) "?BG{?lA\"";
      String string0 = StringUtils.repeat("maxWit cannot be negative", 56);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("[o]h>gm\"h|lv  }vup", "?BG{?lA\"", "2yT");
      assertNotNull(string1);
      assertEquals("[o]h>gm\"h|lv  }vup", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumericSpace(charSequenceArray0[3]);
      assertFalse(boolean0);
      assertEquals(17, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "?BG{?lA\"", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlpha("maxWit cannot be negative");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 56;
      longArray0[1] = (long) 56;
      String string2 = StringUtils.join(longArray0, 't');
      assertArrayEquals(new long[] {56L, 56L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(string2);
      assertEquals("56t56t0t0t0t0t0t0", string2);
      assertEquals(8, longArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isAllLowerCase("Arguments cannot both be null");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string3 = StringUtils.replace("Threshold must not be negative", "Threshold must not be negative", "56t56t0t0t0t0t0t0");
      assertNotNull(string3);
      assertEquals("56t56t0t0t0t0t0t0", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      boolean boolean3 = StringUtils.isAlphanumeric("56t56t0t0t0t0t0t0");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("[o]h>gm\"h|lv  }vup");
      assertNotNull(stringArray0);
      assertEquals(13, stringArray0.length);
      
      boolean boolean4 = StringUtils.startsWith("[o]h>gm\"h|lv  }vup", (CharSequence) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "Threshold must not be negative", (CharSequence) "Threshold must not be negative");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 108;
      intArray0[1] = 0;
      intArray0[2] = (-1324);
      intArray0[3] = (-1118);
      intArray0[4] = 64;
      intArray0[5] = (-2212);
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "s37T5zG:y\"Z/dRij4.", 64);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.deleteWhitespace("s37T5zG:y\"Z/dRij4.");
      assertNotNull(string1);
      assertEquals("s37T5zG:y\"Z/dRij4.", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      String string3 = StringUtils.trim("s37T5zG:y\"Z/dRij4.");
      assertNotNull(string3);
      assertEquals("s37T5zG:y\"Z/dRij4.", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      int int0 = StringUtils.ordinalIndexOf("s37T5zG:y\"Z/dRij4.", "s37T5zG:y\"Z/dRij4.", 108);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.getDigits((String) null);
      assertNull(string4);
      
      int int1 = StringUtils.indexOf((CharSequence) "s37T5zG:y\"Z/dRij4.", (-2212));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.center("s37T5zG:y\"Z/dRij4.", 0, "");
      assertNotNull(string5);
      assertEquals("s37T5zG:y\"Z/dRij4.", string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.deleteWhitespace("'");
      assertNotNull(string6);
      assertEquals("'", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.rightPad("", 3291, "'");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      
      String string8 = StringUtils.join((Object[]) null, 'A');
      assertNull(string8);
      
      String string9 = StringUtils.chop("H!1Hm/@MX'");
      assertNotNull(string9);
      assertEquals("H!1Hm/@MX", string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "H!1Hm/@MX", (CharSequence) "s37T5zG:y\"Z/dRij4.");
      assertEquals(17, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean1 = StringUtils.isNotBlank("H!1Hm/@MX");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 17;
      longArray0[2] = (-2125L);
      String string10 = StringUtils.join(longArray0, 'A', (-539), (-2314));
      assertArrayEquals(new long[] {(-1L), 17L, (-2125L)}, longArray0);
      assertNotNull(string10);
      assertEquals("", string10);
      assertEquals(3, longArray0.length);
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "Q V~v53%z@0|ZM-Q1R");
      assertTrue(boolean0);
      
      String string0 = StringUtils.unwrap("sH ", 'n');
      assertNotNull(string0);
      assertEquals("sH ", string0);
      
      String string1 = StringUtils.leftPad("sH ", 0, "sH ");
      assertNotNull(string1);
      assertEquals("sH ", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'n');
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) "sH ";
      charSequenceArray0[2] = (CharSequence) "Q V~v53%z@0|ZM-Q1R";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "sH ", charSequenceArray0[2]);
      assertEquals((-1), int1);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOf(charSequenceArray0[2], (-1260), (-1260));
      assertEquals((-1), int2);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      
      String string2 = "Cannot store ";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("sH ", "Cannot store ");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string3 = locale0.toLanguageTag();
      assertNotNull(string3);
      assertEquals("de-DE", string3);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.replaceEach("(-!6z`Da@7-e6", stringArray0, stringArray0);
      assertNotNull(string4);
      assertEquals(3, stringArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("(-!6z`Da@7-e6", charSequenceArray0[0], locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      String string0 = StringUtils.repeat('a', 16);
      assertNotNull(string0);
      assertEquals("aaaaaaaaaaaaaaaa", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("aaaaaaaaaaaaaaaa");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.getDigits(", Length: 0");
      assertNotNull(string1);
      assertEquals("0", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "0", (CharSequence) ", Length: 0", 2130);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) ", Length: 0", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[2] = (-589);
      String string0 = StringUtils.stripStart("+rQ8Z", "+rQ8Z");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removePattern("M> Ye{t)", "Index: ");
      assertNotNull(string1);
      assertEquals("M> Ye{t)", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("+rQ8Z", "", 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.wrapIfMissing("S+m`jMI:r", "+rQ8Z");
      assertNotNull(string2);
      assertEquals("+rQ8ZS+m`jMI:r+rQ8Z", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripAccents("M> Ye{t)");
      assertNotNull(string3);
      assertEquals("M> Ye{t)", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.startsWithAny("M> Ye{t)", stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.stripToEmpty("S+m`jMI:r");
      assertNotNull(string4);
      assertEquals("S+m`jMI:r", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.removeEndIgnoreCase("H:Wb_hfN^Zfu<q0]", "+rQ8ZS+m`jMI:r");
      assertNotNull(string5);
      assertEquals("H:Wb_hfN^Zfu<q0]", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      int int0 = StringUtils.ordinalIndexOf("H:Wb_hfN^Zfu<q0]", "", 116);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("Index: ", stringArray0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (-519));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", " is not in the range '0' - '9'", "Ik");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = StringUtils.replace("Ik", "", "Ik");
      assertNotNull(string1);
      assertEquals("Ik", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trim(" ");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int1 = StringUtils.ordinalIndexOf(" ", " is not in the range '0' - '9'", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.getDigits("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int2 = StringUtils.indexOf((CharSequence) "", 49);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String string4 = StringUtils.center("$j^v/`zl[", 18, " ");
      assertNotNull(string4);
      assertEquals("    $j^v/`zl[     ", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.deleteWhitespace("Cannot clone Cloneable type ");
      assertNotNull(string5);
      assertEquals("CannotcloneCloneabletype", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.rightPad("Cannot clone Cloneable type ", 299, " is not in the range '0' - '9'");
      assertNotNull(string6);
      assertEquals("Cannot clone Cloneable type  is not in the range '0' - '9' is not in the range '0' - '9' is not in the range '0' - '9' is not in the range '0' - '9' is not in the range '0' - '9' is not in the range '0' - '9' is not in the range '0' - '9' is not in the range '0' - '9' is not in the range '0' - '9' ", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "s37T5zG:y\"Z/dRij4.`$Q6b\"eY=J";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "$j^v/`zl[";
      objectArray0[5] = (Object) "CannotcloneCloneabletype";
      String string7 = StringUtils.join(objectArray0, 'I');
      assertNotNull(string7);
      assertEquals("IIs37T5zG:y\"Z/dRij4.`$Q6b\"eY=JII$j^v/`zl[ICannotcloneCloneabletype", string7);
      assertEquals(6, objectArray0.length);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      
      String string8 = StringUtils.remove("CannotcloneCloneabletype", " ");
      assertNotNull(string8);
      assertEquals("CannotcloneCloneabletype", string8);
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      
      String string9 = StringUtils.strip("", "");
      assertNotNull(string9);
      assertEquals("", string9);
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Cannot clone Cloneable type ";
      boolean boolean3 = StringUtils.containsAnyIgnoreCase("", charSequenceArray0);
      assertFalse(boolean3);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string10 = StringUtils.stripEnd("E+s@BEo?JhB", "");
      assertNotNull(string10);
      assertEquals("E+s@BEo?JhB", string10);
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", "'$");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.repeat('O', (-1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.unwrap("\r", "");
      assertNotNull(string2);
      assertEquals("\r", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "'$";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "'$";
      String string3 = StringUtils.appendIfMissing("TN!8IcQZ*iN2yT", "TN!8IcQZ*iN2yT", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("TN!8IcQZ*iN2yT", string3);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.stripToEmpty("$Jq4/'W=Yna4V");
      assertNotNull(string4);
      assertEquals("$Jq4/'W=Yna4V", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "";
      charSequenceArray1[1] = (CharSequence) "";
      charSequenceArray1[2] = (CharSequence) "$Jq4/'W=Yna4V";
      charSequenceArray1[3] = (CharSequence) "";
      charSequenceArray1[4] = (CharSequence) "$Jq4/'W=Yna4V";
      charSequenceArray0[2] = (CharSequence) "TN!8IcQZ*iN2yT";
      int int1 = StringUtils.lastIndexOfAny("", charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(0, int1);
      assertEquals(6, charSequenceArray1.length);
      assertFalse(int1 == int0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      String[] stringArray0 = StringUtils.split("$Jq4/'W=Yna4V", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int2 = StringUtils.indexOf((CharSequence) "'$", (-1));
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Threshold must not be negative", "$]~{)rS|vB(l/,#><");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      String string1 = StringUtils.chomp("Threshold must not be negative");
      assertNotNull(string1);
      assertEquals("Threshold must not be negative", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) "Threshold must not be negative";
      charSequenceArray0[2] = (CharSequence) "Threshold must not be negative";
      String string2 = StringUtils.appendIfMissingIgnoreCase("#}t@R:t1O>!CLCy", "Threshold must not be negative", charSequenceArray0);
      assertNotNull(string2);
      assertEquals("#}t@R:t1O>!CLCyThreshold must not be negative", string2);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfAny("Threshold must not be negative", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
      
      String string3 = StringUtils.stripEnd("", "$]~{)rS|vB(l/,#><");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.split("\r", "\r");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.difference("\r", (String) null);
      assertNotNull(string1);
      assertEquals("\r", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      String string0 = StringUtils.unwrap("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string1 = StringUtils.repeat("Minimum abbreviation width is %d", 99);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.split("", '-');
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.compare("]", "h~N<dS");
      assertEquals((-11), int0);
      
      String string2 = StringUtils.substringBetween("Minimum abbreviation width is %d", "Bc*GoK", "Bc*GoK");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[4] = 78;
      String string0 = StringUtils.repeat(',', 1);
      assertNotNull(string0);
      assertEquals(",", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string1);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.abbreviate("", (String) null, (-1498), 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, charSequenceArray0.length);
      
      String string3 = StringUtils.substringAfter("EB.r&", 1);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)17;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      String string4 = StringUtils.toEncodedString(byteArray0, charset0);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-34), (byte) (-89), (byte) (-96), (byte)90, (byte)122, (byte)17}, byteArray0);
      assertNotNull(string4);
      assertEquals("\n\u07A7\uFFFDZz\u0011", string4);
      assertEquals(7, byteArray0.length);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean0 = StringUtils.containsIgnoreCase(",", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1136.62978);
      doubleArray0[2] = 0.7;
      doubleArray0[3] = 1.0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 32;
      floatArray0[2] = (-1455.871F);
      floatArray0[3] = (-1455.871F);
      floatArray0[4] = (-1455.871F);
      String string0 = StringUtils.join(floatArray0, '~', (-1), (-1));
      assertArrayEquals(new float[] {0.0F, 32.0F, (-1455.871F), (-1455.871F), (-1455.871F)}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(5, floatArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string1 = StringUtils.trim("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      String string2 = StringUtils.abbreviate("", 32);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string3 = StringUtils.unwrap("                                                                                                                                                                2", '[');
      assertNotNull(string3);
      assertEquals("                                                                                                                                                                2", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.wrap("', has a length less than 2", '[');
      assertNotNull(string4);
      assertEquals("[', has a length less than 2[", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "", (String) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int0 = StringUtils.getLevenshteinDistance(charSequenceArray0[2], (CharSequence) "', has a length less than 2", 32);
      assertEquals(27, int0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.remove("kjNrpj%!JFMMV4r`&", '*');
      assertNotNull(string1);
      assertEquals("kjNrpj%!JFMMV4r`&", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripAccents("\n");
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceOnceIgnoreCase("kjNrpj%!JFMMV4r`&", "KF", (String) null);
      assertNotNull(string3);
      assertEquals("kjNrpj%!JFMMV4r`&", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.removePattern("kjNrpj%!JFMMV4r`&", "\n");
      assertNotNull(string4);
      assertEquals("kjNrpj%!JFMMV4r`&", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      
      Locale locale1 = Locale.ITALIAN;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      
      String string5 = locale1.getDisplayScript(locale0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.leftPad("", (-1472));
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      
      int int0 = 8192;
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "kjNrpj%!JFMMV4r`&", 8192);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = '=';
      charArray0[2] = '>';
      charArray0[3] = 't';
      charArray0[4] = 'u';
      charArray0[5] = 'q';
      charArray0[6] = '7';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "q<wn!3B", charArray0);
      assertArrayEquals(new char[] {'&', '=', '>', 't', 'u', 'q', '7'}, charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
      
      int int0 = StringUtils.compare("q<wn!3B", "DI/Qe:XM4}j5!S");
      assertEquals(45, int0);
      
      String string0 = StringUtils.replace("|Jpi$n>0F ", "(QxXVK", "(QxXVK");
      assertNotNull(string0);
      assertEquals("|Jpi$n>0F ", string0);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      int int0 = StringUtils.compare("]\"@82CP8m_Z zp*Jr+)MdAw0{", "...");
      assertEquals(47, int0);
      
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = null;
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string0 = StringUtils.replace("^|!Rn^2?AH>W", "S+m`jMI:r", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("^|!Rn^2?AH>W", string0);
      
      CharSequence[] charSequenceArray1 = new CharSequence[7];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      String string1 = StringUtils.normalizeSpace("org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray1[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray1[1] = (CharSequence) "^|!Rn^2?AH>W";
      charSequenceArray1[2] = (CharSequence) "...";
      String string2 = StringUtils.chomp("Arguments cannot both be null", "R%2qv\"IszF$");
      assertNotNull(string2);
      assertEquals("Arguments cannot both be null", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      charSequenceArray1[3] = (CharSequence) "Arguments cannot both be null";
      int[] intArray0 = new int[2];
      intArray0[0] = 316;
      intArray0[1] = 316;
      String string3 = StringUtils.join(intArray0, '|');
      assertArrayEquals(new int[] {316, 316}, intArray0);
      assertNotNull(string3);
      assertEquals("316|316", string3);
      assertEquals(2, intArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      charSequenceArray1[4] = (CharSequence) "316|316";
      charSequenceArray1[5] = (CharSequence) "^|!Rn^2?AH>W";
      charSequenceArray1[6] = null;
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray1.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("...", charSequenceArray0);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertFalse(boolean2);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.offerFirst("', has a length less than 2");
      assertTrue(linkedList0.contains("', has a length less than 2"));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Iterator<String> iterator0 = linkedList0.iterator();
      assertTrue(linkedList0.contains("', has a length less than 2"));
      assertNotNull(iterator0);
      assertEquals(1, linkedList0.size());
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)321;
      String string0 = StringUtils.join(shortArray0, 't');
      assertArrayEquals(new short[] {(short)321}, shortArray0);
      assertNotNull(string0);
      assertEquals("321", string0);
      assertEquals(1, shortArray0.length);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("321", (CharSequence[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "', has a length less than 2", 't');
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.defaultString("-}");
      assertNotNull(string0);
      assertEquals("-}", string0);
      
      charSequenceArray0[0] = (CharSequence) "-}";
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'd';
      doubleArray0[1] = (double) 'd';
      doubleArray0[2] = (double) 'd';
      doubleArray0[3] = (double) 'd';
      doubleArray0[4] = (double) 'd';
      doubleArray0[5] = (double) 'd';
      String string1 = StringUtils.join(doubleArray0, 'c', 3852, 5);
      assertArrayEquals(new double[] {100.0, 100.0, 100.0, 100.0, 100.0, 100.0}, doubleArray0, 0.01);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(6, doubleArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string2);
      
      charSequenceArray0[2] = (CharSequence) null;
      String string3 = StringUtils.rightPad("", 4187);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      charSequenceArray0[3] = (CharSequence) string3;
      String string4 = StringUtils.substringBetween("-}", (String) null);
      assertNull(string4);
      
      charSequenceArray0[4] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string5 = StringUtils.stripToEmpty("%&|2Z#S\"");
      assertNotNull(string5);
      assertEquals("%&|2Z#S\"", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.wrapIfMissing("H5eyaHrS+m`jMI:r", "org.apache.commons.lang3.RegExUtils");
      assertNotNull(string6);
      assertEquals("org.apache.commons.lang3.RegExUtilsH5eyaHrS+m`jMI:rorg.apache.commons.lang3.RegExUtils", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      String string0 = StringUtils.substringAfterLast("pqZP-nS\"B`FVoad]v", 50);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.getDigits(" W2ViiA");
      assertNotNull(string1);
      assertEquals("2", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("", 160);
      assertNotNull(string2);
      assertEquals("                                                                                                                                                                ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.trim("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.substringAfterLast("", 50);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = StringUtils.wrapIfMissing("H:Wb_hfN^Zfu<q0]a", "SsB;ISQh[-jq[VP*");
      assertNotNull(string5);
      assertEquals("SsB;ISQh[-jq[VP*H:Wb_hfN^Zfu<q0]aSsB;ISQh[-jq[VP*", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.stripAccents("-7nz");
      assertNotNull(string6);
      assertEquals("-7nz", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Ujq`/:yhY%ZBW";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "2";
      charSequenceArray0[3] = (CharSequence) "SsB;ISQh[-jq[VP*H:Wb_hfN^Zfu<q0]aSsB;ISQh[-jq[VP*";
      boolean boolean0 = StringUtils.startsWithAny("maxWith annot be negative", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      String string7 = StringUtils.join(booleanArray0, 'h');
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(string7);
      assertEquals("true", string7);
      assertEquals(1, booleanArray0.length);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      
      String string8 = StringUtils.wrapIfMissing("2", "");
      assertNotNull(string8);
      assertEquals("2", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      
      String string9 = StringUtils.repeat('u', 160);
      assertNotNull(string9);
      assertEquals("uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      
      String string10 = StringUtils.removeEndIgnoreCase("h annot be negative", "Tqdx)");
      assertNotNull(string10);
      assertEquals("h annot be negative", string10);
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      
      String string11 = StringUtils.replaceIgnoreCase("Vz#uJmUyw...", "uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", "*", 160);
      assertNotNull(string11);
      assertEquals("Vz#uJmUyw...", string11);
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 323;
      intArray0[2] = (-604);
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEach("+rQ8Z", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("+rQ8Z", string0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("+rQ8Z");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.compareIgnoreCase("+rQ8Z", "offset cannot be negative", false);
      assertEquals((-68), int0);
      
      String string1 = StringUtils.join((Object[]) stringArray1, 'W', 2234, 16);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      String string0 = StringUtils.right("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      String string1 = StringUtils.removeStart("=gvoQ^n-k0*[+f", "");
      assertNotNull(string1);
      assertEquals("=gvoQ^n-k0*[+f", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains(""));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) hashSet0, locale_FilteringMode0);
      assertFalse(hashSet0.contains(""));
      assertFalse(list0.contains(""));
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string2 = StringUtils.substringBefore("]WQY%s", 0);
      assertNotNull(string2);
      assertEquals("]WQY%s", string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBefore("org.apache.commons.lang3.CharUtils", 2445);
      assertNotNull(string3);
      assertEquals("org.apache.commons.lang3.CharUtils", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.unwrap("", '5');
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.stripStart("offset cannot be negative", "S+m`j");
      assertNotNull(string5);
      assertEquals("offset cannot be negative", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "offset cannot be negative", (char[]) null);
      assertFalse(boolean0);
      
      String string6 = StringUtils.join((char[]) null, 'f');
      assertNull(string6);
      
      int[] intArray0 = StringUtils.toCodePoints("]WQY%s");
      assertArrayEquals(new int[] {93, 87, 81, 89, 37, 115}, intArray0);
      assertNotNull(intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      boolean boolean0 = StringUtils.containsNone((CharSequence) "v", (char[]) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((byte[]) null, '6');
      assertNull(string0);
      
      String string1 = StringUtils.stripStart((String) null, "h~N<dS");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("WD~^;^Yo;Z6H", '1');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny("`$Q6b\"eY=&J", stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.isNumeric("\n");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("X$q#5JEf}of\"", "JmUywP/OzwgyCa", false);
      assertEquals(14, int0);
      
      String string1 = StringUtils.trimToEmpty("JmUywP/OzwgyCa");
      assertNotNull(string1);
      assertEquals("JmUywP/OzwgyCa", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat("JmUywP/OzwgyCa", 10);
      assertNotNull(string2);
      assertEquals("JmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCa", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceIgnoreCase(".$WcKB0?!53f4,s!", "JmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCaJmUywP/OzwgyCa", "JmUywP/OzwgyCa");
      assertNotNull(string3);
      assertEquals(".$WcKB0?!53f4,s!", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isNumericSpace("\n");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) ".$WcKB0?!53f4,s!", (char[]) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfAny("X$q#5JEf}of\"", (CharSequence[]) null);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String string4 = StringUtils.stripEnd("}cok", "JmUywP/OzwgyCa");
      assertNotNull(string4);
      assertEquals("}cok", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty(",;");
      assertNotNull(string0);
      assertEquals(",;", string0);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      String string0 = StringUtils.unwrap("T[D4XSs", "");
      assertNotNull(string0);
      assertEquals("T[D4XSs", string0);
      
      String string1 = StringUtils.difference("T[D4XSs", ")_F8_%J>*D5|L0y");
      assertNotNull(string1);
      assertEquals(")_F8_%J>*D5|L0y", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      String string0 = StringUtils.replace("'$", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("'$", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "'$", "'$");
      assertEquals(0, int0);
      
      String string1 = StringUtils.repeat('O', 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.unwrap("'$", "");
      assertNotNull(string2);
      assertEquals("'$", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "'$";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "'$";
      String string3 = StringUtils.appendIfMissing("TN!8IcQZ*iN2yT", "TN!8IcQZ*iN2yT", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("TN!8IcQZ*iN2yT", string3);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.stripToEmpty("$Jq4/'W=Yna4V");
      assertNotNull(string4);
      assertEquals("$Jq4/'W=Yna4V", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "";
      charSequenceArray1[1] = (CharSequence) "";
      charSequenceArray1[2] = (CharSequence) "$Jq4/'W=Yna4V";
      charSequenceArray1[3] = (CharSequence) "";
      charSequenceArray1[4] = (CharSequence) "$Jq4/'W=Yna4V";
      charSequenceArray1[5] = (CharSequence) "TN!8IcQZ*iN2yT";
      int int1 = StringUtils.lastIndexOfAny("", charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(0, int1);
      assertEquals(6, charSequenceArray1.length);
      assertTrue(int1 == int0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.strip((String) null, "108A0A0A-1118A64A-2212");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "", 235);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("108A0A0A-1118A64A-2212", "", stringArray0);
      assertNotNull(string2);
      assertEquals("108A0A0A-1118A64A-2212", string2);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, 778);
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceOnce("`$Q6b\"eY=J", (String) null, (String) null);
      assertNotNull(string3);
      assertEquals("`$Q6b\"eY=J", string3);
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isBlank("`$Q6b\"eY=J");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.center("", 0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.truncate("", 0, 1615);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.reverse((String) null);
      assertNull(string6);
      
      boolean boolean2 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean2);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      charArray0[2] = '!';
      charArray0[3] = 'x';
      charArray0[4] = '+';
      charArray0[5] = '!';
      charArray0[6] = 'M';
      charArray0[7] = 'x';
      String string7 = StringUtils.center("_", 778, "");
      assertNotNull(string7);
      assertEqualsstring7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, 'q');
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, shortArray0.length);
      
      String string1 = StringUtils.EMPTY;
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'\u0000', 'q', 'q'}, charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", 35);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", '{');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("", '{', ']');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.lowerCase("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsAny("b\"fVn7+f#`2^9r^)Y", stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", (char[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)59;
      String string2 = StringUtils.join(byteArray0, '{');
      assertArrayEquals(new byte[] {(byte)6, (byte)1, (byte)38, (byte)71, (byte) (-58), (byte)16, (byte)59}, byteArray0);
      assertNotNull(string2);
      assertEquals("6{1{38{71{-58{16{59", string2);
      assertEquals(7, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripStart("h~N<dS", (String) null);
      assertNotNull(string3);
      assertEquals("h~N<dS", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.rotate("\n", 13);
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.lowerCase("\n");
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.unwrap("\n", '\'');
      assertNotNull(string3);
      assertEquals("\n", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsIgnoreCase("\n", "\n");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.leftPad("\n", 13);
      assertNotNull(string4);
      assertEquals("            \n", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "\n", 13);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("u0", "\r");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      String string0 = StringUtils.remove("M$x7_ ao*T&5nR,!C ", '*');
      assertNotNull(string0);
      assertEquals("M$x7_ aoT&5nR,!C ", string0);
      
      String string1 = StringUtils.stripAccents(" yu3k0b");
      assertNotNull(string1);
      assertEquals(" yu3k0b", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceOnceIgnoreCase("...", "Cannot clone Cloneable type ", "9");
      assertNotNull(string2);
      assertEquals("...", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removePattern("M$x7_ aoT&5nR,!C ", " yu3k0b");
      assertNotNull(string3);
      assertEquals("M$x7_ aoT&5nR,!C ", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      Locale locale1 = Locale.ITALIAN;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      
      String string4 = locale1.getDisplayScript(locale0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.toString());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.lowerCase("...", locale0);
      assertNotSame(locale0, locale1);
      assertNotNull(string5);
      assertEquals("...", string5);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "M$x7_ aoT&5nR,!C ";
      String string6 = StringUtils.stripEnd("Cannot clone Cloneable type ", "M$x7_ aoT&5nR,!C ");
      assertNotNull(string6);
      assertEquals("Cannot clone Cloneable type", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.replace("dkbpAjx$DJ^F)L", "...", ":A1La#nAjXB_Y", (-1080));
      assertNotNull(string7);
      assertEquals("dkbpAjx$DJ^F)L", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "M$x7_ ao*T&5nR,!C ", (CharSequence) "dkbpAjx$DJ^F)L");
      assertEquals(19, int0);
      
      boolean boolean0 = StringUtils.isNotBlank(":A1La#nAjXB_Y");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("+rQ8Z", "h~N<dS");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = '^';
      charArray0[2] = 'L';
      String string0 = StringUtils.rightPad("0v", (-2089), 't');
      assertNotNull(string0);
      assertEquals("0v", string0);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      String string0 = StringUtils.unwrap("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string1);
      assertEquals(9, stringArray0.length);
      
      String string2 = StringUtils.chop("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string2);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anothe", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.abbreviate((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another", (-1498), (-1498));
      assertNull(string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(9, stringArray0.length);
      
      String string4 = StringUtils.substringAfter("RD BgE^$ry", (-128));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("F<?xB3erwgW#I");
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat("", 65536);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("F<?xB3erwgW#I", "\n");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.repeat('j', (-317));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean2 = StringUtils.equals((CharSequence) "\n", (CharSequence) "");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string3 = StringUtils.repeat("F<?xB3erwgW#I", (-317));
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      try { 
        StringUtils.getBytes("/nDq", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", " is not in the range '0' - '9'", "Ik");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = StringUtils.replace("Ik", "", "Ik");
      assertNotNull(string1);
      assertEquals("Ik", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split("Ik");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.compareIgnoreCase("N-`)Kj8(fJ+1gYw%0p({Rsl", "Ik", false);
      assertEquals(5, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase("kyIEC%?.#", "}=bY+");
      assertEquals((-18), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String[] stringArray1 = StringUtils.split("Yz~wR{o>j;@~", "6PX7cn[nhJtr=");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.wrap("unG(2G?`", 'b');
      assertNotNull(string2);
      assertEquals("bunG(2G?`b", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      
      byte[] byteArray0 = new byte[4];
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains("Ik"));
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)2;
      String string3 = StringUtils.toEncodedString(byteArray0, charset0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte) (-32), (byte)2}, byteArray0);
      assertNotNull(string3);
      assertEquals("\u0002\u0002\uFFFD\u0002", string3);
      assertEquals(4, byteArray0.length);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "El/<WPsZicls1", (CharSequence) "");
      assertEquals(14, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("|tSUG/DfaxlXT`Uh=", "6PX7cn[nhJtr=", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(string4);
      assertEquals("6PX7cn[nhJtr=|tSUG/DfaxlXT`Uh=", string4);
      assertEquals(1, stringArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(stringArray0.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1162);
      String string0 = StringUtils.replaceOnceIgnoreCase("null/empty items", "null/empty items", "null/empty items");
      assertNotNull(string0);
      assertEquals("null/empty items", string0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null/empty items", (CharSequence) stringBuffer0);
      assertEquals(16, int0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "]^g`?OZ|<hS78";
      stringArray0[1] = "]^g`?OZ|<hS78";
      stringArray0[2] = "]^g`?OZ|<hS78";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("]^g`?OZ|<hS78", string0);
      assertEquals(3, stringArray0.length);
      
      String string1 = StringUtils.chop("]^g`?OZ|<hS78");
      assertNotNull(string1);
      assertEquals("]^g`?OZ|<hS7", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "]^g`?OZ|<hS78", (CharSequence) "]^g`?OZ|<hS7");
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isNotBlank("]^g`?OZ|<hS78");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]^g`?OZ|<hS78";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("]^g`?OZ|<hS78", string0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.chop("]^g`?OZ|<hS78");
      assertNotNull(string1);
      assertEquals("]^g`?OZ|<hS7", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "]^g`?OZ|<hS78", (CharSequence) "]^g`?OZ|<hS78");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNotBlank("]^g`?OZ|<hS78");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "]^g`?OZ|<hS78";
      stringArray0[1] = "]^g`?OZ|<hS78";
      stringArray0[2] = "]^g`?OZ|<hS78";
      stringArray0[3] = "]^g`?OZ|<hS78";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("]^g`?OZ|<hS78", string0);
      assertEquals(4, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "]^g`?OZ|<hS78", (CharSequence) "]^g`?OZ|<hS78");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNotBlank("]^g`?OZ|<hS78");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, 'q');
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, shortArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("5yY*txA]hR");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("5yY*txA]hR");
      assertNotNull(intArray0);
      assertEquals(11, intArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(10, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{b>;w&ymP^T#/G|(~]R", 'f');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("{b>;w&ymP^T#/G|(~]R", 'f');
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.appendIfMissingIgnoreCase("{b>;w&ymP^T#/G|(~]R", "...", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string0);
      assertEquals("{b>;w&ymP^T#/G|(~]R", string0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.difference("`$'skdW", "...");
      assertNotNull(string1);
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "v";
      charSequenceArray0[1] = (CharSequence) "v";
      charSequenceArray0[2] = (CharSequence) "v";
      charSequenceArray0[3] = (CharSequence) "v";
      charSequenceArray0[4] = (CharSequence) "v";
      String string0 = StringUtils.substringBefore("Threshold must not be negative", "$]~{)rS|vB(l/,#><");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      charSequenceArray0[5] = (CharSequence) "Threshold must not be negative";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "v", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string1 = StringUtils.chomp("Threshold must not be negative");
      assertNotNull(string1);
      assertEquals("Threshold must not be negative", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("Aborting to protect against StackOverflowError - output of one loop is the input of another", 1493, 'm');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string3);
      assertEquals("vAborting to protect against StackOverflowError - output of one loop is the input of anothervAborting to protect against StackOverflowError - output of one loop is the input of anothervAborting to protect against StackOverflowError - output of one loop is the input of anothervAborting to protect against StackOverflowError - output of one loop is the input of anothervAborting to protect against StackOverflowError - output of one loop is the input of anotherThreshold must not be negative", string3);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("Threshold must not be negative", "v", charSequenceArray0);
      assertNotNull(string4);
      assertEquals("Threshold must not be negative", string4);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = '@';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Threshold must not be negative", charArray0);
      assertArrayEquals(new char[] {'m', 'm', '@', 'm', 'm'}, charArray0);
      assertTrue(boolean1);
      assertEquals(5, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.substring((String) null, 39);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[0] = 'd';
      String string0 = StringUtils.repeat('d', 1218);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) string0, charArray0);
      assertTrue(boolean0);
      assertEquals(11, charArray0.length);
      
      String string1 = StringUtils.substring(string0, 39);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfter("org.apache.commons.lang3.Charsets", "org.apache.commons.lang3.Charsets");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllUpperCase("\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat("", (-317));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("\n", "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.repeat('E', 256);
      assertNotNull(string2);
      assertEquals("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = StringUtils.equals(charSequenceArray0[0], (CharSequence) "\n");
      assertTrue(boolean2);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string3 = StringUtils.repeat("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", 78);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\r";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertEquals("\r", string2);
      assertEquals(1, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.remove(".$ ,VmI1I<+H.maoG", '*');
      assertNotNull(string3);
      assertEquals(".$ ,VmI1I<+H.maoG", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.toRootUpperCase((String) null);
      assertNull(string4);
      
      int int0 = StringUtils.countMatches((CharSequence) ".$ ,VmI1I<+H.maoG", '/');
      assertEquals(0, int0);
      
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string5);
      assertEquals("\r", string5);
      assertEquals(1, stringArray0.length);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "\r", (CharSequence) "\r");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "maxWith annot be negative";
      charSequenceArray0[1] = (CharSequence) "maxWith annot be negative";
      String string0 = StringUtils.prependIfMissingIgnoreCase("maxWith annot be negative", "maxWith annot be negative", charSequenceArray0);
      assertNotNull(string0);
      assertEquals("maxWith annot be negative", string0);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("\r", "maxWith annot be negative", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("maxWith annot be negative\r", string1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains(charSequenceArray0[0], (CharSequence) "maxWith annot be negative");
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "maxWith annot be negative", charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.replace((String) null, "maxWith annot be negative", "H:Wb_hfN^Zfu<q0]a");
      assertNull(string2);
      
      String string3 = StringUtils.remove("/>k&>", "maxWith annot be negative\r");
      assertNotNull(string3);
      assertEquals("/>k&>", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.rightPad((String) null, 896);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      String string0 = StringUtils.lowerCase("b\"fVn7+f#`2^!r^)Y");
      assertNotNull(string0);
      assertEquals("b\"fvn7+f#`2^!r^)y", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      boolean boolean0 = StringUtils.equalsAny("b\"fVn7+f#`2^!r^)Y", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.removePattern("b\"fvn7+f#`2^!r^)y", "b\"fVn7+f#`2^!r^)Y");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 14
         // b\"fVn7+f#`2^!r^)Y
         //               ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "maxWith cannot be negative";
      stringArray0[2] = "maxWith cannot be negative";
      stringArray0[3] = "maxWith cannot be negative";
      stringArray0[4] = "maxWith cannot be negative";
      stringArray0[5] = "maxWith cannot be negative";
      stringArray0[6] = "maxWith cannot be negative";
      stringArray0[7] = "";
      String string0 = StringUtils.replaceEach("maxWith cannot be negative", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("maxWith cannot be negative", string0);
      assertEquals(8, stringArray0.length);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("maxWith cannot be negative", "maxWith cannot be negative", stringArray0);
      assertNotNull(string1);
      assertEquals("maxWith cannot be negative", string1);
      assertEquals(8, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.prependIfMissingIgnoreCase(" ", "", stringArray0);
      assertNotNull(string2);
      assertEquals(" ", string2);
      assertEquals(8, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "maxWith cannot be negative", (CharSequence[]) stringArray0);
      assertTrue(boolean1);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.center("A", 10, "g|]");
      assertNotNull(string3);
      assertEquals("g|]gAg|]g|", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 10;
      longArray0[1] = (long) 'O';
      longArray0[2] = (long) 'O';
      longArray0[3] = (long) 10;
      longArray0[4] = (long) 10;
      String string4 = StringUtils.join(longArray0, 'O');
      assertArrayEquals(new long[] {10L, 79L, 79L, 10L, 10L}, longArray0);
      assertNotNull(string4);
      assertEquals("10O79O79O10O10", string4);
      assertEquals(5, longArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.capitalize("maxWith cannot be negative");
      assertNotNull(string5);
      assertEquals("MaxWith cannot be negative", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", (CharSequence) " ");
      assertEquals((-1), int0);
      
      String string6 = StringUtils.getDigits("pZ%~ p~jeyzXg&L");
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string7 = StringUtils.upperCase("pZ%~ p~jeyzXg&L", locale0);
      assertNotNull(string7);
      assertEquals("PZ%~ P~JEYZXG&L", string7);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      String string0 = StringUtils.removeAll("\n", "\n");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string1);
      assertEquals(2, stringArray0.length);
      
      String string2 = StringUtils.join((Object[]) stringArray0, "yrEw);S9{Y^0AW*Q");
      assertNotNull(string2);
      assertEquals("yrEw);S9{Y^0AW*Q", string2);
      assertEquals(2, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string3);
      assertEquals(2, stringArray0.length);
      
      String string4 = StringUtils.toRootUpperCase("vN@8!Z2_I");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      int int0 = new Integer(3322);
      assertEquals(3322, int0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", (String) null);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string5 = locale0.toLanguageTag();
      assertNotNull(string5);
      assertEquals("de-DE", string5);
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      int int1 = StringUtils.getFuzzyDistance(" ", "", locale0);
      assertEquals(0, int1);
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.replaceOnceIgnoreCase("org.apache.commons.lang3.StringUtils", "maxWith annot be negativeM$x7_ ao*T&5nR,!C ", "vN@8!Z2_I");
      assertNotNull(string6);
      assertEquals("org.apache.commons.lang3.StringUtils", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      Locale.setDefault(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      doubleArray0[1] = (double) 3322;
      doubleArray0[2] = (double) 3322;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 3322;
      String string7 = StringUtils.join(doubleArray0, 'L', 3322, 106);
      assertArrayEquals(new double[] {0.0, 3322.0, 3322.0, 0.0, 0.0, 3322.0}, doubleArray0, 0.01);
      assertNotNull(string7);
      assertEquals("", string7);
      assertEquals(6, doubleArray0.length);
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat(" yu3k0bH:Wb_hfN^Zfu<q0]a", 143);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains(string1));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<String> iterator0 = linkedList0.iterator();
      assertFalse(linkedList0.contains(string1));
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string2 = StringUtils.join(iterator0, "#K!_RDL6*\\L*b");
      assertFalse(linkedList0.contains("#K!_RDL6*\\L*b"));
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, linkedList0.size());
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'd';
      intArray0[1] = (int) 'd';
      intArray0[2] = (int) 'd';
      intArray0[4] = (int) 'd';
      intArray0[5] = (int) 'd';
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '0');
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chomp("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-314), 100);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: 0", 1120, 1120);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) ", Length: 0", (-2));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertFalse(arrayList0.contains((-2)));
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Spliterator<Integer> spliterator0 = arrayList0.spliterator();
      assertFalse(arrayList0.contains((-2)));
      assertNotNull(spliterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>(arrayList0);
      assertFalse(arrayList0.contains((-2)));
      assertFalse(arrayList1.contains((-2)));
      assertNotNull(arrayList1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      String string1 = StringUtils.overlay("", "Object varargs must not be null", (-2), 11);
      assertNotNull(string1);
      assertEquals("Object varargs must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultIfEmpty("Object varargs must not be null", "Object varargs must not be null");
      assertNotNull(string2);
      assertEquals("Object varargs must not be null", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("[Z~`bSh2q2C_7&h");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("|zR^5{Jak", (String) null, true);
      assertEquals(1, int0);
      
      String string0 = StringUtils.unwrap("Minimum abbreviation width with offset is %d", 'p');
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("!>", (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.leftPad((String) null, 235);
      assertNull(string1);
      
      int int1 = new Integer(2);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Array element ", 10);
      assertNotNull(string0);
      assertEquals("Array e...", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Array e...";
      stringArray0[1] = "Array element ";
      stringArray0[2] = "Array element ";
      stringArray0[3] = "Array element ";
      stringArray0[4] = "Array e...";
      stringArray0[5] = ".hY).$uK65D4)46LRRU";
      stringArray0[6] = "Array element ";
      stringArray0[7] = "Array element ";
      stringArray0[8] = "Array e...";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string1);
      assertEquals("Array e...", string1);
      assertEquals(9, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.compareIgnoreCase("j-@@>41j<i(fyuug!", "", false);
      assertEquals(17, int0);
      
      String string2 = StringUtils.defaultIfBlank((String) null, "TN!8IcQZ*iN");
      assertNotNull(string2);
      assertEquals("TN!8IcQZ*iN", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeEnd("Array e...", "");
      assertNotNull(string3);
      assertEquals("Array e...", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      int[] intArray0 = StringUtils.toCodePoints("Array element ");
      assertNotNull(intArray0);
      assertEquals(14, intArray0.length);
      
      String string4 = StringUtils.repeat("Search and Replace array lengths don't match: ", "Aborting to protect against StackOverflowError - output of one loop is the input of anotherXF:  K:", 1383);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlpha(string4);
      assertFalse(boolean0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.rightPad("RrDG4L g:hS", (-4138), "Array element ");
      assertNotNull(string5);
      assertEquals("RrDG4L g:hS", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("T[mgi", "Threshold must not be negative");
      assertNotNull(string0);
      assertEquals("T[mgi", string0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 12;
      char char0 = '\"';
      int int0 = 99;
      int int1 = 2114;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '\"', 99, 2114);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getDigits("Q)Uzbs7<Fb");
      assertNotNull(string0);
      assertEquals("7", string0);
      
      String string1 = StringUtils.defaultIfBlank("Q)Uzbs7<Fb", "zCUAm3?Dj?D(&5Z");
      assertNotNull(string1);
      assertEquals("Q)Uzbs7<Fb", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'd';
      intArray0[1] = (int) 'd';
      intArray0[2] = (int) 'd';
      intArray0[4] = (int) 'd';
      intArray0[5] = (int) 'd';
      intArray0[6] = (int) 'd';
      intArray0[7] = (int) 'd';
      String string0 = StringUtils.join(intArray0, 'b', 100, 100);
      assertArrayEquals(new int[] {100, 100, 100, 0, 100, 100, 100, 100}, intArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(8, intArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string1 = StringUtils.getIfEmpty("", supplier0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).get();
      String string0 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.strip((String) null, "108A0A0A-1118A64A-2212");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "", 235);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("108A0A0A-1118A64A-2212", "", stringArray0);
      assertNotNull(string2);
      assertEquals("108A0A0A-1118A64A-2212", string2);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.substringBetween((String) null, (String) null, "maxWith cannot be negative");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isMixedCase("108A0A0A-1118A64A-2212");
      assertFalse(boolean0);
      
      String string4 = StringUtils.strip("H5eyaHr");
      assertNotNull(string4);
      assertEquals("H5eyaHr", string4);
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.wrapIfMissing((String) null, 'T');
      assertNull(string5);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = 'T';
      charArray0[5] = 'T';
      charArray0[6] = 'T';
      charArray0[7] = 'T';
      charArray0[8] = 'T';
      String string6 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T'}, charArray0);
      assertNotNull(string6);
      assertEquals("TTTTTTTTT", string6);
      assertEquals(9, charArray0.length);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "H5eyaHr", charArray0);
      assertArrayEquals(new char[] {'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T'}, charArray0);
      assertFalse(boolean1);
      assertEquals(9, charArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, 'A', 13, 1583);
      assertNull(string0);
      
      String string1 = StringUtils.leftPad("~,RNj A0nPo5k", 13);
      assertNotNull(string1);
      assertEquals("~,RNj A0nPo5k", string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.repeat('A', 1583);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "v6),7&eo)&f9ITNQ+";
      stringArray0[1] = "'_[x5 {|V,#n2L[GC";
      stringArray0[2] = "...";
      stringArray0[3] = "&*ed(}$k,=V";
      stringArray0[4] = "<\"N,0";
      stringArray0[5] = " ";
      stringArray0[6] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string0);
      assertEquals("v6),7&eo)&f9ITNQ+", string0);
      assertEquals(7, stringArray0.length);
      
      String string1 = StringUtils.join((double[]) null, '6', 16, 22);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase("v6),7&eo)&f9ITNQ+");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNoneEmpty(stringArray0);
      assertFalse(boolean1);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.wrap("Vz#uJmUyw...", "f)");
      assertNotNull(string2);
      assertEquals("f)Vz#uJmUyw...f)", string2);
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean2);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "f)", (CharSequence) ")JEbGgqcKXWN<8(");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringAfter("'_[x5 {|V,#n2L[GC", "<\"N,0");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1136.62978);
      doubleArray0[2] = 0.7;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-4390.257454127689);
      doubleArray0[5] = 100.0;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Locale locale0 = Locale.lookup(stack0, arrayDeque0);
      assertNull(locale0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String string0 = StringUtils.upperCase(" is not in the range '0' - '9'", (Locale) null);
      assertNotNull(string0);
      assertEquals(" IS NOT IN THE RANGE '0' - '9'", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " IS NOT IN THE RANGE '0' - '9'", (-1660), 5);
      assertEquals((-1), int0);
      
      Locale locale1 = Locale.GERMANY;
      assertNotNull(locale1);
      assertEquals("de_DE", locale1.toString());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DE", locale1.getCountry());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" IS NOT IN THE RANGE '0' - '9'", " IS NOT IN THE RANGE '0' - '9'");
      assertNotNull(stringArray0);
      assertEquals(31, stringArray0.length);
      
      String string1 = locale1.toLanguageTag();
      assertNotNull(string1);
      assertEquals("de-DE", string1);
      assertEquals("de_DE", locale1.toString());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DE", locale1.getCountry());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("de-DE", " IS NOT IN THE RANGE '0' - '9'", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.stripStart("Z", "r+)HMdAw0{");
      assertNotNull(string0);
      assertEquals("Z", string0);
      
      String string1 = StringUtils.toRootLowerCase("r+)HMdAw0{");
      assertNotNull(string1);
      assertEquals("r+)hmdaw0{", string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("/R", "Z", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, '\'');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripToEmpty("i(N5:DkG5/s2K`8h&<");
      assertNotNull(string1);
      assertEquals("i(N5:DkG5/s2K`8h&<", string1);
      
      String string2 = StringUtils.leftPad((String) null, 3, "i(N5:DkG5/s2K`8h&<");
      assertNull(string2);
      
      String string3 = StringUtils.center((String) null, 3, "offset cannot be negative");
      assertNull(string3);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", " is not in the range '0' - '9'", "Ik");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string1 = StringUtils.replace("Ik", "", "Ik");
      assertNotNull(string1);
      assertEquals("Ik", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removePattern("Ik", " ");
      assertNotNull(string2);
      assertEquals("Ik", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Ik", "", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.normalizeSpace("`$Q6b\"eY=J");
      assertNotNull(string3);
      assertEquals("`$Q6b\"eY=J", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.stripAccents(" is not in the range '0' - '9'");
      assertNotNull(string4);
      assertEquals(" is not in the range '0' - '9'", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean3 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean3);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      boolean[] booleanArray0 = new boolean[5];
      String string5 = StringUtils.join(booleanArray0, ';');
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertNotNull(string5);
      assertEquals("false;false;false;false;false", string5);
      assertEquals(5, booleanArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string6);
      assertEquals("Ik", string6);
      assertEquals(1, stringArray0.length);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.chop("Ik");
      assertNotNull(string7);
      assertEquals("I", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      
      String string8 = StringUtils.abbreviate("`$Q6b\"eY=J", " is not in the range '0' - '9'", (int) ';', (int) ';');
      assertNotNull(string8);
      assertEquals("`$Q6b\"eY=J", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertEquals(1, stringArray0.length);
      assertTrue(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Ik";
      charSequenceArray0[1] = (CharSequence) "Ik";
      charSequenceArray0[2] = (CharSequence) "I";
      charSequenceArray0[3] = (CharSequence) " is not in the range '0' - '9'";
      charSequenceArray0[4] = (CharSequence) "false;false;false;false;false";
      charSequenceArray0[5] = (CharSequence) "Ik";
      boolean boolean4 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean4);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", " is not in the range '0' - '9'", "Ik");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = StringUtils.replace("Ik", "", "Ik");
      assertNotNull(string1);
      assertEquals("Ik", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean3 = StringUtils.isAlphanumeric(" ");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean4 = StringUtils.startsWith("Ik", "Ik");
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("@");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("@");
      assertArrayEquals(new int[] {64}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      String string0 = StringUtils.substringAfter(";HJwI2`0;V,k0|yq}!O", 127);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", " is not in the range '0' - '9'", "Ik");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = StringUtils.replace("Ik", "", "Ik");
      assertNotNull(string1);
      assertEquals("Ik", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removePattern("Ik", " ");
      assertNotNull(string2);
      assertEquals("Ik", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Ik", "", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.normalizeSpace("`$Q6b\"eY=J");
      assertNotNull(string3);
      assertEquals("`$Q6b\"eY=J", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.stripAccents(" is not in the range '0' - '9'");
      assertNotNull(string4);
      assertEquals(" is not in the range '0' - '9'", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean3 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean3);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      boolean[] booleanArray0 = new boolean[5];
      String string5 = StringUtils.join(booleanArray0, ';');
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertNotNull(string5);
      assertEquals("false;false;false;false;false", string5);
      assertEquals(5, booleanArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string6);
      assertEquals("Ik", string6);
      assertEquals(1, stringArray0.length);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      
      String string7 = StringUtils.chop("Ik");
      assertNotNull(string7);
      assertEquals("I", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      
      String string8 = StringUtils.abbreviate("`$Q6b\"eY=J", " is not in the range '0' - '9'", (int) ';', (int) ';');
      assertNotNull(string8);
      assertEquals("`$Q6b\"eY=J", string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertEquals(1, stringArray0.length);
      assertTrue(int1 == int0);
      
      String string9 = StringUtils.substringAfter("DltV?DPi2yqzJ", (-2061));
      assertNotNull(string9);
      assertEquals("", string9);
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", " is not in the range '0' - '9'", "Ik");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeIgnoreCase(" is not in the range '0' - '9'", "");
      assertNotNull(string1);
      assertEquals(" is not in the range '0' - '9'", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlpha(" is not in the range '0' - '9'");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase(" is not in the range '0' - '9'");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.replace("Ik", "", "Ik");
      assertNotNull(string2);
      assertEquals("Ik", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removePattern("*e~_c[&tg7Cg", " ");
      assertNotNull(string3);
      assertEquals("*e~_c[&tg7Cg", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Ik", " is not in the range '0' - '9'", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Mn)>kTF;W4z:", " ", 0);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean3 = StringUtils.isEmpty("*e~_c[&tg7Cg");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String string4 = StringUtils.replaceIgnoreCase("", " ", "Ik");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)900;
      shortArray0[2] = (short)98;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)4;
      shortArray0[6] = (short)52;
      String string5 = StringUtils.join(shortArray0, 't', (int) (short)52, 0);
      assertArrayEquals(new short[] {(short)0, (short)900, (short)98, (short)0, (short)4, (short)0, (short)52}, shortArray0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(7, shortArray0.length);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("]");
      assertNotNull(string0);
      assertEquals("]", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("]");
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad("]", 399, "Strings must not be null");
      assertNotNull(string1);
      assertEquals("]Strings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must n", string1);
      assertFalse(string1.equals((Object)string0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 399;
      floatArray0[1] = (float) 399;
      floatArray0[2] = (float) 399;
      floatArray0[3] = (float) 399;
      String string2 = StringUtils.join(floatArray0, 'U', 399, 399);
      assertArrayEquals(new float[] {399.0F, 399.0F, 399.0F, 399.0F}, floatArray0, 0.01F);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(4, floatArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "M$x7_ ao*T&5nR,!C ";
      charSequenceArray0[1] = (CharSequence) "M$x7_ ao*T&5nR,!C ";
      charSequenceArray0[2] = (CharSequence) "M$x7_ ao*T&5nR,!C ";
      charSequenceArray0[3] = (CharSequence) "M$x7_ ao*T&5nR,!C ";
      charSequenceArray0[4] = (CharSequence) "M$x7_ ao*T&5nR,!C ";
      charSequenceArray0[5] = (CharSequence) "M$x7_ ao*T&5nR,!C ";
      String string0 = StringUtils.prependIfMissing("M$x7_ ao*T&5nR,!C ", "M$x7_ ao*T&5nR,!C ", charSequenceArray0);
      assertNotNull(string0);
      assertEquals("M$x7_ ao*T&5nR,!C ", string0);
      assertEquals(6, charSequenceArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '*';
      floatArray0[1] = (float) '*';
      floatArray0[2] = (float) '*';
      floatArray0[1] = (float) '*';
      floatArray0[4] = (float) '*';
      floatArray0[5] = (-1455.871F);
      floatArray0[6] = (float) '*';
      String string1 = StringUtils.join(floatArray0, '*', 32, 32);
      assertArrayEquals(new float[] {42.0F, 42.0F, 42.0F, 0.0F, 42.0F, (-1455.871F), 42.0F}, floatArray0, 0.01F);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(7, floatArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string2 = StringUtils.unwrap("M$x7_ ao*T&5nR,!C ", '*');
      assertNotNull(string2);
      assertEquals("M$x7_ ao*T&5nR,!C ", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.wrap("M$x7_ ao*T&5nR,!C ", '*');
      assertNotNull(string3);
      assertEquals("*M$x7_ ao*T&5nR,!C *", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[5], charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.overlay("\n", "B3erwgW#I", 13, 13);
      assertNotNull(string1);
      assertEquals("\nB3erwgW#I", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rotate("B3erwgW#I", 13);
      assertNotNull(string2);
      assertEquals("gW#IB3erw", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllLowerCase("\nB3erwgW#I");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "B3erwgW#I";
      charSequenceArray0[1] = (CharSequence) "_48feD'";
      charSequenceArray0[2] = (CharSequence) "gW#IB3erw";
      charSequenceArray0[3] = (CharSequence) "\nB3erwgW#I";
      boolean boolean1 = StringUtils.equalsAny("gW#IB3erw", charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "H:Wb_hfN^Zfu<q0]a yu3k0b");
      assertNull(string0);
      
      String string1 = StringUtils.removePattern((String) null, (String) null);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string2 = StringUtils.lowerCase("b\"fVn7+f#`2^9rV4^)Y");
      assertNotNull(string2);
      assertEquals("b\"fvn7+f#`2^9rv4^)y", string2);
      
      charSequenceArray0[0] = (CharSequence) "b\"fvn7+f#`2^9rv4^)y";
      charSequenceArray0[1] = (CharSequence) null;
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      char[] charArray0 = new char[18];
      charArray0[0] = '2';
      String string3 = StringUtils.replaceOnceIgnoreCase("b\"fVn7+f#`2^9rV4^)Y", "H:Wb_hfN^Zfu<q0]a yu3k0b", "Kj8(fJ+1gYw%0p({Rsl");
      assertNotNull(string3);
      assertEquals("b\"fVn7+f#`2^9rV4^)Y", string3);
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      int int0 = StringUtils.length("\r");
      assertEquals(1, int0);
      
      String string1 = StringUtils.overlay("4?,Vi}De-;%&+", "fT|i7LS$pD6(", 8192, (-4060));
      assertNotNull(string1);
      assertEquals("fT|i7LS$pD6(", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      String string0 = StringUtils.left(" vs ", 51);
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = '^';
      charArray0[2] = 'L';
      String[] stringArray0 = new String[5];
      stringArray0[0] = " vs ";
      String string1 = StringUtils.overlay(" vs ", " vs ", 51, 1);
      assertNotNull(string1);
      assertEquals("  vs ", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "Q V~v53%z@0|ZM-Q1R");
      assertTrue(boolean0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      boolean boolean1 = StringUtils.containsWhitespace("Q V~v53%z@0|ZM-Q1R");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string0 = StringUtils.deleteWhitespace("Q V~v53%z@0|ZM-Q1R");
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter((String) null, "g*tDvQpC^TQbW");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "Q V~v53%z@0|ZM-Q1R");
      assertTrue(boolean0);
      
      String string0 = StringUtils.unwrap("sH ", 'n');
      assertNotNull(string0);
      assertEquals("sH ", string0);
      
      String string1 = StringUtils.leftPad("sH ", 0, "sH ");
      assertNotNull(string1);
      assertEquals("sH ", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'n');
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) "sH ";
      charSequenceArray0[2] = (CharSequence) "Q V~v53%z@0|ZM-Q1R";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "sH ", charSequenceArray0[2]);
      assertEquals((-1), int1);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.substringAfter((String) null, "Minimum abbreviation width with offset is %d");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      String string0 = StringUtils.remove("M$x7_ ao*T&5nR,!C ", '1');
      assertNotNull(string0);
      assertEquals("M$x7_ ao*T&5nR,!C ", string0);
      
      String string1 = StringUtils.overlay("", "M$x7_ ao*T&5nR,!C ", 1, (-2371));
      assertNotNull(string1);
      assertEquals("M$x7_ ao*T&5nR,!C ", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByCharacterType("M$x7_ ao*T&5nR,!C ");
      assertNotNull(stringArray0);
      assertEquals(17, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(17, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      String string0 = StringUtils.replace("clone", "clone", "clone");
      assertNotNull(string0);
      assertEquals("clone", string0);
      
      String string1 = StringUtils.overlay(" tg)i->i", "clone", (-369), (-369));
      assertNotNull(string1);
      assertEquals("clone tg)i->i", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1136.62978);
      String string0 = "Nl7\\u-";
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) string0;
      charSequenceArray0[1] = (CharSequence) string0;
      charSequenceArray0[2] = (CharSequence) string0;
      charSequenceArray0[3] = (CharSequence) string0;
      charSequenceArray0[4] = (CharSequence) string0;
      charSequenceArray0[5] = (CharSequence) string0;
      charSequenceArray0[6] = (CharSequence) string0;
      String string1 = StringUtils.prependIfMissingIgnoreCase(string0, string0, charSequenceArray0);
      assertNotNull(string1);
      assertEquals("Nl7\\u-", string1);
      assertEquals(8, charSequenceArray0.length);
      
      String string2 = StringUtils.overlay("maxWith cannot be negative", "#fo_", 2, 2);
      assertNotNull(string2);
      assertEquals("ma#fo_xWith cannot be negative", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeStart("XF:  K:", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string3);
      assertEquals("XF:  K:", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.isNumeric("\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.getDigits("\n");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "JmUyw...Vz#u", (CharSequence) "\n", (-1197));
      assertEquals((-1), int0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string0));
      assertNotNull(treeSet0);
      
      boolean boolean1 = treeSet0.add("JmUyw...Vz#u");
      assertTrue(treeSet0.contains("JmUyw...Vz#u"));
      assertFalse(treeSet0.contains(string0));
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = treeSet0.add("\n");
      assertTrue(treeSet0.contains("JmUyw...Vz#u"));
      assertFalse(treeSet0.contains(string1));
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.join((Iterable<?>) treeSet0, 'O');
      assertTrue(treeSet0.contains("JmUyw...Vz#u"));
      assertFalse(treeSet0.contains(string2));
      assertNotNull(string2);
      assertEquals("\nOJmUyw...Vz#u", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((int[]) null, 's');
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "JmUyw...Vz#u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      String string0 = StringUtils.substringBefore(":{dx d~e=", ":{dx d~e=");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.left("jCbQP`8x", 48);
      assertNotNull(string1);
      assertEquals("jCbQP`8x", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultString("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.chomp(":{dx d~e=");
      assertNotNull(string3);
      assertEquals(":{dx d~e=", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) ":{dx d~e=", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "v=";
      charSequenceArray0[1] = (CharSequence) "v=";
      charSequenceArray0[2] = (CharSequence) "v=";
      charSequenceArray0[3] = (CharSequence) "v=";
      charSequenceArray0[4] = (CharSequence) "v=";
      String string0 = StringUtils.substringBefore("Threshold must not be negative", "$]~{)rS|vB(l/,#><");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      charSequenceArray0[5] = (CharSequence) "Threshold must not be negative";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "v=", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string1 = StringUtils.chomp("Threshold must not be negative");
      assertNotNull(string1);
      assertEquals("Threshold must not be negative", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("Aborting to protect against StackOverflowError - output of one loop is the input of another", 1493, 'm');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string3);
      assertEquals("v=Aborting to protect against StackOverflowError - output of one loop is the input of anotherv=Aborting to protect against StackOverflowError - output of one loop is the input of anotherv=Aborting to protect against StackOverflowError - output of one loop is the input of anotherv=Aborting to protect against StackOverflowError - output of one loop is the input of anotherv=Aborting to protect against StackOverflowError - output of one loop is the input of anotherThreshold must not be negative", string3);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("@oXvl<g+");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("@oXvl<g+", "@oXvl<g+", "");
      assertNull(stringArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1345.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1856.20852332191;
      doubleArray0[5] = 3.8599935886137935;
      doubleArray0[6] = (-1123.77485);
      String string0 = StringUtils.remove("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrap("", "H5eyaHrS+m`jMI:r");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, '7');
      assertFalse(linkedList0.contains('7'));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("", 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.unwrap("Fxh `ug", '7');
      assertNotNull(string3);
      assertEquals("Fxh `ug", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string4);
      assertEquals(6, stringArray0.length);
      
      String string5 = StringUtils.repeat((String) null, 1152);
      assertNull(string5);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string6 = StringUtils.repeat('T', 497);
      assertNotNull(string6);
      assertEquals("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      
      String[] stringArray1 = StringUtils.split((String) null, "#");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      String string0 = StringUtils.right("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.removeStart("=gvoQ^n-k0*[+f", "");
      assertNotNull(string1);
      assertEquals("=gvoQ^n-k0*[+f", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      
      String string2 = StringUtils.strip("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)charSequence0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.wrapIfMissing((String) null, 'T');
      assertNull(string3);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[3] = 'T';
      String string4 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'T', 'T', '\u0000', 'T'}, charArray0);
      assertNotNull(string4);
      assertEquals("TT\u0000T", string4);
      assertEquals(4, charArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'T', 'T', '\u0000', 'T'}, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      
      String string5 = StringUtils.deleteWhitespace("{}");
      assertNotNull(string5);
      assertEquals("{}", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.substringBefore((String) null, "f:u|1L]_T)");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("', has a length less than 2");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize((String) null);
      assertNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'J');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = (int) 'd';
      intArray0[2] = (int) 'd';
      intArray0[4] = (int) 'd';
      intArray0[5] = (int) 'd';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{b>;w&ymP^T#/G|(~]R", 'D');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.stripEnd(", '", "<U%");
      assertNotNull(string0);
      assertEquals(", '", string0);
      
      String string1 = StringUtils.replaceChars((String) null, 'D', 'd');
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      String string0 = StringUtils.substringBefore("bLY9CSKTrwgfVZC@", 744);
      assertNotNull(string0);
      assertEquals("bLY9CSKTrwgfVZC@", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "bLY9CSKTrwgfVZC@";
      String string1 = StringUtils.removePattern("bLY9CSKTrwgfVZC@", "Minimum abbreviation width with offset is %d");
      assertNotNull(string1);
      assertEquals("bLY9CSKTrwgfVZC@", string1);
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "bLY9CSKTrwgfVZC@";
      charSequenceArray0[2] = (CharSequence) "bLY9CSKTrwgfVZC@";
      String string2 = StringUtils.defaultString("TN!8IcQZ*iN");
      assertNotNull(string2);
      assertEquals("TN!8IcQZ*iN", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[3] = (CharSequence) "TN!8IcQZ*iN";
      boolean boolean0 = StringUtils.equals((CharSequence) "bLY9CSKTrwgfVZC@", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertFalse(boolean0);
      
      String string3 = StringUtils.swapCase("TN!8IcQZ*iN");
      assertNotNull(string3);
      assertEquals("tn!8iCqz*In", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.reverse("2ZOF,T/LXk^L2^^S");
      assertNotNull(string4);
      assertEquals("S^^2L^kXL/T,FOZ2", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      int int0 = StringUtils.getLevenshteinDistance(charSequenceArray0[3], (CharSequence) "S^^2L^kXL/T,FOZ2", 45);
      assertEquals(16, int0);
      assertEquals(4, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("2ZOF,T/LXk^L2^^S");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.repeat('1', 45);
      assertNotNull(string5);
      assertEquals("111111111111111111111111111111111111111111111", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.wrap("2ZOF,T/LXk^L2^^S", '4');
      assertNotNull(string6);
      assertEquals("42ZOF,T/LXk^L2^^S4", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.wrap((String) null, '1');
      assertNull(string7);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) "2ZOF,T/LXk^L2^^S");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      String string0 = StringUtils.right("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      String string1 = StringUtils.removeStart("=gvoQ^n-k0*[+f", "");
      assertNotNull(string1);
      assertEquals("=gvoQ^n-k0*[+f", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("=gvoQ^n-k0*[+f"));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) hashSet0, locale_FilteringMode0);
      assertFalse(hashSet0.contains("=gvoQ^n-k0*[+f"));
      assertFalse(list0.contains("=gvoQ^n-k0*[+f"));
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      int[] intArray0 = new int[0];
      String string2 = StringUtils.join(intArray0, 'O');
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, intArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)charSequence0));
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "G+Qs");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("Arguments cannot both be null");
      assertNotNull(string0);
      assertEquals("Arguments cannot both be null", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Arguments cannot both be null");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("Arguments cannot both be null", "Arguments cannot both be null", 101);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.removeEndIgnoreCase("Arguments cannot both be null", "Arguments cannot both be null");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Arguments cannot both be null", 3445);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isBlank("Arguments cannot both be null");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.difference("w}hRRHA3nmD0M.F@|I", "o)perLx]489R");
      assertNotNull(string2);
      assertEquals("o)perLx]489R", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.leftPad("", (-1), ' ');
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains(string1));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<String> iterator0 = linkedList0.iterator();
      assertFalse(linkedList0.contains(string1));
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string4 = StringUtils.join(iterator0, "T)7;");
      assertFalse(linkedList0.contains(string1));
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(0, linkedList0.size());
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = StringUtils.substringBetween("o)perLx]489R", "T)7;", "N4");
      assertNull(string5);
      
      String string6 = StringUtils.removeEndIgnoreCase("Arguments cannot both be null", "");
      assertNotNull(string6);
      assertEquals("Arguments cannot both be null", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("w}hRRHA3nmD0M.F@|I", "Arguments cannot both be null", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllUpperCase("\n");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, 'I', 78, 4487);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 78
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.strip((String) null, "108A0A0A-1118A64A-2212");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "", 235);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("108A0A0A-1118A64A-2212", "", stringArray0);
      assertNotNull(string2);
      assertEquals("108A0A0A-1118A64A-2212", string2);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.substringBetween((String) null, (String) null, "maxWith cannot be negative");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isMixedCase("108A0A0A-1118A64A-2212");
      assertFalse(boolean0);
      
      String string4 = StringUtils.defaultString("comparator", "h annot be negative");
      assertNotNull(string4);
      assertEquals("comparator", string4);
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.overlay((String) null, "B3erwgW#I", 235, 235);
      assertNull(string5);
      
      String string6 = StringUtils.rotate("comparator", 1820);
      assertNotNull(string6);
      assertEquals("comparator", string6);
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.right("h annot be negative", 1820);
      assertNotNull(string7);
      assertEquals("h annot be negative", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, "JmUyw...Vz#u");
      assertNull(stringArray1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, '@', 45, 321);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 45
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 5;
      longArray0[1] = (long) 3253;
      longArray0[2] = (long) 868;
      longArray0[3] = (long) 868;
      String string0 = StringUtils.join(longArray0, '1', 3253, 3253);
      assertArrayEquals(new long[] {5L, 3253L, 868L, 868L}, longArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(4, longArray0.length);
      
      String string1 = StringUtils.toRootLowerCase("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((Iterable<?>) null, '/');
      assertNull(string2);
      
      String string3 = StringUtils.upperCase("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0, (ClassLoader) null);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      
      Iterator<Integer> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      
      String string0 = StringUtils.join(iterator0, (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      
      String string1 = StringUtils.removeStart((String) null, "null/empty itemsnull/empty items");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'N';
      floatArray0[1] = (float) 'S';
      floatArray0[2] = (float) 'N';
      floatArray0[3] = (float) 'N';
      floatArray0[4] = (float) 'N';
      floatArray0[5] = (float) 'N';
      floatArray0[6] = (float) 'S';
      floatArray0[7] = (float) 'N';
      floatArray0[8] = (float) 'N';
      String string0 = StringUtils.join(floatArray0, 'N');
      assertArrayEquals(new float[] {78.0F, 83.0F, 78.0F, 78.0F, 78.0F, 78.0F, 83.0F, 78.0F, 78.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals("78.0N83.0N78.0N78.0N78.0N78.0N83.0N78.0N78.0", string0);
      assertEquals(9, floatArray0.length);
      
      boolean boolean0 = StringUtils.isBlank("78.0N83.0N78.0N78.0N78.0N78.0N83.0N78.0N78.0");
      assertFalse(boolean0);
      
      String string1 = StringUtils.center("\r", (-22));
      assertNotNull(string1);
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.left("maxWith cannot be negative", 1424);
      assertNotNull(string2);
      assertEquals("maxWith cannot be negative", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.ordinalIndexOf("maxWith cannot be negative", "maxWith cannot be negative", (-1127));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.removeStart("", "maxWith cannot be negative");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains(string2));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean1 = hashSet0.add("\r");
      assertTrue(hashSet0.contains("\r"));
      assertFalse(hashSet0.contains("maxWith cannot be negative"));
      assertTrue(boolean1);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[2] = (CharSequence) "\r";
      charSequenceArray0[3] = (CharSequence) "78.0N83.0N78.0N78.0N78.0N78.0N83.0N78.0N78.0";
      charSequenceArray0[4] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[7] = (CharSequence) "\r";
      int int1 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int1);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
      
      String string0 = StringUtils.abbreviateMiddle(" yu3k0bH:Wb_hfN^Zfu<q0]a", (String) null, 5);
      assertNotNull(string0);
      assertEquals(" yu3k0bH:Wb_hfN^Zfu<q0]a", string0);
      
      String string1 = StringUtils.defaultString((String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", " yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", " is not in the range '0' - '9'", "Ik");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = StringUtils.replace("Ik", "", "Ik");
      assertNotNull(string1);
      assertEquals("Ik", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removePattern("Ik", " ");
      assertNotNull(string2);
      assertEquals("Ik", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Ik", "", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.normalizeSpace("`$Q6b\"eY=J");
      assertNotNull(string3);
      assertEquals("`$Q6b\"eY=J", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.stripAccents(" is not in the range '0' - '9'");
      assertNotNull(string4);
      assertEquals(" is not in the range '0' - '9'", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean3 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean3);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      String string5 = StringUtils.appendIfMissing("`$Q6b\"eY=J", "`$Q6b\"eY=J", (CharSequence[]) null);
      assertNotNull(string5);
      assertEquals("`$Q6b\"eY=J", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      
      String string6 = StringUtils.reverse("H5eyaHr");
      assertNotNull(string6);
      assertEquals("rHaye5H", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.join((Object[]) stringArray0, (String) null);
      assertNotNull(string7);
      assertEquals("Ik", string7);
      assertEquals(1, stringArray0.length);
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      
      boolean boolean4 = StringUtils.equalsAny("Array element ", (CharSequence[]) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      
      boolean boolean5 = StringUtils.containsNone((CharSequence) "", (char[]) null);
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      String string0 = StringUtils.replace(", Length: 0", (String) null, "");
      assertNotNull(string0);
      assertEquals(", Length: 0", string0);
      
      String string1 = StringUtils.wrap(", Length: 0", "");
      assertNotNull(string1);
      assertEquals(", Length: 0", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      String string2 = StringUtils.join(booleanArray0, '%');
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertNotNull(string2);
      assertEquals("true%true%true", string2);
      assertEquals(3, booleanArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = ", Length: 0";
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string3);
      assertEquals(", Length: 0", string3);
      assertEquals(1, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.chop("I.'o=UrPM?6B*;e");
      assertNotNull(string4);
      assertEquals("I.'o=UrPM?6B*;", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.abbreviate(", Length: 0", "dkbpAjx$DJ^F)L", 160, 160);
      assertNotNull(string5);
      assertEquals(", Length: 0", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "I.'o=UrPM?6B*;", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-126);
      String string6 = StringUtils.join(byteArray0, '%');
      assertArrayEquals(new byte[] {(byte)77, (byte) (-7), (byte)44, (byte)5, (byte)9, (byte) (-2), (byte) (-126)}, byteArray0);
      assertNotNull(string6);
      assertEquals("77%-7%44%5%9%-2%-126", string6);
      assertEquals(7, byteArray0.length);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      
      int int1 = StringUtils.indexOf((CharSequence) ", Length: 0", (CharSequence) ", Length: 0");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.repeat("", 78);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStart("org.apache.commons.lang3.LocaleUtils", "org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("org.apache.commons.lang3.LocaleUtils"));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 321;
      intArray0[2] = (-589);
      intArray0[3] = 744;
      intArray0[4] = 0;
      intArray0[5] = 1174;
      intArray0[6] = 322;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '1';
      longArray0[1] = (long) 1174;
      longArray0[2] = (long) 321;
      longArray0[3] = (long) 0;
      String string0 = StringUtils.join(longArray0, 'o', 306, 51);
      assertArrayEquals(new long[] {49L, 1174L, 321L, 0L}, longArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(4, longArray0.length);
      
      String string1 = StringUtils.toRootLowerCase("H/nE*Pq]D#%Lig10:D'");
      assertNotNull(string1);
      assertEquals("h/ne*pq]d#%lig10:d'", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((Iterable<?>) null, 't');
      assertNull(string2);
      
      String string3 = StringUtils.upperCase("(kO0[T\"9");
      assertNotNull(string3);
      assertEquals("(KO0[T\"9", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) 322;
      objectArray0[2] = (Object) "(kO0[T\"9";
      objectArray0[3] = (Object) (-589);
      objectArray0[4] = (Object) 49L;
      objectArray0[5] = (Object) 321L;
      objectArray0[6] = (Object) 49L;
      objectArray0[7] = (Object) "h/ne*pq]d#%lig10:d'";
      objectArray0[8] = (Object) 321;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, (String) null, (-2311), 51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2311
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      String string0 = StringUtils.trim("-{RV_kn7cf");
      assertNotNull(string0);
      assertEquals("-{RV_kn7cf", string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string0));
      assertNotNull(treeSet0);
      
      String string1 = treeSet0.pollLast();
      assertFalse(treeSet0.contains(string0));
      assertNull(string1);
      
      String string2 = treeSet0.floor("-{RV_kn7cf");
      assertFalse(treeSet0.contains(string0));
      assertNull(string2);
      
      boolean boolean0 = treeSet0.add("Supplied value must be a valid byte literal between -128 and 127: [");
      assertTrue(treeSet0.contains("Supplied value must be a valid byte literal between -128 and 127: ["));
      assertFalse(treeSet0.contains(string0));
      assertTrue(boolean0);
      
      boolean boolean1 = treeSet0.add("(!.K%a1Za:FJfBp8>");
      assertTrue(treeSet0.contains("Supplied value must be a valid byte literal between -128 and 127: ["));
      assertFalse(treeSet0.contains(string0));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.join((Iterable<?>) null, '}');
      assertNull(string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "(!.K%a1Za:FJfBp8>", (CharSequence) "-{RV_kn7cf");
      assertEquals(17, int0);
      
      boolean boolean2 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Locale must not be null";
      String string0 = StringUtils.toRootLowerCase("Locale must not be null");
      assertNotNull(string0);
      assertEquals("locale must not be null", string0);
      
      charSequenceArray0[1] = (CharSequence) "locale must not be null";
      charSequenceArray0[2] = (CharSequence) "Locale must not be null";
      charSequenceArray0[3] = (CharSequence) "Locale must not be null";
      String string1 = StringUtils.appendIfMissingIgnoreCase("Locale must not be null", "Locale must not be null", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("Locale must not be null", string1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("}g0G TP0pbA[$ES1=", "}g0G TP0pbA[$ES1=");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBefore("w`Eu5:[aVLxv", "}g0G TP0pbA[$ES1=");
      assertNotNull(string1);
      assertEquals("w`Eu5:[aVLxv", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      String string0 = StringUtils.substringBefore(":{dx d~e=", ":{dx d~e=");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.uncapitalize("wr`tMTvqG7");
      assertNotNull(string1);
      assertEquals("wr`tMTvqG7", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.join((Object[]) null, "org.apache.commons.lang3.StringUtils", 1832, 1832);
      assertNull(string0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-5512), 7);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      String string0 = StringUtils.strip("d^j;1N'A");
      assertNotNull(string0);
      assertEquals("d^j;1N'A", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripToEmpty("d^j;1N'A");
      assertNotNull(string1);
      assertEquals("d^j;1N'A", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "d^j;1N'A", (CharSequence) "d^j;1N'A");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("d^j;1N'A");
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String string2 = StringUtils.replaceIgnoreCase((String) null, "eg", ",.nSt", (-1));
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) ",.nSt", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      String string0 = StringUtils.repeat("aL'0>8HExlmvR4gPE-", 585);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("aL'0>8HExlmvR4gPE-", "aL'0>8HExlmvR4gPE-");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "aL'0>8HExlmvR4gPE-", (CharSequence) string0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = 2023;
      String string1 = StringUtils.substringAfterLast("aL'0>8HExlmvR4gPE-", 2023);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "{}";
      String string3 = StringUtils.abbreviate(string0, 585);
      assertNotNull(string3);
      assertEquals("aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8...", string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.removeStartIgnoreCase("aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8...", "{}");
      assertNotNull(string4);
      assertEquals("aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8HExlmvR4gPE-aL'0>8...", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = "3\"=9mMz{8+p8ghW!";
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("", "3\"=9mMz{8+p8ghW!");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed counted closure near index 10
         // 3\"=9mMz{8+p8ghW!
         //           ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      String string0 = StringUtils.swapCase("2");
      assertNotNull(string0);
      assertEquals("2", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "2", (CharSequence) "2");
      assertTrue(boolean0);
      
      String string1 = StringUtils.rotate("2", 1806);
      assertNotNull(string1);
      assertEquals("2", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "2", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringBefore("The Array must not be null", 5);
      assertNotNull(string0);
      assertEquals("The Array must not be null", string0);
      
      boolean boolean1 = StringUtils.isMixedCase("The Array must not be null");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.stripToNull("M8Q{vA<[+)mtwg4E");
      assertNotNull(string1);
      assertEquals("M8Q{vA<[+)mtwg4E", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.strip((String) null, "108A0A0A-1118A64A-2212");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "", 235);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("108A0A0A-1118A64A-2212", "", stringArray0);
      assertNotNull(string2);
      assertEquals("108A0A0A-1118A64A-2212", string2);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.substringBetween((String) null, (String) null, "maxWith cannot be negative");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isMixedCase("108A0A0A-1118A64A-2212");
      assertFalse(boolean0);
      
      String string4 = StringUtils.defaultString("comparator", "h annot be negative");
      assertNotNull(string4);
      assertEquals("comparator", string4);
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.overlay((String) null, "B3erwgW#I", 235, 235);
      assertNull(string5);
      
      boolean boolean1 = StringUtils.endsWithAny("comparator", stringArray0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.defaultString("\n", "comparator");
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.overlay("\n", "\n", 13, 13);
      assertNotNull(string2);
      assertEquals("\n\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.rotate("B3erwgW#I", 13);
      assertNotNull(string3);
      assertEquals("gW#IB3erw", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.right("H:Wb_hfN^Zfu<q0]", 116);
      assertNotNull(string4);
      assertEquals("H:Wb_hfN^Zfu<q0]", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("JmUyw...Vz#u", "XF:  K:");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, '@', (-363), 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -363
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.center("C>Xay3hkw)rc", 101, "");
      assertNotNull(string1);
      assertEquals("                                            C>Xay3hkw)rc                                             ", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "g|]", (CharSequence[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      String string0 = StringUtils.left("s37T5zG:y\"Z/dRij4.", 11);
      assertNotNull(string0);
      assertEquals("s37T5zG:y\"Z", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "s37T5zG:y\"Z", (String) null);
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("s37T5zG:y\"Z", "s37T5zG:y\"Z");
      assertEquals(1.0, double0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[2] = 'L';
      charArray0[3] = '}';
      charArray0[4] = 'V';
      charArray0[5] = 'w';
      charArray0[6] = '=';
      charArray0[7] = ',';
      int int0 = StringUtils.indexOfAny((CharSequence) "s37T5zG:y\"Z/dRij4.", charArray0);
      assertArrayEquals(new char[] {'x', '\u0000', 'L', '}', 'V', 'w', '=', ','}, charArray0);
      assertEquals((-1), int0);
      assertEquals(8, charArray0.length);
      
      boolean boolean1 = StringUtils.isNumericSpace("s37T5zG:y\"Z");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.reverse((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      String string0 = StringUtils.center("F<?xB3erwgW#I", 2626);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("F<?xB3erwgW#I");
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad("', has a length less than 2", (-2535), "");
      assertNotNull(string1);
      assertEquals("', has a length less than 2", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((char[]) null, 'j', 1525, (-2535));
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " is not in the range '0' - '9'", (CharSequence) " is not in the range '0' - '9'");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isNotBlank(" is not in the range '0' - '9'");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string0 = StringUtils.rightPad("\n", 0, "\rb\"fVn7+f#`2^!r^)Y");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean2 = StringUtils.containsWhitespace("\rb\"fVn7+f#`2^!r^)Y");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2313.8841692788);
      String string0 = "vC;F]";
      String string1 = StringUtils.upperCase("vC;F]");
      assertNotNull(string1);
      assertEquals("VC;F]", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "";
      String string3 = StringUtils.replaceOnce("VC;F]", "VC;F]", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = "Cannot store ";
      String string5 = StringUtils.substringBeforeLast("vC;F]", "Cannot store ");
      assertNotNull(string5);
      assertEquals("vC;F]", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "VC;F]", (CharSequence) "vC;F]");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 624, (-2430));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null, 195);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = null;
      stringArray0[3] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "[[");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)115;
      String string0 = StringUtils.join(byteArray0, 'Q');
      assertArrayEquals(new byte[] {(byte)109, (byte)48, (byte)115}, byteArray0);
      assertNotNull(string0);
      assertEquals("109Q48Q115", string0);
      assertEquals(3, byteArray0.length);
      
      String string1 = StringUtils.substring((String) null, Integer.MAX_VALUE);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.split("9!P", 'Q');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.upperCase("C@jFcWYx@");
      assertNotNull(string2);
      assertEquals("C@JFCWYX@", string2);
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "C@jFcWYx@", (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\n", charArray0);
      assertArrayEquals(new char[] {'M'}, charArray0);
      assertFalse(boolean1);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.overlay((String) null, " in an array of ", 474, 474);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.defaultString((String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.overlay((String) null, (String) null, 1507, 1333);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      String string0 = StringUtils.replace("'$", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("'$", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "'$", "'$");
      assertEquals(0, int0);
      
      String string1 = StringUtils.repeat('O', 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.unwrap("'$", "");
      assertNotNull(string2);
      assertEquals("'$", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "'$";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "'$";
      String string3 = StringUtils.appendIfMissing("TN!8IcQZ*iN2yT", "TN!8IcQZ*iN2yT", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("TN!8IcQZ*iN2yT", string3);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.remove("jMI:r", "");
      assertNotNull(string4);
      assertEquals("jMI:r", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.capitalize((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.replaceEach("1-<znAQ(vF=G.&}Qnx$", (String[]) null, (String[]) null);
      assertNotNull(string6);
      assertEquals("1-<znAQ(vF=G.&}Qnx$", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      
      String string7 = StringUtils.abbreviate("TN!8IcQZ*iN2yT", "", 282, 0);
      assertNotNull(string7);
      assertEquals("TN!8IcQZ*iN2yT", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 108;
      intArray0[1] = 0;
      intArray0[2] = (-1324);
      intArray0[3] = (-1118);
      intArray0[4] = 64;
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.getDigits("ts^]?m");
      assertNotNull(string1);
      assertEquals("", string1);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertFalse(linkedList1.contains(locale0));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      assertFalse(linkedList1.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(linkedList1.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.equals((Object)list0));
      
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertFalse(linkedList1.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(list2.contains(locale0));
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      
      String string2 = StringUtils.lowerCase("", locale0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      String string0 = StringUtils.truncate("<G52%>=\"rhh|&GkAD2p", 728, 32);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((Object[]) null, "<G52%>=\"rhh|&GkAD2p");
      assertNull(string1);
      
      String string2 = StringUtils.left("Locale must not be null", 2);
      assertNotNull(string2);
      assertEquals("Lo", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.toRootUpperCase("-8");
      assertNotNull(string3);
      assertEquals("-8", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-8";
      stringArray0[1] = "Lo";
      stringArray0[2] = null;
      stringArray0[3] = "-8";
      stringArray0[4] = "Locale must not be null";
      stringArray0[5] = "<G52%>=\"rhh|&GkAD2p";
      stringArray0[6] = "Locale must not be null";
      stringArray0[7] = "Lo";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "-{RV_kn7cf");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean1);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-{RV_kn7cf";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Object varargs must not be null");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      String string0 = StringUtils.center("F<?xB3erwgW#I", 2626);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("H5eyaHr", "");
      assertNotNull(string1);
      assertEquals("H5eyaHr", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "H5eyaHr", (CharSequence) "H5eyaHr");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "H5eyaHr";
      charSequenceArray0[1] = (CharSequence) string0;
      boolean boolean1 = StringUtils.containsAny((CharSequence) "F<?xB3erwgW#I", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.center(string0, 10, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "F<?xB3erwgW#I", charSequenceArray0);
      assertFalse(boolean2);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.equalsAnyIgnoreCase(charSequenceArray0[0], charSequenceArray0);
      assertTrue(boolean3);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertNull(charSequence0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, "", 2901, 40);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 0);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.difference((String) null, "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 0, 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.lowerCase("\n");
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.compareIgnoreCase("4MDE`f>Y", "M> Ye{t)");
      assertEquals((-57), int0);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = null;
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string0 = StringUtils.abbreviateMiddle("^|!Rn^2?AH>W", "^|!Rn^2?AH>W", 316);
      assertNotNull(string0);
      assertEquals("^|!Rn^2?AH>W", string0);
      
      int int0 = StringUtils.compareIgnoreCase("M$x7_ ao*T&5nR,!C ", "\"JtcO1&l']*O7", false);
      assertEquals(93, int0);
      
      String string1 = StringUtils.replaceFirst("_Fxh `ug", "M$x7_ ao*T&5nR,!C ", "_Fxh `ug");
      assertNotNull(string1);
      assertEquals("_Fxh `ug", string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("_Fxh `ug", charSequenceArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      String string0 = StringUtils.mid("Ii", 3500, 3500);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripAccents("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.toRootUpperCase("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.chop("Ii");
      assertNotNull(string3);
      assertEquals("I", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      String string0 = StringUtils.substringAfter("object", "object");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfter("n1WJ3/gDC", "...");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1812.977651236);
      String string0 = StringUtils.upperCase("vC;F]");
      assertNotNull(string0);
      assertEquals("VC;F]", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("VC;F]");
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad("VC;F]", 1525, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((char[]) null, 'j', 197, 1525);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "]4^g`?OZ<78", "]4^g`?OZ<78");
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((char[]) null, 'r', (-19), Integer.MAX_VALUE);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "]4^g`?OZ<78");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-711));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center(" }D?i;QL&xp0#k", 256);
      assertNotNull(string1);
      assertEquals("                                                                                                                          }D?i;QL&xp0#k                                                                                                                         ", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.wrapIfMissing("", 'H');
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("d=a.v>mW", "b!Qx+H~F+$", false);
      assertEquals(29, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "b!Qx+H~F+$";
      charSequenceArray0[2] = (CharSequence) "b!Qx+H~F+$";
      charSequenceArray0[3] = (CharSequence) "b!Qx+H~F+$";
      charSequenceArray0[4] = (CharSequence) "b!Qx+H~F+$";
      int int1 = StringUtils.indexOfAny((CharSequence) "d=a.v>mW", charSequenceArray0);
      assertEquals((-1), int1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isAlpha(charSequenceArray0[2]);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string0 = StringUtils.replacePattern("d=a.v>mW", "", "ifi");
      assertNotNull(string0);
      assertEquals("ifiifidifi=ifiaifi.ifivifi>ifimifiWifi", string0);
      
      String string1 = StringUtils.abbreviate("N-`)", (-784), 29);
      assertNotNull(string1);
      assertEquals("N-`)", string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = StringUtils.getBytes("b!Qx+H~F+$", (Charset) null);
      assertArrayEquals(new byte[] {(byte)98, (byte)33, (byte)81, (byte)120, (byte)43, (byte)72, (byte)126, (byte)70, (byte)43, (byte)36}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(10, byteArray0.length);
      
      String string2 = StringUtils.reverseDelimited("RV[*", '(');
      assertNotNull(string2);
      assertEquals("RV[*", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.trimToEmpty("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.removeEnd("N-`)", "Kj8(fJ+1gYw%0p({Rsl");
      assertNotNull(string4);
      assertEquals("N-`)", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "N-`)", charSequenceArray0[3], 0);
      assertEquals((-1), int2);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean1 = StringUtils.isEmpty("N-`)");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.strip("org.apache.commons.lang3.ObjectUtils");
      assertNotNull(string5);
      assertEquals("org.apache.commons.lang3.ObjectUtils", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.wrapIfMissing("", 'T');
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      String string0 = StringUtils.removePattern(" ", " ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", "x/[S<MRv~cI=ez{", (-814));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Mn)>kTF;W4z:", "", 0);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceIgnoreCase("lujV4;H+mR$]c", "x/[S<MRv~cI=ez{", "H5eyaHr");
      assertNotNull(string1);
      assertEquals("lujV4;H+mR$]c", string1);
      assertFalse(string1.equals((Object)string0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)848;
      shortArray0[2] = (short)98;
      String string2 = StringUtils.join(shortArray0, 'w', 76, (-198));
      assertArrayEquals(new short[] {(short)0, (short)848, (short)98}, shortArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(3, shortArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      String string0 = StringUtils.repeat("aL'0>8HExlmvR4gPE-", 585);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("aL'0>8HExlmvR4gPE-", string0, (-1566));
      assertEquals((-1), int0);
      
      String string1 = "Search and Replace array lengths don't match: ";
      String string2 = StringUtils.replace("N-`)", "Search and Replace array lengths don't match: ", "aL'0>8HExlmvR4gPE-", (-1));
      assertNotNull(string2);
      assertEquals("N-`)", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("oV'KK!<d", "bYT.TerKjHv2a s~g", (-1566));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 19
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int[] intArray0 = StringUtils.toCodePoints(", '");
      assertArrayEquals(new int[] {44, 32, 39}, intArray0);
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      
      String string1 = StringUtils.abbreviate(" ", "Minimum abbreviation width is %d", 96);
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      char char0 = '7';
      String string0 = StringUtils.join(iterator0, '7');
      assertFalse(linkedList0.contains('7'));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.wrap("", '7');
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("", 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.unwrap("_Fxh `ug", '7');
      assertNotNull(string3);
      assertEquals("_Fxh `ug", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = linkedList0.removeLastOccurrence("");
      assertFalse(linkedList0.contains(""));
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "_Fxh `ug";
      stringArray0[3] = "maxWith cannot be negative";
      stringArray0[4] = "";
      stringArray0[5] = "_Fxh `ug";
      String string4 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(6, stringArray0.length);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      
      String string5 = StringUtils.difference("org.apache.commons.lang3.exception.CloneFailedException", "\n");
      assertNotNull(string5);
      assertEquals("\n", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("m_>=A6=Pnnv(V", "_Fxh `ug", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("offset cannot be negative");
      assertFalse(boolean0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      String string0 = StringUtils.join((List<?>) stack0, "q<wn!3B", 1471, 1471);
      assertFalse(stack0.contains(1471));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 322;
      intArray0[2] = (-589);
      String string0 = StringUtils.stripStart("+rQ8Z", "+rQ8Z");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("+rQ8Z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      String string0 = StringUtils.unwrap(" vs ", "7-6k<");
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "7-6k<";
      charSequenceArray0[2] = (CharSequence) " vs ";
      charSequenceArray0[3] = (CharSequence) " vs ";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '^';
      longArray0[1] = (long) '^';
      longArray0[2] = 1L;
      longArray0[3] = (long) 10;
      longArray0[4] = (long) (-1611);
      longArray0[5] = 1541L;
      String string1 = StringUtils.join(longArray0, '^', 13, 10);
      assertArrayEquals(new long[] {94L, 94L, 1L, 10L, (-1611L), 1541L}, longArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(6, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isBlank(" vs ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      int int0 = StringUtils.getFuzzyDistance("", charSequenceArray0[2], locale0);
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Threshold must not be negative", "$]~{)rS|vBIU(l/,k><");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      String string1 = StringUtils.repeat("f:u|1L]_T)r&Vuy(", (-145));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("f:u|1L]_T)r&Vuy(", "Threshold must not be negative");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Threshold must not be negative";
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "f:u|1L]_T)r&Vuy(";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("K_]l55 &jC&", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 7 vs 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      String string0 = StringUtils.left("s37T5zG:y\"Z/dRij4.", 11);
      assertNotNull(string0);
      assertEquals("s37T5zG:y\"Z", string0);
      
      String string1 = null;
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "s37T5zG:y\"Z", (String) null);
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("s37T5zG:y\"Z", "s37T5zG:y\"Z");
      assertEquals(1.0, double0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      String[] stringArray0 = new String[2];
      stringArray0[0] = "s37T5zG:y\"Z";
      stringArray0[1] = "3";
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = "`|6!{I";
      stringArray1[0] = "`|6!{I";
      stringArray1[1] = "s37T5zG:y\"Z/dRij4.";
      stringArray1[2] = "3";
      stringArray1[3] = null;
      stringArray1[4] = "3";
      stringArray1[5] = "lC";
      String string3 = "](}1p#KBoRb1(ZT";
      stringArray1[6] = "](}1p#KBoRb1(ZT";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("VIKQ", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 2 vs 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "]^g`?OZ|<hS78";
      stringArray0[3] = "]^g`?OZ|<hS78";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(4, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "]^g`?OZ|<hS78", (CharSequence) "]^g`?OZ|<hS78");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNotBlank("]^g`?OZ|<hS78");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.offerFirst("', has a length less than 2");
      assertTrue(linkedList0.contains("', has a length less than 2"));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isNotBlank(stringArray0[0]);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(1229);
      assertNotNull(integer0);
      assertEquals(1229, (int)integer0);
      
      boolean boolean0 = linkedList0.add((Object) integer0);
      assertTrue(linkedList0.contains(1229));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Object object0 = linkedList0.pollFirst();
      assertFalse(linkedList0.contains(1229));
      assertNotNull(object0);
      assertEquals(1229, object0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, '7');
      assertFalse(linkedList0.contains(1229));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean1 = StringUtils.isMixedCase("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "yJevC78n";
      stringArray0[2] = "yJevC78n";
      String string1 = StringUtils.replaceEach("yJevC78n", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals("yJevC78n", string1);
      assertEquals(3, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.difference("GslSC=)K7|*TTFD0", "_;y/.[]t[QKFD o");
      assertNotNull(string2);
      assertEquals("_;y/.[]t[QKFD o", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 108;
      intArray0[1] = 0;
      intArray0[2] = (-1324);
      intArray0[3] = (-1118);
      intArray0[4] = 64;
      intArray0[5] = (-2212);
      String string0 = StringUtils.join(intArray0, 'A');
      assertArrayEquals(new int[] {108, 0, (-1324), (-1118), 64, (-2212)}, intArray0);
      assertNotNull(string0);
      assertEquals("108A0A-1324A-1118A64A-2212", string0);
      assertEquals(6, intArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) null, supplier0);
      assertNull(charSequence0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'A';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'L', 'A'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = StringUtils.getIfBlank("", supplier0);
      assertNull(string0);
      
      String string1 = StringUtils.chomp("|iN_.4'WKb", (String) null);
      assertNotNull(string1);
      assertEquals("|iN_.4'WKb", string1);
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "H:Wb_hfN^Zfu<q0]a yu3k0b");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("]fqBnu<j9%>ej9mCg", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.left((String) null, (-666));
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isBlank("H:Wb_hfN^Zfu<q0]a yu3k0b");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
      
      String string0 = StringUtils.deleteWhitespace(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertNotNull(string0);
      assertEquals("yu3k0bH:Wb_hfN^Zfu<q0]a", string0);
      
      String string1 = StringUtils.substringBefore(" yu3k0bH:Wb_hfN^Zfu<q0]a", 2678);
      assertNotNull(string1);
      assertEquals(" yu3k0bH:Wb_hfN^Zfu<q0]a", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      String string0 = StringUtils.replaceChars("s37T5zG:y\"Z/dRij4.", "s37T5zG:y\"Z/dRij4.", "s37T5zG:y\"Z/dRij4.");
      assertNotNull(string0);
      assertEquals("s37T5zG:y\"Z/dRij4.", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "s37T5zG:y\"Z/dRij4.", (String) null);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(11);
      assertNotNull(integer0);
      assertEquals(11, (int)integer0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Supplied value must be a valid byte literal between -32768 and 32767: [", (String) null, 11);
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      String string1 = "\\u";
      String string2 = StringUtils.rightPad(string1, 11, 'e');
      assertNotNull(string2);
      assertEquals("\\ueeeeeeeee", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.substringsBetween("\uEEEEeeeee", "object", (String) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "]^g`?OZ|<hS78";
      stringArray0[1] = "]^g`?OZ|<hS78";
      String string0 = StringUtils.replaceChars("Minimum abbreviation width with offset is %d", "]^g`?OZ|<hS78", "]^g`?OZ|<hS78");
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("Minimum abbreviation width with offset is %d");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 108;
      intArray0[1] = 0;
      intArray0[2] = (-1324);
      intArray0[4] = 64;
      intArray0[5] = (-2212);
      String string0 = StringUtils.join(intArray0, 'A');
      assertArrayEquals(new int[] {108, 0, (-1324), 0, 64, (-2212)}, intArray0);
      assertNotNull(string0);
      assertEquals("108A0A-1324A0A64A-2212", string0);
      assertEquals(6, intArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("108A0A-1324A0A64A-2212", "&_n+f.48q1C?|w#^)B", 64);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.deleteWhitespace("&_n+f.48q1C?|w#^)B");
      assertNotNull(string1);
      assertEquals("&_n+f.48q1C?|w#^)B", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToNull("108A0A-1324A0A64A-2212");
      assertNotNull(string2);
      assertEquals("108A0A-1324A0A64A-2212", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.trim("&_n+f.48q1C?|w#^)B");
      assertNotNull(string3);
      assertEquals("&_n+f.48q1C?|w#^)B", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.ordinalIndexOf("&_n+f.48q1C?|w#^)B", "&_n+f.48q1C?|w#^)B", 108);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.getDigits("108A0A-1324A0A64A-2212");
      assertNotNull(string4);
      assertEquals("108013240642212", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      int int1 = StringUtils.indexOf((CharSequence) "&_n+f.48q1C?|w#^)B", (-2212));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.center("&_n+f.48q1C?|w#^)B", 0, "");
      assertNotNull(string5);
      assertEquals("&_n+f.48q1C?|w#^)B", string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.deleteWhitespace("");
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.leftPad("", (-2212), 'A');
      assertNotNull(string7);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      
      String string8 = StringUtils.join((Object[]) null, 'A');
      assertNull(string8);
      
      String string9 = StringUtils.remove("", (String) null);
      assertNotNull(string9);
      assertEquals("", string9);
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      
      String string10 = StringUtils.capitalize("r'=,XU$Ez,o;NW'}C@7");
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string11 = StringUtils.replaceEach("qD4j*WqRG9", stringArray1, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string11);
      assertEquals("qD4j*WqRG9", string11);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string6));
      
      String string12 = StringUtils.unwrap((String) null, 'F');
      assertNull(string12);
      
      String string13 = StringUtils.getIfEmpty("H5eyaHrS+m`jMI:r", (Supplier<String>) null);
      assertNotNull(string13);
      assertEquals("H5eyaHrS+m`jMI:r", string13);
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string7));
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 108;
      intArray0[1] = 0;
      intArray0[2] = (-1324);
      intArray0[4] = 64;
      intArray0[5] = (-2212);
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.deleteWhitespace("&_n+f.48q1C?|w#^)B");
      assertNotNull(string0);
      assertEquals("&_n+f.48q1C?|w#^)B", string0);
      
      String string1 = StringUtils.trim("&_n+f.48q1C?|w#^)B");
      assertNotNull(string1);
      assertEquals("&_n+f.48q1C?|w#^)B", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.ordinalIndexOf("&_n+f.48q1C?|w#^)B", "&_n+f.48q1C?|w#^)B", 108);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "&_n+f.48q1C?|w#^)B", (-2212));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.center("&_n+f.48q1C?|w#^)B", 0, "");
      assertNotNull(string2);
      assertEquals("&_n+f.48q1C?|w#^)B", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.deleteWhitespace("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.remove("", (String) null);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = StringUtils.capitalize("r'=,XU$Ez,o;NW'}C@7");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      String[] stringArray0 = new String[4];
      String string6 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertNull(string6);
      assertEquals(4, stringArray0.length);
      
      String string7 = StringUtils.getIfEmpty("H5eyaHrS+m`jMI:r", (Supplier<String>) null);
      assertNotNull(string7);
      assertEquals("H5eyaHrS+m`jMI:r", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 108;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 6, 6);
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      
      String[] stringArray1 = Locale.getISOLanguages();
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(188, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains(""));
      assertNotNull(set0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      String string1 = locale0.toLanguageTag();
      assertNotNull(string1);
      assertEquals("de-DE", string1);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "de-DE", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Kj8(fJ+1gYw%0p({Rsl";
      stringArray0[1] = "'_[x5 {|V,#n2L[GC";
      stringArray0[2] = "...";
      stringArray0[3] = "&*ed(}$k,=V";
      stringArray0[4] = "<\"N,0";
      stringArray0[5] = " ";
      stringArray0[6] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string0);
      assertEquals("Kj8(fJ+1gYw%0p({Rsl", string0);
      assertEquals(7, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", 3322, 3322);
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("&*ed(}$k,=V", "Kj8(fJ+1gYw%0p({Rsl");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = locale0.toLanguageTag();
      assertNotNull(string1);
      assertEquals("de-DE", string1);
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.getFuzzyDistance(")JEbGgqcKXWN<8(", "Kj8(fJ+1gYw%0p({Rsl", locale0);
      assertEquals(1, int1);
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("H5eyaHr", (String) null, "Kj8(fJ+1gYw%0p({Rsl");
      assertNotNull(string2);
      assertEquals("H5eyaHr", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      String string0 = StringUtils.remove("M$x7_ ao*T&5nR,!C ", '*');
      assertNotNull(string0);
      assertEquals("M$x7_ aoT&5nR,!C ", string0);
      
      String string1 = StringUtils.upperCase(" yu3k0b");
      assertNotNull(string1);
      assertEquals(" YU3K0B", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.upperCase("Cannot clone Cloneable type ");
      assertNotNull(string2);
      assertEquals("CANNOT CLONE CLONEABLE TYPE ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBetween("Cannot clone Cloneable type ", "maxWith cannot be negative", " yu3k0b");
      assertNull(string3);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, '7');
      assertFalse(linkedList0.contains('7'));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.wrap("", '7');
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      linkedList0.push(integer0);
      assertTrue(linkedList0.contains(0));
      assertFalse(linkedList0.contains('7'));
      assertEquals(1, linkedList0.size());
      assertTrue(integer0.equals((Object)int0));
      
      String string2 = StringUtils.substringBefore("", 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.unwrap("_Fxh `ug", '7');
      assertNotNull(string3);
      assertEquals("_Fxh `ug", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "_Fxh `ug";
      stringArray0[3] = "maxWith cannot be negative";
      stringArray0[4] = "";
      stringArray0[5] = "_Fxh `ug";
      String string4 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(6, stringArray0.length);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("DS9fI]\"W", "", stringArray0);
      assertNotNull(string5);
      assertEquals("DS9fI]\"W", string5);
      assertEquals(6, stringArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.prependIfMissingIgnoreCase(" ", " ", stringArray0);
      assertNotNull(string6);
      assertEquals(" ", string6);
      assertEquals(6, stringArray0.length);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      
      String string7 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertNotNull(string7);
      assertEquals("", string7);
      assertEquals(6, stringArray0.length);
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      
      String[] stringArray1 = StringUtils.split("L+");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int1 = StringUtils.compareIgnoreCase("oPFIJ", "");
      assertEquals(6, int1);
      assertFalse(int1 == int0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "maxWith annot be ne";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string8 = StringUtils.join(objectArray0, "Minimum abbreviation width is %d", (-1380), (-1380));
      assertNotNull(string8);
      assertEquals("", string8);
      assertEquals(2, objectArray0.length);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals((-1), int2);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("\n", "\n", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("\n", "\n", charSequenceArray0);
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", (CharSequence) " ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "\n", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.center("g|]", 10, "Arguments cannot both be null");
      assertNotNull(string3);
      assertEquals("Argg|]Argu", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "\n", charSequenceArray0);
      assertFalse(boolean2);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      String string0 = StringUtils.wrap("P", 'J');
      assertNotNull(string0);
      assertEquals("JPJ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string1 = StringUtils.join((byte[]) null, 'J');
      assertNull(string1);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "F;R!y1yM^#R8y1a";
      charSequenceArray0[2] = (CharSequence) "F;R!y1yM^#R8y1a";
      charSequenceArray0[3] = (CharSequence) "P";
      charSequenceArray0[4] = (CharSequence) "P";
      charSequenceArray0[5] = (CharSequence) "P";
      charSequenceArray0[6] = (CharSequence) "JPJ";
      charSequenceArray0[7] = (CharSequence) "F;R!y1yM^#R8y1a";
      charSequenceArray0[8] = (CharSequence) "JPJ";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.equals(charSequenceArray0[8], charSequenceArray0[2]);
      assertFalse(boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.swapCase("Ov8}@sSp%/};L");
      assertNotNull(string2);
      assertEquals("oV8}@SsP%/};l", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.reverse("Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertNotNull(string3);
      assertEquals("[ :76723 dna 86723- neewteb laretil etyb dilav a eb tsum eulav deilppuS", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "N-`)Kj8(fJ+1gYw%0p({Rsl", (CharSequence) "F;R!y1yM^#R8y1a", 637);
      assertEquals(22, int0);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("P");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = StringUtils.repeat('~', 637);
      assertNotNull(string4);
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.wrap("N-`)Kj8(fJ+1gYw%0p({Rsl", '?');
      assertNotNull(string5);
      assertEquals("?N-`)Kj8(fJ+1gYw%0p({Rsl?", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      int int1 = StringUtils.indexOf((CharSequence) " has no clone method", (CharSequence) "[ :76723 dna 86723- neewteb laretil etyb dilav a eb tsum eulav deilppuS");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)109;
      byte byte0 = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)115;
      char char0 = 'Q';
      String string0 = StringUtils.join(byteArray0, 'Q');
      assertArrayEquals(new byte[] {(byte)109, (byte)48, (byte)115}, byteArray0);
      assertNotNull(string0);
      assertEquals("109Q48Q115", string0);
      assertEquals(3, byteArray0.length);
      
      String string1 = null;
      String string2 = StringUtils.substring((String) null, Integer.MAX_VALUE);
      assertNull(string2);
      
      String string3 = "9!P";
      String[] stringArray0 = StringUtils.split("9!P", 'Q');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      char char1 = 'd';
      String string4 = StringUtils.unwrap("9!P", 'd');
      assertNotNull(string4);
      assertEquals("9!P", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("9!P", (byte)48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=48.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.isNumeric("\n");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "8u!_Jg", false);
      assertEquals(1, int0);
      
      String string1 = StringUtils.trimToEmpty("Object varargs must not be null");
      assertNotNull(string1);
      assertEquals("Object varargs must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring((String) null, (-1056));
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      String string0 = StringUtils.removeAll("\n", "\n");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrapIfMissing("", "\n");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string2);
      assertEquals(2, stringArray0.length);
      
      String string3 = StringUtils.join((Object[]) stringArray0, "yrEw);S9{Y^0AW*Q");
      assertNotNull(string3);
      assertEquals("yrEw);S9{Y^0AW*Q", string3);
      assertEquals(2, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      byte[] byteArray0 = new byte[0];
      String string4 = ")y";
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, ")y");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // )y
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-3948L);
      longArray0[1] = 1541L;
      longArray0[2] = 1L;
      String string1 = StringUtils.strip("\n");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrapIfMissing("}F", 'T');
      assertNotNull(string2);
      assertEquals("T}FT", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      String string3 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'T', 'T'}, charArray0);
      assertNotNull(string3);
      assertEquals("TT", string3);
      assertEquals(2, charArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[0], charArray0);
      assertArrayEquals(new char[] {'T', 'T'}, charArray0);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[25];
      charSequenceArray0[0] = (CharSequence) "v";
      charSequenceArray0[1] = (CharSequence) "v";
      charSequenceArray0[2] = (CharSequence) "v";
      charSequenceArray0[3] = (CharSequence) "v";
      charSequenceArray0[4] = (CharSequence) "v";
      String string0 = StringUtils.substringBefore("Threshold must not be negative", "$]~{)rS|vBIU(l/,k><");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      charSequenceArray0[5] = (CharSequence) "Threshold must not be negative";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "v", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(25, charSequenceArray0.length);
      
      String string1 = StringUtils.chomp("Threshold must not be negative");
      assertNotNull(string1);
      assertEquals("Threshold must not be negative", string1);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      CharBuffer charBuffer0 = CharBuffer.wrap(charSequenceArray0[5]);
      assertNotNull(charBuffer0);
      assertEquals(25, charSequenceArray0.length);
      assertFalse(charBuffer0.isDirect());
      assertEquals(30, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(30, charBuffer0.remaining());
      assertEquals(30, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(30, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("Threshold must not be negative", charBuffer0.toString());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("v"));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.MAP_EXTENDED_RANGES, locale_FilteringMode0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("Threshold must not be negative");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.wrap(", Length: ", ')');
      assertNotNull(string2);
      assertEquals("), Length: )", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringBefore("Threshold must not be negative", 2);
      assertNotNull(string3);
      assertEquals("Threshold must not be negative", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.unwrap("Threshold must not be negative", '_');
      assertNotNull(string4);
      assertEquals("Threshold must not be negative", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      
      String string5 = StringUtils.join((boolean[]) null, ')', 1, 1);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      String string0 = StringUtils.substringAfterLast("pqZP-nS\"B`FVoad]v", 50);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.getDigits(" W2ViiA");
      assertNotNull(string1);
      assertEquals("2", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("", 160);
      assertNotNull(string2);
      assertEquals("                                                                                                                                                                ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.replaceOnceIgnoreCase("2", "9lLJ", "Strings must not be null");
      assertNotNull(string3);
      assertEquals("2", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.removePattern("Ujq`/:yhY%ZBW", " ");
      assertNotNull(string4);
      assertEquals("Ujq`/:yhY%ZBW", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      Locale locale1 = Locale.ITALIAN;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      
      String string5 = locale0.getDisplayScript(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.lowerCase("ib#P(al`Z^s4", locale0);
      assertNotSame(locale0, locale1);
      assertNotNull(string6);
      assertEquals("ib#p(al`z^s4", string6);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      String string7 = StringUtils.join(booleanArray0, 'd', 1442, (-2072));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertNotNull(string7);
      assertEquals("", string7);
      assertEquals(4, booleanArray0.length);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[0] = 'd';
      String string0 = StringUtils.normalizeSpace(" ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripAccents("org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToEmpty("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.getIfBlank("", (Supplier<String>) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = '=';
      String string0 = StringUtils.center("apxY~CL6T&{#F*cK|$]~{)rS|vBIU(l/,k><", 29, '!');
      assertNotNull(string0);
      assertEquals("apxY~CL6T&{#F*cK|$]~{)rS|vBIU(l/,k><", string0);
      
      String string1 = StringUtils.unwrap("1wXuy,!m(S", 'u');
      assertNotNull(string1);
      assertEquals("1wXuy,!m(S", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "1wXuy,!m(S", (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "apxY~CL6T&{#F*cK|$]~{)rS|vBIU(l/,k><", (CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.strip("|WJ|?=Cannot clone Cloneable type ");
      assertNotNull(string2);
      assertEquals("|WJ|?=Cannot clone Cloneable type", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("1wXuy,!m(S", "apxY~CL6T&{#F*cK|$]~{)rS|vBIU(l/,k><", (CharSequence[]) null);
      assertNotNull(string3);
      assertEquals("apxY~CL6T&{#F*cK|$]~{)rS|vBIU(l/,k><1wXuy,!m(S", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.rightPad((String) null, 29, "R?t^BgZ5");
      assertNull(string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.substringBeforeLast("apxY~CL6T&{#F*cK|$]~{)rS|vBIU(l/,k><", ", '");
      assertNotNull(string5);
      assertEquals("apxY~CL6T&{#F*cK|$]~{)rS|vBIU(l/,k><", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'd';
      intArray0[1] = (int) 'd';
      intArray0[2] = (int) 'd';
      intArray0[4] = (int) 'd';
      intArray0[5] = (int) 'd';
      intArray0[6] = (int) 'd';
      intArray0[7] = (int) 'd';
      String string0 = StringUtils.leftPad("+A8Xp)M_H&LRf]", 100, 'd');
      assertNotNull(string0);
      assertEquals("ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd+A8Xp)M_H&LRf]", string0);
      
      String string1 = StringUtils.getIfBlank("ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd+A8Xp)M_H&LRf]", (Supplier<String>) null);
      assertNotNull(string1);
      assertEquals("ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd+A8Xp)M_H&LRf]", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("wCMAi/X", "|iN_.4'WKb");
      assertNotNull(string2);
      assertEquals("wCMAi/X", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.unwrap("+A8Xp)M_H&LRf]", 'd');
      assertNotNull(string3);
      assertEquals("+A8Xp)M_H&LRf]", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[1] = 1541L;
      longArray0[2] = 17L;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "t[*iry;^6KKqQ|pPMX";
      stringArray0[1] = "\n";
      stringArray0[2] = "\n";
      String string1 = StringUtils.prependIfMissingIgnoreCase(":y\"Z/dRij4.", "t[*iry;^6KKqQ|pPMX", stringArray0);
      assertNotNull(string1);
      assertEquals("t[*iry;^6KKqQ|pPMX:y\"Z/dRij4.", string1);
      assertEquals(6, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceOnce(":y\"Z/dRij4.", "Search and Replace array lengths don't match: ", "...");
      assertNotNull(string2);
      assertEquals(":y\"Z/dRij4.", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = 'G';
      charArray0[2] = 'e';
      charArray0[3] = 'N';
      charArray0[4] = '&';
      charArray0[5] = 'x';
      charArray0[6] = '+';
      charArray0[7] = ':';
      charArray0[8] = 'L';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'3', 'G', 'e', 'N', '&', 'x', '+', ':', 'L'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(9, charArray0.length);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("3GeN&x+:L", charBuffer0.toString());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.limit());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.length());
      
      Supplier<CharBuffer> supplier0 = (Supplier<CharBuffer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharBuffer charBuffer1 = StringUtils.getIfBlank(charBuffer0, supplier0);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertArrayEquals(new char[] {'3', 'G', 'e', 'N', '&', 'x', '+', ':', 'L'}, charArray0);
      assertNotNull(charBuffer1);
      assertEquals(9, charArray0.length);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("3GeN&x+:L", charBuffer0.toString());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.limit());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.length());
      assertEquals(9, charBuffer1.length());
      assertEquals(9, charBuffer1.remaining());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertEquals(9, charBuffer1.limit());
      assertEquals("3GeN&x+:L", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(9, charBuffer1.capacity());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.arrayOffset());
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'d'}, charArray0);
      assertNotNull(string0);
      assertEquals("d", string0);
      assertEquals(1, charArray0.length);
      
      String string1 = StringUtils.abbreviate("d", 1541);
      assertNotNull(string1);
      assertEquals("d", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("d", "d");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{b>;w&ymP^T#/G|(~]R", 'f');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("...", "{b>;w&ymP^T#/G|(~]R", stringArray0);
      assertNotNull(string2);
      assertEquals("...{b>;w&ymP^T#/G|(~]R", string2);
      assertEquals(1, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.ordinalIndexOf("{b>;w&ymP^T#/G|(~]R", "{b>;w&ymP^T#/G|(~]R", 15);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      String string0 = StringUtils.center("F<?xB3erwgW#I", 2626);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("H5eyaHr", "S+m`jMI:r");
      assertNotNull(string1);
      assertEquals("H5eyaHr", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBeforeLast("H5eyaHr", "");
      assertNotNull(string2);
      assertEquals("H5eyaHr", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.replaceEach("H5eyaHr", stringArray0, stringArray0);
      assertNotNull(string3);
      assertEquals("H5eyaHr", string3);
      assertEquals(0, stringArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      String[] stringArray1 = StringUtils.split("H5eyaHrS+m`jMI:r");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.compareIgnoreCase("H5eyaHrS+m`jMI:r", "maxWith annot be ne");
      assertEquals((-5), int0);
      
      String string4 = StringUtils.join((Object[]) stringArray1, "s37T5zG:y\"Z", 2626, 2626);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals((-1), int1);
      assertEquals(0, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = null;
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string0 = StringUtils.abbreviateMiddle("^|!Rn^2?AH>W", "^|!Rn^2?AH>W", 316);
      assertNotNull(string0);
      assertEquals("^|!Rn^2?AH>W", string0);
      
      int int0 = StringUtils.compareIgnoreCase("M$x7_ ao*T&5nR,!C ", "\"JtcO1&l']*O7", false);
      assertEquals(93, int0);
      
      String string1 = StringUtils.wrap("z]F`3#lmj6XCt+9/o", "\"JtcO1&l']*O7");
      assertNotNull(string1);
      assertEquals("\"JtcO1&l']*O7z]F`3#lmj6XCt+9/o\"JtcO1&l']*O7", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOf((CharSequence) "^|!Rn^2?AH>W", 316, 31);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '=';
      boolean boolean1 = StringUtils.containsOnly(charSequenceArray0[0], charArray0);
      assertArrayEquals(new char[] {'\\', '\\', '\\', '='}, charArray0);
      assertFalse(boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(4, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("M$x7_ ao*T&5nR,!C ");
      assertNotNull(intArray0);
      assertEquals(19, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "-{RV_kn7cf");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean1);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-3948L);
      doubleArray0[1] = (double) (-3948L);
      String string1 = StringUtils.join(doubleArray0, '3', 0, 0);
      assertArrayEquals(new double[] {(-3948.0), (-3948.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(4, doubleArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "", 64, 64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 321;
      intArray0[2] = (-589);
      String string0 = StringUtils.repeat("Search and Replace array lengths don't match: ", 321);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) string0, (CharSequence) string0);
      assertNotNull(charSequence0);
      
      Integer integer0 = new Integer((-589));
      assertNotNull(integer0);
      assertEquals((-589), (int)integer0);
      
      boolean boolean0 = StringUtils.isEmpty("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceFirst("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", "H:Wb_hfN^Zfu<q0]a yu3k0b");
      assertNotNull(string1);
      assertEquals("H:Wb_hfN^Zfu<q0]a yu3k0b", string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-589);
      doubleArray0[3] = (-4496.155);
      char[] charArray0 = new char[2];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "H:Wb_hfN^Zfu<q0]a yu3k0b", charArray0);
      assertArrayEquals(new char[] {'M', 'M'}, charArray0);
      assertFalse(boolean1);
      assertEquals(2, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      StringUtils.toCodePoints(charSequence0);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'N';
      floatArray0[1] = (float) 'N';
      floatArray0[2] = (float) 'N';
      floatArray0[3] = (float) 'N';
      floatArray0[4] = (float) 'N';
      floatArray0[5] = (float) 'N';
      floatArray0[6] = (float) 'N';
      floatArray0[7] = (float) 'N';
      floatArray0[8] = (float) 'N';
      String string0 = StringUtils.join(floatArray0, 'N');
      assertArrayEquals(new float[] {78.0F, 78.0F, 78.0F, 78.0F, 78.0F, 78.0F, 78.0F, 78.0F, 78.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals("78.0N78.0N78.0N78.0N78.0N78.0N78.0N78.0N78.0", string0);
      assertEquals(9, floatArray0.length);
      
      boolean boolean0 = StringUtils.isBlank("78.0N78.0N78.0N78.0N78.0N78.0N78.0N78.0N78.0");
      assertFalse(boolean0);
      
      String string1 = StringUtils.center("\r", (-22));
      assertNotNull(string1);
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("N$(N_jxhOV>WA", (String) null);
      assertNotNull(string2);
      assertEquals("N$(N_jxhOV>WA", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.containsWhitespace("78.0N78.0N78.0N78.0N78.0N78.0N78.0N78.0N78.0");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isMixedCase("\r");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      Integer integer0 = new Integer((-1524));
      assertNotNull(integer0);
      assertEquals((-1524), (int)integer0);
      
      String string0 = StringUtils.substringBefore("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 0);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.center("", (-2535));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("*>za}0!2,.", "");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isMixedCase("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.removeStart("=gvoQ^n-k0*[+f", "");
      assertNotNull(string1);
      assertEquals("=gvoQ^n-k0*[+f", string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains(""));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = hashSet0.add("");
      assertFalse(hashSet0.contains("=gvoQ^n-k0*[+f"));
      assertTrue(hashSet0.contains(""));
      assertTrue(boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) hashSet0, locale_FilteringMode0);
      assertFalse(hashSet0.contains("=gvoQ^n-k0*[+f"));
      assertTrue(hashSet0.contains(""));
      assertFalse(list0.contains(""));
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string2 = StringUtils.substringBefore("G+Qs", 0);
      assertNotNull(string2);
      assertEquals("G+Qs", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "G+Qs", (CharSequence) "");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.swapCase("N-`)Kj8(fJ+1gYw%0p({Rsl");
      assertNotNull(string3);
      assertEquals("n-`)kJ8(Fj+1GyW%0P({rSL", string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.reverse("2OCS0s^!SW p=\"z");
      assertNotNull(string4);
      assertEquals("z\"=p WS!^s0SCO2", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "z\"=p WS!^s0SCO2", (CharSequence) "", 5);
      assertEquals((-1), int0);
      
      boolean boolean3 = StringUtils.isAlphanumericSpace("z\"=p WS!^s0SCO2");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string5 = StringUtils.repeat('4', 0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.wrap("S+m`jMI:r", '1');
      assertNotNull(string6);
      assertEquals("1S+m`jMI:r1", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      
      int int1 = StringUtils.indexOf((CharSequence) "Threshold must not be negative", (CharSequence) "n-`)kJ8(Fj+1GyW%0P({rSL");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 522L;
      longArray0[3] = 540L;
      String string0 = StringUtils.join(longArray0, '1');
      assertArrayEquals(new long[] {0L, 0L, 522L, 540L}, longArray0);
      assertNotNull(string0);
      assertEquals("01015221540", string0);
      assertEquals(4, longArray0.length);
      
      String string1 = StringUtils.capitalize("F<?xB3erwgW#I");
      assertNotNull(string1);
      assertEquals("F<?xB3erwgW#I", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "F<?xB3erwgW#I", (CharSequence) "F<?xB3erwgW#I");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.getDigits("01015221540");
      assertNotNull(string2);
      assertEquals("01015221540", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      
      String string3 = StringUtils.truncate("01015221540", 1);
      assertNotNull(string3);
      assertEquals("0", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: 0", 76, 76);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) ", Length: 0", 0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.replaceOnce("", "', has a length less than 2", "', has a length less than 2");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 76;
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 76;
      floatArray0[4] = (float) 76;
      boolean boolean2 = StringUtils.isBlank("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string2 = StringUtils.center("QJA}VFQ(54b,", 76);
      assertNotNull(string2);
      assertEquals("                                QJA}VFQ(54b,                                ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.truncate("', has a length less than 2", 0, 0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "QJA}VFQ(54b,";
      charSequenceArray0[3] = (CharSequence) "";
      String string4 = StringUtils.reverse("");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "                                QJA}VFQ(54b,                                ";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "', has a length less than 2";
      charSequenceArray0[8] = (CharSequence) ", Length: 0";
      boolean boolean3 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean3);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = 'e';
      charArray0[2] = 'x';
      charArray0[3] = '+';
      charArray0[4] = 'M';
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[7], charArray0);
      assertArrayEquals(new char[] {'!', 'e', 'x', '+', 'M'}, charArray0);
      assertEquals(0, int0);
      assertEquals(5, charArray0.length);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = '%';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "M$x7_ ao*T&5nR,!C ", charArray0);
      assertArrayEquals(new char[] {'M', 'M', 'M', 'M', '%'}, charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      
      String string0 = StringUtils.replace((String) null, "M$x7_ ao*T&5nR,!C ", "_", (-1584));
      assertNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "H7");
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "M$x7_ ao*T&5nR,!C ", (-3180));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      String string0 = StringUtils.substringBefore(":{dx d~e=", ":{dx d~e=");
      assertNotNull(string0);
      assertEquals("", string0);
      
      StringWriter stringWriter0 = new StringWriter(48);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      stringWriter0.write(48);
      assertEquals("0", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("0", stringWriter0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("0", stringBuffer0.toString());
      
      boolean boolean0 = StringUtils.containsWhitespace(stringBuffer0);
      assertFalse(boolean0);
      assertEquals("0", stringWriter0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("0", stringBuffer0.toString());
      
      boolean boolean1 = StringUtils.isMixedCase(":{dx d~e=");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.getDigits("p");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertNull(string2);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "p", (CharSequence) null, 4049);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      String string0 = StringUtils.remove("M$x7_ ao*T&5nR,!C ", '*');
      assertNotNull(string0);
      assertEquals("M$x7_ aoT&5nR,!C ", string0);
      
      String string1 = StringUtils.stripAccents(" yu3k0b");
      assertNotNull(string1);
      assertEquals(" yu3k0b", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trim("Cannot clone Cloneable type ");
      assertNotNull(string2);
      assertEquals("Cannot clone Cloneable type", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("<9", "maxWith annot be negative", 735);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("M$x7_ aoT&5nR,!C ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.leftPad("...", 23);
      assertNotNull(string3);
      assertEquals("                    ...", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " yu3k0b", (CharSequence) "...", 23);
      assertEquals(7, int0);
      
      String string4 = StringUtils.removeStartIgnoreCase("hbnN;2|-h+oe", "9oW-ke+r10.6TZB-Hg");
      assertNotNull(string4);
      assertEquals("hbnN;2|-h+oe", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      int[] intArray0 = StringUtils.toCodePoints("hbnN;2|-h+oe");
      assertNotNull(intArray0);
      assertEquals(12, intArray0.length);
      
      String string5 = StringUtils.replacePattern("`$Q6b\"eY=J", "108A0A0A-1118A64A-2212", "maxWith annot be negative");
      assertNotNull(string5);
      assertEquals("`$Q6b\"eY=J", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      String string0 = StringUtils.unwrap("=)", ")");
      assertNotNull(string0);
      assertEquals("=)", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("=)");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(3, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "=)", (CharSequence) "");
      assertEquals(2, int0);
      
      String string2 = StringUtils.leftPad("", 2);
      assertNotNull(string2);
      assertEquals("  ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "tmh Cx>^|O5P-$Cd", (CharSequence) "  ", 70);
      assertEquals(15, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("q<wn!3B");
      assertNotNull(string0);
      assertEquals("q<wn!3B", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "q<wn!3B";
      String string1 = StringUtils.join((Object[]) charSequenceArray0, "q<wn!3B", 8, 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Arguments cannot both be null";
      stringArray0[1] = "X+";
      stringArray0[2] = "k}1F/|j>U(NEr";
      stringArray0[3] = "q<wn!3B";
      stringArray0[4] = "q<wn!3B";
      stringArray0[5] = "Arguments cannot both be null";
      stringArray0[6] = "H5eyaHr";
      stringArray0[7] = "q<wn!3B";
      stringArray0[8] = "Arguments cannot both be null";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string2);
      assertEquals("Arguments cannot both be null", string2);
      assertEquals(9, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.leftPad("offset cannot be negative", 4352);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      String string0 = StringUtils.right("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      double double0 = new Integer(0);
      assertEquals(0, double0, 0.01);
      
      String string1 = StringUtils.removeStart("=gvoQ^n-k0*[+f", "");
      assertNotNull(string1);
      assertEquals("=gvoQ^n-k0*[+f", string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains(""));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) hashSet0, locale_FilteringMode0);
      assertFalse(hashSet0.contains(""));
      assertFalse(list0.contains(""));
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string2 = StringUtils.substringBefore("]WQY%s", 0);
      assertNotNull(string2);
      assertEquals("]WQY%s", string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "]WQY%s", (CharSequence) "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.swapCase("N-`)Kj8(fJ+1gYw%0p({Rsl");
      assertNotNull(string3);
      assertEquals("n-`)kJ8(Fj+1GyW%0P({rSL", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.reverse(" has no clone method");
      assertNotNull(string4);
      assertEquals("dohtem enolc on sah ", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "dohtem enolc on sah ", (CharSequence) "", 5);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("dohtem enolc on sah ");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string5 = StringUtils.repeat('4', 0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)charSequence0));
      assertTrue(string5.equals((Object)string0));
      
      String string6 = StringUtils.wrap("S+m`jMI:r", '1');
      assertNotNull(string6);
      assertEquals("1S+m`jMI:r1", string6);
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      
      int int1 = StringUtils.indexOf((CharSequence) "Threshold must not be negative", (CharSequence) "n-`)kJ8(Fj+1GyW%0P({rSL");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      String string0 = StringUtils.leftPad("Invalid locale format: ", 4352);
      assertNotNull(string0);
      
      String string1 = StringUtils.center((String) null, 4352);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Invalid locale format: ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.capitalize("Invalid locale format: ");
      assertNotNull(string2);
      assertEquals("Invalid locale format: ", string2);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '>');
      assertNull(string0);
      
      String string1 = StringUtils.swapCase((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "S:h$Sz_h7y\"ldXdpy<;", 100);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.join((Iterator<?>) null, "/DL>2Y=I_kUrpUvqT");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "b/n#:qW#";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "b/n#:qW#";
      charSequenceArray0[4] = (CharSequence) "S:h$Sz_h7y\"ldXdpy<;";
      charSequenceArray0[5] = (CharSequence) "/DL>2Y=I_kUrpUvqT";
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      String string1 = StringUtils.repeat("\n", 7);
      assertNotNull(string1);
      assertEquals("\n\n\n\n\n\n\n", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n");
      assertTrue(boolean0);
      
      String string2 = StringUtils.repeat('7', 3947);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.equals(charSequenceArray0[0], (CharSequence) string2);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "peCt% #=Y46Ev9%l-W", (-825), 2442);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -825
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.repeat("\n", 7);
      assertNotNull(string1);
      assertEquals("\n\n\n\n\n\n\n", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n");
      assertTrue(boolean0);
      
      String string2 = StringUtils.repeat('7', 7);
      assertNotNull(string2);
      assertEquals("7777777", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.split("\n\n\n\n\n\n\n", "Kj8(fJ+1gYw%0p({Rsl");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      float[] floatArray0 = new float[1];
      String string0 = StringUtils.join(floatArray0, 'S');
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals("0.0", string0);
      assertEquals(1, floatArray0.length);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[0];
      String string1 = StringUtils.join(booleanArray0, 'F');
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, booleanArray0.length);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Iterator<Object> iterator0 = hashSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "]^g`?OZ|<hS78";
      stringArray0[1] = "]^g`?OZ|<hS78";
      stringArray0[2] = "]^g`?OZ|<hS78";
      stringArray0[3] = "]^g`?OZ|<hS78";
      stringArray0[4] = "]^g`?OZ|<hS78";
      stringArray0[5] = "]^g`?OZ|<hS78";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("]^g`?OZ|<hS78", string0);
      assertEquals(6, stringArray0.length);
      
      String string1 = StringUtils.chop("]^g`?OZ|<hS78");
      assertNotNull(string1);
      assertEquals("]^g`?OZ|<hS7", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "]^g`?OZ|<hS78", (CharSequence) "]^g`?OZ|<hS78");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNotBlank("]^g`?OZ|<hS7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.stripStart("Z", "r+)HMdAw0{");
      assertNotNull(string0);
      assertEquals("Z", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "r+)HMdAw0{", (CharSequence) "Z");
      assertEquals(10, int0);
      
      boolean boolean0 = StringUtils.isNotBlank("Z");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Z";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int1);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "M$x7_ ao*T&5nR,!C ", (CharSequence) "M$x7_ ao*T&5nR,!C ");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNotBlank("M$x7_ ao*T&5nR,!C ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "F<?xB3erwgW#I";
      stringArray0[1] = "F<?xB3erwgW#I";
      stringArray0[2] = "";
      stringArray0[3] = "]^g`?OZ|<hS78";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(4, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNotBlank("F<?xB3erwgW#I");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      String string0 = StringUtils.swapCase("2");
      assertNotNull(string0);
      assertEquals("2", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "2", (CharSequence) "2");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "2";
      charSequenceArray0[1] = (CharSequence) "2";
      charSequenceArray0[2] = (CharSequence) "2";
      charSequenceArray0[3] = (CharSequence) "2";
      charSequenceArray0[4] = (CharSequence) "2";
      boolean boolean1 = StringUtils.endsWithAny("2", charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = null;
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("M$x7_ ao*T&5nR,!C ", "M$x7_ ao*T&5nR,!C ", false);
      assertEquals(0, int0);
      
      String string0 = StringUtils.wrap("z]F`3#lmj6XCt+9/o", "M$x7_ ao*T&5nR,!C ");
      assertNotNull(string0);
      assertEquals("M$x7_ ao*T&5nR,!C z]F`3#lmj6XCt+9/oM$x7_ ao*T&5nR,!C ", string0);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 22;
      intArray0[2] = (-589);
      String string0 = StringUtils.stripStart("+rQ8Z", "+rQ8Z");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultString((String) null, "comparator");
      assertNotNull(string1);
      assertEquals("comparator", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.overlay("", "comparator", (-589), 22);
      assertNotNull(string2);
      assertEquals("comparator", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.endsWithAny("comparator", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("{b>;w&ymP^T#/G|(~]R", "{b>;w&ymP^T#/G|(~]R");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.removeStart("{b>;w&ymP^T#/G|(~]R", "...");
      assertNotNull(string0);
      assertEquals("{b>;w&ymP^T#/G|(~]R", string0);
      
      String[] stringArray1 = StringUtils.substringsBetween("{b>;w&ymP^T#/G|(~]R", "{b>;w&ymP^T#/G|(~]R", "dU_3W");
      assertNull(stringArray1);
      
      String string1 = StringUtils.chop("{b>;w&ymP^T#/G|(~]R");
      assertNotNull(string1);
      assertEquals("{b>;w&ymP^T#/G|(~]", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "dU_3W", 2036, 2036);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.length("{b>;w&ymP^T#/G|(~]R");
      assertEquals(19, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
      
      String string0 = StringUtils.normalizeSpace("cy>0X4^");
      assertNotNull(string0);
      assertEquals("cy>0X4^", string0);
      
      String string1 = StringUtils.stripAccents("`$Q6b\"eY=J");
      assertNotNull(string1);
      assertEquals("`$Q6b\"eY=J", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.startsWithAny("org.apache.commons.lang3.Charsets", stringArray0);
      assertTrue(boolean1);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      String string2 = StringUtils.capitalize("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.rightPad("`$Q6b\"eY=J", 5138, 'g');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.right("473mP$\"KaS$)vh4x/7C", 16);
      assertNotNull(string4);
      assertEquals("mP$\"KaS$)vh4x/7C", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) " yu3k0bH:Wb_hfN^Zfu<q0]a", (CharSequence) "cy>0X4^");
      assertNotNull(charSequence0);
      assertEquals(" yu3k0bH:Wb_hfN^Zfu<q0]a", charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string4));
      
      double double0 = StringUtils.getJaroWinklerDistance("cy>0X4^", " yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertEquals(0.52, double0, 0.01);
      
      String string5 = StringUtils.overlay(string3, "{}", 16, (-1569));
      assertNotNull(string5);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 108;
      intArray0[1] = 0;
      intArray0[3] = (-1118);
      intArray0[4] = 64;
      intArray0[5] = (-2212);
      String string0 = StringUtils.join(intArray0, 'A');
      assertArrayEquals(new int[] {108, 0, 0, (-1118), 64, (-2212)}, intArray0);
      assertNotNull(string0);
      assertEquals("108A0A0A-1118A64A-2212", string0);
      assertEquals(6, intArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("108A0A0A-1118A64A-2212", "s37T5zG:y\"Z/dRij4.", 64);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.deleteWhitespace("s37T5zG:y\"Z/dRij4.");
      assertNotNull(string1);
      assertEquals("s37T5zG:y\"Z/dRij4.", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToNull("108A0A0A-1118A64A-2212");
      assertNotNull(string2);
      assertEquals("108A0A0A-1118A64A-2212", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.trim("s37T5zG:y\"Z/dRij4.");
      assertNotNull(string3);
      assertEquals("s37T5zG:y\"Z/dRij4.", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.ordinalIndexOf("s37T5zG:y\"Z/dRij4.", "s37T5zG:y\"Z/dRij4.", 108);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.getDigits("108A0A0A-1118A64A-2212");
      assertNotNull(string4);
      assertEquals("108001118642212", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      int int1 = StringUtils.indexOf((CharSequence) "s37T5zG:y\"Z/dRij4.", (-2212));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.center("s37T5zG:y\"Z/dRij4.", 0, "");
      assertNotNull(string5);
      assertEquals("s37T5zG:y\"Z/dRij4.", string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.deleteWhitespace("'");
      assertNotNull(string6);
      assertEquals("'", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      
      String string7 = StringUtils.unwrap("s37T5zG:y\"Z/dRij4.", "s37T5zG:y\"Z/dRij4.");
      assertNotNull(string7);
      assertEquals("s37T5zG:y\"Z/dRij4.", string7);
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      
      boolean boolean1 = StringUtils.isAllUpperCase("s37T5zG:y\"Z/dRij4.");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string8 = StringUtils.mid("s37T5zG:y\"Z/dRij4.", 108, 0);
      assertNotNull(string8);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isAsciiPrintable("s37T5zG:y\"Z/dRij4.");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string9 = StringUtils.center("108A0A0A-1118A64A-2212", (-1118), "s37T5zG:y\"Z/dRij4.");
      assertNotNull(string9);
      assertEquals("108A0A0A-1118A64A-2212", string9);
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      
      double double0 = StringUtils.getJaroWinklerDistance("s37T5zG:y\"Z/dRij4.", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      String string0 = StringUtils.removeStart("2yT", "TN!8IcQZ*iN");
      assertNotNull(string0);
      assertEquals("2yT", string0);
      
      String string1 = StringUtils.replaceChars("TN!8IcQZ*iN", "aN?/Tp.EPLFCU", "");
      assertNotNull(string1);
      assertEquals("!8IcQZ*i", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBetween(" vs ", "Mn^ dhe/Slqx:n");
      assertNull(string2);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1528, (-1035), 577, 13, 0).when(comparator0).compare(any() , any());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      assertFalse(treeSet0.contains("Mn^ dhe/Slqx:n"));
      assertNotNull(treeSet0);
      
      boolean boolean0 = treeSet0.add(" vs ");
      assertTrue(treeSet0.contains("Mn^ dhe/Slqx:n"));
      assertTrue(boolean0);
      
      boolean boolean1 = treeSet0.add("");
      assertTrue(treeSet0.contains("Mn^ dhe/Slqx:n"));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = treeSet0.add("nIAr");
      assertTrue(treeSet0.contains("Mn^ dhe/Slqx:n"));
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string3 = treeSet0.floor("2yT");
      assertTrue(treeSet0.contains("Mn^ dhe/Slqx:n"));
      assertNotNull(string3);
      assertEquals(" vs ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.join((Iterable<?>) treeSet0, ':');
      assertTrue(treeSet0.contains("Mn^ dhe/Slqx:n"));
      assertNotNull(string4);
      assertEquals(" vs ", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.replaceFirst(": vs :nIAr", "TN!8IcQZ*iN", "TN!8IcQZ*iN");
      assertNotNull(string5);
      assertEquals(": vs :nIAr", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.toRootUpperCase("");
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.join((short[]) null, ':', 50, 50);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      String string0 = StringUtils.trim("Cannot clone Cloneable type ");
      assertNotNull(string0);
      assertEquals("Cannot clone Cloneable type", string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string0));
      assertNotNull(treeSet0);
      
      treeSet0.clear();
      assertFalse(treeSet0.contains(string0));
      
      boolean boolean0 = treeSet0.add("M$x7_ ao*T&5nR,!C ");
      assertFalse(treeSet0.contains("Cannot clone Cloneable type "));
      assertTrue(treeSet0.contains("M$x7_ ao*T&5nR,!C "));
      assertTrue(boolean0);
      
      boolean boolean1 = treeSet0.add("Cannot clone Cloneable type");
      assertFalse(treeSet0.contains("Cannot clone Cloneable type "));
      assertTrue(treeSet0.contains("Cannot clone Cloneable type"));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.join((Iterable<?>) treeSet0, '1');
      assertFalse(treeSet0.contains("Cannot clone Cloneable type "));
      assertTrue(treeSet0.contains("Cannot clone Cloneable type"));
      assertNotNull(string1);
      assertEquals("Cannot clone Cloneable type1M$x7_ ao*T&5nR,!C ", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "M$x7_ ao*T&5nR,!C ", (CharSequence) "M$x7_ ao*T&5nR,!C ");
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isNotBlank("Cannot clone Cloneable type ");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("@oXvl<g+");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("@oXvl<g+", "@oXvl<g+", "");
      assertNull(stringArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1345.0;
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1541L;
      String string0 = StringUtils.truncate("Threshold must not be negative", 2160);
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      String string1 = StringUtils.wrapIfMissing("", "U.6BW)`'LMpKpMG.cp");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1136.62978);
      doubleArray0[2] = 0.7;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-4390.257454127689);
      doubleArray0[5] = 100.0;
      String string0 = StringUtils.join(doubleArray0, '<', (-1), (-1));
      assertArrayEquals(new double[] {0.0, (-1136.62978), 0.7, 1.0, (-4390.257454127689), 100.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.wrap("qxVG[@_Da9v", "");
      assertNotNull(string1);
      assertEquals("qxVG[@_Da9v", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "qxVG[@_Da9v", (CharSequence) "qxVG[@_Da9v");
      assertEquals(0, int0);
      
      String string2 = StringUtils.substringAfter("0i3+p'Yq", "");
      assertNotNull(string2);
      assertEquals("0i3+p'Yq", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: 0", 1120, 1120);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) ", Length: 0", 0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.replaceOnce("", "', has a length less than 2", "', has a length less than 2");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1120;
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 1120;
      floatArray0[4] = (float) 1120;
      boolean boolean2 = StringUtils.isBlank("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.center("QJA}VFQ(54b,", 1120);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.left("", (-22));
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "QJA}VFQ(54b,";
      charSequenceArray0[3] = (CharSequence) "";
      String string4 = StringUtils.reverse("");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) string2;
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "', has a length less than 2";
      charSequenceArray0[8] = (CharSequence) ", Length: 0";
      boolean boolean3 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean3);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = 'e';
      charArray0[2] = 'x';
      charArray0[3] = '+';
      charArray0[4] = 'M';
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[7], charArray0);
      assertArrayEquals(new char[] {'!', 'e', 'x', '+', 'M'}, charArray0);
      assertEquals(0, int0);
      assertEquals(5, charArray0.length);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", 1396, 1396);
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n", "\n");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = locale0.toLanguageTag();
      assertNotNull(string1);
      assertEquals("de-DE", string1);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertFalse(string1.equals((Object)string0));
      
      short[] shortArray0 = new short[0];
      String string2 = StringUtils.join(shortArray0, ':');
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, shortArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = StringUtils.getFuzzyDistance("", "", locale0);
      assertEquals(0, int1);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("\n", "$-pr(C;Zlc#S3!~>9", "ch");
      assertNotNull(string3);
      assertEquals("\n", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "!>");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "-{RV_kn7cf");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "-{RV_kn7cf", (CharSequence) "!>");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("!>");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("!>", "-{RV_kn7cf");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isNumericSpace("!>");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String string1 = StringUtils.repeat("}^-B.v-;x7[?hT", 0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "!>";
      String string2 = StringUtils.replaceEach("}^-B.v-;x7[?hT", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals("}^-B.v-;x7[?hT", string2);
      assertEquals(1, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.split("\r");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int1 = StringUtils.compareIgnoreCase("s%@[%~L}T", "!>", false);
      assertEquals(82, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase("pCd4", ".tEd*`i#`A@b+]");
      assertEquals(66, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\r";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertEquals("\r", string2);
      assertEquals(1, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertNotNull(charSequence0);
      assertEquals("\r", charSequence0);
      assertEquals(1, stringArray0.length);
      assertTrue(charSequence0.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("\r", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("\r");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertTrue(boolean1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.replaceEachRepeatedly("h", stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string3);
      assertEquals("h", string3);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains("\r"));
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string4 = StringUtils.join((Iterable<?>) arrayList0, "h");
      assertFalse(arrayList0.contains("\r"));
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence0));
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceIgnoreCase(" yu3k0bH:Wb_hfN^Zfu<q0]a", "org.apache.commons.lang3.Charsets", "vs ");
      assertNotNull(string0);
      assertEquals(" yu3k0bH:Wb_hfN^Zfu<q0]a", string0);
      
      String string1 = StringUtils.capitalize("org.apache.commons.lang3.Charsets");
      assertNotNull(string1);
      assertEquals("Org.apache.commons.lang3.Charsets", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad(" iJe{GYjJ|Kx=S", (-32768), 'j');
      assertNotNull(string2);
      assertEquals(" iJe{GYjJ|Kx=S", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.split(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("@oXvl<g+");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      
      char[] charArray0 = new char[8];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("@oXvl<g+");
      assertArrayEquals(new int[] {64, 111, 88, 118, 108, 60, 103, 43}, intArray0);
      assertNotNull(intArray0);
      assertEquals(8, intArray0.length);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, "v1(PnkSt*v1(PnkSt*", 1639, 2606);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 2606
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = StringUtils.join((List<?>) arrayList0, "\n", 2082, 99);
      assertFalse(arrayList0.contains(2082));
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, ", Length: ", (-393), 1639);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -393
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: 0", 1120, 1120);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) ", Length: 0", 0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertFalse(arrayList0.contains(0));
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>(arrayList0);
      assertFalse(arrayList0.contains(0));
      assertFalse(arrayList1.contains(0));
      assertNotNull(arrayList1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      String string1 = StringUtils.join((List<?>) arrayList1, "$l#<yF/=.X3=_", (-798), (-798));
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(arrayList1, arrayList0);
      assertFalse(arrayList0.contains((-798)));
      assertFalse(arrayList1.contains((-798)));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) ", Length: 0";
      charSequenceArray0[2] = (CharSequence) ", Length: 0";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) ", Length: 0";
      charSequenceArray0[6] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNotNull(charSequence0);
      assertEquals(", Length: 0", charSequence0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      String string0 = StringUtils.replacePattern("The character ", "The character ", "The character ");
      assertNotNull(string0);
      assertEquals("The character ", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("The character ", "The character ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.normalizeSpace("The character ");
      assertNotNull(string1);
      assertEquals("The character", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.compare("n(zZ{'WH", "n(zZ{'WH");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[5];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "n(zZ{'WH", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean1);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.replace("The character ", "n(zZ{'WH", "cW_FS", 0);
      assertNotNull(string2);
      assertEquals("The character ", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int[] intArray0 = StringUtils.toCodePoints("The character ");
      assertNotNull(intArray0);
      assertEquals(14, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      float[] floatArray0 = new float[1];
      String string0 = StringUtils.join(floatArray0, 'S');
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals("0.0", string0);
      assertEquals(1, floatArray0.length);
      
      boolean boolean0 = StringUtils.isBlank("0.0");
      assertFalse(boolean0);
      
      String string1 = StringUtils.center("0.0", (-22));
      assertNotNull(string1);
      assertEquals("0.0", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.left("0.0", (-1127));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.ordinalIndexOf("", "0.0", 0);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "0.0";
      charSequenceArray0[1] = (CharSequence) "0.0";
      charSequenceArray0[2] = (CharSequence) "0.0";
      charSequenceArray0[3] = (CharSequence) "0.0";
      charSequenceArray0[4] = (CharSequence) "0.0";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "0.0";
      String string3 = StringUtils.replaceOnce("", "0.0", "-Z+.-]mo52bMXd{_");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.join(floatArray0, 'S');
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(string4);
      assertEquals("0.0", string4);
      assertEquals(1, floatArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean1 = StringUtils.isBlank("-Z+.-]mo52bMXd{_");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.center("', has a length less than 2", 1519);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.left("X>9PZH^$F=eV7z!A}iL", (-1127));
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      
      int int1 = StringUtils.ordinalIndexOf(charSequenceArray0[5], charSequenceArray0[1], 1114111);
      assertEquals((-1), int1);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(int1 == int0);
      
      String string7 = StringUtils.replace("v", "-Z+.-]mo52bMXd{_", "kDxW|", 0);
      assertNotNull(string7);
      assertEquals("v", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("JmUywP/OzwgyCa");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("JmUyw...Vz#u", "JmUyw...Vz#u", true);
      assertEquals(0, int0);
      
      String string0 = StringUtils.trimToEmpty("JmUyw...Vz#u");
      assertNotNull(string0);
      assertEquals("JmUyw...Vz#u", string0);
      
      String string1 = StringUtils.substring("JmUywP/OzwgyCa", (-3237));
      assertNotNull(string1);
      assertEquals("JmUywP/OzwgyCa", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      String string0 = StringUtils.removeStart("2yT", "TN!8IcQZ*iN");
      assertNotNull(string0);
      assertEquals("2yT", string0);
      
      String string1 = StringUtils.replaceChars("TN!8IcQZ*iN", "aN?/Tp.EPLFCU", "");
      assertNotNull(string1);
      assertEquals("!8IcQZ*i", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBetween(" vs ", "Mn^ dhe/Slqx:n");
      assertNull(string2);
      
      String string3 = StringUtils.toRootUpperCase("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.join((short[]) null, ':', 50, 50);
      assertNull(string4);
      
      String string5 = StringUtils.repeat('C', (-1281));
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("Object varargs must not be null", "Arguments cannot both be null", "M$x7_ ao*T&5nR,!C ");
      assertNotNull(string0);
      assertEquals("Object varargs must not be null", string0);
      
      String string1 = StringUtils.left("Object varargs must not be null", 4919);
      assertNotNull(string1);
      assertEquals("Object varargs must not be null", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("@oXvl<g+");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("@oXvl<g+");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      String string0 = StringUtils.left("s37T5zG:y\"Z/dRij4.", 11);
      assertNotNull(string0);
      assertEquals("s37T5zG:y\"Z", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "s37T5zG:y\"Z", (String) null);
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("s37T5zG:y\"Z", "s37T5zG:y\"Z");
      assertEquals(1.0, double0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[1] = ',';
      charArray0[2] = 'L';
      charArray0[3] = ',';
      charArray0[4] = 'V';
      charArray0[5] = 'w';
      charArray0[6] = '=';
      charArray0[7] = ',';
      int int0 = StringUtils.indexOfAny((CharSequence) "s37T5zG:y\"Z/dRij4.", charArray0);
      assertArrayEquals(new char[] {'x', ',', 'L', ',', 'V', 'w', '=', ','}, charArray0);
      assertEquals((-1), int0);
      assertEquals(8, charArray0.length);
      
      String string1 = StringUtils.replaceOnce((String) null, (String) null, "org.apache.commons.lang3.RegExUtils");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      String string0 = StringUtils.center("F<?xB3erwgW#I", 2626);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("F<?xB3erwgW#I", "S+m`jMI:r");
      assertNotNull(string1);
      assertEquals("F<?xB3erwgW#I", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("F<?xB3erwgW#I", "S+m`jMI:r");
      assertNotNull(string2);
      assertEquals("F<?xB3erwgW#I", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.repeat("Strings must not be null", 585);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) string0;
      objectArray0[2] = (Object) "F<?xB3erwgW#I";
      objectArray0[3] = (Object) "S+m`jMI:r";
      objectArray0[4] = (Object) "Strings must not be null";
      objectArray0[5] = (Object) "";
      String string4 = StringUtils.join(objectArray0, string0, 0, 0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(7, objectArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String[] stringArray0 = new String[2];
      stringArray0[1] = "S+m`jMI:r";
      String string5 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string5);
      assertEquals("S+m`jMI:r", string5);
      assertEquals(2, stringArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.leftPad("F<?xB3erwgW#I", (-372));
      assertNotNull(string6);
      assertEquals("F<?xB3erwgW#I", string6);
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.center("", (-1), "Locale must not be null");
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      
      String string8 = StringUtils.substring("S+m`jMI:r", 11);
      assertNotNull(string8);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{b>;w&ymP^T#/G|(~]R", 'f');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase("...", "{b>;w&ymP^T#/G|(~]R", stringArray0);
      assertNotNull(string0);
      assertEquals("...{b>;w&ymP^T#/G|(~]R", string0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny("{b>;w&ymP^T#/G|(~]R", stringArray0);
      assertEquals(0, int0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.stripEnd("...{b>;w&ymP^T#/G|(~]R", "...{b>;w&ymP^T#/G|(~]R");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) ":{dx d~e=";
      objectArray0[1] = (Object) ":{dx d~e=";
      String string0 = StringUtils.stripEnd(":{dx d~e=", ":{dx d~e=");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      String string0 = StringUtils.center("S+m`j", (-2650));
      assertNotNull(string0);
      assertEquals("S+m`j", string0);
      
      String string1 = StringUtils.removeEnd((String) null, "S+m`j");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "S+m`j", (CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "The type must not be null", (CharSequence[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[3] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[4] = (CharSequence) "?BG{?lA\"";
      String string0 = StringUtils.prependIfMissingIgnoreCase("?BG{?lA\"", "Arguments cannot both be null", charSequenceArray0);
      assertNotNull(string0);
      assertEquals("?BG{?lA\"", string0);
      assertEquals(5, charSequenceArray0.length);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("Arguments cannot both be null", "?BG{?lA\"", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("Arguments cannot both be null", string1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains(charSequenceArray0[3], charSequenceArray0[2]);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "?BG{?lA\"", charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.rightPad("Arguments cannot both be null", 52);
      assertNotNull(string2);
      assertEquals("Arguments cannot both be null                       ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "?BG{?lA\"", charSequenceArray0[1], 1521);
      assertEquals(29, int0);
      assertEquals(5, charSequenceArray0.length);
      
      String string3 = StringUtils.strip("Arguments cannot both be null                       ", "Iz/ p YW");
      assertNotNull(string3);
      assertEquals("Arguments cannot both be null", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean2);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("?BG{?lA\"");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      
      String string4 = StringUtils.leftPad("Arguments cannot both be null", 29);
      assertNotNull(string4);
      assertEquals("Arguments cannot both be null", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.replaceChars(" iL-", "\r", "=");
      assertNotNull(string5);
      assertEquals(" iL-", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.SPACE;
      assertNotNull(string6);
      assertEquals(" ", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) " ", charSequenceArray0[0], 20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, '7');
      assertFalse(linkedList0.contains('7'));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.wrap("", '7');
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("", 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.unwrap("_Fxh `ug", '7');
      assertNotNull(string3);
      assertEquals("_Fxh `ug", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "_Fxh `ug";
      stringArray0[3] = "maxWith cannot be negative";
      stringArray0[4] = "";
      stringArray0[5] = "_Fxh `ug";
      String string4 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(6, stringArray0.length);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      
      String[] stringArray1 = StringUtils.split("_Fxh `ug");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string5 = StringUtils.join((Object[]) stringArray1, 'o');
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string5);
      assertEquals("_Fxho`ug", string5);
      assertEquals(2, stringArray1.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string6 = StringUtils.removeIgnoreCase("", "@1Me5CEj,f[$~");
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "_Fxh `ug");
      assertFalse(boolean0);
      
      String string7 = StringUtils.reverse("WK!BUTh#FDK]mI");
      assertNotNull(string7);
      assertEquals("Im]KDF#hTUB!KW", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.repeat("", "", 2);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      String string2 = "tSrH?j0";
      String string3 = StringUtils.stripEnd("pJcK", "tSrH?j0");
      assertNotNull(string3);
      assertEquals("pJcK", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      charSequenceArray0[4] = (CharSequence) "pJcK";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "pJcK";
      stringArray0[1] = "S";
      stringArray0[2] = "pJcK";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "tSrH?j0";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("tSrH?j0", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("&_n+f.48q1C?|w#^)B", "&_n+f.48q1C?|w#^)B", 14);
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
      
      String string0 = StringUtils.toRootLowerCase("&_n+f.48q1C?|w#^)B");
      assertNotNull(string0);
      assertEquals("&_n+f.48q1c?|w#^)b", string0);
      
      String string1 = StringUtils.substringBetween("0#fjAG>0:\"}P", (String) null, "2\"tP& ");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase("0#fjAG>0:\"}P");
      assertTrue(boolean0);
      
      String string2 = StringUtils.defaultString(" ", " ");
      assertNotNull(string2);
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.overlay("?7@", "offset cannot be negative", 100, 14);
      assertNotNull(string3);
      assertEquals("?7@offset cannot be negative", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = "4:\\u]tO5@.{\\0|R0xm@";
      String string5 = StringUtils.rotate(string4, 14);
      assertNotNull(string5);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.right("v/428-YQ*hR0RPM<_", 100);
      assertNotNull(string6);
      assertEquals("v/428-YQ*hR0RPM<_", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("v/428-YQ*hR0RPM<_", "[$^/T@u/:tw");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, 'z', (-1118), 321);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1118
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      String string0 = StringUtils.left(" vs ", 51);
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = '^';
      charArray0[2] = 'L';
      String[] stringArray0 = new String[5];
      stringArray0[0] = " vs ";
      stringArray0[1] = " vs ";
      stringArray0[2] = " vs ";
      stringArray0[3] = " vs ";
      stringArray0[4] = " vs ";
      String string1 = StringUtils.replaceEach(" vs ", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals(" vs ", string1);
      assertEquals(5, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.split("N+q}\"6h=#~F_+");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.compareIgnoreCase("offset cannot be negative", " vs ", true);
      assertEquals(79, int0);
      
      int int1 = StringUtils.compareIgnoreCase("El/<WPsZicls1", "");
      assertEquals(14, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray2 = StringUtils.split("nR%", "Index: ");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotNull(stringArray2);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      String string0 = StringUtils.defaultString("oFv", "oFv");
      assertNotNull(string0);
      assertEquals("oFv", string0);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, '7');
      assertFalse(linkedList0.contains('7'));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("", 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.unwrap("_Fxh `ug", '7');
      assertNotNull(string3);
      assertEquals("_Fxh `ug", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "_Fxh `ug";
      stringArray0[3] = "maxWith cannot be negative";
      stringArray0[4] = "";
      stringArray0[5] = "_Fxh `ug";
      String string4 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(6, stringArray0.length);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("DS9fI]\"W", "", stringArray0);
      assertNotNull(string5);
      assertEquals("DS9fI]\"W", string5);
      assertEquals(6, stringArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.prependIfMissingIgnoreCase(" ", " ", stringArray0);
      assertNotNull(string6);
      assertEquals(" ", string6);
      assertEquals(6, stringArray0.length);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "_Fxh `ug", (CharSequence) "_Fxh `ug");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertFalse(boolean1);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string7 = StringUtils.center("", 10, " ");
      assertNotNull(string7);
      assertEquals("          ", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "          ", (CharSequence[]) stringArray0);
      assertTrue(boolean2);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      char[] charArray0 = new char[0];
      String string8 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string8);
      assertEquals("", string8);
      assertEquals(0, charArray0.length);
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-3948L);
      String string1 = StringUtils.wrapIfMissing("\n", "\n");
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBetween("\n", "\n");
      assertNull(string2);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "\n", true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      String string0 = StringUtils.unwrap("=)", "=)");
      assertNotNull(string0);
      assertEquals("=)", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("=)");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "=)";
      stringArray0[1] = "=)";
      String[] stringArray1 = new String[17];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = null;
      stringArray1[1] = null;
      stringArray1[2] = null;
      String string1 = StringUtils.replaceEach((String) null, stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNull(string1);
      assertEquals(3, stringArray0.length);
      assertEquals(17, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.split(string1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNull(stringArray2);
      assertEquals(3, stringArray0.length);
      assertEquals(17, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.compareIgnoreCase(string1, "r9Nf~#30E=a");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals((-1), int0);
      assertEquals(3, stringArray0.length);
      assertEquals(17, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, '7');
      assertFalse(linkedList0.contains('7'));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.wrap("", '7');
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("", 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.unwrap("_Fxh `ug", '7');
      assertNotNull(string3);
      assertEquals("_Fxh `ug", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.mid("UDTG", 0, '7');
      assertNotNull(string4);
      assertEquals("UDTG", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      String string0 = StringUtils.left("S=]`jMI:r", 5);
      assertNotNull(string0);
      assertEquals("S=]`j", string0);
      
      String string1 = StringUtils.stripAccents("Cloneable type ");
      assertNotNull(string1);
      assertEquals("Cloneable type ", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWithAny("Cloneable type ", (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      String string2 = StringUtils.join(booleanArray0, 'S');
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertNotNull(string2);
      assertEquals("falseStrueSfalseSfalse", string2);
      assertEquals(4, booleanArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Cloneable type ";
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string3);
      assertEquals("Cloneable type ", string3);
      assertEquals(1, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.abbreviate("@4F6sCD>Zc@6aq2<\"", "Array element ", 1833, 3966);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.substringBeforeLast("'K4:", (String) null);
      assertNotNull(string5);
      assertEquals("'K4:", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      int int0 = 728;
      String string0 = StringUtils.truncate("<G52%>=\"rhh|&GkAD2p", 728, 728);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "<G52%>=\"rhh|&GkAD2p";
      stringArray0[1] = "<G52%>=\"rhh|&GkAD2p";
      stringArray0[2] = "";
      String string1 = null;
      String string2 = StringUtils.chop((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.trimToEmpty(")`hW?2fe>}OFE");
      assertNotNull(string3);
      assertEquals(")`hW?2fe>}OFE", string3);
      assertFalse(string3.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) ")`hW?2fe>}OFE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      String string0 = StringUtils.substringAfterLast("W", "C'#[zuk,pO5!");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", " is not in the range '0' - '9'", "Ik");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string1 = StringUtils.replace("Ik", "", "Ik");
      assertNotNull(string1);
      assertEquals("Ik", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removePattern("*e~_c[&tg7Cg", " ");
      assertNotNull(string2);
      assertEquals("*e~_c[&tg7Cg", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Ik", "", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.wrapIfMissing("s37T5zG:y\"Z/dRij4.", "`$Q6b\"eY=J");
      assertNotNull(string3);
      assertEquals("`$Q6b\"eY=Js37T5zG:y\"Z/dRij4.`$Q6b\"eY=J", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.stripAccents(" is not in the range '0' - '9'");
      assertNotNull(string4);
      assertEquals(" is not in the range '0' - '9'", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean3 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean3);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      String string5 = StringUtils.join(booleanArray0, ';');
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray0));
      assertNotNull(string5);
      assertEquals("true;false;false;false;false", string5);
      assertEquals(5, booleanArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string6);
      assertEquals("Ik", string6);
      assertEquals(1, stringArray0.length);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.chop("The String must not be empty");
      assertNotNull(string7);
      assertEquals("The String must not be empt", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Ik";
      String string8 = StringUtils.substringAfterLast(" is not in the range '0' - '9'", "H:Wb_hfN^Zfu<q0]a yu3k0b");
      assertNotNull(string8);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "The String must not be empty";
      charSequenceArray0[3] = (CharSequence) "Ik";
      charSequenceArray0[4] = (CharSequence) "The String must not be empty";
      charSequenceArray0[5] = (CharSequence) "The String must not be empt";
      int int1 = StringUtils.indexOfAny((CharSequence) " ", charSequenceArray0);
      assertEquals(0, int1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 2);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      String string1 = StringUtils.stripEnd("pJcK", "tSrH?j0");
      assertNotNull(string1);
      assertEquals("pJcK", string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[4] = (CharSequence) "pJcK";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      String string0 = StringUtils.chop("Minimum abbrJviation widtp with offset is %d");
      assertNotNull(string0);
      assertEquals("Minimum abbrJviation widtp with offset is %", string0);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      short short0 = (short)3634;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)482;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '$', 1093, (int) (short)3634);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1093
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      String string0 = StringUtils.getIfBlank("dHj;xF|`)DkT5 IEL", (Supplier<String>) null);
      assertNotNull(string0);
      assertEquals("dHj;xF|`)DkT5 IEL", string0);
      
      String string1 = StringUtils.reverseDelimited(" yu3k0bH:Wb_hfN^Zfu<q0]a", 'N');
      assertNotNull(string1);
      assertEquals("^Zfu<q0]aN yu3k0bH:Wb_hf", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.mid("dHj;xF|`)DkT5 IEL", 32767, 32767);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[0];
      String string3 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(0, charArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)122;
      String string4 = StringUtils.join(shortArray0, '?');
      assertArrayEquals(new short[] {(short)0, (short)122}, shortArray0);
      assertNotNull(string4);
      assertEquals("0?122", string4);
      assertEquals(2, shortArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      // Undeclared exception!
      StringUtils.repeat("Minimum abbreviation width is %d", 32767);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      String string0 = StringUtils.overlay("uib_y`s", "M$x7_ ao*T&5nR,!C ", (-3715), 2058);
      assertNotNull(string0);
      assertEquals("M$x7_ ao*T&5nR,!C ", string0);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 321;
      intArray0[2] = (-589);
      String string0 = StringUtils.overlay("+rQ8Z", "+rQ8Z", 0, 10);
      assertNotNull(string0);
      assertEquals("+rQ8Z", string0);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      String string1 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.reverseDelimited("", 'W');
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.joinWith("", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.normalizeSpace("Threshold must not be negative");
      assertNotNull(string4);
      assertEquals("Threshold must not be negative", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.LF;
      assertNotNull(string5);
      assertEquals("\n", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      String string0 = StringUtils.replaceAll("g0G TP03bAj$ES1=", "g0G TP03bAj$ES1=", "g0G TP03bAj$ES1=");
      assertNotNull(string0);
      assertEquals("g0G TP03bAj$ES1=", string0);
      
      String string1 = StringUtils.chop("g0G TP03bAj$ES1=");
      assertNotNull(string1);
      assertEquals("g0G TP03bAj$ES1", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("JmUywP/OzwgyCa", 8);
      assertNotNull(string0);
      assertEquals("JmUyw...", string0);
      
      int int0 = StringUtils.length("JmUyw...");
      assertEquals(8, int0);
      
      boolean boolean0 = StringUtils.isAlpha("JmUywP/OzwgyCa");
      assertFalse(boolean0);
      
      String string1 = StringUtils.chomp("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceAll("'We~N", "org.apache.commons.lang3.CharUtils", "'We~N");
      assertNotNull(string2);
      assertEquals("'We~N", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.truncate("JmUyw...", 8);
      assertNotNull(string3);
      assertEquals("JmUyw...", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.wrapIfMissing("Vz#u", "JmUyw...");
      assertNotNull(string4);
      assertEquals("JmUyw...Vz#uJmUyw...", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("q<wn!3B");
      assertNotNull(string0);
      assertEquals("q<wn!3B", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "q<wn!3B";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Arguments cannot both be null";
      stringArray0[1] = "q<wn!3B";
      stringArray0[2] = "Arguments cannot both be null";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string1);
      assertEquals("Arguments cannot both be null", string1);
      assertEquals(3, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, 'R');
      assertNotNull(string2);
      assertEquals("q<wn!3BRRRRR", string2);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.swapCase((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, "q<wn!3B");
      assertNotNull(string4);
      assertEquals("q<wn!3Bq<wn!3Bq<wn!3Bq<wn!3Bq<wn!3Bq<wn!3B", string4);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Arguments cannot both be null", (CharSequence) "q<wn!3Bq<wn!3Bq<wn!3Bq<wn!3Bq<wn!3Bq<wn!3B", 39);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "q<wn!3BRRRRR");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("q<wn!3BRRRRR", (CharSequence) null, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Wy*&6f9Rl6k";
      objectArray0[1] = (Object) "Wy*&6f9Rl6k";
      objectArray0[2] = (Object) "Wy*&6f9Rl6k";
      objectArray0[3] = (Object) "Wy*&6f9Rl6k";
      objectArray0[4] = (Object) "Wy*&6f9Rl6k";
      objectArray0[5] = (Object) "Wy*&6f9Rl6k";
      objectArray0[6] = (Object) "Wy*&6f9Rl6k";
      String string0 = StringUtils.joinWith("Wy*&6f9Rl6k", objectArray0);
      assertNotNull(string0);
      assertEquals("Wy*&6f9Rl6kWy*&6f9Rl6kWy*&6f9Rl6kWy*&6f9Rl6kWy*&6f9Rl6kWy*&6f9Rl6kWy*&6f9Rl6kWy*&6f9Rl6kWy*&6f9Rl6kWy*&6f9Rl6kWy*&6f9Rl6kWy*&6f9Rl6kWy*&6f9Rl6k", string0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("J?JW,9o", "J?JW,9o");
      assertNotNull(string0);
      assertEquals("J?JW,9o", string0);
      
      String string1 = StringUtils.wrapIfMissing("<\"N0", "J?JW,9o");
      assertNotNull(string1);
      assertEquals("J?JW,9o<\"N0J?JW,9o", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "J?JW,9o";
      stringArray0[1] = "J?JW,9o";
      stringArray0[2] = "J?JW,9o";
      stringArray0[3] = "<\"N0";
      stringArray0[4] = "J?JW,9o";
      stringArray0[5] = "J?JW,9o";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "J?JW,9o");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.substringAfter((String) null, "J?JW,9o");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Array and element cannot both be null");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringAfter("J?JW,9o", "<\"N0");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.substringBefore("&EtJC", "J?JW,9o");
      assertNotNull(string4);
      assertEquals("&EtJC", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("y\"0V\"2[~jzueN|FCh", (-4482), (-2021161078));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{b>;w&ymP^T#/G|(~]R", 'f');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.wrapIfMissing("...", "wCMAi/X|iN_.4'WKb");
      assertNotNull(string0);
      assertEquals("wCMAi/X|iN_.4'WKb...wCMAi/X|iN_.4'WKb", string0);
      
      String string1 = StringUtils.defaultString("...");
      assertNotNull(string1);
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "{b>;w&ymP^T#/G|(~]R", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      String string0 = StringUtils.strip("'$", "JNa-k,*A'+%\"ml>");
      assertNotNull(string0);
      assertEquals("$", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("'$", "$");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.overlay("$", "JNa-k,*A'+%\"ml>", 6, 6);
      assertNotNull(string1);
      assertEquals("$JNa-k,*A'+%\"ml>", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceIgnoreCase(" yu3k0bH:Wb_hfN^Zfu<q0]a", "org.apache.commons.lang3.Charsets", " vs ");
      assertNotNull(string0);
      assertEquals(" yu3k0bH:Wb_hfN^Zfu<q0]a", string0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)482;
      shortArray0[3] = (short)0;
      String string1 = StringUtils.join(shortArray0, 'Z', (int) (short)0, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)482, (short)0}, shortArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(4, shortArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviate("org.apache.commons.lang3.Charsets", (int) (short)0, 5);
      assertNotNull(string2);
      assertEquals("or...", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) " yu3k0bH:Wb_hfN^Zfu<q0]a", "Strings must not be null");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      String string0 = StringUtils.right("VMWg IB4u3AyM~", 30);
      assertNotNull(string0);
      assertEquals("VMWg IB4u3AyM~", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "VMWg IB4u3AyM~", (CharSequence) "VMWg IB4u3AyM~");
      assertNotNull(charSequence0);
      assertEquals("VMWg IB4u3AyM~", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("VMWg IB4u3AyM~", "VMWg IB4u3AyM~");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.overlay("VMWg IB4u3AyM~", "VMWg IB4u3AyM~", 13, 1);
      assertNotNull(string1);
      assertEquals("VVMWg IB4u3AyM~~", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      String string0 = StringUtils.trim("Cannot clone Cloneable type ");
      assertNotNull(string0);
      assertEquals("Cannot clone Cloneable type", string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string0));
      assertNotNull(treeSet0);
      
      String string1 = StringUtils.replaceAll("org.apache.commons.lang3.CharUtils", "M$x7_ ao*T&5nR,!C ", (String) null);
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.CharUtils", string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("=akSIu{(u_U:", (-253));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("d=a.v>mW", "b!Qx+H~F+$", false);
      assertEquals(29, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "b!Qx+H~F+$";
      charSequenceArray0[1] = (CharSequence) "b!Qx+H~F+$";
      charSequenceArray0[2] = (CharSequence) "b!Qx+H~F+$";
      charSequenceArray0[3] = (CharSequence) "b!Qx+H~F+$";
      charSequenceArray0[4] = (CharSequence) "b!Qx+H~F+$";
      int int1 = StringUtils.indexOfAny((CharSequence) "d=a.v>mW", charSequenceArray0);
      assertEquals((-1), int1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isAlpha(charSequenceArray0[2]);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string0 = StringUtils.replacePattern("d=a.v>mW", "", "ifi");
      assertNotNull(string0);
      assertEquals("ifiifidifi=ifiaifi.ifivifi>ifimifiWifi", string0);
      
      String string1 = StringUtils.abbreviate("N-`)", (-784), 29);
      assertNotNull(string1);
      assertEquals("N-`)", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToEmpty("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("N-`)", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      String string0 = StringUtils.replace(", Length: 0", (String) null, "");
      assertNotNull(string0);
      assertEquals(", Length: 0", string0);
      
      String string1 = StringUtils.wrap(", Length: 0", "");
      assertNotNull(string1);
      assertEquals(", Length: 0", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.appendIfMissing("/+[jChN", "/+[jChN", (CharSequence[]) null);
      assertNotNull(string2);
      assertEquals("/+[jChN", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.reverse("Array element ");
      assertNotNull(string3);
      assertEquals(" tnemele yarrA", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.join((Object[]) null, "");
      assertNull(string4);
      
      boolean boolean0 = StringUtils.equalsAny("Array element ", (CharSequence[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'O';
      charArray0[1] = '0';
      charArray0[2] = 'H';
      charArray0[3] = '\'';
      charArray0[4] = '~';
      charArray0[5] = 'f';
      charArray0[6] = '<';
      String[] stringArray0 = StringUtils.split("l|B");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase(" tnemele yarrA", (String) null, true);
      assertEquals(1, int0);
      
      int int1 = StringUtils.compareIgnoreCase("l|B", "");
      assertEquals(3, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("]\"e$32)tg<PzG2WT/m", (String) null, true);
      assertEquals(1, int0);
      
      String string0 = StringUtils.substring("X$q#5JEf}of\"", 1564);
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("]\"e$32)tg<PzG2WT/m", 1604, (-368));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("maxWith cannot be negative\r", ')');
      assertNotNull(string0);
      assertEquals(")maxWith cannot be negative\r)", string0);
      
      boolean boolean0 = StringUtils.isEmpty("maxWith cannot be negative\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllUpperCase("\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripToNull("\n");
      assertNull(string1);
      
      Class<CharBuffer> class0 = CharBuffer.class;
      ServiceLoader<CharBuffer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      charArray0[1] = '2';
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'a', '2'}, charArray0);
      assertTrue(boolean1);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-3948L);
      longArray0[1] = 1541L;
      longArray0[2] = 1L;
      String string1 = StringUtils.strip("\n");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrapIfMissing("}F", 'T');
      assertNotNull(string2);
      assertEquals("T}FT", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfterLast("Comparator should not be null.", 50);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.getDigits("Ujq`/:yhY%ZBW");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      
      CharSequence[] charSequenceArray1 = new CharSequence[2];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      String string5 = StringUtils.center("108A0A0A-1118A64A-2212", 2328);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      charSequenceArray1[0] = (CharSequence) string5;
      charSequenceArray1[1] = (CharSequence) "}F";
      String string6 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertNotNull(string6);
      assertEquals("", string6);
      assertEquals(2, charSequenceArray1.length);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      String string7 = StringUtils.removePattern("ib#P(al`Z^s4", "T}FT");
      assertNotNull(string7);
      assertEquals("ib#P(al`Z^s4", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      String string8 = StringUtils.lowerCase("", locale0);
      assertNotNull(string8);
      assertEquals("", string8);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("s37T5zG:y\"Z/dRij4.`$Q6b\"eY=J", " is not in the range '0' - '9'", "Ik");
      assertNotNull(string0);
      assertEquals("s37T5zG:y\"Z/dRij4.`$Q6b\"eY=J", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("s37T5zG:y\"Z/dRij4.`$Q6b\"eY=J");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "s37T5zG:y\"Z/dRij4.`$Q6b\"eY=J", (char[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substring("s37T5zG:y\"Z/dRij4.`$Q6b\"eY=J", (-1), (-1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string2 = StringUtils.replace("Ik", "s37T5zG:y\"Z/dRij4.`$Q6b\"eY=J", "Ik");
      assertNotNull(string2);
      assertEquals("Ik", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.stripStart("`$Q6b\"eY=Js37T5zG:y\"Z/dRij4.", "H:Wb_hfN^Zfu<q0]a");
      assertNotNull(string3);
      assertEquals("`$Q6b\"eY=Js37T5zG:y\"Z/dRij4.", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "`$Q6b\"eY=Js37T5zG:y\"Z/dRij4.", (char[]) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      String string4 = StringUtils.join((char[]) null, '1');
      assertNull(string4);
      
      int[] intArray0 = StringUtils.toCodePoints("`$Q6b\"eY=Js37T5zG:y\"Z/dRij4.");
      assertNotNull(intArray0);
      assertEquals(29, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      String string0 = StringUtils.stripStart("Z", "r+)HMdAw0{");
      assertNotNull(string0);
      assertEquals("Z", string0);
      
      char[] charArray0 = new char[2];
      String string1 = StringUtils.join(charArray0, '\u0000');
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(string1);
      assertEquals("\u0000\u0000\u0000", string1);
      assertEquals(2, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("\u0000\u0000\u0000", 15);
      assertNotNull(string2);
      assertEquals("\u0000\u0000\u0000", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, 'T');
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, charArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("Arguments cannot both be null");
      assertNotNull(intArray0);
      assertEquals(29, intArray0.length);
      
      try { 
        StringUtils.getBytes("org.apache.commons.lang3.CharUtils", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: 0", 1120, 1120);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) ", Length: 0", 0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.replaceOnce("", "', has a length less than 2", "', has a length less than 2");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1120;
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 1120;
      floatArray0[4] = (float) 1120;
      String string2 = StringUtils.join(floatArray0, 'P');
      assertArrayEquals(new float[] {1120.0F, 0.0F, 0.0F, 1120.0F, 1120.0F}, floatArray0, 0.01F);
      assertNotNull(string2);
      assertEquals("1120.0P0.0P0.0P1120.0P1120.0", string2);
      assertEquals(5, floatArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isBlank("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string3 = StringUtils.center("QJA}VFQ(54b,", 1120);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.left("", (-22));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      int int0 = StringUtils.ordinalIndexOf("", "1120.0P0.0P0.0P1120.0P1120.0", 1115298);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      String string0 = StringUtils.join((List<?>) vector0, ":,ba~cgy~", 940, 5);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      int int0 = StringUtils.indexOf((CharSequence) ":,ba~cgy~", (CharSequence) ":,ba~cgy~", 9);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("Strings must not be null", 5, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      CharSequence[] charSequenceArray1 = new CharSequence[0];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      String string0 = StringUtils.prependIfMissing((String) null, "", charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertNull(string0);
      assertEquals(0, charSequenceArray1.length);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      // Undeclared exception!
      try { 
        StringUtils.truncate((String) null, (-217), (-217));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      String string0 = StringUtils.right("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) null, locale_FilteringMode0);
      assertFalse(list0.contains(locale0));
      assertNotNull(list0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string1 = StringUtils.lowerCase("", locale0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 8192, 667);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add("4||[VJ5myDzZ=~~=]q9");
      assertTrue(arrayList0.contains("4||[VJ5myDzZ=~~=]q9"));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      boolean boolean1 = arrayList0.add("HTaTx_5~J2I");
      assertTrue(arrayList0.contains("4||[VJ5myDzZ=~~=]q9"));
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.join((List<?>) arrayList0, 'X', 581, 581);
      assertTrue(arrayList0.contains("4||[VJ5myDzZ=~~=]q9"));
      assertFalse(arrayList0.contains(string0));
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 581, 581);
      assertEquals((-1), int0);
      
      boolean boolean2 = arrayList0.remove((Object) "HTaTx_5~J2I");
      assertTrue(arrayList0.contains("4||[VJ5myDzZ=~~=]q9"));
      assertFalse(arrayList0.contains(string0));
      assertTrue(boolean2);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-2115);
      longArray0[1] = 1L;
      longArray0[2] = (long) 'X';
      longArray0[3] = 1L;
      longArray0[4] = (long) 'X';
      longArray0[5] = (long) 'X';
      longArray0[6] = 81L;
      longArray0[7] = 1L;
      longArray0[8] = 81L;
      String string1 = StringUtils.join(longArray0, 'X', 322, (-1));
      assertArrayEquals(new long[] {(-2115L), 1L, 88L, 1L, 88L, 88L, 81L, 1L, 81L}, longArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1542;
      intArray0[1] = 821;
      intArray0[2] = (-1349);
      intArray0[3] = 0;
      intArray0[5] = 452;
      char[] charArray0 = new char[0];
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("@~r", 'p');
      assertNotNull(string0);
      assertEquals("@~r", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "@~r", (CharSequence) "@~r");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("@~r", 3253, "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.uncapitalize("Array element ");
      assertNotNull(string3);
      assertEquals("array element ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.ordinalIndexOf("@~r", "", 3253);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      String string0 = StringUtils.trim("Cannot clone Cloneable type ");
      assertNotNull(string0);
      assertEquals("Cannot clone Cloneable type", string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("Cannot clone Cloneable type "));
      assertNotNull(treeSet0);
      
      treeSet0.clear();
      assertFalse(treeSet0.contains("Cannot clone Cloneable type "));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Cannot clone Cloneable type ", (CharSequence) "Cannot clone Cloneable type ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 321;
      intArray0[2] = (-589);
      String string0 = StringUtils.repeat("Search and Replace array lengths don't match: ", 321);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) string0, (CharSequence) string0);
      assertNotNull(charSequence0);
      
      int int0 = new Integer((-589));
      assertEquals((-589), int0);
      
      boolean boolean0 = StringUtils.isEmpty("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceFirst("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", "H:Wb_hfN^Zfu<q0]a yu3k0b");
      assertNotNull(string1);
      assertEquals("H:Wb_hfN^Zfu<q0]a yu3k0b", string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-589);
      doubleArray0[3] = (-4496.155);
      String string2 = StringUtils.join(doubleArray0, '\'', 1445, 0);
      assertArrayEquals(new double[] {0.0, 0.0, (-589.0), (-4496.155), 0.0}, doubleArray0, 0.01);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(5, doubleArray0.length);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "H:Wb_hfN^Zfu<q0]a yu3k0b", charSequence0);
      assertEquals((-1), int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "H:Wb_hfN^Zfu<q0]a yu3k0b", 1445, (-589));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 108;
      intArray0[1] = 0;
      intArray0[2] = (-1324);
      intArray0[4] = 64;
      intArray0[5] = (-2212);
      String string0 = StringUtils.join(intArray0, 'A');
      assertArrayEquals(new int[] {108, 0, (-1324), 0, 64, (-2212)}, intArray0);
      assertNotNull(string0);
      assertEquals("108A0A-1324A0A64A-2212", string0);
      assertEquals(6, intArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("108A0A-1324A0A64A-2212", "&_n+f.48q1C?|w#^)B", 64);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.deleteWhitespace("&_n+f.48q1C?|w#^)B");
      assertNotNull(string1);
      assertEquals("&_n+f.48q1C?|w#^)B", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToNull("108A0A-1324A0A64A-2212");
      assertNotNull(string2);
      assertEquals("108A0A-1324A0A64A-2212", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.trim("&_n+f.48q1C?|w#^)B");
      assertNotNull(string3);
      assertEquals("&_n+f.48q1C?|w#^)B", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      int int0 = StringUtils.ordinalIndexOf("&_n+f.48q1C?|w#^)B", "&_n+f.48q1C?|w#^)B", 108);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.getDigits("108A0A-1324A0A64A-2212");
      assertNotNull(string4);
      assertEquals("108013240642212", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      int int1 = StringUtils.indexOf((CharSequence) "&_n+f.48q1C?|w#^)B", (-2212));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.center("&_n+f.48q1C?|w#^)B", 0, "");
      assertNotNull(string5);
      assertEquals("&_n+f.48q1C?|w#^)B", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.deleteWhitespace("");
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.rightPad("", 3291, "");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      
      String string8 = StringUtils.join((Object[]) null, 'A');
      assertNull(string8);
      
      String string9 = StringUtils.remove("", (String) null);
      assertNotNull(string9);
      assertEquals("", string9);
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      
      String string10 = StringUtils.capitalize("r'=,XU$Ez,o;NW'}C@7");
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string11 = StringUtils.replaceEach("qD4j*WqRG9", stringArray1, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string11);
      assertEquals("qD4j*WqRG9", string11);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      String string0 = StringUtils.substringBefore(":{dx d~e=", ":{dx d~e=");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isMixedCase(":{dx d~e=");
      assertFalse(boolean0);
      
      String string1 = StringUtils.uncapitalize("wratMTvqG7");
      assertNotNull(string1);
      assertEquals("wratMTvqG7", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad(">`XHIL^{*dCWs", 48, "");
      assertNotNull(string2);
      assertEquals(">`XHIL^{*dCWs                                   ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.stripAccents((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.substringAfterLast((String) null, 197);
      assertNull(string3);
      
      String string4 = StringUtils.wrapIfMissing(" yu3k0b", (String) null);
      assertNotNull(string4);
      assertEquals(" yu3k0b", string4);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'N';
      longArray0[1] = (long) 197;
      longArray0[2] = (long) 'N';
      longArray0[3] = (long) 197;
      String string5 = StringUtils.capitalize((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.replace((String) null, "2yT", "xO", 4);
      assertNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "2yT";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) " yu3k0b";
      charSequenceArray0[4] = (CharSequence) null;
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string7 = StringUtils.join((boolean[]) null, 'N');
      assertNull(string7);
      
      String string8 = StringUtils.replaceChars(" yu3k0b", 'N', 'N');
      assertNotNull(string8);
      assertEquals(" yu3k0b", string8);
      assertTrue(string8.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '<';
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.join((boolean[]) null, '4');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.stripAccents((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.substringAfterLast((String) null, 197);
      assertNull(string3);
      
      String string4 = StringUtils.wrapIfMissing(" yu3k0b", (String) null);
      assertNotNull(string4);
      assertEquals(" yu3k0b", string4);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = " yu3k0b";
      stringArray0[4] = null;
      stringArray0[5] = "maxWith cannot be negative";
      stringArray0[6] = null;
      stringArray0[7] = null;
      String string5 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string5);
      assertEquals(" yu3k0b", string5);
      assertEquals(8, stringArray0.length);
      assertTrue(string5.equals((Object)string4));
      
      String string6 = StringUtils.join((Object[]) stringArray0, 'N');
      assertNotNull(string6);
      assertEquals("NNN yu3k0bNNmaxWith cannot be negativeNN", string6);
      assertEquals(8, stringArray0.length);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.swapCase("fpI|.)pJ}hHYi nrjD");
      assertNotNull(string7);
      assertEquals("FPi|.)Pj}HhyI NRJd", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 197);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) null, 'N');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.join((long[]) null, 'A', (-2387), 32);
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-2387));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      String string0 = StringUtils.center("{g%E*1_]o-+S/cj", 5, "]w/TX=g0061JU]T");
      assertNotNull(string0);
      assertEquals("{g%E*1_]o-+S/cj", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("{g%E*1_]o-+S/cj", "!V#P]^fu;<zmm!yi", 5);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, '7');
      assertFalse(linkedList0.contains('7'));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.wrap("", '7');
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("", 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.unwrap("_Fxh `ug", '7');
      assertNotNull(string3);
      assertEquals("_Fxh `ug", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "_Fxh `ug";
      stringArray0[3] = "maxWith cannot be negative";
      stringArray0[4] = "";
      stringArray0[5] = "_Fxh `ug";
      String string4 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(6, stringArray0.length);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("DS9fI]\"W", "", stringArray0);
      assertNotNull(string5);
      assertEquals("DS9fI]\"W", string5);
      assertEquals(6, stringArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.prependIfMissingIgnoreCase(" ", " ", stringArray0);
      assertNotNull(string6);
      assertEquals(" ", string6);
      assertEquals(6, stringArray0.length);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "_Fxh `ug", (CharSequence) "_Fxh `ug");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertFalse(boolean1);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string7 = StringUtils.center("", 10, " ");
      assertNotNull(string7);
      assertEquals("          ", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "          ", (CharSequence[]) stringArray0);
      assertTrue(boolean2);
      assertEquals(6, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.strip((String) null, "108A0A0A-1118A64A-2212");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "", 235);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("108A0A0A-1118A64A-2212", "", stringArray0);
      assertNotNull(string2);
      assertEquals("108A0A0A-1118A64A-2212", string2);
      assertEquals(1, stringArray0.length);
      
      String string3 = "]^g`?OZ|<hS78";
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string4);
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      assertEquals(1, stringArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "108A0A0A-1118A64A-2212");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[1] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[2] = (CharSequence) "?BG{?lA\"";
      charSequenceArray0[3] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[4] = (CharSequence) "?BG{?lA\"";
      String string0 = StringUtils.prependIfMissingIgnoreCase("?BG{?lA\"", "Arguments cannot both be null", charSequenceArray0);
      assertNotNull(string0);
      assertEquals("?BG{?lA\"", string0);
      assertEquals(5, charSequenceArray0.length);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("Arguments cannot both be null", "?BG{?lA\"", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("Arguments cannot both be null", string1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains(charSequenceArray0[3], charSequenceArray0[2]);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "?BG{?lA\"", charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray1 = new CharSequence[2];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "?BG{?lA\"";
      charSequenceArray1[1] = (CharSequence) "Arguments cannot both be null";
      boolean boolean2 = StringUtils.containsAny((CharSequence) "?BG{?lA\"", charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(2, charSequenceArray1.length);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.strip("Arguments cannot both be null");
      assertNotNull(string2);
      assertEquals("Arguments cannot both be null", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean3 = StringUtils.isAlpha(charSequenceArray0[2]);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertFalse(boolean3);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      String string3 = StringUtils.reverseDelimited("Vz#u", 'R');
      assertNotNull(string3);
      assertEquals("Vz#u", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)49;
      // Undeclared exception!
      try { 
        Charset.forName("maxWith cannot be negative");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      float[] floatArray0 = new float[1];
      String string0 = StringUtils.join(floatArray0, 'S');
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals("0.0", string0);
      assertEquals(1, floatArray0.length);
      
      boolean boolean0 = StringUtils.isBlank("0.0");
      assertFalse(boolean0);
      
      String string1 = StringUtils.center("0.0", (-22));
      assertNotNull(string1);
      assertEquals("0.0", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.left("0.0", (-1127));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.ordinalIndexOf("", "0.0", 0);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "0.0";
      charSequenceArray0[1] = (CharSequence) "0.0";
      charSequenceArray0[2] = (CharSequence) "0.0";
      charSequenceArray0[3] = (CharSequence) "0.0";
      charSequenceArray0[4] = (CharSequence) "0.0";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "0.0";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNotNull(charSequence0);
      assertEquals("0.0", charSequence0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string0));
      
      int int1 = StringUtils.indexOfAny((CharSequence) "0.0", charSequenceArray0);
      assertEquals(0, int1);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
      
      String string0 = StringUtils.rotate("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isBlank(charSequenceArray0[1]);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string1 = StringUtils.abbreviate("", "", 763, 763);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 321;
      intArray0[2] = (-589);
      intArray0[3] = 744;
      intArray0[4] = 0;
      intArray0[5] = 1174;
      intArray0[6] = 322;
      intArray0[7] = 876;
      String string0 = StringUtils.join(intArray0, 'x');
      assertArrayEquals(new int[] {0, 321, (-589), 744, 0, 1174, 322, 876}, intArray0);
      assertNotNull(string0);
      assertEquals("0x321x-589x744x0x1174x322x876", string0);
      assertEquals(8, intArray0.length);
      
      boolean boolean0 = StringUtils.isNotEmpty("0x321x-589x744x0x1174x322x876");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-1367L);
      longArray0[1] = (long) 322;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 744;
      longArray0[7] = 1L;
      String string1 = StringUtils.join(longArray0, 'x');
      assertArrayEquals(new long[] {(-1367L), 322L, 0L, 0L, 0L, 0L, 744L, 1L}, longArray0);
      assertNotNull(string1);
      assertEquals("-1367x322x0x0x0x0x744x1", string1);
      assertEquals(8, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.upperCase("2b'uTv<FtxJA");
      assertNotNull(string2);
      assertEquals("2B'UTV<FTXJA", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.capitalize("}'R|x,xeF7J");
      assertNotNull(string3);
      assertEquals("}'R|x,xeF7J", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "2b'uTv<FtxJA", (CharSequence) "}'R|x,xeF7J");
      assertEquals(0, int0);
      
      String string4 = StringUtils.rightPad("0x321x-589x744x0x1174x322x876", 322, 'x');
      assertNotNull(string4);
      assertEquals("0x321x-589x744x0x1174x322x876xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.substring("C+sI'", 876, (-133));
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      String string0 = StringUtils.center("F<?xB3erwgW#I", 2626);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("F<?xB3erwgW#I", "F<?xB3erwgW#I");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[1] = (CharSequence) "F<?xB3erwgW#I";
      String[] stringArray0 = StringUtils.substringsBetween("V4eC", "p:6~x!_*q9ju2", "ch");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      String string0 = StringUtils.replace("Comparator should not be null.", " yu3k0b", "{s");
      assertNotNull(string0);
      assertEquals("Comparator should not be null.", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Comparator should not be null.", (CharSequence) "{s");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Comparator should not be null.", "Comparator should not be null.");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("{s", " yu3k0b", "{s");
      assertNull(stringArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte)81;
      byteArray0[8] = (byte) (-41);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'm', 8, 546);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.removeIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((List<?>) null, ']', (-1), 36);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      String string0 = StringUtils.join((List<?>) stack0, 'I', 2508, 2508);
      assertFalse(stack0.contains(2508));
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add("HTaTx_5~J2I");
      assertTrue(arrayList0.contains("HTaTx_5~J2I"));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      String string0 = StringUtils.join((List<?>) arrayList0, 'X', 581, 581);
      assertTrue(arrayList0.contains("HTaTx_5~J2I"));
      assertFalse(arrayList0.contains(string0));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 581, 581);
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) null, locale_FilteringMode0);
      assertFalse(list0.contains(locale0));
      assertNotNull(list0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string1 = StringUtils.lowerCase("The character ", locale0);
      assertNotNull(string1);
      assertEquals("the character ", string1);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (-1723), 8192);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      String string0 = StringUtils.unwrap("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String string1 = StringUtils.lowerCase("ib#P(al`Z^s4", locale0);
      assertNotNull(string1);
      assertEquals("ib#p(al`z^s4", string1);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 1);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'P'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      
      String string1 = StringUtils.removeFirst((String) null, "\"%0_|agqVokZcYT8");
      assertNull(string1);
      
      String string2 = StringUtils.getDigits((String) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      String string3 = StringUtils.lowerCase("s37T5zG:y\"Z/dRij4.", locale0);
      assertNotNull(string3);
      assertEquals("s37t5zg:y\"z/drij4.", string3);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.replaceAll("-}", "-}", "-}");
      assertNotNull(string0);
      assertEquals("-}", string0);
      
      charSequenceArray0[0] = (CharSequence) "-}";
      String string1 = StringUtils.removeStart(";qK", "org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string1);
      assertEquals(";qK", string1);
      assertFalse(string1.equals((Object)string0));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("org.apache.commons.lang3.LocaleUtils"));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = hashSet0.add("{b>;w&ymP^T#/G|(~]R");
      assertTrue(hashSet0.contains("{b>;w&ymP^T#/G|(~]R"));
      assertFalse(hashSet0.contains("org.apache.commons.lang3.LocaleUtils"));
      assertTrue(boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      int int0 = StringUtils.indexOfAny((CharSequence) "-}", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      String string0 = StringUtils.abbreviate("JmUywP/OzwgyCa", 8);
      assertNotNull(string0);
      assertEquals("JmUyw...", string0);
      
      int int0 = StringUtils.length("JmUyw...");
      assertEquals(8, int0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "JmUywP/OzwgyCa";
      stringArray0[1] = "JmUywP/OzwgyCa";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "JmUywP/OzwgyCa");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "JmUywP/OzwgyCa", (CharSequence) "JmUyw...");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "JmUywP/OzwgyCa", (-1497));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 3395);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("<9");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceIgnoreCase("[$y(eyj?y_t}", "[$y(eyj?y_t}", "<9");
      assertNotNull(string0);
      assertEquals("<9", string0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string1 = StringUtils.join(shortArray0, 's', (int) (short)52, (int) (short)52);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(1, shortArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) stringArray0);
      assertNull(charSequence0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " yu3k0bH:Wb_hfN^Zfu<q0]a", (CharSequence) null, (int) (short)52);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.overlay(" yu3k0bH:Wb_hfN^Zfu<q0]a", "<9", (-1), (short)52);
      assertNotNull(string2);
      assertEquals("<9", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, '7');
      assertFalse(linkedList0.contains('7'));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("", 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.unwrap("_Fxh `ug", '7');
      assertNotNull(string3);
      assertEquals("_Fxh `ug", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string4);
      assertEquals(6, stringArray0.length);
      
      String string5 = StringUtils.join((Object[]) stringArray0, '7');
      assertNotNull(string5);
      assertEquals("77777", string5);
      assertEquals(6, stringArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.swapCase("77777");
      assertNotNull(string6);
      assertEquals("77777", string6);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "gD", (CharSequence) "gD", 0);
      assertEquals(0, int0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertFalse(stack0.contains(0));
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      String string0 = StringUtils.join((List<?>) stack0, '6', 35, 0);
      assertFalse(stack0.contains(0));
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "!>");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "-{RV_kn7cf");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "-{RV_kn7cf", (CharSequence) "!>");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("!>");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("!>", "-{RV_kn7cf");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isNumericSpace("!>");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      String string1 = StringUtils.repeat("}^-B.v-;x7[?hT", 0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "-{RV_kn7cf";
      stringArray0[2] = "";
      stringArray0[3] = "i#n<";
      stringArray0[4] = "}^-B.v-;x7[?hT";
      stringArray0[5] = "";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string2);
      assertEquals("-{RV_kn7cf", string2);
      assertEquals(6, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((Object[]) stringArray0, '7');
      assertNotNull(string3);
      assertEquals("7-{RV_kn7cf77i#n<7}^-B.v-;x7[?hT7", string3);
      assertEquals(6, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.swapCase("7-{RV_kn7cf77i#n<7}^-B.v-;x7[?hT7");
      assertNotNull(string4);
      assertEquals("7-{rv_KN7CF77I#N<7}^-b.V-;X7[?Ht7", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "7-{rv_KN7CF77I#N<7}^-b.V-;X7[?Ht7", (CharSequence) "}^-B.v-;x7[?hT", 0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing((String) null, "Minimum abbreviation width with offset is %d");
      assertNull(string0);
      
      String string1 = StringUtils.defaultString((String) null);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("C$Sc].m", "C$Sc].m");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 1360);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeEnd("", "Vz#u");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.removeEndIgnoreCase((String) null, (String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      String string0 = StringUtils.left(" vs ", 51);
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = '^';
      charArray0[2] = 'L';
      String[] stringArray0 = new String[5];
      stringArray0[0] = " vs ";
      stringArray0[1] = " vs ";
      stringArray0[2] = " vs ";
      stringArray0[3] = " vs ";
      stringArray0[4] = " vs ";
      String string1 = StringUtils.replaceEach(" vs ", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals(" vs ", string1);
      assertEquals(5, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.split("N+q}\"6h=#~F_W>+");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.compareIgnoreCase("offset cannot be negative", " vs ", true);
      assertEquals(79, int0);
      
      int int1 = StringUtils.compareIgnoreCase("El/<WPsZicls1", "");
      assertEquals(14, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      String string0 = StringUtils.left(" vs ", 51);
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = '^';
      charArray0[2] = 'L';
      charArray0[3] = 'R';
      charArray0[4] = 'A';
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'R';
      doubleArray0[1] = (double) 'J';
      doubleArray0[2] = (double) 'L';
      doubleArray0[3] = (double) 'L';
      doubleArray0[4] = (double) 'A';
      doubleArray0[5] = (double) 'R';
      doubleArray0[6] = (double) 'R';
      String string1 = StringUtils.join(doubleArray0, '^');
      assertArrayEquals(new double[] {82.0, 74.0, 76.0, 76.0, 65.0, 82.0, 82.0}, doubleArray0, 0.01);
      assertNotNull(string1);
      assertEquals("82.0^74.0^76.0^76.0^65.0^82.0^82.0", string1);
      assertEquals(7, doubleArray0.length);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.mid(stringArray0[2], 54, 54);
      assertNull(string0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripAccents("{p");
      assertNotNull(string1);
      assertEquals("{p", string1);
      
      String string2 = StringUtils.toRootUpperCase("{b>;w&ymP^T#/G|(~]R");
      assertNotNull(string2);
      assertEquals("{B>;W&YMP^T#/G|(~]R", string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.difference("{b>;w&ymP^T#/G|(~]R", string0);
      assertNotNull(string3);
      assertEquals("{b>;w&ymP^T#/G|(~]R", string3);
      assertEquals(4, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      String string0 = StringUtils.rightPad("H6]?6N=STOs", 0);
      assertNotNull(string0);
      assertEquals("H6]?6N=STOs", string0);
      
      int int0 = StringUtils.compare("H6]?6N=STOs", "H6]?6N=STOs", false);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "uR]", "\r", 7);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      String string2 = locale0.getScript();
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = locale0.getDisplayVariant((Locale) null);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = (Object) "H6]?6N=STOs";
      objectArray0[3] = (Object) null;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = linkedList0.addAll((Collection<? extends Locale.LanguageRange>) stack0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      String string4 = StringUtils.join(objectArray0, '`');
      assertNotNull(string4);
      assertEquals(7, objectArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.remove("H:Wb_hfN^Zfu<q0]a", "|W*cq:$Rd_Z@9lZ");
      assertNotNull(string5);
      assertEquals("H:Wb_hfN^Zfu<q0]a", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.capitalize("");
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "r'=,XU$Ez,o;NW'}C@7";
      String string7 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertNotNull(string7);
      assertEquals("", string7);
      assertEquals(1, stringArray0.length);
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      
      String string8 = StringUtils.substringBeforeLast("", "");
      assertNotNull(string8);
      assertEquals("", string8);
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Brf_/b?Z!6'~);xWd", 'a');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.capitalize(":yK)^1f{>C/3L|");
      assertNotNull(string0);
      assertEquals(":yK)^1f{>C/3L|", string0);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("q<wn!3B");
      assertNotNull(string0);
      assertEquals("q<wn!3B", string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'H';
      charArray0[2] = 'v';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "q<wn!3B", charArray0);
      assertArrayEquals(new char[] {'H', '\u0000', 'v'}, charArray0);
      assertEquals(0, int0);
      assertEquals(3, charArray0.length);
      
      String string1 = StringUtils.substringAfterLast("q<wn!3B", 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "q<wn!3B", charArray0);
      assertArrayEquals(new char[] {'H', '\u0000', 'v'}, charArray0);
      assertEquals(0, int1);
      assertEquals(3, charArray0.length);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.substringAfterLast("", 160);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.center("q<wn!3B", 0);
      assertNotNull(string3);
      assertEquals("q<wn!3B", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
      
      String string0 = StringUtils.left("`$Q6b\"eY=J", 1);
      assertNotNull(string0);
      assertEquals("`", string0);
      
      String string1 = StringUtils.defaultString("-*S<\"{V@%*P7");
      assertNotNull(string1);
      assertEquals("-*S<\"{V@%*P7", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "`", (CharSequence) "-*S<\"{V@%*P7", 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      String string0 = StringUtils.leftPad("=|f+]JjH> r", 2722);
      assertNotNull(string0);
      
      String string1 = StringUtils.EMPTY;
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) "", 13);
      assertEquals((-1), int0);
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      String string0 = StringUtils.right("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.removeStart("=gvoQ^n-k0*[+f", "");
      assertNotNull(string1);
      assertEquals("=gvoQ^n-k0*[+f", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains(string1));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) hashSet0, locale_FilteringMode0);
      assertFalse(hashSet0.contains(string1));
      assertFalse(list0.contains(string1));
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string2 = StringUtils.substringBefore("G+Qs", 0);
      assertNotNull(string2);
      assertEquals("G+Qs", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "G+Qs", (CharSequence) "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.swapCase("N-`)Kj8(fJ+1gYw%0p({Rsl");
      assertNotNull(string3);
      assertEquals("n-`)kJ8(Fj+1GyW%0P({rSL", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      
      String string4 = StringUtils.reverse("2OCS0s^!SW p=\"z");
      assertNotNull(string4);
      assertEquals("z\"=p WS!^s0SCO2", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "z\"=p WS!^s0SCO2", (CharSequence) "", 5);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("z\"=p WS!^s0SCO2");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string5 = StringUtils.repeat('4', 0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.wrap("S+m`jMI:r", '1');
      assertNotNull(string6);
      assertEquals("1S+m`jMI:r1", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string5));
      
      int int1 = StringUtils.indexOf((CharSequence) "Threshold must not be negative", (CharSequence) "n-`)kJ8(Fj+1GyW%0P({rSL");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "!>");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "-{RV_kn7cf");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "-{RV_kn7cf", (CharSequence) "!>");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("!>");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("!>", "-{RV_kn7cf");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isNumericSpace("!>");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String string1 = StringUtils.repeat("}^-B.v-;x7[?hT", 0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "-{RV_kn7cf";
      stringArray0[2] = "";
      stringArray0[3] = "i#n<";
      stringArray0[4] = "}^-B.v-;x7[?hT";
      stringArray0[5] = "";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string2);
      assertEquals("-{RV_kn7cf", string2);
      assertEquals(6, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceChars("F{0*-2MUIOVz#uN-`)", '5', ']');
      assertNotNull(string3);
      assertEquals("F{0*-2MUIOVz#uN-`)", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("H5eyaHrS+m`jMI:r", "F{0*-2MUIOVz#uN-`)");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("H:Wb_hfN^KZfu<q0j;", "...", 1);
      assertNotNull(string0);
      assertEquals("H:Wb_hfN^KZfu<q0j;", string0);
      
      boolean boolean0 = StringUtils.isBlank("...");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate((String) null, "...", 1, 1);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("b'=_jED");
      assertNotNull(string0);
      assertEquals("b'=_jED", string0);
      
      String string1 = StringUtils.LF;
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrap("b'=_jED", "S=]`jMI:r), Length: )");
      assertNotNull(string2);
      assertEquals("S=]`jMI:r), Length: )b'=_jEDS=]`jMI:r), Length: )", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "b'=_jED", (CharSequence) "S=]`jMI:r), Length: )b'=_jEDS=]`jMI:r), Length: )", (-4289));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "=gvoQ^n-k0*[+f", 708);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string1 = null;
      String string2 = StringUtils.abbreviateMiddle("=gvoQ^n-k0*[+f", (String) null, 45);
      assertNotNull(string2);
      assertEquals("=gvoQ^n-k0*[+f", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      
      StringWriter stringWriter0 = new StringWriter(708);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('3');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("3", stringWriter0.toString());
      assertEquals("3", stringWriter1.toString());
      
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "=gvoQ^n-k0*[+f", 45, 45);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'N';
      floatArray0[1] = (float) 'S';
      floatArray0[2] = (float) 'N';
      floatArray0[3] = (float) 'N';
      floatArray0[4] = (float) 'N';
      floatArray0[5] = (float) 'N';
      floatArray0[6] = (float) 'S';
      floatArray0[7] = (float) 'N';
      floatArray0[8] = (float) 'N';
      String string0 = StringUtils.join(floatArray0, 'N');
      assertArrayEquals(new float[] {78.0F, 83.0F, 78.0F, 78.0F, 78.0F, 78.0F, 83.0F, 78.0F, 78.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals("78.0N83.0N78.0N78.0N78.0N78.0N83.0N78.0N78.0", string0);
      assertEquals(9, floatArray0.length);
      
      boolean boolean0 = StringUtils.isBlank("78.0N83.0N78.0N78.0N78.0N78.0N83.0N78.0N78.0");
      assertFalse(boolean0);
      
      String string1 = StringUtils.center("\r", (-22));
      assertNotNull(string1);
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "maxWith cannot be negative";
      int int0 = 1424;
      String string3 = StringUtils.left("maxWith cannot be negative", 1424);
      assertNotNull(string3);
      assertEquals("maxWith cannot be negative", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = StringUtils.ordinalIndexOf("maxWith cannot be negative", "maxWith cannot be negative", (-1127));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "maxWith cannot be negative", (CharSequence) "78.0N83.0N78.0N78.0N78.0N78.0N83.0N78.0N78.0", 1424);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      boolean boolean1 = StringUtils.isNumericSpace("\r");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int3 = (-1);
      String string4 = StringUtils.abbreviateMiddle("F{0*-2MUIOVz#uN-`)", "maxWith cannot be negative", (-1));
      assertNotNull(string4);
      assertEquals("F{0*-2MUIOVz#uN-`)", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      String string0 = StringUtils.remove("M$x7_ ao*T&5nR,!C ", '*');
      assertNotNull(string0);
      assertEquals("M$x7_ aoT&5nR,!C ", string0);
      
      String string1 = StringUtils.stripAccents(" yu3k0b");
      assertNotNull(string1);
      assertEquals(" yu3k0b", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trim("Cannot clone Cloneable type ");
      assertNotNull(string2);
      assertEquals("Cannot clone Cloneable type", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfterLast("Cannot clone Cloneable type ", 0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.wrapIfMissing(" yu3k0b", "H:Wb_hfN^Zfu<q0]a");
      assertNotNull(string4);
      assertEquals("H:Wb_hfN^Zfu<q0]a yu3k0bH:Wb_hfN^Zfu<q0]a", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.stripAccents(" ");
      assertNotNull(string5);
      assertEquals(" ", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "M$x7_ ao*T&5nR,!C ";
      charSequenceArray0[2] = (CharSequence) " yu3k0b";
      boolean boolean0 = StringUtils.startsWithAny("M$x7_ aoT&5nR,!C ", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      String string6 = StringUtils.join(booleanArray0, '*');
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, false}, booleanArray0));
      assertNotNull(string6);
      assertEquals("false*false*false*true*false*false*false", string6);
      assertEquals(7, booleanArray0.length);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "H:Wb_hfN^Zfu<q0]a";
      stringArray0[1] = null;
      stringArray0[2] = "false*false*false*true*false*false*false";
      stringArray0[3] = " ";
      stringArray0[4] = "maxWith annot be negative";
      String string7 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string7);
      assertEquals("H:Wb_hfN^Zfu<q0]a", string7);
      assertEquals(5, stringArray0.length);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      String string0 = StringUtils.difference("The character ", "Minimum abbreviation width is %dMinimum abbreviation width is %d");
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width is %dMinimum abbreviation width is %d", string0);
      
      String string1 = StringUtils.wrapIfMissing("Arguments cannot both be null", "Minimum abbreviation width is %dMinimum abbreviation width is %d");
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width is %dMinimum abbreviation width is %dArguments cannot both be nullMinimum abbreviation width is %dMinimum abbreviation width is %d", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      String string0 = StringUtils.remove("M$x7_ ao*T&5nR,!C ", '*');
      assertNotNull(string0);
      assertEquals("M$x7_ aoT&5nR,!C ", string0);
      
      String string1 = StringUtils.toRootUpperCase("s");
      assertNotNull(string1);
      assertEquals("S", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1812.977651236);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      String string0 = "object";
      String string1 = StringUtils.leftPad("object", 3276);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) null, 3276);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      String string0 = StringUtils.repeat('}', 53);
      assertNotNull(string0);
      assertEquals("}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}", string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Array and element cannot both be null", (CharSequence) null, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("q<wn!3B");
      assertNotNull(string0);
      assertEquals("q<wn!3B", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "q<wn!3B";
      String string1 = StringUtils.replace("org.apache.commons.lang3.StringUtils", "Arguments cannot both be null", "...");
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[2] = (CharSequence) "q<wn!3B";
      charSequenceArray0[3] = (CharSequence) "q<wn!3B";
      charSequenceArray0[4] = (CharSequence) "q<wn!3B";
      charSequenceArray0[5] = (CharSequence) "q<wn!3B";
      charSequenceArray0[6] = (CharSequence) "q<wn!3B";
      charSequenceArray0[7] = (CharSequence) "q<wn!3B";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("Arguments cannot both be null", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.remove("Eg( SI,sTM9c", ';');
      assertNotNull(string0);
      assertEquals("Eg( SI,sTM9c", string0);
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      
      int int0 = StringUtils.getFuzzyDistance("Eg( SI,sTM9c", "Eg( SI,sTM9c", locale0);
      assertEquals(37, int0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Kj8(fJ+1gYw%0p({Rsl";
      stringArray0[1] = "'_[x5 {|V,#n2L[GC";
      stringArray0[2] = "...";
      stringArray0[3] = "&*ed(}$k,=V";
      stringArray0[4] = "<\",0";
      stringArray0[5] = " ";
      stringArray0[6] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string0);
      assertEquals("Kj8(fJ+1gYw%0p({Rsl", string0);
      assertEquals(7, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", 3322, 3322);
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      String[] stringArray1 = Locale.getISOLanguages();
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(188, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = locale0.toLanguageTag();
      assertNotNull(string1);
      assertEquals("de-DE", string1);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.getFuzzyDistance(")JEbGgqcKXWN<8(", "Kj8(fJ+1gYw%0p({Rsl", locale0);
      assertEquals(1, int1);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("H5eyaHr", (String) null, "Kj8(fJ+1gYw%0p({Rsl");
      assertNotNull(string2);
      assertEquals("H5eyaHr", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      String string0 = StringUtils.remove("M$x7_ ao*T&5nR,!C ", '*');
      assertNotNull(string0);
      assertEquals("M$x7_ aoT&5nR,!C ", string0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      
      int int0 = StringUtils.getFuzzyDistance("~", "M$x7_ aoT&5nR,!C ", locale0);
      assertEquals(0, int0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      String string0 = StringUtils.rightPad("]\"@82CP8m_", 0);
      assertNotNull(string0);
      assertEquals("]\"@82CP8m_", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "]\"@82CP8m_", (CharSequence) "]\"@82CP8m_", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.left("]\"@82CP8m_", 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("]\"@82CP8m_", "]\"@82CP8m_");
      assertEquals(1.0, double0, 0.01);
      
      String string2 = StringUtils.overlay("NNJJJ(>;<?(dD:$y^", "]\"@82CP8m_", 0, 0);
      assertNotNull(string2);
      assertEquals("]\"@82CP8m_NNJJJ(>;<?(dD:$y^", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBetween("]\"@82CP8m_", "\r", "NNJJJ(>;<?(dD:$y^");
      assertNull(string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "NNJJJ(>;<?(dD:$y^", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "...", (CharSequence) "{b>;w&ymP^T#/G|(~]R");
      assertNotNull(charSequence0);
      assertEquals("...", charSequence0);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string0 = StringUtils.repeat('%', 3947);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("peCt% #=Y46Ev9%l-W", "O*ed&`");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = (-1324);
      String[] stringArray0 = StringUtils.split("kc;=`}?");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("kc;=`}?", "offset cannot be negative", false);
      assertEquals((-4), int0);
      
      int int1 = StringUtils.compareIgnoreCase("kc;=`}?", "oH#_m");
      assertEquals((-4), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray1 = StringUtils.split("El/<WPsZicls1", "kc;=`}?");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.wrap("offset cannot be negative", 'b');
      assertNotNull(string0);
      assertEquals("boffset cannot be negativeb", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)2;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      
      String string1 = StringUtils.toEncodedString(byteArray0, charset0);
      assertArrayEquals(new byte[] {(byte)6, (byte)2}, byteArray0);
      assertNotNull(string1);
      assertEquals("\u0006\u0002", string1);
      assertEquals(2, byteArray0.length);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertFalse(string1.equals((Object)string0));
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "boffset cannot be negativeb", (CharSequence) "oH#_m");
      assertEquals(26, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.strip((String) null, "108A0A0A-1118A64A-2212");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "*n@^D47zIYx`#\"ladn", 235);
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlpha("*n@^D47zIYx`#\"ladn");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: 0", 1120, 1846);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) ", Length: 0", 1846);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceOnce("", "', has a length less than 2", "', has a length less than 2");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = 'X';
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 1846;
      doubleArray0[2] = (double) 'X';
      doubleArray0[3] = (-1123.77485);
      doubleArray0[4] = (double) 'O';
      doubleArray0[5] = (double) 'O';
      doubleArray0[6] = (double) '1';
      String string2 = StringUtils.join(doubleArray0, '^');
      assertArrayEquals(new double[] {0.0, 1846.0, 88.0, (-1123.77485), 79.0, 79.0, 49.0}, doubleArray0, 0.01);
      assertNotNull(string2);
      assertEquals("0.0^1846.0^88.0^-1123.77485^79.0^79.0^49.0", string2);
      assertEquals(7, doubleArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) ", Length: 0";
      charSequenceArray0[6] = (CharSequence) "', has a length less than 2";
      String string3 = StringUtils.prependIfMissingIgnoreCase("XfFRk8'&(*]E2m/[s", ", Length: 0", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("XfFRk8'&(*]E2m/[s", string3);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.lastOrdinalIndexOf("", ", Length: 0", 1120);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.removeEnd("F{0*-2MUIOVz#u", "N-`)");
      assertNotNull(string4);
      assertEquals("F{0*-2MUIOVz#u", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("^+)", ", Length: 0", 2177);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 108;
      intArray0[1] = 0;
      intArray0[3] = (-1118);
      intArray0[4] = 64;
      intArray0[5] = (-2212);
      String string0 = StringUtils.join(intArray0, 'A');
      assertArrayEquals(new int[] {108, 0, 0, (-1118), 64, (-2212)}, intArray0);
      assertNotNull(string0);
      assertEquals("108A0A0A-1118A64A-2212", string0);
      assertEquals(6, intArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("108A0A0A-1118A64A-2212", "s37T5zG:y\"Z/dRij4.", 64);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.deleteWhitespace("s37T5zG:y\"Z/dRij4.");
      assertNotNull(string1);
      assertEquals("s37T5zG:y\"Z/dRij4.", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToNull("108A0A0A-1118A64A-2212");
      assertNotNull(string2);
      assertEquals("108A0A0A-1118A64A-2212", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.trim("s37T5zG:y\"Z/dRij4.");
      assertNotNull(string3);
      assertEquals("s37T5zG:y\"Z/dRij4.", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.ordinalIndexOf("s37T5zG:y\"Z/dRij4.", "s37T5zG:y\"Z/dRij4.", 108);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.getDigits("108A0A0A-1118A64A-2212");
      assertNotNull(string4);
      assertEquals("108001118642212", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      int int1 = StringUtils.indexOf((CharSequence) "s37T5zG:y\"Z/dRij4.", (-2212));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.center("s37T5zG:y\"Z/dRij4.", 0, "");
      assertNotNull(string5);
      assertEquals("s37T5zG:y\"Z/dRij4.", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.deleteWhitespace("'");
      assertNotNull(string6);
      assertEquals("'", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.unwrap("s37T5zG:y\"Z/dRij4.", "s37T5zG:y\"Z/dRij4.");
      assertNotNull(string7);
      assertEquals("s37T5zG:y\"Z/dRij4.", string7);
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAllUpperCase("s37T5zG:y\"Z/dRij4.");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string8 = StringUtils.mid("s37T5zG:y\"Z/dRij4.", 108, 0);
      assertNotNull(string8);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      
      boolean boolean2 = StringUtils.isAsciiPrintable("s37T5zG:y\"Z/dRij4.");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string9 = StringUtils.center(" has no clone method", (-1118), "s37T5zG:y\"Z/dRij4.");
      assertNotNull(string9);
      assertEquals(" has no clone method", string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      String string0 = StringUtils.stripStart("L", "r+)HMdAw0{");
      assertNotNull(string0);
      assertEquals("L", string0);
      
      String string1 = StringUtils.removeIgnoreCase("L", "L");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.normalizeSpace("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.strip("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("y,~Mk>(K:.E.Af:ar");
      assertNotNull(stringArray0);
      assertEquals(13, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int2);
      assertEquals(3, charArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String string2 = StringUtils.substringAfterLast("", 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.abbreviate("", 0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.removeStartIgnoreCase("", "...");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = StringUtils.normalizeSpace("");
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      String string0 = StringUtils.substring("Brf_/b?Z!6'~);xWd", (-2962));
      assertNotNull(string0);
      assertEquals("Brf_/b?Z!6'~);xWd", string0);
      
      String string1 = StringUtils.substringAfter("+kIoEK", "org.apache.commons.lang3.Charsets");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 108;
      intArray0[1] = 0;
      intArray0[3] = (-1118);
      intArray0[4] = 64;
      intArray0[5] = (-2212);
      String string0 = StringUtils.join(intArray0, 'A');
      assertArrayEquals(new int[] {108, 0, 0, (-1118), 64, (-2212)}, intArray0);
      assertNotNull(string0);
      assertEquals("108A0A0A-1118A64A-2212", string0);
      assertEquals(6, intArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("108A0A0A-1118A64A-2212", "s37T5zG:y\"Z/dRij4.", 64);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.deleteWhitespace("s37T5zG:y\"Z/dRij4.");
      assertNotNull(string1);
      assertEquals("s37T5zG:y\"Z/dRij4.", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToNull("108A0A0A-1118A64A-2212");
      assertNotNull(string2);
      assertEquals("108A0A0A-1118A64A-2212", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.trim("s37T5zG:y\"Z/dRij4.");
      assertNotNull(string3);
      assertEquals("s37T5zG:y\"Z/dRij4.", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.ordinalIndexOf("s37T5zG:y\"Z/dRij4.", "s37T5zG:y\"Z/dRij4.", 108);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.getDigits("108A0A0A-1118A64A-2212");
      assertNotNull(string4);
      assertEquals("108001118642212", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      int int1 = StringUtils.indexOf((CharSequence) "s37T5zG:y\"Z/dRij4.", (-2212));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.center("s37T5zG:y\"Z/dRij4.", 0, "");
      assertNotNull(string5);
      assertEquals("s37T5zG:y\"Z/dRij4.", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      
      String string6 = StringUtils.deleteWhitespace("'");
      assertNotNull(string6);
      assertEquals("'", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      
      String string7 = StringUtils.unwrap("s37T5zG:y\"Z/dRij4.", "s37T5zG:y\"Z/dRij4.");
      assertNotNull(string7);
      assertEquals("s37T5zG:y\"Z/dRij4.", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      
      boolean boolean1 = StringUtils.isAllUpperCase("s37T5zG:y\"Z/dRij4.");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string8 = StringUtils.mid("s37T5zG:y\"Z/dRij4.", 108, 0);
      assertNotNull(string8);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      
      String string9 = StringUtils.substring(" has no clone method", (-2212));
      assertNotNull(string9);
      assertEquals(" has no clone method", string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, 'q');
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, shortArray0.length);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.rotate("q^rXp[gO4Y]~.,", (-1));
      assertNotNull(string1);
      assertEquals("^rXp[gO4Y]~.,q", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("q^rXp[gO4Y]~.,");
      assertNotNull(string2);
      assertEquals("q^rXp[gO4Y]~.,", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "B3erwgW#I");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(188, stringArray0.length);
      assertEquals(188, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1, "");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotNull(stringArray2);
      assertEquals(188, stringArray0.length);
      assertEquals(188, stringArray1.length);
      assertEquals(188, stringArray2.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.stripEnd("\n", "Minimum abbreviation width is %d");
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "]^g`?OZ|<hS78";
      String string0 = StringUtils.unwrap("]^g`?OZ|<hS78", 'p');
      assertNotNull(string0);
      assertEquals("]^g`?OZ|<hS78", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "]^g`?OZ|<hS78", 14, 14);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("<G52%>=\"rhh|&GkAD2p", "<G52%>=\"rhh|&GkAD2p");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      String string1 = StringUtils.removePattern("w`V", "");
      assertNotNull(string1);
      assertEquals("w`V", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "<G52%>=\"rhh|&GkAD2p", (CharSequence) "<G52%>=\"rhh|&GkAD2p", 321);
      assertEquals(0, int0);
      
      String string2 = StringUtils.strip("w`V", "");
      assertNotNull(string2);
      assertEquals("w`V", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("GT,v,wBRx-;s");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "w`V", 54, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = '}';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "w`V", charArray0);
      assertArrayEquals(new char[] {'S', 'S', '}'}, charArray0);
      assertFalse(boolean1);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("2yT", 1668, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string0 = StringUtils.repeat('-', 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean1 = StringUtils.isNumeric("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 0);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "Kj8(fJ+1gYw%0p({Rsl", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isNumeric("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("", "^n$uFi ;o 2^'gNQ", true);
      assertEquals((-16), int0);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      String string1 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.reverseDelimited("", 'W');
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.joinWith("", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.normalizeSpace("Threshold must not be negative");
      assertNotNull(string4);
      assertEquals("Threshold must not be negative", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = "Kj8(fJ+1gYw%0p({Rsl";
      // Undeclared exception!
      try { 
        Charset.forName("Kj8(fJ+1gYw%0p({Rsl");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Kj8(fJ+1gYw%0p({Rsl
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      String string0 = " vs ";
      String string1 = "7-6k<";
      String string2 = StringUtils.unwrap(" vs ", "7-6k<");
      assertNotNull(string2);
      assertEquals(" vs ", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) " vs ";
      objectArray0[2] = (Object) " vs ";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "$=FJzQ", (-3467), 792);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3467
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      String string0 = StringUtils.unwrap(" vs ", "7-6k<");
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.rightPad(" vs ", 10);
      assertNotNull(string1);
      assertEquals(" vs       ", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("7-6k<", "offset cannot be negative", 5);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("offset cannot be negative");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceIgnoreCase("7-6k<", " vs ", "7-6k<");
      assertNotNull(string2);
      assertEquals("7-6k<", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isNumeric(" vs       ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("\r", "offset cannot be negative", false);
      assertEquals((-98), int0);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-3948L);
      longArray0[1] = 1541L;
      longArray0[2] = 17L;
      longArray0[3] = 1243L;
      longArray0[4] = 1L;
      longArray0[5] = 63L;
      longArray0[6] = 1L;
      String string1 = StringUtils.replaceOnceIgnoreCase("\n", "\n", "\n");
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.join(objectArray0, (String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(5, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "Threshold must not be negative";
      String string2 = StringUtils.substring("!V#P]^fu;<zmm!yi", (-1549), (-1549));
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "Threshold must not be negative";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) "Threshold must not be negative";
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      String string0 = StringUtils.chop("s37T5zG:y\"Z/dRij4.");
      assertNotNull(string0);
      assertEquals("s37T5zG:y\"Z/dRij4", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "s37T5zG:y\"Z/dRij4", (char[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("s37T5zG:y\"Z/dRij4", 'i');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.upperCase("`$Q6b\"eY=J");
      assertNotNull(string1);
      assertEquals("`$Q6B\"EY=J", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "s37T5zG:y\"Z/dRij4.", (CharSequence) "`$Q6B\"EY=J");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substring("`$Q6B\"EY=J", (-2297), 30);
      assertNotNull(string2);
      assertEquals("`$Q6B\"EY=J", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", '{');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erwgW#IB3erw");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, 322);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("o^8[ QzCX)vw'eCq9)", "F))%pmO7aG;[*Z7vCAF))%pmO7aG;Brf_/b?Z!6'~);xWd");
      assertNotNull(string0);
      assertEquals("F))%pmO7aG;[*Z7vCAF))%pmO7aG;Brf_/b?Z!6'~);xWdo^8[ QzCX)vw'eCq9)F))%pmO7aG;[*Z7vCAF))%pmO7aG;Brf_/b?Z!6'~);xWd", string0);
      
      String string1 = StringUtils.join((boolean[]) null, '!', (int) 'D', (-951));
      assertNull(string1);
      
      String string2 = StringUtils.left((String) null, 16);
      assertNull(string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf("F))%pmO7aG;[*Z7vCAF))%pmO7aG;Brf_/b?Z!6'~);xWdo^8[ QzCX)vw'eCq9)F))%pmO7aG;[*Z7vCAF))%pmO7aG;Brf_/b?Z!6'~);xWd", "F))%pmO7aG;[*Z7vCAF))%pmO7aG;Brf_/b?Z!6'~);xWd", 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      String string1 = StringUtils.join((int[]) null, 'X', 3272, 3272);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, '7');
      assertFalse(linkedList0.contains('7'));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.wrap("", '7');
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("", 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.unwrap("_Fxh `ug", '7');
      assertNotNull(string3);
      assertEquals("_Fxh `ug", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "_Fxh `ug";
      stringArray0[3] = "maxWith cannot be negative";
      stringArray0[4] = "";
      stringArray0[5] = "_Fxh `ug";
      String string4 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(6, stringArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      
      String string5 = StringUtils.difference("org.apache.commons.lang3.exception.CloneFailedException", "\n");
      assertNotNull(string5);
      assertEquals("\n", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      String string0 = StringUtils.rightPad("offset cannot be negative", 0);
      assertNotNull(string0);
      assertEquals("offset cannot be negative", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Minimum abbreviation width with offset is %d", ">y", 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.difference("offset cannot be negative", "org.apache.commons.lang3.RegExUtils");
      assertNotNull(string1);
      assertEquals("rg.apache.commons.lang3.RegExUtils", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      String string0 = StringUtils.difference("yoUC=}32{,nDV", "Object varargs must not be null");
      assertNotNull(string0);
      assertEquals("Object varargs must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[1] = (CharSequence) "";
      String[] stringArray0 = StringUtils.split("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1812.977651236);
      String string0 = StringUtils.leftPad("object", 3276);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "object", (CharSequence) string0, 3276);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", " is not in the range '0' - '9'", "Ik");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substring("", 0, 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-3503.0);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-127.01985419762);
      doubleArray0[4] = (-4059.4893502253);
      doubleArray0[5] = (-3503.0);
      doubleArray0[6] = (-4059.4893502253);
      doubleArray0[7] = (double) 'Y';
      doubleArray0[8] = (-1320.766915);
      String string2 = StringUtils.join(doubleArray0, '-');
      assertArrayEquals(new double[] {(-1.0), (-3503.0), 0.0, (-127.01985419762), (-4059.4893502253), (-3503.0), (-4059.4893502253), 89.0, (-1320.766915)}, doubleArray0, 0.01);
      assertNotNull(string2);
      assertEquals("-1.0--3503.0-0.0--127.01985419762--4059.4893502253--3503.0--4059.4893502253-89.0--1320.766915", string2);
      assertEquals(9, doubleArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean3 = StringUtils.endsWithIgnoreCase(" is not in the range '0' - '9'", "Ik");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      String string3 = StringUtils.chomp("", "N-`)");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      String string0 = StringUtils.chomp("W:", "W:");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("?-393?127?1292", "W:", 102);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((char[]) null, '2');
      assertNull(string1);
      
      String string2 = StringUtils.substringBefore((String) null, (int) '2');
      assertNull(string2);
      
      String string3 = StringUtils.chomp((String) null, (String) null);
      assertNull(string3);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "ko}T_4b-.P6";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("@oXvl<g+");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("@oXvl<g+", "@oXvl<g+", "");
      assertNull(stringArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1345.0;
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1541L;
      longArray0[1] = 1541L;
      longArray0[2] = 1541L;
      longArray0[3] = 1541L;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '^', (-1611), 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1611
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("P|y-gp30P&$],v3Dw|", " is not in the range '0' - '9'", "I ");
      assertNotNull(string0);
      assertEquals("P|y-gp30P&$],v3Dw|", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("P|y-gp30P&$],v3Dw|");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "P|y-gp30P&$],v3Dw|", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlpha("P|y-gp30P&$],v3Dw|");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("P|y-gp30P&$],v3Dw|");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string1 = StringUtils.replace("I ", "P|y-gp30P&$],v3Dw|", "I ");
      assertNotNull(string1);
      assertEquals("I ", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removePattern("I ", " ");
      assertNotNull(string2);
      assertEquals("I", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("I ", "P|y-gp30P&$],v3Dw|", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.normalizeSpace("`$Q6b\"eY=J");
      assertNotNull(string3);
      assertEquals("`$Q6b\"eY=J", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.stripAccents(" is not in the range '0' - '9'");
      assertNotNull(string4);
      assertEquals(" is not in the range '0' - '9'", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean3 = StringUtils.startsWithAny("P|y-gp30P&$],v3Dw|", stringArray0);
      assertFalse(boolean3);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      boolean[] booleanArray0 = new boolean[5];
      String string5 = StringUtils.join(booleanArray0, ';');
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertNotNull(string5);
      assertEquals("false;false;false;false;false", string5);
      assertEquals(5, booleanArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean4 = StringUtils.isAllUpperCase("P|y-gp30P&$],v3Dw|");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      
      String string6 = StringUtils.mid("`$Q6b\"eY=J", (-825), 4);
      assertNotNull(string6);
      assertEquals("`$Q", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      
      String string7 = StringUtils.replaceChars((String) null, ';', ';');
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "'$", (char[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.unwrap("'$", "'$");
      assertNotNull(string0);
      assertEquals("'$", string0);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      String string0 = StringUtils.unwrap("=)", ")");
      assertNotNull(string0);
      assertEquals("=)", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("=)");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "=)";
      stringArray0[1] = "=)";
      String string1 = StringUtils.stripToNull("=)");
      assertNotNull(string1);
      assertEquals("=)", string1);
      assertTrue(string1.equals((Object)string0));
      
      Class<CharBuffer> class0 = CharBuffer.class;
      ServiceLoader<CharBuffer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      
      boolean boolean1 = StringUtils.equals((CharSequence) "=)", (CharSequence) "=)");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.substringAfterLast("=)", "=)");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.capitalize("=)");
      assertNotNull(string3);
      assertEquals("=)", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("\n", charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string1 = StringUtils.uncapitalize("\n");
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replace("mZU)=}?p#d'8", "\n", "ik|?J+kNB\"");
      assertNotNull(string2);
      assertEquals("mZU)=}?p#d'8", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 3253);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string0 = StringUtils.substringAfter("Pl@kJ7TXD", "Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, 'N');
      assertNull(string0);
      
      String string1 = StringUtils.stripAccents((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.trim((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.substringAfterLast((String) null, 197);
      assertNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("maxWith cannot be negative", (String) null);
      assertNotNull(string4);
      assertEquals("maxWith cannot be negative", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      String string5 = StringUtils.stripAccents("maxWith cannot be negative");
      assertNotNull(string5);
      assertEquals("maxWith cannot be negative", string5);
      assertTrue(string5.equals((Object)string4));
      
      charSequenceArray0[2] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      boolean boolean0 = StringUtils.startsWithAny("maxWith cannot be negative", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string6 = StringUtils.repeat((String) null, 1771);
      assertNull(string6);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "maxWith cannot be negative";
      stringArray0[5] = null;
      stringArray0[6] = "U";
      String string7 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string7);
      assertEquals("maxWith cannot be negative", string7);
      assertEquals(7, stringArray0.length);
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      
      String string8 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "\u0000oMCo~Y-}*$tHFE/[$");
      assertNotNull(string8);
      assertEquals("org.apache.commons.lang3.StringUtils", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      
      String string9 = StringUtils.replaceChars("org.apache.commons.lang3.StringUtils", (String) null, "maxWith cannot be negative");
      assertNotNull(string9);
      assertEquals("org.apache.commons.lang3.StringUtils", string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string8));
      
      String string10 = StringUtils.unwrap("org.apache.commons.lang3.StringUtils", 'N');
      assertNotNull(string10);
      assertEquals("org.apache.commons.lang3.StringUtils", string10);
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.prependIfMissing((String) null, (CharSequence) null, charSequenceArray0);
      assertNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-1));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceChars("z", (String) null, "org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string1);
      assertEquals("z", string1);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "Arguments cannot both be null", "g0G TP03bAj$ES1=");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      
      int int0 = StringUtils.getFuzzyDistance("", "g0G TP03bAj$ES1=", locale0);
      assertEquals(0, int0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.strip("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("y,~Mk>(K:.E.Af:ar");
      assertNotNull(stringArray0);
      assertEquals(13, stringArray0.length);
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string2);
      assertEquals("y", string2);
      assertEquals(13, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.remove("Supplied value must be a valid byte literal between -128 and 127: [", "y");
      assertNotNull(string3);
      assertEquals("Supplied value must be a valid bte literal between -128 and 127: [", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 0, 2);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      int int2 = StringUtils.getFuzzyDistance("", "", locale0);
      assertEquals(0, int2);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", '{');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.mid("pu^", (-2876), (-2876));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substring("", (-2876));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeFirst("Z", "14Vnn$2");
      assertNotNull(string2);
      assertEquals("Z", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("<G52%>=\"rhh|&GkAD2p", "<G52%>=\"rhh|&GkAD2p");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-1054.683981965);
      doubleArray0[2] = (-4059.4893502253);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-1320.766915);
      String string1 = StringUtils.unwrap("TN!8IcQZ*iN", 'a');
      assertNotNull(string1);
      assertEquals("TN!8IcQZ*iN", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceEach("]v_t", (String[]) null, (String[]) null);
      assertNotNull(string2);
      assertEquals("]v_t", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split("<G52%>=\"rhh|&GkAD2p");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("Uw!J-r].QfD6JQt5vd", "Uw!J-r].QfD6JQt5vd", false);
      assertEquals(0, int0);
      
      int int1 = StringUtils.compareIgnoreCase("Uw!J-r].QfD6JQt5vd", "Uw!J-r].QfD6JQt5vd");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.mid("offset cannot be negative", 1504, 1504);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean0 = StringUtils.isWhitespace("F<?xB3erwgW#I");
      assertFalse(boolean0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertFalse(vector0.contains("F<?xB3erwgW#I"));
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1078.3F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 1078.3F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1651.5587F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = (-1.0F);
      String string0 = StringUtils.join(floatArray0, 'S');
      assertArrayEquals(new float[] {1078.3F, (-1.0F), 1078.3F, 0.0F, 0.0F, 1651.5587F, (-1.0F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals("1078.3S-1.0S1078.3S0.0S0.0S1651.5587S-1.0S0.0S-1.0", string0);
      assertEquals(9, floatArray0.length);
      
      boolean boolean0 = StringUtils.isWhitespace("1078.3S-1.0S1078.3S0.0S0.0S1651.5587S-1.0S0.0S-1.0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.left("&u5{td;\"o", (-766));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultString("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "r+)HMdAw0{");
      assertNull(stringArray0);
      
      String string0 = StringUtils.removeStart(", Length: ", "r+)HMdAw0{");
      assertNotNull(string0);
      assertEquals(", Length: ", string0);
      
      int int0 = StringUtils.ordinalIndexOf(", Length: ", "Z", (-1968526675));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Z", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, 'N');
      assertNull(string0);
      
      String string1 = StringUtils.stripAccents((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.trim((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.substringAfterLast((String) null, 197);
      assertNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("maxWith annot be negative", (String) null);
      assertNotNull(string4);
      assertEquals("maxWith annot be negative", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      String string5 = StringUtils.stripAccents("maxWith annot be negative");
      assertNotNull(string5);
      assertEquals("maxWith annot be negative", string5);
      assertTrue(string5.equals((Object)string4));
      
      charSequenceArray0[2] = (CharSequence) "maxWith annot be negative";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      boolean boolean0 = StringUtils.startsWithAny("maxWith annot be negative", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      String string6 = StringUtils.join(booleanArray0, 'N');
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertNotNull(string6);
      assertEquals("trueNtrue", string6);
      assertEquals(2, booleanArray0.length);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "trueNtrue";
      stringArray0[2] = "trueNtrue";
      stringArray0[3] = null;
      String string7 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string7);
      assertEquals("trueNtrue", string7);
      assertEquals(4, stringArray0.length);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      String string0 = StringUtils.repeat('q', (-2718));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrap("org.apache.commons.lang3.exception.CloneFailedException", 'd');
      assertNotNull(string1);
      assertEquals("dorg.apache.commons.lang3.exception.CloneFailedExceptiond", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "S+m`jMI:r", (CharSequence) "Threshold must not be negative");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "!>");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("!>");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "!>";
      String string1 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.repeat('1', (-1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap("!>", 'b');
      assertNotNull(string3);
      assertEquals("b!>b", string3);
      assertFalse(string3.equals((Object)string2));
      
      int int1 = StringUtils.indexOf((CharSequence) "!>", (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      String string0 = StringUtils.wrap("Threshold must not be negative", 'K');
      assertNotNull(string0);
      assertEquals("KThreshold must not be negativeK", string0);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: 0", 76, 76);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBetween("Aborting to protect against StackOverflowError - output of one loop is the input of another", "null/empty items", "maxWith cannot be negative");
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isMixedCase("maxWith cannot be negative");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.strip("org.apache.commons.lang3.CharSequenceUtils");
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.wrapIfMissing("null/empty items", 'T');
      assertNotNull(string3);
      assertEquals("Tnull/empty itemsT", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.valueOf((char[]) null);
      assertNull(string4);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) null, (char[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "#;}gJJ{$k{ ,&:x0+R0", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      String string0 = StringUtils.center("F<?xB3erwgW#I", 2626);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("H5eyaHr", "S+m`jMI:r");
      assertNotNull(string1);
      assertEquals("H5eyaHr", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBeforeLast("H5eyaHr", "");
      assertNotNull(string2);
      assertEquals("H5eyaHr", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripStart("H5eyaHr", "S+m`jMI:r");
      assertNotNull(string3);
      assertEquals("H5eyaHr", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.repeat("Strings must not be null", 585);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", string0);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Strings must not be null", (CharSequence) "H5eyaHr");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Strings must not be null";
      objectArray0[1] = (Object) "H5eyaHr";
      objectArray0[2] = (Object) "F<?xB3erwgW#I";
      objectArray0[3] = (Object) "S+m`jMI:r";
      objectArray0[4] = (Object) "Strings must not be null";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) string0;
      String string5 = StringUtils.join(objectArray0, "H5eyaHr", 0, 0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(7, objectArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "H5eyaHr";
      stringArray0[1] = "S+m`jMI:r";
      String string6 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string6);
      assertEquals("H5eyaHr", string6);
      assertEquals(2, stringArray0.length);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'd';
      charArray0[1] = 'L';
      charArray0[2] = '$';
      charArray0[3] = '#';
      charArray0[4] = 'd';
      charArray0[5] = '~';
      charArray0[6] = '8';
      charArray0[7] = 'g';
      charArray0[8] = 'D';
      String string7 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'d', 'L', '$', '#', 'd', '~', '8', 'g', 'D'}, charArray0);
      assertNotNull(string7);
      assertEquals("dL$#d~8gD", string7);
      assertEquals(9, charArray0.length);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      String string0 = StringUtils.stripStart("H:Wb_hfN^Zfu<q0]a", "H:Wb_hfN^Zfu<q0]a");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'S';
      charArray0[1] = 'O';
      charArray0[2] = '&';
      charArray0[3] = 'c';
      charArray0[4] = '&';
      charArray0[5] = 'c';
      charArray0[7] = 'w';
      charArray0[8] = 'O';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'S', 'O', '&', 'c', '&', 'c', '\u0000', 'w', 'O'}, charArray0);
      assertTrue(boolean0);
      assertEquals(9, charArray0.length);
      
      String string1 = StringUtils.join(charArray0, '=');
      assertArrayEquals(new char[] {'S', 'O', '&', 'c', '&', 'c', '\u0000', 'w', 'O'}, charArray0);
      assertNotNull(string1);
      assertEquals("S=O=&=c=&=c=\u0000=w=O", string1);
      assertEquals(9, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      int[] intArray0 = StringUtils.toCodePoints("S=O=&=c=&=c=\u0000=w=O");
      assertNotNull(intArray0);
      assertEquals(17, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      String string0 = StringUtils.strip("'$", "'$");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[0] = true;
      booleanArray0[4] = false;
      String string0 = StringUtils.join(booleanArray0, 'T');
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false}, booleanArray0));
      assertNotNull(string0);
      assertEquals("trueTfalseTtrueTfalseTfalse", string0);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      String string0 = StringUtils.join(booleanArray0, 'T');
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      assertNotNull(string0);
      assertEquals("trueTfalseTtrueTtrueTtrue", string0);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      String string0 = StringUtils.join(booleanArray0, 't');
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("q<wn!3B");
      assertNotNull(string0);
      assertEquals("q<wn!3B", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "q<wn!3B", (-2297));
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Search and Replace array lengths don't match: ";
      stringArray0[1] = "Search and Replace array lengths don't match: ";
      String string1 = StringUtils.replaceEach("Search and Replace array lengths don't match: ", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals("Search and Replace array lengths don't match: ", string1);
      assertEquals(2, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = '}';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Search and Replace array lengths don't match: ", charArray0);
      assertArrayEquals(new char[] {'}', '}', '}', '}', '}'}, charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      
      String string2 = StringUtils.abbreviate("GyCPb$MM-", (-5701), 108);
      assertNotNull(string2);
      assertEquals("GyCPb$MM-", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((Object[]) stringArray0, "GyCPb$MM-", 108, 108);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(2, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.replace("f:u|1L]_T)", ")Z", "f:u|1L]_T)", 16);
      assertNotNull(string0);
      assertEquals("f:u|1L]_T)", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "f:u|1L]_T)", (CharSequence) "f:u|1L]_T)");
      assertNotNull(charSequence0);
      assertEquals("f:u|1L]_T)", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("f:u|1L]_T)", "f:u|1L]_T)");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeStartIgnoreCase(")Z", "f:u|1L]_T)");
      assertNotNull(string1);
      assertEquals(")Z", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      
      boolean boolean1 = StringUtils.equals((CharSequence) ")Z", (CharSequence) "f:u|1L]_T)");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("f:u|1L]_T)", "veTrSb%0.X?hC*0(s0[", "H:Wb_hfN^Zfu<q0]a");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 18
         // veTrSb%0.X?hC*0(s0[
         //                   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("q<wn!3B");
      assertNotNull(string0);
      assertEquals("q<wn!3B", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "q<wn!3B", (-2297));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.abbreviate("XpjD~f", 76);
      assertNotNull(string1);
      assertEquals("XpjD~f", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("XpjD~f", "q<wn!3B");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("q<wn!3B", '`');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", " is not in the range '0' - '9'", "Ik");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "{b>;w&ymP^T#/G|(~]R";
      charSequenceArray0[1] = (CharSequence) "{b>;w&ymP^T#/G|(~]R";
      charSequenceArray0[2] = (CharSequence) "{b>;w&ymP^T#/G|(~]R";
      charSequenceArray0[3] = (CharSequence) "{b>;w&ymP^T#/G|(~]R";
      String string0 = StringUtils.removeStartIgnoreCase("KEHb.^+wart#,", "KEHb.^+wart#,");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[4] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.strip((String) null, "108A0A0A-1118A64A-2212");
      assertNull(string1);
      
      String string2 = StringUtils.defaultString(" vs ");
      assertNotNull(string2);
      assertEquals(" vs ", string2);
      
      String string3 = StringUtils.substringBefore((String) null, (-3448));
      assertNull(string3);
      
      String string4 = StringUtils.leftPad("cy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]acy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]acy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]acy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]acy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]a yu3k0bH:Wb_hfN^Zfu<q0]a", (-2946));
      assertNotNull(string4);
      assertEquals("cy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]acy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]acy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]acy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]acy>0X4^ yu3k0bH:Wb_hfN^Zfu<q0]a yu3k0bH:Wb_hfN^Zfu<q0]a", string4);
      assertFalse(string4.equals((Object)string2));
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string5 = StringUtils.upperCase((String) null, locale0);
      assertNull(string5);
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, 'N');
      assertNull(string0);
      
      String string1 = StringUtils.stripAccents((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.substringAfterLast((String) null, 197);
      assertNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("maxWith cannot be negative", (String) null);
      assertNotNull(string3);
      assertEquals("maxWith cannot be negative", string3);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'N';
      longArray0[1] = (long) 197;
      longArray0[2] = (long) 'N';
      longArray0[3] = (long) 197;
      longArray0[4] = (long) 197;
      longArray0[5] = (long) 'N';
      longArray0[6] = (long) 197;
      String string4 = StringUtils.join(longArray0, 'N');
      assertArrayEquals(new long[] {78L, 197L, 78L, 197L, 197L, 78L, 197L}, longArray0);
      assertNotNull(string4);
      assertEquals("78N197N78N197N197N78N197", string4);
      assertEquals(7, longArray0.length);
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.upperCase((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.capitalize((String) null);
      assertNull(string6);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "78N197N78N197N197N78N197");
      assertEquals((-1), int0);
      
      String string7 = StringUtils.getDigits("");
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      String string8 = StringUtils.upperCase("okxD!3#9K", locale0);
      assertNotNull(string8);
      assertEquals("OKXD!3#9K", string8);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string0 = locale0.getDisplayName();
      assertNotNull(string0);
      assertEquals("French", string0);
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string1 = locale0.getDisplayScript();
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.upperCase("&.j2dj1X]<$", locale0);
      assertNotNull(string2);
      assertEquals("&.J2DJ1X]<$", string2);
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isWhitespace("&.J2DJ1X]<$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 108;
      intArray0[1] = 0;
      intArray0[2] = (-1324);
      intArray0[3] = (-1118);
      intArray0[4] = 64;
      intArray0[5] = (-2212);
      String string0 = StringUtils.join(intArray0, 'A');
      assertArrayEquals(new int[] {108, 0, (-1324), (-1118), 64, (-2212)}, intArray0);
      assertNotNull(string0);
      assertEquals("108A0A-1324A-1118A64A-2212", string0);
      assertEquals(6, intArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("108A0A-1324A-1118A64A-2212", "s37T5zG:y\"Z/dRij4.", 64);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.deleteWhitespace("s37T5zG:y\"Z/dRij4.");
      assertNotNull(string1);
      assertEquals("s37T5zG:y\"Z/dRij4.", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToNull("108A0A-1324A-1118A64A-2212");
      assertNotNull(string2);
      assertEquals("108A0A-1324A-1118A64A-2212", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.trim("s37T5zG:y\"Z/dRij4.");
      assertNotNull(string3);
      assertEquals("s37T5zG:y\"Z/dRij4.", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.ordinalIndexOf("s37T5zG:y\"Z/dRij4.", "s37T5zG:y\"Z/dRij4.", 108);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.getDigits("108A0A-1324A-1118A64A-2212");
      assertNotNull(string4);
      assertEquals("108013241118642212", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      int int1 = StringUtils.indexOf((CharSequence) "s37T5zG:y\"Z/dRij4.", (-2212));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.center("s37T5zG:y\"Z/dRij4.", 0, "");
      assertNotNull(string5);
      assertEquals("s37T5zG:y\"Z/dRij4.", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      
      String string6 = StringUtils.deleteWhitespace("'");
      assertNotNull(string6);
      assertEquals("'", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.rightPad("", 3291, "'");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      
      String string8 = StringUtils.join((Object[]) null, 'A');
      assertNull(string8);
      
      String string9 = StringUtils.remove("", (String) null);
      assertNotNull(string9);
      assertEquals("", string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      
      String string10 = StringUtils.capitalize("r'=,XU$Ez,o;NW'}C@7");
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string11 = StringUtils.replaceEach("qD4j*WqRG9", stringArray1, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string11);
      assertEquals("qD4j*WqRG9", string11);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 15);
      assertNotNull(string0);
      assertEquals("               ", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "               ", (CharSequence) "", 15);
      assertEquals(15, int0);
      
      String string1 = StringUtils.strip("", "               ");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.defaultString("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.capitalize("vki~K&5E<");
      assertNotNull(string3);
      assertEquals("Vki~K&5E<", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      String string0 = StringUtils.center("F<?xB3erwgW#I", 2626);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("H5eyaHr", "S+m`jMI:r");
      assertNotNull(string1);
      assertEquals("H5eyaHr", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBeforeLast("H5eyaHr", "");
      assertNotNull(string2);
      assertEquals("H5eyaHr", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "H5eyaHr", (CharSequence) "H5eyaHr");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "H5eyaHr";
      charSequenceArray0[1] = (CharSequence) string0;
      boolean boolean1 = StringUtils.containsAny((CharSequence) "F<?xB3erwgW#I", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.center("H5eyaHr", 10, "H5eyaHr");
      assertNotNull(string3);
      assertEquals("HH5eyaHrH5", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "F<?xB3erwgW#I", charSequenceArray0);
      assertFalse(boolean2);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 14);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '}';
      charArray0[1] = 'Y';
      charArray0[2] = '|';
      charArray0[3] = 'o';
      charArray0[4] = 'O';
      charArray0[5] = ';';
      charArray0[6] = 'P';
      charArray0[7] = 'V';
      charArray0[8] = '?';
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'}', 'Y', '|', 'o', 'O', ';', 'P', 'V', '?'}, charArray0);
      assertTrue(boolean1);
      assertEquals(9, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-1), 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1136.62978);
      doubleArray0[2] = 0.7;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-4390.257454127689);
      doubleArray0[5] = 100.0;
      String string0 = StringUtils.join(doubleArray0, '<', (-1), (-1));
      assertArrayEquals(new double[] {0.0, (-1136.62978), 0.7, 1.0, (-4390.257454127689), 100.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.wrap("org.apache.commons.lang3.ObjectUtils$Null", "qxVG[@_Da9v");
      assertNotNull(string1);
      assertEquals("qxVG[@_Da9vorg.apache.commons.lang3.ObjectUtils$NullqxVG[@_Da9v", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "ko}T_4b-.P6";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-2951L);
      String string0 = StringUtils.join(longArray0, ' ');
      assertArrayEquals(new long[] {(-2951L)}, longArray0);
      assertNotNull(string0);
      assertEquals("-2951", string0);
      assertEquals(1, longArray0.length);
      
      boolean boolean1 = StringUtils.isAlpha("-2951");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.unwrap("-2951", "-2951");
      assertNotNull(string1);
      assertEquals("-2951", string1);
      assertTrue(string1.equals((Object)string0));
      
      // Undeclared exception!
      StringUtils.center("e{P+", 65536, ' ');
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("<G52%>=\"rhh|&GkAD2p", "<G52%>=\"rhh|&GkAD2p");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-1054.683981965);
      doubleArray0[2] = (-4059.4893502253);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-1320.766915);
      doubleArray0[5] = (-127.01985419762);
      doubleArray0[6] = (-3503.0);
      String string1 = StringUtils.join(doubleArray0, 'Y');
      assertArrayEquals(new double[] {1.5, (-1054.683981965), (-4059.4893502253), 1.0, (-1320.766915), (-127.01985419762), (-3503.0)}, doubleArray0, 0.01);
      assertNotNull(string1);
      assertEquals("1.5Y-1054.683981965Y-4059.4893502253Y1.0Y-1320.766915Y-127.01985419762Y-3503.0", string1);
      assertEquals(7, doubleArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("1.5Y-1054.683981965Y-4059.4893502253Y1.0Y-1320.766915Y-127.01985419762Y-3503.0", "1.5Y-1054.683981965Y-4059.4893502253Y1.0Y-1320.766915Y-127.01985419762Y-3503.0");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "1.5Y-1054.683981965Y-4059.4893502253Y1.0Y-1320.766915Y-127.01985419762Y-3503.0";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "1.5Y-1054.683981965Y-4059.4893502253Y1.0Y-1320.766915Y-127.01985419762Y-3503.0";
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.getDigits("<G52%>=\"rhh|&GkAD2p");
      assertNotNull(string2);
      assertEquals("522", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      StringUtils.center("522", 65536);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(charSequenceArray0[0]);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "'_[x5 {|V,#n2L[GC";
      stringArray0[2] = "'_[x5 {|V,#n2L[GC";
      String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, stringArray0);
      assertNull(string0);
      assertEquals(7, stringArray0.length);
      
      int int0 = StringUtils.ordinalIndexOf(string0, string0, 15);
      assertEquals((-1), int0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsAny("", (CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[0] = 'd';
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) " ", charArray0);
      assertFalse(boolean0);
      assertEquals(11, charArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) " ", charArray0);
      assertTrue(boolean1);
      assertEquals(11, charArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("q<wn!3B");
      assertNotNull(string0);
      assertEquals("q<wn!3B", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "q<wn!3B";
      boolean boolean0 = StringUtils.containsNone((CharSequence) "q<wn!3B", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.wrap("{b>", "");
      assertNotNull(string1);
      assertEquals("{b>", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNotBlank("{b>");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "H:Wb_hfN^Zfu<q0]a yu3k0b");
      assertNull(string0);
      
      String string1 = StringUtils.removePattern((String) null, (String) null);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string2 = StringUtils.lowerCase("b\"fVn7+f#`2^9rV4^)Y");
      assertNotNull(string2);
      assertEquals("b\"fvn7+f#`2^9rv4^)y", string2);
      
      charSequenceArray0[0] = (CharSequence) "b\"fvn7+f#`2^9rv4^)y";
      charSequenceArray0[1] = (CharSequence) null;
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      char[] charArray0 = new char[18];
      charArray0[0] = '2';
      charArray0[1] = 'x';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "H:Wb_hfN^Zfu<q0]a yu3k0b", charArray0);
      assertTrue(boolean1);
      assertEquals(18, charArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Brf_/b?Z!6'~);xWd", 'f');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase("...", "Brf_/b?Z!6'~);xWd", stringArray0);
      assertNotNull(string0);
      assertEquals("...Brf_/b?Z!6'~);xWd", string0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny("Brf_/b?Z!6'~);xWd", stringArray0);
      assertEquals(3, int0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.stripEnd("...Brf_/b?Z!6'~);xWd", "...Brf_/b?Z!6'~);xWd");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.appendIfMissing("]z/", "]z/", charSequenceArray0);
      assertNotNull(string0);
      assertEquals("]z/", string0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAlpha("]z/");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      String string0 = StringUtils.difference("", "Y =*6}4,");
      assertNotNull(string0);
      assertEquals("Y =*6}4,", string0);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.substringBefore("gD", 5);
      assertNotNull(string0);
      assertEquals("gD", string0);
      
      charSequenceArray0[0] = (CharSequence) "gD";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "gD", (CharSequence) "gD");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.swapCase("gD");
      assertNotNull(string1);
      assertEquals("Gd", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.reverse("gD");
      assertNotNull(string2);
      assertEquals("Dg", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.getLevenshteinDistance(charSequenceArray0[0], (CharSequence) "Dg", 5);
      assertEquals(2, int0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace(charSequenceArray0[0]);
      assertTrue(boolean2);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.repeat('1', 2);
      assertNotNull(string3);
      assertEquals("11", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.wrap("Threshold must not be negative", '1');
      assertNotNull(string4);
      assertEquals("1Threshold must not be negative1", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      int int1 = StringUtils.indexOf((CharSequence) "1Threshold must not be negative1", (CharSequence) "gD");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\n", "\n", (-2042));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.wrapIfMissing("H:Wb_hfN^KZfu<q0j;", "IkE");
      assertNotNull(string1);
      assertEquals("IkEH:Wb_hfN^KZfu<q0j;IkE", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripAccents("S+m`jMI:r");
      assertNotNull(string2);
      assertEquals("S+m`jMI:r", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.startsWithAny("H:Wb_hfN^KZfu<q0j;", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string3 = StringUtils.replaceEach("XPi<'9P<.'-Iq", stringArray0, (String[]) null);
      assertNotNull(string3);
      assertEquals("XPi<'9P<.'-Iq", string3);
      assertEquals(2, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.abbreviate("_", " vs ", (-2287), 282);
      assertNotNull(string4);
      assertEquals("_", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("EL>u5Sr;Qs7W", "EL>u5Sr;Qs7W", true);
      assertEquals(0, int0);
      
      int int1 = StringUtils.compareIgnoreCase("", "Q=U,*\"OV");
      assertEquals((-9), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      String string0 = StringUtils.substringBetween("z/>}", "z/>}");
      assertNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase(" has no clone method", " has no clone method", true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "m1OR:~4B";
      stringArray0[1] = "Supplied value must be a valid byte literal between -128 and 127: [";
      String string0 = StringUtils.replaceEach("Supplied value must be a valid byte literal between -128 and 127: [", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("offset cannot be negative");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("offset cannot be negative");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceIgnoreCase("7-6k<", " vs ", "7-6k<");
      assertNotNull(string0);
      assertEquals("7-6k<", string0);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, 16);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrap("", 'S');
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrapIfMissing("", "Arguments cannot both be null");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("offset cannot be negative", "offset cannot be negative", "offset cannot be negative");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray1);
      
      String string0 = StringUtils.join((int[]) null, '\\', (-1043), Integer.MIN_VALUE);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("@oXvl<g+");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("@oXvl<g+", "@oXvl<g+", "");
      assertNull(stringArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1345.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1856.20852332191;
      doubleArray0[5] = 0.7;
      doubleArray0[6] = (-1123.77485);
      String string0 = StringUtils.join(doubleArray0, 'j');
      assertArrayEquals(new double[] {1.0, 0.0, 1345.0, 0.0, 1856.20852332191, 0.7, (-1123.77485)}, doubleArray0, 0.01);
      assertNotNull(string0);
      assertEquals("1.0j0.0j1345.0j0.0j1856.20852332191j0.7j-1123.77485", string0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1078.3F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1651.5587F;
      floatArray0[6] = 1572.797F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      String string0 = StringUtils.join(floatArray0, 'S');
      assertArrayEquals(new float[] {1078.3F, (-1.0F), 1.0F, 0.0F, 0.0F, 1651.5587F, 1572.797F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals("1078.3S-1.0S1.0S0.0S0.0S1651.5587S1572.797S0.0S0.0", string0);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'d'}, charArray0);
      assertNotNull(string0);
      assertEquals("d", string0);
      assertEquals(1, charArray0.length);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "d", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.prependIfMissing((String) null, (CharSequence) null, charSequenceArray0);
      assertNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-1));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chop("Invalid locale format: ");
      assertNotNull(string1);
      assertEquals("Invalid locale format:", string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (char[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase(" is not in the range '0' - '9'", "Invalid locale format: ", charSequenceArray0);
      assertNotNull(string2);
      assertEquals("Invalid locale format:  is not in the range '0' - '9'", string2);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '~';
      int int0 = StringUtils.indexOfAny(charSequenceArray0[0], charArray0);
      assertArrayEquals(new char[] {'/', '/', '~'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 0);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.difference((String) null, "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.substringBefore("", (-1611));
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      
      Iterator<Integer> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      
      Class<CharBuffer> class1 = CharBuffer.class;
      ServiceLoader<CharBuffer> serviceLoader1 = ServiceLoader.loadInstalled(class1);
      assertNotNull(serviceLoader1);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader1.toString());
      
      String string0 = StringUtils.join(iterator0, 'N');
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'N';
      charArray0[1] = '/';
      charArray0[2] = 'N';
      int int1 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'N', '/', 'N'}, charArray0);
      assertEquals((-1), int1);
      assertEquals(3, charArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      String string0 = StringUtils.right("j", 22);
      assertNotNull(string0);
      assertEquals("j", string0);
      
      String string1 = StringUtils.upperCase("j");
      assertNotNull(string1);
      assertEquals("J", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeStart("j", "j");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.abbreviate("j", 22, 22);
      assertNotNull(string3);
      assertEquals("j", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)13;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "J");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // J
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", '{');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("", '{', ']');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "p{InCombiningDiacriticalMarks}+");
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", '{');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("\u0002vVyKvy+*P,{lv?h", '{', ']');
      assertNotNull(string0);
      assertEquals("\u0002vVyKvy+*P,]lv?h", string0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "p{InCombiningDiacriticalMarks}+");
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 108;
      String string0 = StringUtils.leftPad(")@}", 122, '+');
      assertNotNull(string0);
      assertEquals("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++)@}", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string1 = StringUtils.substringAfter((String) null, "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++)@}");
      assertNull(string1);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) ")@}";
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      HashSet<CharBuffer> hashSet0 = new HashSet<CharBuffer>(vector0);
      assertNotNull(hashSet0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      String string2 = StringUtils.join((Iterable<?>) hashSet0, ";SwR~L0!|.ts7boP[");
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string3 = StringUtils.replaceChars("H:Wb_hfN^Zfu<q0j;", "+rQ8ZS+m`jMI:r", "Search and Replace array lengths don't match: ");
      assertNotNull(string3);
      assertEquals("HeWb_hfN^cfu<q0d;", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("~D72nJ9fV.O'BcguJ<9");
      assertFalse(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isNotBlank(" is not in the range '0' - '9'");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[3] = (-1118);
      intArray0[4] = 78;
      String string0 = StringUtils.repeat("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat(',', 1);
      assertNotNull(string1);
      assertEquals(",", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) ",");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 78;
      String string2 = StringUtils.repeat("", 78);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", " is not in the range '0' - '9'", "Ik");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat("'4", (-16));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("Ik", "Ik", "Ik");
      assertNotNull(string0);
      assertEquals("Ik", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace(" is not in the range '0' - '9'");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Ik", (char[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeIgnoreCase("?V=*g", "]6");
      assertNotNull(string1);
      assertEquals("?V=*g", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlpha("?V=*g");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("Ik");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.replace("Ik", "Search and Replace array lengths don't match: ", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string2);
      assertEquals("Ik", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removePattern(":}@Js", (String) null);
      assertNotNull(string3);
      assertEquals(":}@Js", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Ik", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "!>");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("!>");
      assertFalse(boolean0);
      
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.isNumeric("\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.center("i~2vIu-To", (-1841));
      assertNotNull(string1);
      assertEquals("i~2vIu-To", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("i~2vIu-To");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "2b'uTv<FtxJA", (CharSequence) "2b'uTv<FtxJA");
      assertTrue(boolean0);
      
      String string0 = StringUtils.substringAfter("2b'uTv<FtxJA", "CM");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.substringBefore("gD", 5);
      assertNotNull(string0);
      assertEquals("gD", string0);
      
      charSequenceArray0[0] = (CharSequence) "gD";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.difference("gD", "gD");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      String string0 = StringUtils.substringBefore("0=IN3SZ0V\"", 585);
      assertNotNull(string0);
      assertEquals("0=IN3SZ0V\"", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("0=IN3SZ0V\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      String string0 = StringUtils.reverse("Ii");
      assertNotNull(string0);
      assertEquals("iI", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("iI");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("K", "iI");
      assertNotNull(string1);
      assertEquals("iIKiI", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripAccents("iI");
      assertNotNull(string2);
      assertEquals("iI", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      String string0 = StringUtils.center("'1']w>>Gz", 1371);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("'1']w>>Gz");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      String string0 = StringUtils.unwrap("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.mid("IO?7H7r9H7TL", 925, 925);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      String string0 = StringUtils.unwrap("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.mid("", 0, 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      String string0 = StringUtils.truncate("$6c9G8'>h=", 494, 139);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((Object[]) null, " vs ");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, '7');
      assertFalse(linkedList0.contains('7'));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("", 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.unwrap("_Fxh `ug", '7');
      assertNotNull(string3);
      assertEquals("_Fxh `ug", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      String string4 = StringUtils.removeStart("", "");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains(string0));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = hashSet0.add("Cgzis)P");
      assertFalse(hashSet0.contains(string0));
      assertTrue(hashSet0.contains("Cgzis)P"));
      assertTrue(boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      String string5 = StringUtils.repeat("", " in an array of ", 0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(0, int1);
      assertEquals(6, stringArray0.length);
      assertTrue(int1 == int0);
      
      String string6 = StringUtils.truncate((String) null, 0, 322);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add("HTaTx_5~J2I");
      assertTrue(arrayList0.contains("HTaTx_5~J2I"));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      String string0 = StringUtils.join((List<?>) arrayList0, 'X', 581, 581);
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.contains("HTaTx_5~J2I"));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 581, 581);
      assertEquals((-1), int0);
      
      String string1 = "The character ";
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Class<CharBuffer> class0 = CharBuffer.class;
      ServiceLoader<CharBuffer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      
      String string2 = "The type must not be null";
      // Undeclared exception!
      try { 
        StringUtils.truncate("The type must not be null", (-320), (-320));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int[] intArray0 = StringUtils.toCodePoints("oject");
      assertArrayEquals(new int[] {111, 106, 101, 99, 116}, intArray0);
      assertNotNull(intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints(" ");
      assertArrayEquals(new int[] {32}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      String string0 = StringUtils.truncate(" ", 1148);
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[3] = (-1118);
      intArray0[4] = 78;
      String string0 = StringUtils.repeat("A", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("A", "");
      assertFalse(boolean0);
      
      String string1 = StringUtils.reverseDelimited("", 'Z');
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.trimToEmpty("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeEnd("[[", "x%gq2");
      assertNotNull(string3);
      assertEquals("[[", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "A", (CharSequence) "[[", 0);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("", "O<`-cq.s_kFZ)YmnBA", "5GB");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 12
         // O<`-cq.s_kFZ)YmnBA
         //             ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, 'q');
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, shortArray0.length);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(188, stringArray0.length);
      
      String string1 = StringUtils.rotate("", (-1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertFalse(boolean1);
      assertEquals(188, stringArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("d=a.v>mW", "b!Qx+H~F+$", false);
      assertEquals(29, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "b!Qx+H~F+$";
      charSequenceArray0[4] = (CharSequence) "b!Qx+H~F+$";
      charSequenceArray0[2] = (CharSequence) "b!Qx+H~F+$";
      charSequenceArray0[3] = (CharSequence) "b!Qx+H~F+$";
      charSequenceArray0[4] = (CharSequence) "b!Qx+H~F+$";
      int int1 = StringUtils.indexOfAny((CharSequence) "d=a.v>mW", charSequenceArray0);
      assertEquals((-1), int1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isAlpha(charSequenceArray0[2]);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 29;
      floatArray0[2] = (float) 29;
      floatArray0[3] = (float) 29;
      String string0 = StringUtils.upperCase("d=a.v>mW");
      assertNotNull(string0);
      assertEquals("D=A.V>MW", string0);
      
      boolean boolean1 = StringUtils.isWhitespace("b!Qx+H~F+$");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("\"S:9DAcD_'~CwnDf>xW", 'Y');
      assertNotNull(string0);
      assertEquals("\"S:9DAcD_'~CwnDf>xW", string0);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, '7');
      assertFalse(linkedList0.contains('7'));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.wrap("", '7');
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("", 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.unwrap("_Fxh `ug", '7');
      assertNotNull(string3);
      assertEquals("_Fxh `ug", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "_Fxh `ug";
      stringArray0[3] = "maxWith cannot be negative";
      stringArray0[4] = "";
      stringArray0[5] = "_Fxh `ug";
      String string4 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(6, stringArray0.length);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      
      String[] stringArray1 = StringUtils.split("_Fxh `ug");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int1 = StringUtils.compareIgnoreCase(".~(q)h/R{'%yHZg", "_Fxh `ug", true);
      assertEquals((-49), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("d=a.v>mW", "b!Qx+H~F+$", false);
      assertEquals(29, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "b!Qx+H~F+$";
      charSequenceArray0[1] = (CharSequence) "b!Qx+H~F+$";
      charSequenceArray0[2] = (CharSequence) "b!Qx+H~F+$";
      charSequenceArray0[3] = (CharSequence) "d=a.v>mW";
      charSequenceArray0[4] = (CharSequence) "b!Qx+H~F+$";
      int int1 = StringUtils.indexOfAny((CharSequence) "d=a.v>mW", charSequenceArray0);
      assertEquals(0, int1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "b!Qx+H~F+$", charSequenceArray0[2]);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 29;
      floatArray0[2] = (float) 29;
      floatArray0[3] = (float) 29;
      String string0 = StringUtils.upperCase("d=a.v>mW");
      assertNotNull(string0);
      assertEquals("D=A.V>MW", string0);
      
      boolean boolean1 = StringUtils.isWhitespace("b!Qx+H~F+$");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("q<wn!3B");
      assertNotNull(string0);
      assertEquals("q<wn!3B", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "q<wn!3B", (-2297));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chop("s37T5zG:y\"Z/dRij4.");
      assertNotNull(string1);
      assertEquals("s37T5zG:y\"Z/dRij4", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "s37T5zG:y\"Z/dRij4", (char[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("s37T5zG:y\"Z/dRij4", 'i');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string2 = StringUtils.upperCase("`$Q6b\"eY=J");
      assertNotNull(string2);
      assertEquals("`$Q6B\"EY=J", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("@oXvl<g+");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("@oXvl<g+", "@oXvl<g+", "");
      assertNull(stringArray1);
      
      String string0 = StringUtils.rightPad("Invalid locale format: ", (-1));
      assertNotNull(string0);
      assertEquals("Invalid locale format: ", string0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", "&_n+f.48q1C?|w#^)B", (-1));
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isEmpty("@oXvl<g+");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceIgnoreCase("offset cannot be negative", ", Length: ", "5`#N[eu^ayya!*O");
      assertNotNull(string1);
      assertEquals("offset cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isNumeric("@oXvl<g+");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("@oXvl<g+", (String) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{b>;w&ymP^T#/G|(~]R", 'f');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "{b>;w&ymP^T#/G|(~]R", (CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("k=7RC)%so0%x:g124?13?160?-393?127?1292");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      String string0 = StringUtils.substringAfterLast("pqZP-nS\"B`FVoad]v", 50);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.getDigits(" W2ViiA");
      assertNotNull(string1);
      assertEquals("2", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrapIfMissing("H:Wb_hfN^Zfu<q0]a", "SsB;ISQh[-jq[VP*");
      assertNotNull(string2);
      assertEquals("SsB;ISQh[-jq[VP*H:Wb_hfN^Zfu<q0]aSsB;ISQh[-jq[VP*", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripAccents("-7nz");
      assertNotNull(string3);
      assertEquals("-7nz", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Ujq`/:yhY%ZBW";
      String string4 = StringUtils.leftPad("-7nz", 1801);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "SsB;ISQh[-jq[VP*", (CharSequence) string4, 50);
      assertEquals((-1), int0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.defaultString("-}");
      assertNotNull(string0);
      assertEquals("-}", string0);
      
      charSequenceArray0[0] = (CharSequence) "-}";
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 'd';
      doubleArray0[1] = (double) 'd';
      doubleArray0[1] = (double) 'd';
      doubleArray0[3] = (double) 'd';
      doubleArray0[4] = (double) 'd';
      doubleArray0[5] = (double) 'd';
      String string1 = StringUtils.join(doubleArray0, 'c', 3852, 5);
      assertArrayEquals(new double[] {0.0, 100.0, 0.0, 100.0, 100.0, 100.0}, doubleArray0, 0.01);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(6, doubleArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string2);
      
      charSequenceArray0[2] = (CharSequence) null;
      String string3 = StringUtils.rightPad("", 4187);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      charSequenceArray0[3] = (CharSequence) string3;
      String string4 = StringUtils.reverseDelimited((String) null, 'A');
      assertNull(string4);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllLowerCase("-}");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean2 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      String string0 = StringUtils.strip("Iz/ p YW", "N-`)Kj8(fJ+1gYw%0p({Rsl");
      assertNotNull(string0);
      assertEquals("Iz/ p YW", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Iz/ p YW";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Iz/ p YW");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      String string1 = StringUtils.leftPad("Minimum abbreviation width is %d", 4);
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width is %d", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceChars("", "Comparator should not be null.", "Iz/ p YW");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.SPACE;
      assertNotNull(string3);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Iz/ p YW", (CharSequence) "N-`)Kj8(fJ+1gYw%0p({Rsl", 15);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double0 = StringUtils.getJaroWinklerDistance("', has a length less than 2", "', has a length less than 2");
      assertEquals(1.0, double0, 0.01);
      
      String string0 = StringUtils.removeStart("=gvoQ^n-k0*[+f", "', has a length less than 2");
      assertNotNull(string0);
      assertEquals("=gvoQ^n-k0*[+f", string0);
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("', has a length less than 2"));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = hashSet0.add("J1>jTHv^n,-!R9u6H6");
      assertFalse(hashSet0.contains("', has a length less than 2"));
      assertTrue(hashSet0.contains("J1>jTHv^n,-!R9u6H6"));
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      int int0 = StringUtils.indexOfAny((CharSequence) "G+Qs", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("}g0G TP0pbA[$ES1=", "}g0G TP0pbA[$ES1=");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.trimToEmpty("}g0G TP0pbA[$ES1=");
      assertNotNull(string1);
      assertEquals("}g0G TP0pbA[$ES1=", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("]^g`?OZ|<hS78");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("2b|hTv<FtoxJA", 'A');
      assertNotNull(string0);
      assertEquals("2b|hTv<FtoxJ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "!>");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isBlank("!>");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("!>");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "!>";
      String string2 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertNull(string2);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("\r");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int1 = StringUtils.compareIgnoreCase((String) null, "!>", false);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase("pCd<", ".tEd*`i#`A@b+]");
      assertEquals(66, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.strip((String) null, "108A0A0A-1118A64A-2212");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "*n@^D47zIYx`#\"ladn", 235);
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("108A0A0A-1118A64A-2212", "*n@^D47zIYx`#\"ladn", stringArray0);
      assertNotNull(string2);
      assertEquals("108A0A0A-1118A64A-2212", string2);
      assertEquals(10, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "108A0A0A-1118A64A-2212", (CharSequence) "108A0A0A-1118A64A-2212", 235);
      assertEquals(0, int0);
      
      String string3 = StringUtils.abbreviateMiddle("p{InCombiningDiacriticalMarks}+", (String) null, 128);
      assertNotNull(string3);
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "*n@^D47zIYx`#\"ladn", (CharSequence) "108A0A0A-1118A64A-2212");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      String string4 = StringUtils.replaceOnceIgnoreCase("1>0J`4", "Arguments cannot both be null", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string4);
      assertEquals("1>0J`4", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      String string0 = StringUtils.replacePattern("The character ", "The character ", "The character ");
      assertNotNull(string0);
      assertEquals("The character ", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("The character ", "The character ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat('a', 16);
      assertNotNull(string1);
      assertEquals("aaaaaaaaaaaaaaaa", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.normalizeSpace("The character ");
      assertNotNull(string2);
      assertEquals("The character", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAllLowerCase("aaaaaaaaaaaaaaaa");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "The character ", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("d=a.v>mW", "b!Qx+H~F+$", false);
      assertEquals(29, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "b!Qx+H~F+$";
      charSequenceArray0[1] = (CharSequence) "b!Qx+H~F+$";
      charSequenceArray0[2] = (CharSequence) "b!Qx+H~F+$";
      charSequenceArray0[3] = (CharSequence) "b!Qx+H~F+$";
      charSequenceArray0[4] = (CharSequence) "b!Qx+H~F+$";
      int int1 = StringUtils.indexOfAny((CharSequence) "d=a.v>mW", charSequenceArray0);
      assertEquals((-1), int1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isAlpha(charSequenceArray0[2]);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string0 = StringUtils.replacePattern("d=a.v>mW", "", "ifi");
      assertNotNull(string0);
      assertEquals("ifiifidifi=ifiaifi.ifivifi>ifimifiWifi", string0);
      
      int int2 = (-784);
      String string1 = StringUtils.abbreviate("N-`)", (-784), 29);
      assertNotNull(string1);
      assertEquals("N-`)", string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = StringUtils.getBytes("b!Qx+H~F+$", (Charset) null);
      assertArrayEquals(new byte[] {(byte)98, (byte)33, (byte)81, (byte)120, (byte)43, (byte)72, (byte)126, (byte)70, (byte)43, (byte)36}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(10, byteArray0.length);
      
      char char0 = '(';
      String string2 = StringUtils.reverseDelimited("RV[*", '(');
      assertNotNull(string2);
      assertEquals("RV[*", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.trimToEmpty("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.removeEnd("N-`)", "Kj8(fJ+1gYw%0p({Rsl");
      assertNotNull(string4);
      assertEquals("N-`)", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "N-`)", charSequenceArray0[3], 0);
      assertEquals((-1), int3);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      boolean boolean1 = StringUtils.isEmpty("N-`)");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("Minimum abbreviation width with offset is %d", "N-`)", "N-`)");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 2
         // N-`)
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1727;
      intArray0[1] = (-72);
      intArray0[2] = (-77);
      intArray0[3] = 5;
      String string0 = StringUtils.join(intArray0, 'j', (-44), (-72));
      assertArrayEquals(new int[] {1727, (-72), (-77), 5}, intArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      String string0 = StringUtils.chop("\"k6,}>)8:");
      assertNotNull(string0);
      assertEquals("\"k6,}>)8", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"k6,}>)8:";
      stringArray0[1] = "\"k6,}>)8:";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("\"k6,}>)8:", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      String string0 = "F~^NSS*/gWU";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "F~^NSS*/gWU";
      stringArray0[1] = "F~^NSS*/gWU";
      stringArray0[2] = "F~^NSS*/gWU";
      stringArray0[3] = "F~^NSS*/gWU";
      stringArray0[4] = "F~^NSS*/gWU";
      stringArray0[5] = "F~^NSS*/gWU";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("F~^NSS*/gWU", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 0);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      String string0 = ">`XHIL^{*dCWs";
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">`XHIL^{*dCWs";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(">`XHIL^{*dCWs", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      int int0 = StringUtils.length("\r");
      assertEquals(1, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[2] = (CharSequence) "\r";
      charSequenceArray0[3] = (CharSequence) "\r";
      String string1 = StringUtils.stripEnd("...", "\r");
      assertNotNull(string1);
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("dDV8L=", 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add(object0);
      assertTrue(linkedHashSet0.contains(object0));
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      String string0 = StringUtils.remove("ymd\"G*", "ymd\"G*");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "ymd\"G*");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.rightPad("", (-390));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "The type must not be null", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertFalse(linkedHashSet0.contains(object0));
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add("");
      assertFalse(linkedHashSet0.contains(object0));
      assertTrue(linkedHashSet0.contains(""));
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      String string0 = StringUtils.remove("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "The type must not be null", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      String string1 = StringUtils.join((Object[]) charSequenceArray0, '7');
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.swapCase("S:h$Sz_h7y\"ldXdpy<;");
      assertNotNull(string2);
      assertEquals("s:H$sZ_H7Y\"LDxDPY<;", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "s:H$sZ_H7Y\"LDxDPY<;", charSequenceArray0[0], 3425);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string3 = StringUtils.join((Iterator<?>) null, "b/n#:qW#");
      assertNull(string3);
      
      CharSequence[] charSequenceArray1 = new CharSequence[0];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("\n", charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray1.length);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase(">`XHIL^{*dCWs", ">`XHIL^{*dCWs");
      assertTrue(boolean0);
      
      String string0 = StringUtils.overlay("Vh'PjL", "@$zAd6W", 2275, 57);
      assertNotNull(string0);
      assertEquals("Vh'PjL@$zAd6W", string0);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      
      Iterator<Integer> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      
      String string0 = StringUtils.join(iterator0, "!C`L");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>(0);
      assertFalse(linkedHashSet1.contains(0));
      assertNotNull(linkedHashSet1);
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      
      boolean boolean0 = linkedHashSet0.retainAll(linkedHashSet1);
      assertFalse(linkedHashSet0.contains(0));
      assertFalse(linkedHashSet1.contains(0));
      assertFalse(boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      
      boolean boolean1 = linkedHashSet0.add(linkedHashSet1);
      assertFalse(linkedHashSet0.contains(0));
      assertFalse(linkedHashSet1.contains(0));
      assertTrue(boolean1);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertFalse(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = linkedHashSet0.add(object0);
      assertTrue(linkedHashSet0.contains(object0));
      assertFalse(linkedHashSet0.contains(0));
      assertTrue(boolean2);
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string0 = StringUtils.join(iterator0, "ymd\"G*");
      assertTrue(linkedHashSet0.contains(object0));
      assertFalse(linkedHashSet0.contains("ymd\"G*"));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      boolean boolean3 = StringUtils.containsIgnoreCase("", "ymd\"G*");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("The type must not be null", (-405));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", " is not in the range '0' - '9'", "Ik");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substring("", (-1), (-1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.replace("Ik", "", "Ik");
      assertNotNull(string2);
      assertEquals("Ik", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removePattern("*e~_c[&tg7Cg", " ");
      assertNotNull(string3);
      assertEquals("*e~_c[&tg7Cg", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Ik", "", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Mn)>kTF;W4z:", " ", 0);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean3 = StringUtils.isEmpty("*e~_c[&tg7Cg");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String string4 = StringUtils.replaceIgnoreCase("", " ", "Ik");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)900;
      shortArray0[2] = (short)98;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)4;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)52;
      String string5 = StringUtils.join(shortArray0, 't', (int) (short)52, 0);
      assertArrayEquals(new short[] {(short)0, (short)900, (short)98, (short)0, (short)4, (short)0, (short)52}, shortArray0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(7, shortArray0.length);
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      String string0 = StringUtils.substringBefore("gD", 5);
      assertNotNull(string0);
      assertEquals("gD", string0);
      
      String string1 = StringUtils.swapCase("The Array must not be null");
      assertNotNull(string1);
      assertEquals("tHE aRRAY MUST NOT BE NULL", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rotate("tHE aRRAY MUST NOT BE NULL", 5);
      assertNotNull(string2);
      assertEquals(" NULLtHE aRRAY MUST NOT BE", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", " is not in the range '0' - '9'", "Ik");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.replace("Ik", "", "Ik");
      assertNotNull(string1);
      assertEquals("Ik", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripToNull(" is not in the range '0' - '9'");
      assertNotNull(string2);
      assertEquals("is not in the range '0' - '9'", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Ik", "", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.normalizeSpace(" is not in the range '0' - '9'");
      assertNotNull(string3);
      assertEquals("is not in the range '0' - '9'", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.substringAfterLast("Ik", "");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      String string0 = StringUtils.swapCase("2");
      assertNotNull(string0);
      assertEquals("2", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "2", (CharSequence) "2");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "2";
      charSequenceArray0[1] = (CharSequence) "2";
      String string1 = "iWz9e?$Cu";
      String string2 = StringUtils.substringBeforeLast("S+m`jMI:r", "iWz9e?$Cu");
      assertNotNull(string2);
      assertEquals("S+m`jMI:r", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = (-1431);
      int int1 = StringUtils.ordinalIndexOf("S+m`jMI:r", "iWz9e?$Cu", (-1431));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "2", (CharSequence) "H5eyaHr", 60);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean1 = StringUtils.isNumericSpace("2");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = "Minimum abbreviation width is %d";
      String string4 = StringUtils.abbreviateMiddle("Minimum abbreviation width is %d", "F{0*-2MUIOVz#uN-`)", (-1431));
      assertNotNull(string4);
      assertEquals("Minimum abbreviation width is %d", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1009));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.leftPad("4&0.%a5", 1363);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      float[] floatArray0 = new float[1];
      String string0 = StringUtils.join(floatArray0, 'S');
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals("0.0", string0);
      assertEquals(1, floatArray0.length);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removePattern("0.0", "0.0");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceChars("0.0", "Object varargs must not be null", "Object varargs must not be null");
      assertNotNull(string2);
      assertEquals("0.0", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", " is not in the range '0' - '9'", "Ik");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat('U', 113);
      assertNotNull(string1);
      assertEquals("UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU", (CharSequence) "Ik");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.repeat("", 113);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.defaultString("\n", "comparator");
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.overlay("\n", "\n", 13, 13);
      assertNotNull(string2);
      assertEquals("\n\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.rotate("B3erwgW#I", 13);
      assertNotNull(string3);
      assertEquals("gW#IB3erw", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.repeat("H:Wb_hfN^Zfu<q0]", 116);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean1 = StringUtils.isAllLowerCase("gW#IB3erw");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)97;
      String string0 = StringUtils.join(byteArray0, 'O', 741, 299);
      assertArrayEquals(new byte[] {(byte)82, (byte)97}, byteArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2, byteArray0.length);
      
      String string1 = StringUtils.substring("", 299, 2030);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, 'q');
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, shortArray0.length);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      String string0 = StringUtils.prependIfMissing((String) null, (CharSequence) null, charSequenceArray0);
      assertNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-1));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chop("Invalid locale format: ");
      assertNotNull(string1);
      assertEquals("Invalid locale format:", string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (char[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("Invalid locale format: ", 'i');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string2 = StringUtils.upperCase("1856.20852332191j0.7j106.0j106.0j-1123.77485");
      assertNotNull(string2);
      assertEquals("1856.20852332191J0.7J106.0J106.0J-1123.77485", string2);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Array and elemeLt cannot both be null");
      assertNotNull(string0);
      assertEquals("Array and elemeLt cannot both be null", string0);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      String string0 = StringUtils.rotate("T", 64);
      assertNotNull(string0);
      assertEquals("T", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "T", 64);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        Charset.forName("V>hT`5m7W69<G>s@");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // V>hT`5m7W69<G>s@
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Z?BRFmv.y3z(?qX>x@O", 2119);
      assertNotNull(string0);
      assertEquals("Z?BRFmv.y3z(?qX>x@O", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Z?BRFmv.y3z(?qX>x@O");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("-", (-33));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{$U>2)\"yP#");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.abbreviate((String) null, "IkEdpVF>S#wBn0 \bY7[/rM>3y", 10, 10);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "maxWith annot be negative";
      charSequenceArray0[1] = (CharSequence) "maxWith annot be negative";
      String string0 = StringUtils.prependIfMissingIgnoreCase("maxWith annot be negative", "maxWith annot be negative", charSequenceArray0);
      assertNotNull(string0);
      assertEquals("maxWith annot be negative", string0);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("\r", "maxWith annot be negative", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("maxWith annot be negative\r", string1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains(charSequenceArray0[0], (CharSequence) "maxWith annot be negative");
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "maxWith annot be negative", charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.center("-$`N7&R", (-194), "-RP");
      assertNotNull(string2);
      assertEquals("-$`N7&R", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "g|]", charSequenceArray0);
      assertFalse(boolean2);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      String string0 = StringUtils.lowerCase("#;}gJJ{$k{ ,&:x0+R0");
      assertNotNull(string0);
      assertEquals("#;}gjj{$k{ ,&:x0+r0", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string1 = StringUtils.prependIfMissingIgnoreCase("b\"fVn7+f#`2^!r^)Y", "#;}gJJ{$k{ ,&:x0+R0", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("#;}gJJ{$k{ ,&:x0+R0b\"fVn7+f#`2^!r^)Y", string1);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceEach("#;}gjj{$k{ ,&:x0+r0", (String[]) null, (String[]) null);
      assertNotNull(string2);
      assertEquals("#;}gjj{$k{ ,&:x0+r0", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfterLast("#;}gjj{$k{ ,&:x0+r0", "#;}gJJ{$k{ ,&:x0+R0");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      String string0 = StringUtils.lowerCase("#;}gJJ{$k{ ,&:x0+R0");
      assertNotNull(string0);
      assertEquals("#;}gjj{$k{ ,&:x0+r0", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string1 = StringUtils.prependIfMissingIgnoreCase("b\"fVn7+f#`2^!r^)Y", "#;}gJJ{$k{ ,&:x0+R0", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("#;}gJJ{$k{ ,&:x0+R0b\"fVn7+f#`2^!r^)Y", string1);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("#;}gJJ{$k{ ,&:x0+R0", 934, "m|\")1");
      assertNotNull(string2);
      assertEquals("m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|#;}gJJ{$k{ ,&:x0+R0m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\")1m|\"", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "b\"fVn7+f#`2^!r^)Y", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      String string0 = StringUtils.replaceAll("5WfU1`^O", "", "08SMFFPQ(-/d");
      assertNotNull(string0);
      assertEquals("08SMFFPQ(-/d508SMFFPQ(-/dW08SMFFPQ(-/df08SMFFPQ(-/dU08SMFFPQ(-/d108SMFFPQ(-/d`08SMFFPQ(-/d^08SMFFPQ(-/dO08SMFFPQ(-/d", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "08SMFFPQ(-/d508SMFFPQ(-/dW08SMFFPQ(-/df08SMFFPQ(-/dU08SMFFPQ(-/d108SMFFPQ(-/d`08SMFFPQ(-/d^08SMFFPQ(-/dO08SMFFPQ(-/d", (CharSequence) "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1561.19059667);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 15.0;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '', 472, 477);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 472
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1812.977651236);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 1656.5975652232964;
      doubleArray0[5] = 2058.68;
      doubleArray0[6] = 1.0;
      char char0 = 'v';
      int int0 = 2;
      int int1 = 112;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'v', 2, 112);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1812.97765);
      String string0 = StringUtils.join(doubleArray0, 'k', 3276, 779);
      assertArrayEquals(new double[] {(-1812.97765), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-115);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      String string0 = StringUtils.unwrap("GOLR%s", "GOLR%s");
      assertNotNull(string0);
      assertEquals("GOLR%s", string0);
      
      String string1 = StringUtils.left("f:u|1L]_T)r&Vuy(true.false", (short) (-115));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.normalizeSpace("GOLR%s");
      assertNotNull(string2);
      assertEquals("GOLR%s", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.remove("GOLR%s", (String) null);
      assertNotNull(string3);
      assertEquals("GOLR%s", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.removeFirst("f:u|1L]_T)r&Vuy(true.false", "GOLR%s");
      assertNotNull(string4);
      assertEquals("f:u|1L]_T)r&Vuy(true.false", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "GOLR%s", (CharSequence) "f:u|1L]_T)r&Vuy(true.false", (-1642));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceIgnoreCase(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertNotNull(string0);
      assertEquals(" yu3k0bH:Wb_hfN^Zfu<q0]a", string0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertFalse(vector0.contains(" yu3k0bH:Wb_hfN^Zfu<q0]a"));
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.substring("df#", 1353);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviate("\n", 32);
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.replaceAll("-}", "-}", "-}");
      assertNotNull(string0);
      assertEquals("-}", string0);
      
      charSequenceArray0[0] = (CharSequence) "-}";
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 'd';
      doubleArray0[1] = (double) 'd';
      doubleArray0[1] = (double) 'd';
      doubleArray0[4] = (double) 'd';
      doubleArray0[5] = (double) 'd';
      String string1 = StringUtils.join(doubleArray0, 'd', 3852, 5);
      assertArrayEquals(new double[] {0.0, 100.0, 0.0, 0.0, 100.0, 100.0}, doubleArray0, 0.01);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(6, doubleArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.substringBefore((String) null, "-}");
      assertNull(string2);
      
      charSequenceArray0[2] = (CharSequence) null;
      String string3 = StringUtils.rightPad("Minimum abbreviation width is %dMinimum abbreviation width is %dArguments cannot both be null", 57);
      assertNotNull(string3);
      assertEquals("Minimum abbreviation width is %dMinimum abbreviation width is %dArguments cannot both be null", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "8UDUT>dvNYj^7Cz");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      String string0 = StringUtils.upperCase("s37T5zG:y\"Z/dRij4.`$Q6b\"eY=J");
      assertNotNull(string0);
      assertEquals("S37T5ZG:Y\"Z/DRIJ4.`$Q6B\"EY=J", string0);
      
      String string1 = StringUtils.capitalize("s37T5zG:y\"Z/dRij4.`$Q6b\"eY=J");
      assertNotNull(string1);
      assertEquals("S37T5zG:y\"Z/dRij4.`$Q6b\"eY=J", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad(" iJe{GYjJ|Kx=S", 1782, 'g');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.center("2b'uTv<FtxJA", 1782, "2b'uTv<FtxJA");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) string2;
      charSequenceArray0[1] = (CharSequence) "2b'uTv<FtxJA";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "s37T5zG:y\"Z/dRij4.`$Q6b\"eY=J", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string4 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[4] = (-1118);
      intArray0[4] = 78;
      String string0 = StringUtils.repeat("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.leftPad((String) null, (-1118), 'K');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      String string0 = StringUtils.swapCase("2");
      assertNotNull(string0);
      assertEquals("2", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "2";
      charSequenceArray0[1] = (CharSequence) "2";
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "2", charSequenceArray0[0]);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringAfterLast("4", "");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, '|');
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("9[O{k`_N");
      assertNotNull(string1);
      assertEquals("9[O{k`_N", string1);
      
      String string2 = StringUtils.substringBefore((String) null, 3143);
      assertNull(string2);
      
      String string3 = StringUtils.unwrap((String) null, 'd');
      assertNull(string3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "9[O{k`_N";
      stringArray0[1] = "9[O{k`_N";
      stringArray0[2] = null;
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string4);
      assertEquals("9[O{k`_N", string4);
      assertEquals(3, stringArray0.length);
      assertTrue(string4.equals((Object)string1));
      
      String string5 = StringUtils.join((Object[]) stringArray0, '|');
      assertNotNull(string5);
      assertEquals("9[O{k`_N|9[O{k`_N|", string5);
      assertEquals(3, stringArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.swapCase("The character ");
      assertNotNull(string6);
      assertEquals("tHE CHARACTER ", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 16);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      String string0 = StringUtils.substring("_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erwgW#IB3erw", (-100));
      assertNotNull(string0);
      assertEquals("D'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erwgW#IB3erw", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erw_48feD'gW#IB3erwgW#IB3erw", '2');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      try { 
        StringUtils.getBytes("", ")");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripAccents(":`As}");
      assertNotNull(string1);
      assertEquals(":`As}", string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(":`As}", 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("@oXvl<g+");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1345.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1856.20852332191;
      doubleArray0[5] = 0.7;
      doubleArray0[6] = (-1123.77485);
      String string0 = StringUtils.join(doubleArray0, 'j');
      assertArrayEquals(new double[] {1.0, 0.0, 1345.0, 0.0, 1856.20852332191, 0.7, (-1123.77485)}, doubleArray0, 0.01);
      assertNotNull(string0);
      assertEquals("1.0j0.0j1345.0j0.0j1856.20852332191j0.7j-1123.77485", string0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ":{dx d~e=", " yu3k0bV:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      String string0 = StringUtils.leftPad("Y$J}~x^0I", 1366);
      assertNotNull(string0);
      
      String string1 = StringUtils.EMPTY;
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Y$J}~x^0I", 13);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("*{A", "tmj=}6$q&J#Iz?@i", 12, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 18
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("@oXvl<g+");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("@oXvl<g+", "@oXvl<g+", "");
      assertNull(stringArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1345.0;
      char[] charArray0 = new char[8];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("@oXvl<g+");
      assertArrayEquals(new int[] {64, 111, 88, 118, 108, 60, 103, 43}, intArray0);
      assertNotNull(intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      String string0 = StringUtils.leftPad("OZ{GT.QB^umT_U(7K", (-138));
      assertNotNull(string0);
      assertEquals("OZ{GT.QB^umT_U(7K", string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "OZ{GT.QB^umT_U(7K", (CharSequence) "OZ{GT.QB^umT_U(7K", (-138));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      String string0 = StringUtils.right(":{dx d~e=", (-1404));
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) ":{dx d~e=";
      String string1 = StringUtils.stripStart(":{dx d~e=", "");
      assertNotNull(string1);
      assertEquals(":{dx d~e=", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ":{dx d~e=", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      
      String string2 = StringUtils.join(charArray0, 'S');
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, charArray0.length);
      assertFalse(string2.equals((Object)string1));
      
      int[] intArray0 = StringUtils.toCodePoints(charSequenceArray0[0]);
      assertArrayEquals(new int[] {58, 123, 100, 120, 32, 100, 126, 101, 61}, intArray0);
      assertNotNull(intArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(9, intArray0.length);
      
      try { 
        StringUtils.getBytes(":{dx d~e=", ":{dx d~e=");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add("HTaTx_5~J2I");
      assertTrue(arrayList0.contains("HTaTx_5~J2I"));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      String string0 = StringUtils.join((List<?>) arrayList0, 'X', 581, 581);
      assertTrue(arrayList0.contains("HTaTx_5~J2I"));
      assertFalse(arrayList0.contains(string0));
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      boolean boolean1 = arrayList0.add("HTaTx_5~J2I");
      assertTrue(arrayList0.contains("HTaTx_5~J2I"));
      assertFalse(arrayList0.contains(string0));
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 581, 581);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("", (-261), "");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "{b>;w&ymP^T#/G|(~]R", (CharSequence) "{b>;w&ymP^T#/G|(~]R", 2062);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("y,~Mk>(K:.E.Af:ar");
      assertNotNull(stringArray0);
      assertEquals(13, stringArray0.length);
      
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string0);
      assertEquals("y", string0);
      assertEquals(13, stringArray0.length);
      
      String string1 = StringUtils.remove("Supplied value must be a valid byte literal between -128 and 127: [", "y");
      assertNotNull(string1);
      assertEquals("Supplied value must be a valid bte literal between -128 and 127: [", string1);
      assertFalse(string1.equals((Object)string0));
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(13, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.strip("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("y,~Mk>(K:.E.Af:ar");
      assertNotNull(stringArray0);
      assertEquals(13, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'S';
      charArray0[2] = '}';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "y,~Mk>(K:.E.Af:ar", charArray0);
      assertArrayEquals(new char[] {'x', 'S', '}'}, charArray0);
      assertFalse(boolean1);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("I62v&go|.SK40$#", (-2741), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("Threshold must not be negative");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      int int0 = StringUtils.compare("QNZN*t+", (String) null, false);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.wrapIfMissing("{b", 'c');
      assertNotNull(string1);
      assertEquals("c{bc", string1);
      assertFalse(string1.equals((Object)string0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "c{bc");
      assertNotNull(charBuffer0);
      assertEquals(4, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("c{bc", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      assertNotNull(byteBuffer0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(4, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertEquals(4, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(4, byteBuffer0.capacity());
      assertEquals(4, byteBuffer0.remaining());
      assertEquals(4, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=4 cap=4]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      
      CharBuffer charBuffer1 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer1);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(4, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertEquals(4, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(4, byteBuffer0.capacity());
      assertEquals(4, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=4 lim=4 cap=4]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(4, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(4, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(4, charBuffer1.limit());
      assertEquals(4, charBuffer1.length());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals(4, charBuffer1.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertEquals("c{bc", charBuffer1.toString());
      assertFalse(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      
      ByteBuffer byteBuffer1 = charset0.encode("Object varargs must not be null");
      assertNotSame(byteBuffer1, byteBuffer0);
      assertNotNull(byteBuffer1);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(34, byteBuffer1.capacity());
      assertTrue(byteBuffer1.hasArray());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals(31, byteBuffer1.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=31 cap=34]", byteBuffer1.toString());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertEquals(31, byteBuffer1.limit());
      assertEquals(0, byteBuffer1.position());
      assertFalse(byteBuffer1.isDirect());
      assertTrue(byteBuffer1.hasRemaining());
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      
      String string2 = StringUtils.substringAfterLast("bdKKUfgT=w\"+PF", "c{bc");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.trimToEmpty("Minimum abbreviation width is %d");
      assertNotNull(string3);
      assertEquals("Minimum abbreviation width is %d", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.stripEnd("{b>;w&ymP^T#/G|(~]Z6", "QNZN*t+");
      assertNotNull(string4);
      assertEquals("{b>;w&ymP^T#/G|(~]Z6", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      String string0 = StringUtils.replaceAll("-}", "-}", "-}");
      assertNotNull(string0);
      assertEquals("-}", string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("Arguments cannot both be null", "Arguments cannot both be null", "-}");
      assertNotNull(string1);
      assertEquals("-}", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string0);
      assertEquals(7, stringArray0.length);
      
      String string1 = StringUtils.replace((String) null, (String) null, (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "-", (CharSequence) "-");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean1);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.compare("qL6%}QCF", "qL6%}QCF");
      assertEquals(0, int0);
      
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      String string0 = "H6]?6N=STOs";
      int int0 = 0;
      String string1 = StringUtils.rightPad("H6]?6N=STOs", 0);
      assertNotNull(string1);
      assertEquals("H6]?6N=STOs", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int1 = StringUtils.compare("H6]?6N=STOs", "H6]?6N=STOs", false);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = 7;
      String string2 = StringUtils.replaceIgnoreCase("", "uR]", "\r", 7);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      
      String string3 = locale0.getScript();
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = locale0.getDisplayVariant((Locale) null);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("\r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=\r
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      String string0 = StringUtils.abbreviate("^}R_?x+0HKS8wz", (int) 'q');
      assertNotNull(string0);
      assertEquals("^}R_?x+0HKS8wz", string0);
      
      String string1 = StringUtils.stripToEmpty(" vs ");
      assertNotNull(string1);
      assertEquals("vs", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultString("vs");
      assertNotNull(string2);
      assertEquals("vs", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Cannot clone Cloneable type ");
      assertNotNull(string0);
      assertEquals("Cannot clone Cloneable type", string0);
      
      String string1 = StringUtils.normalizeSpace("3%g'S.XvP]6");
      assertNotNull(string1);
      assertEquals("3%g'S.XvP]6", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripAccents("hC#2)seN9xWZ0");
      assertNotNull(string2);
      assertEquals("hC#2)seN9xWZ0", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.deleteWhitespace("3%g'S.XvP]6");
      assertNotNull(string3);
      assertEquals("3%g'S.XvP]6", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      String string0 = StringUtils.repeat("aL'0>8HExlmvR4gPE-", 585);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("aL'0>8HExlmvR4gPE-", "aL'0>8HExlmvR4gPE-");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "aL'0>8HExlmvR4gPE-", (CharSequence) string0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, string0, 0, 738);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("\n", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      String string0 = StringUtils.abbreviate("', has a length less than 2", 15);
      assertNotNull(string0);
      assertEquals("', has a len...", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("', has a length less than 2");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBeforeLast("k=7RC)%so0%x:g124?13?160?-393?127?1292", "");
      assertNotNull(string1);
      assertEquals("k=7RC)%so0%x:g124?13?160?-393?127?1292", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isNumeric("', has a len...");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.chomp("Q}k&g|s");
      assertNotNull(string2);
      assertEquals("Q}k&g|s", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, "Array and element cannot both be null");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CharSequence[] charSequenceArray0 = new CharSequence[19];
      String string0 = StringUtils.chop("Invalid locale format: ");
      assertNotNull(string0);
      assertEquals("Invalid locale format:", string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase(" is not in the range '0' - '9'", "Invalid locale format: ", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("Invalid locale format:  is not in the range '0' - '9'", string1);
      assertEquals(19, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsAny("Invalid locale format:", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(19, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.removeEnd("\r", "org.apache.commons.lang3.exception.CloneFailedException");
      assertNotNull(string1);
      assertEquals("\r", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      String string0 = StringUtils.repeat("q<wn!3B", 1607);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      String string0 = StringUtils.leftPad("Object varargs must not be null", (-3005));
      assertNotNull(string0);
      assertEquals("Object varargs must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      String string0 = StringUtils.stripToNull("qem*");
      assertNotNull(string0);
      assertEquals("qem*", string0);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      String string0 = StringUtils.center("F<?xB3erwgW#I", 2626);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("H5eyaHr", "S+m`jMI:r");
      assertNotNull(string1);
      assertEquals("H5eyaHr", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBeforeLast("H5eyaHr", "");
      assertNotNull(string2);
      assertEquals("H5eyaHr", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.stripToNull(string0);
      assertNotNull(string3);
      assertEquals("F<?xB3erwgW#I", string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.repeat("Strings must not be null", 585);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", string0);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Strings must not be null", (CharSequence) "F<?xB3erwgW#I");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Strings must not be null";
      objectArray0[1] = (Object) "H5eyaHr";
      objectArray0[2] = (Object) "F<?xB3erwgW#I";
      objectArray0[3] = (Object) "S+m`jMI:r";
      objectArray0[4] = (Object) "Strings must not be null";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) string0;
      String string5 = StringUtils.join(objectArray0, "H5eyaHr", 0, 0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(7, objectArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "F~^NSS*/gWU";
      stringArray0[1] = "F~^NSS*/gWU";
      stringArray0[2] = "F~^NSS*/gWU";
      stringArray0[3] = "F~^NSS*/gWU";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)52;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'y', (int) (byte)52, (int) 'y');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)6;
      String string0 = StringUtils.join(byteArray0, ';');
      assertArrayEquals(new byte[] {(byte)1, (byte)6}, byteArray0);
      assertNotNull(string0);
      assertEquals("1;6", string0);
      assertEquals(2, byteArray0.length);
      
      String string1 = StringUtils.stripStart("\n", "0[~*");
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      
      short[] shortArray0 = new short[0];
      String string2 = StringUtils.join(shortArray0, ';', (int) (byte)1, (int) (byte)1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, shortArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.chomp((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", '{');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.join((Object[]) stringArray0, '\"');
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllUpperCase("\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripToNull("\n");
      assertNull(string1);
      
      Class<CharBuffer> class0 = CharBuffer.class;
      ServiceLoader<CharBuffer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      
      String string2 = StringUtils.right(":y\"Z/dRij4.", 322);
      assertNotNull(string2);
      assertEquals(":y\"Z/dRij4.", string2);
      assertFalse(string2.equals((Object)string0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, (String) null);
      assertNotNull(string3);
      assertEquals("\n", string3);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.left("zfrgYX}g;>+v", 3469);
      assertNotNull(string4);
      assertEquals("zfrgYX}g;>+v", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.toRootUpperCase("\n");
      assertNotNull(string5);
      assertEquals("\n", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-116);
      String string0 = StringUtils.join(byteArray0, '`', (int) (byte) (-116), Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)0, (byte) (-31), (byte) (-116)}, byteArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(4, byteArray0.length);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.capitalize(", '");
      assertNotNull(string1);
      assertEquals(", '", string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) ", '";
      String string2 = StringUtils.replace(", '", "The type must not be null", "", 4);
      assertNotNull(string2);
      assertEquals(", '", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) ", '";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 3395);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("<9");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceIgnoreCase("[$y(eyj?y_t}", "[$y(eyj?y_t}", "<9");
      assertNotNull(string0);
      assertEquals("<9", string0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string1 = StringUtils.join(shortArray0, 's', (int) (short)52, (-1026));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(1, shortArray0.length);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("gD", "gD", 1639);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.replace("gD", "ln'2}@?nP", "\"gWKxlKFd\"", 1639);
      assertNotNull(string0);
      assertEquals("gD", string0);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.trim((String) null);
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      String string2 = StringUtils.join((Object[]) charSequenceArray0, 'i');
      assertNotNull(string2);
      assertEquals("iii", string2);
      assertEquals(4, charSequenceArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-92);
      String string3 = StringUtils.center((String) null, (int) (byte) (-92), "@*VF?p$:fmD/KI");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[1], charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("@oXvl<g+", "@oXvl<g+", "");
      assertNull(stringArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      String string0 = StringUtils.center("", (-3042), "2AAI.!l?d/29");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.trim((String) null);
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      String string2 = StringUtils.join((Object[]) charSequenceArray0, 'i');
      assertNotNull(string2);
      assertEquals("iii", string2);
      assertEquals(4, charSequenceArray0.length);
      
      charSequenceArray0[2] = (CharSequence) "iii";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-97);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '\"', (int) (byte)0, 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      String string0 = StringUtils.center("", 43);
      assertNotNull(string0);
      assertEquals("                                           ", string0);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.center("B3erwgW#I", 108, (String) null);
      assertNotNull(string0);
      assertEquals("                                                 B3erwgW#I                                                  ", string0);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "!>", (CharSequence) "-{RV_kn7cf");
      assertFalse(boolean0);
      
      String string0 = StringUtils.overlay("!>", "\n", (-3855), 5);
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "!>", (-3855));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 3291, "s37T5zG:y\"Z/dRij4.");
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = StringUtils.join(objectArray0, 'H');
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.remove("Oj]vMfQR", "s37T5zG:y\"Z/dRij4.");
      assertNotNull(string2);
      assertEquals("Oj]vMfQR", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      String string0 = StringUtils.rightPad("IQ1wn>!$ \n", 0);
      assertNotNull(string0);
      assertEquals("IQ1wn>!$ \n", string0);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.deleteWhitespace("Ok>rC:e");
      assertNotNull(string0);
      assertEquals("Ok>rC:e", string0);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 3253);
      assertEquals(0, int0);
      
      String string0 = StringUtils.replace("", "v", "", 3253);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, "2yT");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Object varargs must not be null", "5n^OuZXYPI", 1);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add("HTaTx_5~J2I");
      assertTrue(arrayList0.contains("HTaTx_5~J2I"));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      String string0 = StringUtils.join((List<?>) arrayList0, 'X', 581, 581);
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.contains("HTaTx_5~J2I"));
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 581, 581);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("HTaTx_5~J2I", 2230, "9Y");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((Object[]) null, 'X');
      assertNull(string3);
      
      String string4 = StringUtils.remove(string2, "Minimum abbreviation width is %d");
      assertNotNull(string4);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.capitalize("Z.");
      assertNotNull(string5);
      assertEquals("Z.", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.replaceEach("Z.", (String[]) null, (String[]) null);
      assertNotNull(string6);
      assertEquals("Z.", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      String string0 = StringUtils.trimToNull("q<n3G");
      assertNotNull(string0);
      assertEquals("q<n3G", string0);
      
      String[] stringArray0 = StringUtils.split("q<n3G", "q<n3G");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      String string0 = StringUtils.overlay("v=", "v=", 102, 474);
      assertNotNull(string0);
      assertEquals("v=v=", string0);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1195;
      longArray0[1] = (long) 1195;
      String string0 = StringUtils.join(longArray0, '3', 1195, (-1274));
      assertArrayEquals(new long[] {1195L, 1195L}, longArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2, longArray0.length);
      
      String string1 = StringUtils.stripEnd("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.SPACE;
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.prependIfMissing((String) null, (CharSequence) null, charSequenceArray0);
      assertNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "]^g`?OZ|<hS78";
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(4, stringArray0.length);
      
      String string0 = StringUtils.difference("]^g`?OZ|<hS78", (String) null);
      assertNotNull(string0);
      assertEquals("]^g`?OZ|<hS78", string0);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("@oXvl<g+");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("@oXvl<g+", "@oXvl<g+", "");
      assertNull(stringArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1345.0;
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("@oXvl<g+");
      assertArrayEquals(new int[] {64, 111, 88, 118, 108, 60, 103, 43}, intArray0);
      assertNotNull(intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      String string0 = StringUtils.strip("d^j;1N'A");
      assertNotNull(string0);
      assertEquals("d^j;1N'A", string0);
      
      String string1 = StringUtils.abbreviate((String) null, 1114111, 1114111);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNotBlank("d^j;1N'A");
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBetween("s", "s", (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.unwrap("d^j;1N'A", "offset cannot be negative");
      assertNotNull(string3);
      assertEquals("d^j;1N'A", string3);
      assertTrue(string3.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isMixedCase("d^j;1N'A");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.strip("<=1d2Y|");
      assertNotNull(string4);
      assertEquals("<=1d2Y|", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.wrapIfMissing("_", '#');
      assertNotNull(string5);
      assertEquals("#_#", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.valueOf((char[]) null);
      assertNull(string6);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '#';
      charArray0[3] = 'T';
      charArray0[4] = '9';
      charArray0[5] = 'T';
      charArray0[6] = 'T';
      charArray0[7] = '#';
      boolean boolean2 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'#', '#', '#', 'T', '9', 'T', 'T', '#'}, charArray0);
      assertFalse(boolean2);
      assertEquals(8, charArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string7 = StringUtils.leftPad("offset cannot be negative", 256, "#_#");
      assertNotNull(string7);
      assertEquals("#_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_##_#offset cannot be negative", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.join((char[]) null, 'w');
      assertNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.deleteWhitespace(":{dx d~e=");
      assertNotNull(string0);
      assertEquals(":{dxd~e=", string0);
      
      int int1 = StringUtils.indexOf((CharSequence) ":{dxd~e=", 16);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.removeAll(":{dxd~e=", ":{dx d~e=");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 0
         // :{dx d~e=
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("=)");
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      
      byte[] byteArray0 = StringUtils.getBytes("=)", charset0);
      assertArrayEquals(new byte[] {(byte)61, (byte)41}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string0 = StringUtils.removeAll("M<>kmx _r6)d>lA^5", "k~.dW?p6rR$2D");
      assertNotNull(string0);
      assertEquals("M<>kmx _r6)d>lA^5", string0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'J';
      charArray0[1] = 'U';
      charArray0[2] = 'd';
      charArray0[3] = 'L';
      charArray0[4] = 'M';
      charArray0[5] = 'B';
      charArray0[6] = ' ';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'J', 'U', 'd', 'L', 'M', 'B', ' '}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(7, charArray0.length);
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals("JUdLMB ", charBuffer0.toString());
      assertEquals(7, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(7, charBuffer0.length());
      
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      assertArrayEquals(new char[] {'J', 'U', 'd', 'L', 'M', 'B', ' '}, charArray0);
      assertNotNull(byteBuffer0);
      assertEquals(7, charArray0.length);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.position());
      assertEquals(7, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=7 cap=7]", byteBuffer0.toString());
      assertEquals(7, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(7, byteBuffer0.limit());
      assertEquals(7, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      assertNotSame(byteBuffer1, byteBuffer0);
      assertArrayEquals(new char[] {'J', 'U', 'd', 'L', 'M', 'B', ' '}, charArray0);
      assertNotNull(byteBuffer1);
      assertEquals(7, charArray0.length);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.position());
      assertEquals(7, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(byteBuffer1.hasArray());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals(0, byteBuffer1.remaining());
      assertFalse(byteBuffer1.isDirect());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertEquals(0, byteBuffer1.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer1.toString());
      assertEquals(0, byteBuffer1.capacity());
      assertEquals(0, byteBuffer1.limit());
      assertFalse(byteBuffer1.hasRemaining());
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains("k~.dW?p6rR$2D"));
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      
      byte[] byteArray0 = StringUtils.getBytes("k~.dW?p6rR$2D", charset0);
      assertNotNull(byteArray0);
      assertEquals(13, byteArray0.length);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "M<>kmx _r6)d>lA^5";
      charSequenceArray0[1] = (CharSequence) charBuffer0;
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = (CharSequence) "M<>kmx _r6)d>lA^5";
      charSequenceArray0[5] = (CharSequence) "M<>kmx _r6)d>lA^5";
      charSequenceArray0[6] = (CharSequence) "k~.dW?p6rR$2D";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.overlay("\n", "B3erwgW#I", 13, 13);
      assertNotNull(string1);
      assertEquals("\nB3erwgW#I", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rotate("B3erwgW#I", 13);
      assertNotNull(string2);
      assertEquals("gW#IB3erw", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.lowerCase("\nB3erwgW#I");
      assertNotNull(string3);
      assertEquals("\nb3erwgw#i", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.unwrap("S+m`jMI:r", '\'');
      assertNotNull(string4);
      assertEquals("S+m`jMI:r", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean0 = StringUtils.containsIgnoreCase("S+m`jMI:r", "gW#IB3erw");
      assertFalse(boolean0);
      
      String string5 = StringUtils.appendIfMissing("gW#IB3erw", "S+m`jMI:r", charSequenceArray0);
      assertNotNull(string5);
      assertEquals("gW#IB3erwS+m`jMI:r", string5);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string6 = StringUtils.EMPTY;
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "\nb3erwgw#i");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string7 = StringUtils.leftPad("2yT", (-1));
      assertNotNull(string7);
      assertEquals("2yT", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("<G52%>=\"rhh|&GkAD2p", "<G52%>=\"rhh|&GkAD2p");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      String string1 = StringUtils.swapCase("...");
      assertNotNull(string1);
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "...", (CharSequence) "", (-2481));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      String string0 = StringUtils.remove("Cannot clone Cloneable type ", "");
      assertNotNull(string0);
      assertEquals("Cannot clone Cloneable type ", string0);
      
      String string1 = StringUtils.join((double[]) null, 'R');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[25];
      charSequenceArray0[0] = (CharSequence) "v";
      charSequenceArray0[1] = (CharSequence) "v";
      String string0 = StringUtils.removeEndIgnoreCase("', has a length less than 2", "...wCMAi/X|iN_.4'WKb");
      assertNotNull(string0);
      assertEquals("', has a length less than 2", string0);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      String string0 = StringUtils.abbreviate("U|[GGg4q2m", 33);
      assertNotNull(string0);
      assertEquals("U|[GGg4q2m", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("U|[GGg4q2m");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBeforeLast("maxWith cannot be negative", "U|[GGg4q2m");
      assertNotNull(string1);
      assertEquals("maxWith cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("@oXvl<g+");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("@oXvl<g+", "@oXvl<g+", "");
      assertNull(stringArray1);
      
      String string0 = StringUtils.join((int[]) null, '\\', 452, Integer.MIN_VALUE);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1542;
      intArray0[1] = 821;
      intArray0[2] = (-1349);
      intArray0[3] = 0;
      intArray0[4] = Integer.MIN_VALUE;
      intArray0[5] = 452;
      intArray0[6] = 3717;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'b', 0, 452);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Minimum abb*eviation width with offset is %d", "Minimum abb*eviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("Minimum abb*eviation width with offset is %d", string0);
      
      String string1 = StringUtils.defaultString("Minimum abb*eviation width with offset is %d");
      assertNotNull(string1);
      assertEquals("Minimum abb*eviation width with offset is %d", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Minimum abb*eviation width with offset is %d", " yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertEquals(5, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) " yu3k0bH:Wb_hfN^Zfu<q0]a", (CharSequence) "Minimum abb*eviation width with offset is %d");
      assertEquals(40, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.center("Minimum abb*eviation width with offset is %d", (-116), "maxWith cannot be negative");
      assertNotNull(string2);
      assertEquals("Minimum abb*eviation width with offset is %d", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      String string0 = StringUtils.replace("'$", "'$", "'$");
      assertNotNull(string0);
      assertEquals("'$", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "'$", "'$");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceChars("org.apache.commons.lang3.exception.CloneFailedException", "W-JRHZ`!5>l3O]", "'$");
      assertNotNull(string1);
      assertEquals("org.apache.commons.ang.exception.ConeFaiedException", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripToNull("'$");
      assertNotNull(string2);
      assertEquals("'$", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Brf_/b?Z!6'~);xWd", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      String string0 = StringUtils.left("iH.Z[Rw0y21u", 1296);
      assertNotNull(string0);
      assertEquals("iH.Z[Rw0y21u", string0);
      
      char[] charArray0 = new char[1];
      String string1 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(string1);
      assertEquals("\u0000", string1);
      assertEquals(1, charArray0.length);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      Class<CharBuffer> class0 = CharBuffer.class;
      ServiceLoader<CharBuffer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      
      String string0 = StringUtils.truncate("<G52%>=\"rhh|&GkAD2p", 728, 32);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((Object[]) null, "<G52%>=\"rhh|&GkAD2p");
      assertNull(string1);
      
      String string2 = StringUtils.left("Locale must not be null", 2);
      assertNotNull(string2);
      assertEquals("Lo", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.toRootUpperCase("-8");
      assertNotNull(string3);
      assertEquals("-8", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      String string0 = StringUtils.left(" vs ", 51);
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = '^';
      charArray0[2] = 'L';
      charArray0[3] = 'R';
      charArray0[4] = 'A';
      int int0 = StringUtils.indexOfAny((CharSequence) " vs ", charArray0);
      assertArrayEquals(new char[] {'J', '^', 'L', 'R', 'A'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("q<wn!3B");
      assertNotNull(string0);
      assertEquals("q<wn!3B", string0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 8;
      longArray0[1] = (long) 13;
      longArray0[2] = 1541L;
      longArray0[3] = (long) 8;
      String string1 = StringUtils.repeat("q<wn!3B", (-1131));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("", 1, "");
      assertNotNull(string2);
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("q<wn!3B", " ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.repeat('Z', 78);
      assertNotNull(string3);
      assertEquals("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "q<wn!3B", (CharSequence) "q<wn!3B");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.replacePattern(" has no clone method", "q<wn!3B", " ");
      assertNotNull(string4);
      assertEquals(" has no clone method", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean2 = StringUtils.isAllLowerCase("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string5 = StringUtils.replaceChars("v1(PnkSt*", "q<wn!3B", (String) null);
      assertNotNull(string5);
      assertEquals("v1(PkSt*", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "q<wn!3B", (CharSequence) "v1(PnkSt*", 44);
      assertEquals(8, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("UTx7llm;tIEjO\"T9-&");
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("v1(PkSt*", "+rQ8ZS+m`jMI:r", "$30.C=%d+k$.vO9");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      String string0 = StringUtils.replaceChars("s37T5zG:y\"Z/dRij4.", "s37T5zG:y\"Z/dRij4.", "s37T5zG:y\"Z/dRij4.");
      assertNotNull(string0);
      assertEquals("s37T5zG:y\"Z/dRij4.", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "s37T5zG:y\"Z/dRij4.", (String) null);
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("s37T5zG:y\"Z/dRij4.", "s37T5zG:y\"Z/dRij4.");
      assertEquals(1.0, double0, 0.01);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Supplied value must be a valid byte literal between -32768 and 32767: [", (String) null, 11);
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      String string1 = StringUtils.deleteWhitespace("Object varargs must not be null");
      assertNotNull(string1);
      assertEquals("Objectvarargsmustnotbenull", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToNull("Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertNotNull(string2);
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.trim((String) null);
      assertNull(string3);
      
      int int0 = StringUtils.ordinalIndexOf("Supplied value must be a valid byte literal between -32768 and 32767: [", "s37T5zG:y\"Z/dRij4.", 19);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.getDigits("Objectvarargsmustnotbenull");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      int int1 = StringUtils.indexOf((CharSequence) "s37T5zG:y\"Z/dRij4.", 1154);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.center("s37T5zG:y\"Z/dRij4.`$Q6b\"eY=J", (-985), "Cannot clone Cloneable type ");
      assertNotNull(string5);
      assertEquals("s37T5zG:y\"Z/dRij4.`$Q6b\"eY=J", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.deleteWhitespace("Cannot clone Cloneable type ");
      assertNotNull(string6);
      assertEquals("CannotcloneCloneabletype", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      
      String string7 = StringUtils.rightPad("s37T5zG:y\"Z/dRij4.`$Q6b\"eY=J", 64, "s37T5zG:y\"Z/dRij4.");
      assertNotNull(string7);
      assertEquals("s37T5zG:y\"Z/dRij4.`$Q6b\"eY=Js37T5zG:y\"Z/dRij4.s37T5zG:y\"Z/dRij4", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      
      String string8 = StringUtils.join((Object[]) stringArray0, 'I');
      assertNotNull(string8);
      assertEquals("SuppliedIvalueImustIbeIaIvalidIbyteIliteralIbetweenI-32768Iand 32767: [", string8);
      assertEquals(11, stringArray0.length);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      
      String string9 = StringUtils.remove("org.apache.commons.lang3.RegExUtils", "U~Z");
      assertNotNull(string9);
      assertEquals("org.apache.commons.lang3.RegExUtils", string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      String string0 = StringUtils.substringBetween("q<wn!3B", "q<wn!3B", "q<wn!3B");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.replace("org.apache.commons.lang3.StringUtils", "Arguments cannot both be null", "...");
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "q<wn!3B";
      String string2 = StringUtils.repeat("org.apache.commons.lang3.StringUtils", Integer.MIN_VALUE);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("Arguments cannot both be null", (CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.repeat(')', Integer.MIN_VALUE);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", charSequenceArray0[2]);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.repeat("Invalid locale format: ", (-32768));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isAllLowerCase("org.apache.commons.lang3.StringUtils");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
      
      String string0 = StringUtils.normalizeSpace("cy>0X4^");
      assertNotNull(string0);
      assertEquals("cy>0X4^", string0);
      
      String string1 = StringUtils.substringBetween("IkEH:Wb_hfN^KZfu<q0j;", " yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase("cy>0X4^", "cy>0X4^", true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", " is not in the range '0' - '9'", "Ik");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substring("", 0, 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.replace("Ik", "", "Ik");
      assertNotNull(string2);
      assertEquals("Ik", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removePattern("*e~_c[&tg7Cg", " ");
      assertNotNull(string3);
      assertEquals("*e~_c[&tg7Cg", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Ik", "", 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Mn)>kTF;W4z:", " ", 0);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean3 = StringUtils.isEmpty("*e~_c[&tg7Cg");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string4 = StringUtils.replaceIgnoreCase("", " ", "hH:K1;$%IQC");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)900;
      shortArray0[2] = (short)98;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)4;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)52;
      String string5 = StringUtils.join(shortArray0, 't', (int) (short)52, 0);
      assertArrayEquals(new short[] {(short)0, (short)900, (short)98, (short)0, (short)4, (short)0, (short)52}, shortArray0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(7, shortArray0.length);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      String string0 = StringUtils.remove("M$x7_ ao*T&5nR,!C ", '*');
      assertNotNull(string0);
      assertEquals("M$x7_ aoT&5nR,!C ", string0);
      
      String string1 = StringUtils.stripAccents(" yu3k0b");
      assertNotNull(string1);
      assertEquals(" yu3k0b", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trim("Cannot clone Cloneable type ");
      assertNotNull(string2);
      assertEquals("Cannot clone Cloneable type", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("<9", "maxWith annot be negative", 735);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("M$x7_ aoT&5nR,!C ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceIgnoreCase("...", (String) null, "M$x7_ aoT&5nR,!C ");
      assertNotNull(string3);
      assertEquals("...", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short)0;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '*', (int) (short)52, 735);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      Class<CharBuffer> class0 = CharBuffer.class;
      ServiceLoader<CharBuffer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      
      String string1 = StringUtils.right("", Integer.MAX_VALUE);
      assertNotNull(string1);
      assertEquals("", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[0] = object1;
      String string2 = StringUtils.join(objectArray0, "zfrgYX}g;>+v");
      assertNotNull(string2);
      assertEquals(1, objectArray0.length);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.left((String) null, 3469);
      assertNull(string3);
      
      String string4 = StringUtils.toRootUpperCase((String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      String string0 = StringUtils.removeFirst("...", "...");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      String string0 = StringUtils.replaceChars("!>", "!>", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripToNull("offset cannot be ne");
      assertNotNull(string1);
      assertEquals("offset cannot be ne", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      String string0 = StringUtils.substringBetween("g0G TP03bAj$ES1=", "g0G TP03bAj$ES1=", "g0G TP03bAj$ES1=");
      assertNull(string0);
      
      String string1 = StringUtils.chop("g0G TP03bAj$ES1=");
      assertNotNull(string1);
      assertEquals("g0G TP03bAj$ES1", string1);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.strip("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.leftPad("object", (-2189));
      assertNotNull(string2);
      assertEquals("object", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceChars("object", " iL-", "");
      assertNotNull(string3);
      assertEquals("object", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "object", (CharSequence) "object", 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      String string0 = StringUtils.overlay("q<wn!3B", "^RI%52/", 72, 72);
      assertNotNull(string0);
      assertEquals("q<wn!3B^RI%52/", string0);
      
      String string1 = StringUtils.removeStart("^RI%52/", "xW<!~kq[QsB,8$#");
      assertNotNull(string1);
      assertEquals("^RI%52/", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("JmUyw...", "EV+fM6a$4LG", "?^xo");
      assertNotNull(string0);
      assertEquals("JmUyw...", string0);
      
      String string1 = StringUtils.toRootUpperCase("JmUyw...");
      assertNotNull(string1);
      assertEquals("JMUYW...", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((short[]) null, ')', 3692, 3692);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      String string0 = StringUtils.removeStart("2yT", "TN!8IcQZ*iN");
      assertNotNull(string0);
      assertEquals("2yT", string0);
      
      String string1 = StringUtils.replaceChars("TN!8IcQZ*iN", "aN?/Tp.EPLFCU", "");
      assertNotNull(string1);
      assertEquals("!8IcQZ*i", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBetween(" vs ", "Mn^ dhe/Slqx:n");
      assertNull(string2);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(any() , any());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      assertFalse(treeSet0.contains("TN!8IcQZ*iN"));
      assertNotNull(treeSet0);
      
      boolean boolean0 = treeSet0.add(" vs ");
      assertTrue(treeSet0.contains("TN!8IcQZ*iN"));
      assertTrue(boolean0);
      
      boolean boolean1 = treeSet0.add("");
      assertTrue(treeSet0.contains("TN!8IcQZ*iN"));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = treeSet0.add("nIAr");
      assertTrue(treeSet0.contains("TN!8IcQZ*iN"));
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string3 = treeSet0.floor("2yT");
      assertTrue(treeSet0.contains("TN!8IcQZ*iN"));
      assertNotNull(string3);
      assertEquals(" vs ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.join((Iterable<?>) treeSet0, ':');
      assertTrue(treeSet0.contains("TN!8IcQZ*iN"));
      assertNotNull(string4);
      assertEquals(" vs ", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.replaceFirst(" vs ", "TN!8IcQZ*iN", "TN!8IcQZ*iN");
      assertNotNull(string5);
      assertEquals(" vs ", string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.toRootUpperCase("");
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.join((short[]) null, ':', 50, 50);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("k9SVp-v4Uj=z#");
      assertNotNull(string0);
      assertEquals("K9SVP-V4UJ=Z#", string0);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[1];
      String string1 = StringUtils.join(objectArray0, (String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("2b'uTv<FtxJA", 'A');
      assertNotNull(string0);
      assertEquals("2b'uTv<FtxJ", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "2b'uTv<FtxJA", (CharSequence) "2b'uTv<FtxJA");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripToEmpty("2b'uTv<FtxJA");
      assertNotNull(string1);
      assertEquals("2b'uTv<FtxJA", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("Aborting to protect against StackOverflowError - output of one loop is the input of another", (int) 'A', "org.apache.commons.lang3.ObjectUtils");
      assertNotNull(string2);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("@oXvl<g+", "@oXvl<g+", "");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertNotNull(string0);
      assertEquals("k", string0);
      assertEquals(1, charArray0.length);
      
      String string1 = StringUtils.leftPad("", (-277), "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviate((String) null, 0, (-277));
      assertNull(string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "@oXvl<g+");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.stripAccents("\"ti;3=rb=dBkC");
      assertNotNull(string3);
      assertEquals("\"ti;3=rb=dBkC", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("q<wn!3B");
      assertNotNull(string0);
      assertEquals("q<wn!3B", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "q<wn!3B";
      String string1 = StringUtils.abbreviateMiddle("q<wn!3B", "{sz?j)", (-2042555295));
      assertNotNull(string1);
      assertEquals("q<wn!3B", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.compareIgnoreCase("\"JtcO1&l']*O7", "H5eyaHr", false);
      assertEquals((-70), int0);
      
      String string2 = StringUtils.wrap(":Wb_hfN^Zfu<q0]a", "q<wn!3B");
      assertNotNull(string2);
      assertEquals("q<wn!3B:Wb_hfN^Zfu<q0]aq<wn!3B", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.indexOf((CharSequence) "q<wn!3B", (-2042555295), 31);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.countMatches(charSequenceArray0[0], '3');
      assertEquals(1, int2);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      String string0 = StringUtils.rightPad("}b]O", 0);
      assertNotNull(string0);
      assertEquals("}b]O", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "}b]O", (CharSequence) "}b]O", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.strip("}b]O", "/:#%77VgM87AT");
      assertNotNull(string1);
      assertEquals("}b]O", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("}b]O");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "}b]O", 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.join((Object[]) null, "y,~Mk>(K:.E.Af:ar", 463, (-1));
      assertNull(string2);
      
      String string3 = StringUtils.substringBefore("}b]O", "y,~Mk>(K:.E.Af:ar");
      assertNotNull(string3);
      assertEquals("}b]O", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "y,~Mk>(K:.E.Af:ar", (String) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      String string0 = StringUtils.unwrap("4/6RxX78|DY_UqqM", 'P');
      assertNotNull(string0);
      assertEquals("4/6RxX78|DY_UqqM", string0);
      
      String string1 = StringUtils.join((boolean[]) null, '_', 2482, 2482);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "Q V~v53%z@0|ZM-Q1R");
      assertTrue(boolean0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      int int0 = StringUtils.indexOfAny((CharSequence) "sH ", charArray0);
      assertArrayEquals(new char[] {'A', 'A'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, '?', 1541, 1541);
      assertNull(string0);
      
      String string1 = StringUtils.center("{}", 11, (String) null);
      assertNotNull(string1);
      assertEquals("    {}     ", string1);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = null;
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string0 = StringUtils.abbreviateMiddle("^|!Rn^2?AH>W", "^|!Rn^2?AH>W", 316);
      assertNotNull(string0);
      assertEquals("^|!Rn^2?AH>W", string0);
      
      int int0 = StringUtils.compareIgnoreCase("M$x7_ ao*T&5nR,!C ", "\"JtcO1&l']*O7", false);
      assertEquals(93, int0);
      
      String string1 = StringUtils.wrap("z]F`3#lmj6XCt+9/o", "\"JtcO1&l']*O7");
      assertNotNull(string1);
      assertEquals("\"JtcO1&l']*O7z]F`3#lmj6XCt+9/o\"JtcO1&l']*O7", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOf((CharSequence) "^|!Rn^2?AH>W", 316, 31);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) "^|!Rn^2?AH>W", 'L');
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertFalse(boolean0);
      
      String string0 = StringUtils.getDigits("org.apache.commons.lang3.Charsets");
      assertNotNull(string0);
      assertEquals("3", string0);
      
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)579;
      shortArray0[2] = (short)482;
      shortArray0[3] = (short)0;
      String string1 = StringUtils.join(shortArray0, 'Z', (int) (short)579, (int) (short)0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(19, shortArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.unwrap("3", 'Z');
      assertNotNull(string2);
      assertEquals("3", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "3", "Strings must not be null");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      String string0 = "Q V~v53%z@0|ZM-Q1R";
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "Q V~v53%z@0|ZM-Q1R");
      assertTrue(boolean0);
      
      String string1 = StringUtils.unwrap("sH ", '`');
      assertNotNull(string1);
      assertEquals("sH ", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("sH ", 0, "sH ");
      assertNotNull(string2);
      assertEquals("sH ", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.countMatches((CharSequence) null, '`');
      assertEquals(0, int0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) null, (-28), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      String string0 = StringUtils.difference("{$U>2)\"yP#", "6b$(S|ujZY>");
      assertNotNull(string0);
      assertEquals("6b$(S|ujZY>", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "6b$(S|ujZY>", (CharSequence) "{$U>2)\"yP#");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "6b$(S|ujZY>", (CharSequence) "6b$(S|ujZY>");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("6b$(S|ujZY>");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      String string0 = StringUtils.left(" vs ", 51);
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertFalse(linkedHashSet0.contains(" vs "));
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.remove("PBIvp2qcYCY (", "O3 K;");
      assertNotNull(string1);
      assertEquals("PBIvp2qcYCY (", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfterLast("Nlx7xhycqC", "Strings must not be null");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", (CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("PBIvp2qcYCY (");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " vs ", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) " vs ", (CharSequence) "O3 K;");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("7-D1Z~{CK");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      String string0 = StringUtils.replace("clone", "clone", "clone");
      assertNotNull(string0);
      assertEquals("clone", string0);
      
      String string1 = StringUtils.join((long[]) null, 'g');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("clone");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "clone", (CharSequence) "clone");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, 3, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.mid("Minimum abbreviation width is %d", 2125, 919);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", 1039);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'g'}, charArray0);
      assertFalse(boolean2);
      assertEquals(1, charArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string3 = StringUtils.substringBetween("L<4e", "hlwp'", "\n");
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int3 = StringUtils.indexOfAny((CharSequence) "L<4e", charSequenceArray0);
      assertEquals((-1), int3);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      
      boolean boolean3 = StringUtils.isAlphanumeric("hlwp'");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, 'N');
      assertNull(string0);
      
      String string1 = StringUtils.stripAccents((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.trim((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.substringAfterLast((String) null, 197);
      assertNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("maxWith cannot be negative", (String) null);
      assertNotNull(string4);
      assertEquals("maxWith cannot be negative", string4);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'N';
      longArray0[1] = (long) 197;
      longArray0[2] = (long) 'N';
      longArray0[3] = (long) 197;
      longArray0[4] = (long) 197;
      longArray0[5] = (long) 'N';
      longArray0[6] = (long) 197;
      String string5 = StringUtils.join(longArray0, 'N');
      assertArrayEquals(new long[] {78L, 197L, 78L, 197L, 197L, 78L, 197L}, longArray0);
      assertNotNull(string5);
      assertEquals("78N197N78N197N197N78N197", string5);
      assertEquals(7, longArray0.length);
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.upperCase((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.capitalize((String) null);
      assertNull(string7);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "78N197N78N197N197N78N197");
      assertEquals((-1), int0);
      
      String string8 = StringUtils.getDigits("");
      assertNotNull(string8);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      String string9 = StringUtils.upperCase("okxD!3#9K", locale0);
      assertNotNull(string9);
      assertEquals("OKXD!3#9K", string9);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'd';
      intArray0[1] = (int) 'd';
      intArray0[2] = (int) 'd';
      intArray0[4] = (int) 'd';
      intArray0[5] = (int) 'd';
      intArray0[6] = (int) 'd';
      intArray0[7] = (int) 'd';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'b', 100, 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "maxWith cannot be negative";
      stringArray0[2] = "maxWith cannot be negative";
      stringArray0[3] = "maxWith cannot be negative";
      stringArray0[4] = "maxWith cannot be negative";
      stringArray0[5] = "maxWith cannot be negative";
      stringArray0[6] = "maxWith cannot be negative";
      stringArray0[7] = "";
      String string0 = StringUtils.replaceEach("maxWith cannot be negative", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("maxWith cannot be negative", string0);
      assertEquals(8, stringArray0.length);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("maxWith cannot be negative", "maxWith cannot be negative", stringArray0);
      assertNotNull(string1);
      assertEquals("maxWith cannot be negative", string1);
      assertEquals(8, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.prependIfMissingIgnoreCase(" ", "", stringArray0);
      assertNotNull(string2);
      assertEquals(" ", string2);
      assertEquals(8, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "maxWith cannot be negative", (CharSequence[]) stringArray0);
      assertTrue(boolean1);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.center("A", 10, "g|]");
      assertNotNull(string3);
      assertEquals("g|]gAg|]g|", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.join((int[]) null, 'O');
      assertNull(string4);
      
      String string5 = StringUtils.removePattern("A", "g|]");
      assertNotNull(string5);
      assertEquals("A", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean2 = StringUtils.isNotEmpty("A");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string6 = StringUtils.LF;
      assertNotNull(string6);
      assertEquals("\n", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "g|]", (CharSequence) "\n");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string0 = StringUtils.join((Object[]) stringArray0, '\"');
      assertNotNull(string0);
      assertEquals("AD\"AE\"AF\"AG\"AI\"AL\"AM\"AN\"AO\"AQ\"AR\"AS\"AT\"AU\"AW\"AX\"AZ\"BA\"BB\"BD\"BE\"BF\"BG\"BH\"BI\"BJ\"BL\"BM\"BN\"BO\"BQ\"BR\"BS\"BT\"BV\"BW\"BY\"BZ\"CA\"CC\"CD\"CF\"CG\"CH\"CI\"CK\"CL\"CM\"CN\"CO\"CR\"CU\"CV\"CW\"CX\"CY\"CZ\"DE\"DJ\"DK\"DM\"DO\"DZ\"EC\"EE\"EG\"EH\"ER\"ES\"ET\"FI\"FJ\"FK\"FM\"FO\"FR\"GA\"GB\"GD\"GE\"GF\"GG\"GH\"GI\"GL\"GM\"GN\"GP\"GQ\"GR\"GS\"GT\"GU\"GW\"GY\"HK\"HM\"HN\"HR\"HT\"HU\"ID\"IE\"IL\"IM\"IN\"IO\"IQ\"IR\"IS\"IT\"JE\"JM\"JO\"JP\"KE\"KG\"KH\"KI\"KM\"KN\"KP\"KR\"KW\"KY\"KZ\"LA\"LB\"LC\"LI\"LK\"LR\"LS\"LT\"LU\"LV\"LY\"MA\"MC\"MD\"ME\"MF\"MG\"MH\"MK\"ML\"MM\"MN\"MO\"MP\"MQ\"MR\"MS\"MT\"MU\"MV\"MW\"MX\"MY\"MZ\"NA\"NC\"NE\"NF\"NG\"NI\"NL\"NO\"NP\"NR\"NU\"NZ\"OM\"PA\"PE\"PF\"PG\"PH\"PK\"PL\"PM\"PN\"PR\"PS\"PT\"PW\"PY\"QA\"RE\"RO\"RS\"RU\"RW\"SA\"SB\"SC\"SD\"SE\"SG\"SH\"SI\"SJ\"SK\"SL\"SM\"SN\"SO\"SR\"SS\"ST\"SV\"SX\"SY\"SZ\"TC\"TD\"TF\"TG\"TH\"TJ\"TK\"TL\"TM\"TN\"TO\"TR\"TT\"TV\"TW\"TZ\"UA\"UG\"UM\"US\"UY\"UZ\"VA\"VC\"VE\"VG\"VI\"VN\"VU\"WF\"WS\"YE\"YT\"ZA\"ZM\"ZW", string0);
      assertEquals(250, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "ko}T_4b-.P6";
      charSequenceArray0[1] = (CharSequence) "ko}T_4b-.P6";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-2951L);
      String string0 = StringUtils.join(longArray0, ' ');
      assertArrayEquals(new long[] {(-2951L)}, longArray0);
      assertNotNull(string0);
      assertEquals("-2951", string0);
      assertEquals(1, longArray0.length);
      
      boolean boolean1 = StringUtils.isAlpha("-2951");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "]^g`?OZ|<hS78", (CharSequence) "]^g`?OZ|<hS78");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      String string0 = StringUtils.removeStart("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertNotNull(string0);
      assertEquals("", string0);
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'J', 87, 1841);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 87
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      String string0 = StringUtils.capitalize("*~Dkmzda#");
      assertNotNull(string0);
      assertEquals("*~Dkmzda#", string0);
      
      String string1 = StringUtils.substringBetween("*~Dkmzda#", (String) null);
      assertNull(string1);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      String string0 = StringUtils.abbreviate("H:Wb_hfN^Zfu<q0]a yu3k0b", 82, 82);
      assertNotNull(string0);
      assertEquals("H:Wb_hfN^Zfu<q0]a yu3k0b", string0);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      String string0 = StringUtils.upperCase("The type must not be null");
      assertNotNull(string0);
      assertEquals("THE TYPE MUST NOT BE NULL", string0);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[0] = 'd';
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'd';
      String string0 = StringUtils.join(intArray0, 'd', 108, 100);
      assertArrayEquals(new int[] {100}, intArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 321;
      intArray0[2] = (-589);
      intArray0[3] = 744;
      intArray0[4] = 0;
      intArray0[5] = 1174;
      intArray0[6] = 322;
      intArray0[7] = 876;
      String string0 = StringUtils.join(intArray0, 'i');
      assertArrayEquals(new int[] {0, 321, (-589), 744, 0, 1174, 322, 876}, intArray0);
      assertNotNull(string0);
      assertEquals("0i321i-589i744i0i1174i322i876", string0);
      assertEquals(8, intArray0.length);
      
      boolean boolean0 = StringUtils.isNotEmpty("0i321i-589i744i0i1174i322i876");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-1367L);
      longArray0[1] = (long) 322;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 744;
      longArray0[7] = 1L;
      String string1 = StringUtils.join(longArray0, 'i');
      assertArrayEquals(new long[] {(-1367L), 322L, 0L, 0L, 0L, 0L, 744L, 1L}, longArray0);
      assertNotNull(string1);
      assertEquals("-1367i322i0i0i0i0i744i1", string1);
      assertEquals(8, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.upperCase("2b'uTv<FtxJA");
      assertNotNull(string2);
      assertEquals("2B'UTV<FTXJA", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.capitalize("}'R|x,xeF7J");
      assertNotNull(string3);
      assertEquals("}'R|x,xeF7J", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "2b'uTv<FtxJA", (CharSequence) "}'R|x,xeF7J");
      assertEquals(0, int0);
      
      String string4 = StringUtils.getDigits("}'R|x,xeF7J");
      assertNotNull(string4);
      assertEquals("7", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      String string0 = StringUtils.leftPad("{L_b!C0=}i-a", 3276);
      assertNotNull(string0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 3276;
      intArray0[1] = 3276;
      intArray0[2] = 3276;
      intArray0[3] = 3276;
      intArray0[4] = 10;
      String string1 = StringUtils.join(intArray0, 'S');
      assertArrayEquals(new int[] {3276, 3276, 3276, 3276, 10}, intArray0);
      assertNotNull(string1);
      assertEquals("3276S3276S3276S3276S10", string1);
      assertEquals(5, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) "3276S3276S3276S3276S10", 3276);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.strip((String) null, "108A0A0A-1118A64A-2212");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "*n@^D47zIYx`#\"ladn", 235);
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("108A0A0A-1118A64A-2212", "*n@^D47zIYx`#\"ladn", stringArray0);
      assertNotNull(string2);
      assertEquals("108A0A0A-1118A64A-2212", string2);
      assertEquals(10, stringArray0.length);
      
      double double0 = StringUtils.getJaroWinklerDistance("p{InCombiningDiacriticalMarks}+", "*n@^D47zIYx`#\"ladn");
      assertEquals(0.4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      String string0 = StringUtils.left("s37T5zG:y\"Z/dRij4.", 11);
      assertNotNull(string0);
      assertEquals("s37T5zG:y\"Z", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "s37T5zG:y\"Z", (String) null);
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("s37T5zG:y\"Z", "s37T5zG:y\"Z");
      assertEquals(1.0, double0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[1] = ',';
      charArray0[2] = 'L';
      charArray0[3] = '}';
      charArray0[4] = 'V';
      charArray0[5] = 'w';
      charArray0[6] = '=';
      charArray0[7] = ',';
      int int0 = StringUtils.indexOfAny((CharSequence) "s37T5zG:y\"Z/dRij4.", charArray0);
      assertArrayEquals(new char[] {'x', ',', 'L', '}', 'V', 'w', '=', ','}, charArray0);
      assertEquals((-1), int0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, 'q');
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, shortArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (int) 'q');
      assertEquals(0, int0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertFalse(stack0.contains(int0));
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      String string1 = StringUtils.join((List<?>) stack0, 'r', 0, 0);
      assertFalse(stack0.contains(0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("offset cannot be negative");
      Stack<Integer> stack0 = new Stack<Integer>();
      String string0 = StringUtils.replaceIgnoreCase((String) null, "-o0", "offset cannot be negative");
      assertNull(string0);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      String string1 = StringUtils.repeat('Z', 113);
      assertEquals("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", string1);
      
      StringUtils.right((String) null, 113);
      boolean boolean2 = StringUtils.equals((CharSequence) "offset cannot be negative", (CharSequence) null);
      assertTrue(boolean2 == boolean0);
      
      StringUtils.repeat("-L{1i#)TeA", 113);
      String string2 = StringUtils.substringAfter("-7nz", (-3150));
      assertEquals("", string2);
      
      boolean boolean3 = StringUtils.isAllLowerCase("");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      String string0 = StringUtils.leftPad(", Length: 0", 2612, ", Length: 0");
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) string0, (CharSequence) string0);
      assertNotNull(charSequence0);
      
      double double0 = StringUtils.getJaroWinklerDistance(", Length: 0", string0);
      assertEquals(0.67, double0, 0.01);
      
      String string1 = StringUtils.overlay("', is neither of type Map.Entry nor an Array", "BgRCh`Mx", 100, 2612);
      assertEquals("', is neither of type Map.Entry nor an ArrayBgRCh`Mx", string1);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      String string0 = null;
      StringUtils.toRootLowerCase((String) null);
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.removeStart("=gvoQ^n-k0*[+f", "");
      String string2 = StringUtils.repeat("=gvoQ^n-k0*[+f", 506);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)charSequence0));
      
      String string3 = StringUtils.substringBefore("=gvoQ^n-k0*[+f", 506);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      String string0 = StringUtils.LF;
      int int0 = StringUtils.INDEX_NOT_FOUND;
      Locale locale0 = Locale.GERMANY;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n", "\n");
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.substringBefore("\n", "\n");
      String string2 = StringUtils.abbreviateMiddle("\n", " }D?i;QL&xp0#k", (-1403));
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      
      double double0 = StringUtils.getJaroWinklerDistance("\n", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "maxWith annot be negative";
      charSequenceArray0[1] = (CharSequence) "maxWith annot be negative";
      String string0 = StringUtils.prependIfMissingIgnoreCase("maxWith annot be negative", "maxWith annot be negative", charSequenceArray0);
      assertEquals("maxWith annot be negative", string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("\r", "maxWith annot be negative", charSequenceArray0);
      assertEquals("maxWith annot be negative\r", string1);
      
      StringUtils.contains(charSequenceArray0[0], (CharSequence) "maxWith annot be negative");
      boolean boolean0 = StringUtils.containsAny((CharSequence) "maxWith annot be negative", charSequenceArray0);
      StringUtils.join((byte[]) null, 'G', (int) (byte)0, 24);
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isEmpty("maxWith annot be negative");
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, (String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      charSequenceArray0[0] = (CharSequence) "\n";
      StringUtils.isAllBlank(charSequenceArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (-3948L);
      longArray0[1] = (-3948L);
      longArray0[2] = 17L;
      longArray0[3] = 1243L;
      longArray0[4] = 17L;
      longArray0[5] = 63L;
      StringUtils.replaceOnceIgnoreCase("\n", "\n", "\n");
      int[] intArray0 = new int[5];
      intArray0[0] = 25;
      intArray0[1] = 637;
      intArray0[2] = (-362377401);
      intArray0[3] = 5;
      intArray0[4] = 2;
      StringUtils.join(intArray0, 'v', 637, (-362377401));
      String string1 = StringUtils.defaultIfEmpty("Strings must not be null", "Strings must not be null");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (-3948L);
      longArray0[1] = 1541L;
      longArray0[2] = 1L;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashSet<String> hashSet0 = new HashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) hashSet0, locale_FilteringMode0);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      String string1 = StringUtils.join((Iterable<?>) priorityQueue0, 'f');
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsWhitespace("\n");
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", charSequenceArray0[0]);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-96);
      StringUtils.join(byteArray0, '5', (int) (byte)66, (int) (byte) (-96));
      int int1 = StringUtils.lastIndexOf(charSequenceArray0[0], (CharSequence) "");
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      StringUtils.right(":{x d~e=", (-1404));
      StringUtils.stripStart(":{x d~e=", "");
      char[] charArray0 = new char[0];
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      String string0 = StringUtils.substringAfter(";2c#t2I5[[iL0J", "CM");
      String string1 = StringUtils.capitalize("");
      assertTrue(string1.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance(";2c#t2I5[[iL0J", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      String string0 = StringUtils.removeStart("]^g`?OZ|<hS78", "]^g`?OZ|<hS78");
      String string1 = StringUtils.rightPad("]^g`?OZ|<hS78", 2797, '^');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      StringUtils.substringAfterLast("pqZP-nS\"B`FVoad]v", 50);
      StringUtils.getDigits(" W2ViiA");
      StringUtils.trim("");
      StringUtils.wrapIfMissing("H:Wb_hfN^Zfu<q0]a", "SsB;ISQh[-jq[VP*");
      StringUtils.stripAccents("-7nz");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Ujq`/:yhY%ZBW";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "2";
      charSequenceArray0[3] = (CharSequence) "SsB;ISQh[-jq[VP*H:Wb_hfN^Zfu<q0]aSsB;ISQh[-jq[VP*";
      StringUtils.containsWhitespace("SsB;ISQh[-jq[VP*H:Wb_hfN^Zfu<q0]aSsB;ISQh[-jq[VP*");
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      StringUtils.wrapIfMissing("2", "");
      StringUtils.removeEndIgnoreCase("h annot be negative", "Tqdx)");
      StringUtils.chop(":.j'IAWc`3[T`6`?");
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "2", (CharSequence) "-7nz", 160);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("@oXvl<g+");
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "@oXvl<g+", (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "s37T5zG:y\"Z/dRij4.[", (-1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "org.apache.commons.lang3.CharUtils");
      assertEquals(0.0, double0, 0.01);
      
      String string0 = StringUtils.overlay("org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils", 1108, 5512);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.CharUtilsorg.apache.commons.lang3.CharUtils", string0);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-44);
      String string0 = StringUtils.join(byteArray0, '-', (int) (byte)17, (-1620));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[3] = (-1118);
      intArray0[4] = 78;
      StringUtils.repeat("", 0);
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      String string0 = StringUtils.repeat(',', 1);
      assertEquals(",", string0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) ",");
      assertFalse(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[9];
      String string1 = StringUtils.right("", (-1118));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" vs ", "2                                                                                                                                                                ");
      assertEquals(3, stringArray0.length);
      
      StringUtils.join(objectArray0, 'k', 2626, (-2195));
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) ",", (CharSequence) "", 1289);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.reverseDelimited(" vs ", ',');
      assertNotNull(string2);
      assertEquals(" vs ", string2);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-589));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.length("");
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      String string0 = StringUtils.right("", 30);
      assertNotNull(string0);
      assertEquals("", string0);
      
      StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      int int0 = StringUtils.compareIgnoreCase("org.apache.commons.lang3.ObjectUtils", "");
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      String string0 = StringUtils.strip("");
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      treeSet0.clear();
      String string0 = StringUtils.join((Iterable<?>) treeSet0, '1');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      boolean boolean1 = StringUtils.containsWhitespace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.getDigits("', has a length less than 2");
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("@oXvl<g+");
      StringUtils.stripAll((String[]) null, "s37T5zG:y\"Z/dRij4.[");
      String[] stringArray0 = StringUtils.stripAll((String[]) null, (String) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "@oXvl<g+", (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "s37T5zG:y\"Z/dRij4.[", (-1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      String string0 = StringUtils.right("", 0);
      assertEquals("", string0);
      
      StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.removeStart("=gvoQ^n-k0*[+f", "");
      assertEquals("=gvoQ^n-k0*[+f", string1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashSet<String> hashSet0 = new HashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) hashSet0, locale_FilteringMode0);
      StringUtils.join((Iterable<?>) list0, '|');
      StringUtils.containsWhitespace("");
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "=gvoQ^n-k0*[+f");
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte) (-53);
      byteArray0[8] = (byte)66;
      String string2 = StringUtils.join(byteArray0, '|', 0, (int) (byte) (-96));
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      String string0 = "=-";
      StringUtils.substring("=-", 1782);
      int int0 = 1813;
      String string1 = StringUtils.leftPad("=-", 1813, '.');
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.noneOf(class0);
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      StringUtils.join(iterator0, '.');
      StringUtils.substringAfterLast("", "");
      String string2 = "ig{:_Y}RwmP%9?uP";
      StringUtils.replaceOnceIgnoreCase("=-", "ig{:_Y}RwmP%9?uP", string1);
      try { 
        StringUtils.getBytes("=-", "ig{:_Y}RwmP%9?uP");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("q<wn!3B");
      assertEquals("q<wn!3B", string0);
      
      String string1 = StringUtils.replace("org.apache.commons.lang3.StringUtils", "Arguments cannot both be null", "...");
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("Threshold must not be negative");
      int int0 = StringUtils.compare("QNZN*t+", (String) null, false);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("Threshold must not be negative", (String) null);
      assertEquals(5, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumeric("QNZN*t+");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "QNZN*t+";
      boolean boolean1 = StringUtils.startsWithAny("Threshold must not be negative", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.rightPad("Threshold must not be negative", (-1), '$');
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      String string0 = StringUtils.CR;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\r";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string1);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("\r", string2);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "\r");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 108;
      intArray0[1] = 0;
      intArray0[2] = (-1324);
      intArray0[3] = (-1118);
      intArray0[4] = 64;
      intArray0[5] = (-2212);
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = (-1324);
      intArray1[2] = (int) 'b';
      intArray1[3] = Integer.MIN_VALUE;
      intArray1[4] = 0;
      intArray1[5] = (-806);
      intArray1[6] = 3054;
      String string0 = StringUtils.join(intArray1, 'F', 3995, 5);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("", "");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      StringUtils.firstNonEmpty((CharSequence[]) null);
      boolean boolean1 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.iterator();
      String string0 = StringUtils.join(iterator0, '7');
      assertNotNull(string0);
      
      StringUtils.length("");
      String string1 = StringUtils.wrap("", '7');
      assertEquals("", string1);
      
      StringUtils.substringBefore("", 0);
      String string2 = StringUtils.unwrap("_Fxh `ug", '7');
      assertEquals("_Fxh `ug", string2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, '7');
      assertNotNull(string4);
      assertEquals("77777", string4);
      
      String string5 = StringUtils.swapCase("BpZLIb-s&uLQ6zz");
      assertEquals("bPzliB-S&Ulq6ZZ", string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "bPzliB-S&Ulq6ZZ", (CharSequence) "BpZLIb-s&uLQ6zz", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("q<wn!3B");
      assertEquals("q<wn!3B", string0);
      
      StringUtils.lastIndexOf((CharSequence) "q<wn!3B", (-2297));
      char[] charArray0 = new char[3];
      charArray0[0] = 'H';
      charArray0[1] = '-';
      charArray0[2] = 'v';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "q<wn!3B", charArray0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfterLast("q<wn!3B", 0);
      String string2 = StringUtils.abbreviate("", 76);
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1812.977651236);
      String string0 = StringUtils.remove("object", '^');
      assertEquals("object", string0);
      
      StringUtils.stripAccents("                                                                                                                                                                2");
      String string1 = StringUtils.replaceOnceIgnoreCase("[7 P/", "object", "J-@@>41J<I(fyuuG!");
      assertEquals("[7 P/", string1);
      
      StringUtils.removePattern("95max2es\"~Fee\"", "The Array must not be null");
      Locale locale0 = Locale.CHINA;
      Locale locale1 = Locale.ITALIAN;
      locale1.getDisplayScript(locale0);
      String string2 = StringUtils.lowerCase("J-@@>41J<I(fyuuG!", locale1);
      assertEquals("j-@@>41j<i(fyuug!", string2);
      
      String string3 = StringUtils.stripEnd("                                                                                                                                                                2", "95max2es\"~Fee\"");
      assertEquals("                                                                                                                                                                ", string3);
      
      String string4 = StringUtils.replace("                                                                                                                                                                2", (String) null, "Invalid locale format: ", (-1456));
      assertEquals("                                                                                                                                                                2", string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "[7 P/", (CharSequence) "95max2es\"~Fee\"");
      assertEquals(14, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("                                                                                                                                                                2", "j-@@>41j<i(fyuug!");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("@oXvl<g+");
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.substringsBetween("@oXvl<g+", "@oXvl<g+", "");
      assertNull(stringArray1);
      
      String string0 = StringUtils.prependIfMissingIgnoreCase("@oXvl<g+", "@oXvl<g+", stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals("@oXvl<g+", string0);
      
      String string1 = StringUtils.wrapIfMissing("@oXvl<g+", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      String string0 = StringUtils.repeat("<9", 1633);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(string0, "<9");
      String string1 = StringUtils.repeat('q', 97);
      assertEquals("qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", string1);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", (CharSequence) string0);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq");
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[2] = (-589);
      String string0 = StringUtils.stripStart("+rQ8Z", "+rQ8Z");
      assertEquals("", string0);
      
      String string1 = StringUtils.removePattern("M> Ye{t)", "Index: ");
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("+rQ8Z", "", 0);
      String string2 = StringUtils.wrapIfMissing("S+m`jMI:r", "+rQ8Z");
      assertEquals("+rQ8ZS+m`jMI:r+rQ8Z", string2);
      
      String string3 = StringUtils.stripAccents("M> Ye{t)");
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.startsWithAny("M> Ye{t)", stringArray0);
      assertFalse(boolean0);
      
      String string4 = StringUtils.remove("maxWith annot be negativeM$x7_ ao*T&5nR,!C ", "/t6?E/");
      assertEquals("maxWith annot be negativeM$x7_ ao*T&5nR,!C ", string4);
      
      String string5 = StringUtils.capitalize("1-<znAQ(vF=G.&}Qnx$");
      assertEquals("1-<znAQ(vF=G.&}Qnx$", string5);
      
      StringUtils.replaceEach("@ZX_EU]30W*wKU", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      String string0 = StringUtils.swapCase("2");
      assertEquals("2", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "2", (CharSequence) "2");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "2";
      String string1 = StringUtils.prependIfMissingIgnoreCase("097pq>&m;/#npK", "2", charSequenceArray0);
      assertEquals("2097pq>&m;/#npK", string1);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.LF;
      charSequenceArray0[0] = (CharSequence) "\n";
      StringUtils.isAllBlank(charSequenceArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (-3948L);
      longArray0[1] = 1541L;
      longArray0[2] = 1L;
      longArray0[3] = 1243L;
      longArray0[4] = 1L;
      longArray0[5] = 81L;
      longArray0[6] = 1L;
      String string1 = StringUtils.join(longArray0, '^', (-2115), (-2115));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1812.977651236);
      String string0 = StringUtils.wrapIfMissing("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      String string1 = StringUtils.defaultString("Minimum abbreviation width with offset is %d");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      String string0 = StringUtils.replace("'$", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      int int0 = StringUtils.indexOfAny((CharSequence) "'$", "'$");
      assertEquals(0, int0);
      
      StringUtils.repeat('O', 0);
      String string1 = StringUtils.unwrap("'$", "");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.left("m+~HFP[wd\u0005Ktws", 1);
      assertEquals("m", string2);
      
      StringUtils.toRootUpperCase("");
      StringUtils.remove("'$", "");
      String string3 = StringUtils.removeFirst("2", "-8");
      assertEquals("2", string3);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "m+~HFP[wd\u0005Ktws", (CharSequence) "2", 0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("@");
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "@", (CharSequence) "@");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNotBlank("@");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      StringUtils.substringAfterLast((String) null, 26);
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.removeStart("=gvoQ^n-k0*[+f", "");
      assertEquals("=gvoQ^n-k0*[+f", string1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.add("=gvoQ^n-k0*[+f");
      hashSet0.add("");
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "=gvoQ^n-k0*[+f";
      charSequenceArray0[1] = (CharSequence) "=gvoQ^n-k0*[+f";
      charSequenceArray0[2] = (CharSequence) "G+Qs";
      String string2 = StringUtils.difference("", "\n");
      assertEquals("\n", string2);
      
      String string3 = StringUtils.remove("", 'h');
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      String string0 = StringUtils.wrapIfMissing("Minimum abb*eviation width with offset is %d", "Minimum abb*eviation width with offset is %d");
      String string1 = StringUtils.defaultString("Minimum abb*eviation width with offset is %d");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, (-1779));
      assertNull(string0);
      
      StringUtils.rightPad((String) null, (-1779), '\\');
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      StringUtils.repeat('\\', (-7738));
      String[] stringArray0 = StringUtils.split(">`XHIL^{*dCWs", "h[2}SAl*9*e]3{K>9,");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      int[] intArray0 = new int[6];
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      StringUtils.firstNonEmpty((CharSequence[]) null);
      boolean boolean1 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" yu3k0bH:Wb_hfN^Zfu<q0]a", " yu3k0bH:Wb_hfN^Zfu<q0]a", 5);
      StringUtils.isEmpty(" yu3k0bH:Wb_hfN^Zfu<q0]a");
      String string0 = StringUtils.normalizeSpace("cy>0X4^");
      assertEquals("cy>0X4^", string0);
      
      String string1 = StringUtils.stripAccents("`$Q6b\"eY=J");
      assertEquals("`$Q6b\"eY=J", string1);
      assertNotNull(string1);
      
      StringUtils.startsWithAny("org.apache.commons.lang3.Charsets", stringArray0);
      assertEquals(2, stringArray0.length);
      
      double double0 = StringUtils.getJaroWinklerDistance("cy>0X4^", " yu3k0bH:Wb_hfN^Zfu<q0]a");
      assertEquals(0.52, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      StringUtils.remove("q@{=V,,}f>{^5x%", "q@{=V,,}f>{^5x%");
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Array and element cannot both be null");
      assertEquals("array and element cannot both be null", string0);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringUtils.stripStart("Z", "r+)HMdAw0{");
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      StringUtils.normalizeSpace("r+)HMdAw0{");
      StringUtils.stripAccents((String) null);
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      String string0 = StringUtils.replaceAll((String) null, (String) null, (String) null);
      assertNull(string0);
      
      StringUtils.trimToNull((String) null);
      String string1 = StringUtils.substringAfterLast((String) null, 197);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("'$");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("IkEH:Wb_hfN^KZfu<q0j;", "IkEH:Wb_hfN^KZfu<q0j;", "IkEH:Wb_hfN^KZfu<q0j;");
      assertEquals("IkEH:Wb_hfN^KZfu<q0j;", string0);
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.normalizeSpace("`$Q6b\"eY=J");
      assertEquals("`$Q6b\"eY=J", string1);
      
      String string2 = StringUtils.stripAccents("");
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.stripAccents("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, "+RC18dO/Qx,Minimum abbreviation width is %d");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      char[] charArray0 = new char[19];
      charArray0[0] = 'd';
      String string0 = "{b>;w&ymP^T#/G|(~]R";
      StringUtils.splitByWholeSeparatorPreserveAllTokens("{b>;w&ymP^T#/G|(~]R", "{b>;w&ymP^T#/G|(~]R");
      StringUtils.removeStart("{b>;w&ymP^T#/G|(~]R", "...");
      StringUtils.join(charArray0, 'd', 1681, 25);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)94;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "D&JQeTGnp,jy?2;JPI");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // D&JQeTGnp,jy?2;JPI
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      StringUtils.toRootLowerCase((String) null);
      String string0 = StringUtils.wrap((String) null, "H:Wb_hfN^Zfu<q0]a");
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 31, 31);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.lowerCase("H:Wb_hfN^Zfu<q0]a");
      assertEquals("h:wb_hfn^zfu<q0]a", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.countMatches((CharSequence) "h:wb_hfn^zfu<q0]a", 'L');
      assertEquals(0, int1);
      
      String string2 = StringUtils.leftPad("5=-.", 0, 'L');
      assertNotNull(string2);
      assertEquals("5=-.", string2);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      String string0 = StringUtils.replace(", Length: 0", (String) null, "");
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap(", Length: 0", "");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.appendIfMissing("/+[jChN", "/+[jChN", (CharSequence[]) null);
      assertEquals("/+[jChN", string2);
      
      String string3 = StringUtils.reverse("Array element ");
      assertEquals(" tnemele yarrA", string3);
      
      StringUtils.join((Object[]) null, "");
      boolean boolean0 = StringUtils.equalsAny("Array element ", (CharSequence[]) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'O';
      charArray0[1] = '0';
      charArray0[2] = 'H';
      charArray0[3] = '\'';
      charArray0[4] = '~';
      charArray0[5] = 'f';
      charArray0[6] = '<';
      charArray0[7] = '9';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      String string0 = StringUtils.wrap("Array and element cannot both be null", "Array and element cannot both be null");
      assertEquals("Array and element cannot both be nullArray and element cannot both be nullArray and element cannot both be null", string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("Array and element cannot both be null", "", "[S");
      assertEquals("Array and element cannot both be null", string1);
      
      boolean boolean0 = StringUtils.endsWith("Array and element cannot both be null", "[S");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      String string0 = StringUtils.swapCase("org.apache.commons.lang3.StringUtils");
      assertEquals("ORG.APACHE.COMMONS.LANG3.sTRINGuTILS", string0);
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      StringUtils.toString(byteArray0, (String) null);
      int int0 = StringUtils.indexOfAny((CharSequence) "\r\u0000\u0000\u0000", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      String string0 = "c,o|w";
      StringUtils.wrap("c,o|w", "c,o|w");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)5;
      byteArray0[1] = (byte)5;
      byte byte1 = (byte)76;
      byteArray0[2] = (byte)76;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "c,o|w");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // c,o|w
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
