/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:21:50 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.FloatBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = StringUtils.leftPad("L", 32, "Threshold must not be negative");
      assertEquals("Threshold must not be negativeTL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("Threshold must not be negative", 32, (-239));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = StringUtils.getBytes("Array element ", (Charset) null);
      assertNotNull(byteArray0);
      assertEquals(14, byteArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "Threshold must not be negativeTL", 32);
      assertEquals(9, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "Array element ");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string2 = StringUtils.removeEnd("\n", "L");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.split("v(.twpB#Lc!$`W", "L", 32);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("0RL y+Tp", "\r", (-239));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      String string3 = StringUtils.unwrap("Locale must not be nullJD", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Locale must not be nullJD", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast("QePC{@Bk8_ /xH", 0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Locale must not be nullJD");
      assertTrue(boolean0);
      
      String string5 = StringUtils.substringBetween("1WkC-?1", "1WkC-?1");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = StringUtils.abbreviate("'2Zq=}`{", "CF=A{ FJ>a2H$Sc", (-2025), 160);
      assertEquals("'2Zq=}`{", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("'2Zq=}`{");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2025);
      doubleArray0[1] = (double) (-2025);
      doubleArray0[2] = (double) (-2025);
      doubleArray0[3] = (double) 160;
      doubleArray0[4] = (double) 160;
      String string1 = StringUtils.removeIgnoreCase("pcoZP@1,vZ`", "'2Zq=}`{");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.ObjectUtils$Null", "pcoZP@1,vZ`", (-514));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.chop("org.apache.commons.lang3.ObjectUtils$Null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.ObjectUtils$Nul", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase((String) null, "'2Zq=}`{", stringArray0);
      assertNull(string3);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.repeat('K', 52);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string0 = StringUtils.strip("J");
      assertEquals("J", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWith("J", "J");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceChars("J", "J", "J");
      assertTrue(string1.equals((Object)string0));
      assertEquals("J", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = 'x';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "J", charArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'v', 'v', 'x'}, charArray0);
      
      String string2 = StringUtils.replaceAll("2s^V{0!RBbhD5", "J", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("2s^V{0!RBbhD5", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("Array element ");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string3 = StringUtils.deleteWhitespace("]i7t(3-{%Ho");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("]i7t(3-{%Ho", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeEnd("Search and Replace array lengths don't match: ", "");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Search and Replace array lengths don't match: ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripEnd("", "Array element ");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.capitalize("2s^V{0!RBbhD5");
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("2s^V{0!RBbhD5", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.chomp("");
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.overlay("G9ULK-fZyNJZnG9ULK-fZyNJZn", "", (-4479), 0);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertEquals("G9ULK-fZyNJZnG9ULK-fZyNJZn", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[1] = 'f';
      charArray0[2] = '-';
      charArray0[3] = '5';
      charArray0[4] = 'K';
      charArray0[5] = '7';
      charArray0[6] = '/';
      charArray0[7] = 'N';
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("xf-5K7/N", string1);
      assertNotNull(string1);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'x', 'f', '-', '5', 'K', '7', '/', 'N'}, charArray0);
      
      String string2 = StringUtils.rightPad("xf-5K7/N", 33, '-');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("xf-5K7/N-------------------------", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "z*Ovtb8CpL-zI+vL@V", (CharSequence) "xf-5K7/N-------------------------", 662);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replaceEachRepeatedly("_7#xz$;YO", (String[]) null, (String[]) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("_7#xz$;YO", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "xf-5K7/N-------------------------", charArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'x', 'f', '-', '5', 'K', '7', '/', 'N'}, charArray0);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "xf-5K7/N-------------------------", (CharSequence) "_7#xz$;YO", 90);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(32, int3);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "clone";
      charSequenceArray0[2] = (CharSequence) "clone";
      charSequenceArray0[3] = (CharSequence) "\n";
      String string1 = StringUtils.prependIfMissing("clone", "\n", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("clone", string1);
      assertNotNull(string1);
      assertEquals(4, charSequenceArray0.length);
      
      String string2 = StringUtils.lowerCase("org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.stringutils", string2);
      assertNotNull(string2);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.JAPANESE;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getCountry());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      
      String string3 = locale0.getDisplayVariant(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      
      Locale locale2 = locale0.stripExtensions();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("JP", locale2.getCountry());
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("ja_JP", locale2.toString());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string4 = StringUtils.chomp("\n");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.stringutils", (CharSequence) "@+}g;1<Gq+m~$Cd#", (-2013265917));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "G9ULK-fZyNJZn";
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      Locale locale0 = Locale.forLanguageTag("G9ULK-fZyNJZn");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      String string1 = StringUtils.SPACE;
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWithAny(" ", stringArray0);
      assertFalse(boolean0);
      assertEquals(250, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(250, stringArray0.length);
      
      boolean boolean2 = StringUtils.containsAnyIgnoreCase("G9ULK-fZyNJZn", (CharSequence[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) " ", (String) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string2 = "m|xS]]T}.=w uI($S";
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("G9ULK-fZyNJZn", "m|xS]]T}.=w uI($S", (-176));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("G9ULK-fZyNJZn", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, int0);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Array Aelement ", stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 250
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Arguments cannot both be null", (String) null);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = null;
      stringArray1[2] = "Arguments cannot both be null";
      String string0 = StringUtils.removeAll("Aborting to protect against StackOverflowError - output of one loop is the input of another", "wCg20p?0:e'qB+T3");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWith(stringArray1[1], "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean0);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean1 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      String[] stringArray2 = StringUtils.split((String) null, stringArray1[1]);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNull(stringArray2);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean2 = StringUtils.isAllUpperCase(stringArray1[0]);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.removeStartIgnoreCase("N)}k8Oz\")c7qa=n'UCJt<:^uc8ZNfQ", "bEkq");
      assertFalse(string1.equals((Object)string0));
      assertEquals("N)}k8Oz\")c7qa=n'UCJt<:^uc8ZNfQ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull((String) null);
      assertNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) "Arguments cannot both be null");
      assertEquals(0, int0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string3 = locale0.toLanguageTag();
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("zh-CN", string3);
      assertNotNull(string3);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string4 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string4);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("G9ULK-fZyNJZn", "G9ULK-fZyNJZn");
      assertEquals("G9ULK-fZyNJZn", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.SPACE;
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("m@k$$hC\"jBv", "~@_)!?6");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.abbreviateMiddle("$r)7!7Aet>U2|", "org.apache.commons.lang3.CharSequenceUtils", (-1697));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("$r)7!7Aet>U2|", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "$r)7!7Aet>U2|", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string3 = StringUtils.center("G9ULK-fZyNJZn", (-1697), '=');
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("G9ULK-fZyNJZn", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.capitalize("gcWimH'lE)anKC5#o");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("GcWimH'lE)anKC5#o", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.upperCase("G9ULK-fZyNJZn");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("G9ULK-FZYNJZN", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.join((Object[]) stringArray0, "bBa@1~");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("m@k$$hC\"jBv", string6);
      assertNotNull(string6);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("G9ULK-fZyNJZn"));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("bBa@1~", '-');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("GcWimH'lE)anKC5#o");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.removeEnd("GcWimH'lE)anKC5#o", "G9ULK-fZyNJZn");
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertEquals("GcWimH'lE)anKC5#o", string7);
      assertNotNull(string7);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("G9ULK-FZYNJZN", "G9ULK-fZyNJZn");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean3);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      int int1 = StringUtils.lastOrdinalIndexOf("m@k$$hC\"jBv", "gcWimH'lE)anKC5#o", 11);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "D;40(9";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "D;40(9");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "D;40(9", (CharSequence) "D;40(9");
      assertEquals(0, int0);
      
      String string0 = StringUtils.getDigits("B99?1I<");
      assertEquals("991", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.countMatches((CharSequence) "991", (CharSequence) "D;40(9");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[1] = '2';
      charArray0[2] = '4';
      charArray0[3] = '[';
      int int2 = StringUtils.indexOfAny((CharSequence) "B99?1I<", charArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'l', '2', '4', '['}, charArray0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string1 = StringUtils.strip("Hb\"3Rx`g>rjH+=pb", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Hb\"3Rx`g>rjH+=pb", string1);
      assertNotNull(string1);
      
      int int3 = StringUtils.indexOfDifference((CharSequence) "B99?1I<", (CharSequence) null);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = StringUtils.wrap("J4t[yR", '.');
      assertEquals(".J4t[yR.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("J4t[yR", ".J4t[yR.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int[] intArray0 = new int[0];
      String string2 = StringUtils.join(intArray0, '.', 463, 463);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ".J4t[yR.", (CharSequence) "");
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      String string3 = StringUtils.join(byteArray0, 'K');
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string4 = StringUtils.replaceOnce("2Dx:*B3^38?s)j#kpX", "", "");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("2Dx:*B3^38?s)j#kpX", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.getDigits("U");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int[] intArray1 = StringUtils.toCodePoints(".J4t[yR.");
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {46, 74, 52, 116, 91, 121, 82, 46}, intArray1);
      
      boolean boolean0 = StringUtils.isNumeric(".J4t[yR.");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("2Dx:*B3^38?s)j#kpX");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string6 = StringUtils.join(byteArray0, 'M', Integer.MAX_VALUE, 17);
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string7 = StringUtils.defaultString("Mt");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertEquals("Mt", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = StringUtils.substring("maxWith cannot be negative", (-1848), (-239));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-239));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "maxWith cannot be negative", (CharSequence) "#YymMv|x0J7Q+&t");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string1 = StringUtils.removeEnd("\n", "F-TZm<Fc");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate("Array element ", (-4533));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("nt Array eleme", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replace((String) null, "#YymMv|x0J7Q+&t", "%MXi8O&P");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.forLanguageTag("");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      
      String string0 = locale1.getDisplayLanguage(locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      
      String string1 = locale0.getDisplayVariant(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(locale1));
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayDeque0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(arrayDeque0.contains(locale1));
      assertFalse(list0.contains(locale1));
      
      Locale locale2 = locale1.stripExtensions();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertNotSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertNotSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Language());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string2 = locale0.getDisplayLanguage();
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Japanese", string2);
      assertNotNull(string2);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string3 = StringUtils.trim("z3(1qx_");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("z3(1qx_", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("@+}g;1<Gq+m~$Cd#");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("@+}g;1<Gq+m~$Cd#", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "N)}k8Oz\")c7", (CharSequence) "", 6);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.substringBetween("ev&~n1#(`SI7@F", "k#bT@", "k#bT@");
      assertNull(string5);
      
      String string6 = StringUtils.capitalize("");
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("N", '`');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.remove("wVE`%[[{b,'l", '`');
      assertEquals("wVE%[[{b,'l", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeAll("N", "ll1Bax}_&'d/j");
      assertFalse(string1.equals((Object)string0));
      assertEquals("N", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "wVE`%[[{b,'l", "`BJZh+adW_S!J,`z");
      assertEquals(3, int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Threshold must not be negative");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split(" `YA/bw=TUAp", "N", 3);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.abbreviateMiddle("", "Strings must not be null", 3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.startsWithAny("wVE%[[{b,'l", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, charSequenceArray0.length);
      
      String string3 = StringUtils.rightPad("wVE%[[{b,'l", 3342, "ltya+5Ca!#9/IC");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray1 = new CharSequence[1];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "Threshold must not be negative";
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(1, charSequenceArray1.length);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      
      boolean boolean3 = StringUtils.isNumericSpace("ll1Bax}_&'d/j");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      int int1 = StringUtils.indexOf((CharSequence) "wVE%[[{b,'l", (CharSequence) "wVE%[[{b,'l", 17);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = '{';
      charArray0[2] = '`';
      charArray0[3] = '`';
      charArray0[4] = '`';
      charArray0[5] = '`';
      charArray0[6] = '`';
      charArray0[7] = '`';
      boolean boolean4 = StringUtils.containsNone((CharSequence) "Strings must not be null", charArray0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'`', '{', '`', '`', '`', '`', '`', '`'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = StringUtils.rightPad("T18Re$e\"U@7", 66, "T18Re$e\"U@7");
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "T18Re$e\"U@7";
      charSequenceArray0[1] = (CharSequence) "T18Re$e\"U@7T18Re$e\"U@7T18Re$e\"U@7T18Re$e\"U@7T18Re$e\"U@7T18Re";
      charSequenceArray0[2] = (CharSequence) "T18Re$e\"U@7";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(11, int0);
      assertEquals(3, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("T18Re$e\"U@7", "T18Re$e\"U@7");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.join((Iterable<?>) null, "vys>cfV%TGMrI3Yrx");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = StringUtils.rightPad("T18Re$e\"U@7", 66, "T18Re$e\"U@7");
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "T18Re$e\"U@7T18Re$e\"U@7T18Re$e\"U@7T18Re$e\"U@7T18Re$e\"U@7T18Re", (CharSequence) "T18Re$e\"U@7");
      assertEquals(49, int0);
      
      String string1 = StringUtils.stripStart("T18Re$e\"U@7T18Re$e\"U@7T18Re$e\"U@7T18Re$e\"U@7T18Re$e\"U@7T18Re", "cQW(J6\"}#).T");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "tZwoE:/\"ixNq !`nT";
      charSequenceArray0[1] = (CharSequence) "M1/E;ksoNQM";
      charSequenceArray0[2] = (CharSequence) "T18Re$e\"U@7";
      charSequenceArray0[3] = (CharSequence) "T18Re$e\"U@7T18Re$e\"U@7T18Re$e\"U@7T18Re$e\"U@7T18Re$e\"U@7T18Re";
      charSequenceArray0[4] = (CharSequence) "T18Re$e\"U@7T18Re$e\"U@7T18Re$e\"U@7T18Re$e\"U@7T18Re$e\"U@7T18Re";
      boolean boolean0 = StringUtils.equalsAny("cQW(J6\"}#).T", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = StringUtils.defaultString("ey+6w", "ey+6w");
      assertEquals("ey+6w", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 631L;
      String string1 = StringUtils.join(longArray0, '~');
      assertFalse(string1.equals((Object)string0));
      assertEquals("631", string1);
      assertNotNull(string1);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {631L}, longArray0);
      
      String string2 = StringUtils.substringBefore("ey+6w", "_");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("ey+6w", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumeric("631");
      assertTrue(boolean0);
      
      String string3 = StringUtils.removePattern("ey+6w", ";#&Oy2a]");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("ey+6w", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("_", "Invalid locale format: ", "h9cp_V17')?,mANr");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("_", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars("ey+6w", "_", "ey+6w");
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertEquals("ey+6w", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "Z~2e]G");
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "G9ULK-fZyNJZn", (CharSequence) "");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAny((CharSequence) "G9ULK-fZyNJZn", charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      
      String string1 = StringUtils.lowerCase("", locale0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "G9ULK-fZyNJZn");
      assertTrue(boolean0);
      
      String string2 = StringUtils.uncapitalize("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int3 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("G9ULK-fZyNJZn");
      assertNotNull(stringArray1);
      assertEquals(8, stringArray1.length);
      
      String string3 = StringUtils.right("", (-64));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate((String) null, "CF=A{ FJ>a2H$Sc", Integer.MIN_VALUE, (-64));
      assertNull(string4);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllEmpty(stringArray1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(8, stringArray1.length);
      
      String string5 = StringUtils.center("=Hc(m", (-1901), 'I');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("=Hc(m", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.normalizeSpace(", Length: ");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals(", Length:", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = StringUtils.getDigits(";}V:r@");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "p{InCombiningDiacriticalMarks}+", "#");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.toRootUpperCase(";}V:r@");
      assertFalse(string1.equals((Object)string0));
      assertEquals(";}V:R@", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("p{InCombiningDiacriticalMarks}+", '.');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(".p{InCombiningDiacriticalMarks}+.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad(";}V:R@", 32, ".p{InCombiningDiacriticalMarks}+.");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(".p{InCombiningDiacriticalM;}V:R@", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad(".p{InCombiningDiacriticalMarks}+.", 76, '<');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(".p{InCombiningDiacriticalMarks}+.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ".p{InCombiningDiacritical;}V:R@", ".p{InCombiningDiacritical;}V:R@");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) ".p{InCombiningDiacriticalMarks}+.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) ";}V:R@", (CharSequence) ";}V:r@");
      assertFalse(int1 == int0);
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = StringUtils.removeAll("Threshold must not be negative", "Threshold must not be negative");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("org.apache.commons.lang3.RegExUtils", 1973, "g(.D}E_6yNLEnY26'rF'.");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat('\'', 1000);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEqualsstring2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) string2, 1000, 1973);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.rightPad("', has a length less than 2", 1000);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("', has a length less thanstring3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverseDelimited("org.apache.commons.lang3.StringUtils", 'V');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) string3, (CharSequence) string1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 1482, ';');
      assertNull(string0);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.upperCase("W!");
      assertEquals("W!", string2);
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "W!";
      objectArray0[1] = (Object) "D|28u\"";
      objectArray0[2] = (Object) "D|28u\"";
      String string3 = StringUtils.join(objectArray0, "W!");
      assertFalse(string3.equals((Object)string2));
      assertEquals("W!W!D|28u\"W!D|28u\"", string3);
      assertNotNull(string3);
      assertEquals(3, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "D|28u\"";
      charSequenceArray0[1] = (CharSequence) "W!W!D|28u\"W!D|28u\"";
      charSequenceArray0[2] = (CharSequence) "W!";
      charSequenceArray0[3] = (CharSequence) "D|28u\"";
      charSequenceArray0[4] = (CharSequence) "\r";
      charSequenceArray0[5] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("D|28u\""));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("z)vjqD2zE8}>/ssaT5", 'N');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAllUpperCase(charSequenceArray0[4]);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, charSequenceArray0.length);
      
      String string4 = StringUtils.removeEnd("D|28u\"", "W!W!D|28u\"W!D|28u\"");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("D|28u\"", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase(charSequenceArray0[3], charSequenceArray0[0]);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean3 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(6, charSequenceArray0.length);
      
      String string5 = StringUtils.toRootUpperCase("xY+YE(LO");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("XY+YE(LO", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "XY+YE(LO", (byte)0);
      assertEquals((-1), int0);
      
      boolean boolean4 = StringUtils.contains((CharSequence) "\r", (CharSequence) "\r");
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      
      boolean boolean5 = StringUtils.isAlpha(charSequenceArray0[0]);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "Array element ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'C', '\u0000'}, charArray0);
      
      String string1 = StringUtils.appendIfMissing((String) null, "org.apache.commons.lang3.StringUtils", stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.capitalize((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.upperCase("D|28u\"");
      assertFalse(string3.equals((Object)string0));
      assertEquals("D|28U\"", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("D|28U\"", "~IJ1'+p~Zt^U@H*Z");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.removeEnd("+2>", "org.apache.commons.lang3.StringUtils");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("+2>", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.center("{ 0gY>h?5`z'{YF", 0, "");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("{ 0gY>h?5`z'{YF", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.abbreviate("+*j<", "", 2617, 99);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("+*j<", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = StringUtils.removeAll("Qe8b6zcN<X<jpxOg<{", "...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("...");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("...", "[h]sVUR9HT[g5 /\"/}", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.substringBetween("[h]sVUR9HT[g5 /\"/}", "Qe8b6zcN<X<jpxOg<{");
      assertNull(string1);
      
      boolean boolean1 = StringUtils.startsWith("...", (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.lastIndexOfAny("", stringArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.replaceEachRepeatedly("Qe8b6zcN<X<jpxOg<{", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertEquals("Qe8b6zcN<X<jpxOg<{", string2);
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(1, stringArray0.length);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1);
      assertNotNull(enumSet0);
      assertSame(locale_FilteringMode0, locale_FilteringMode1);
      assertSame(locale_FilteringMode1, locale_FilteringMode0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_FilteringMode1));
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertSame(locale_FilteringMode0, locale_FilteringMode1);
      assertSame(locale_FilteringMode1, locale_FilteringMode0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_FilteringMode1));
      
      String string3 = StringUtils.join(iterator0, '}');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("IGNORE_EXTENDED_RANGES", string3);
      assertNotNull(string3);
      assertSame(locale_FilteringMode0, locale_FilteringMode1);
      assertSame(locale_FilteringMode1, locale_FilteringMode0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_FilteringMode1));
      
      boolean boolean2 = StringUtils.equals((CharSequence) "[h]sVUR9HT[g5 /\"/}", (CharSequence) "...");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      charArray0[3] = 'a';
      String string0 = StringUtils.strip("9re");
      assertEquals("9re", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("9re");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("9re");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.wrapIfMissing(";X!*!4[15\"tNPni33e2", '\u0000');
      assertFalse(string1.equals((Object)string0));
      assertEquals(";X!*!4[15\"tNPni33e2", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isNumeric(";X!*!4[15\"tNPni33e2");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("9re");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.toRootLowerCase((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.truncate(" (EW<kfzpLb<", 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate(" (EW<kfzpLb<", 0, 0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean4 = StringUtils.isNumericSpace("1 r*ATn9,Xie");
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String string5 = StringUtils.stripToEmpty("1 r*ATn9,Xie");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("1 r*ATn9,Xie", string5);
      assertNotNull(string5);
      
      boolean boolean5 = StringUtils.containsWhitespace("1 r*ATn9,Xie");
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      String string0 = StringUtils.join(longArray0, 'G');
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "0", (CharSequence) "0", 1757);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("0");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isEmpty("\n");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.lowerCase("Oz\")c7");
      assertFalse(string1.equals((Object)string0));
      assertEquals("oz\")c7", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "0";
      stringArray0[1] = "Oz\")c7";
      stringArray0[2] = "`*?}D5";
      stringArray0[3] = "oz\")c7";
      stringArray0[4] = "0";
      stringArray0[5] = "oz\")c7";
      stringArray0[6] = "0";
      stringArray0[7] = "0";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(8, stringArray1.length);
      assertEquals(8, stringArray0.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      
      boolean boolean2 = StringUtils.isNumeric("Oz\")c7");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Oz\")c7");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      String string2 = StringUtils.toRootLowerCase("`*?}D5");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("`*?}d5", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.truncate("0", 1757);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("0", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate("`*?}d5", 54, 54);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.isNumericSpace("1 r*ATn9,Xie");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.join((int[]) null, 'B', 34, 64);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) '\u0000';
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) '\u0000';
      objectArray0[3] = (Object) ")";
      String string1 = StringUtils.join(objectArray0, ")");
      assertEquals("\u0000))\u0000))", string1);
      assertNotNull(string1);
      assertEquals(4, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) ")";
      charSequenceArray0[2] = (CharSequence) ")";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "\u0000))\u0000))";
      charSequenceArray0[5] = (CharSequence) ")";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\u0000))\u0000))", '%');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAllUpperCase(charSequenceArray0[2]);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, charSequenceArray0.length);
      
      String string2 = StringUtils.removeEnd(")", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertEquals(")", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase((CharSequence) null, charSequenceArray0[2]);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean3 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(6, charSequenceArray0.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf(charSequenceArray0[4], ")", 190067906);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (-1726.0);
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 3796.562625277;
      doubleArray0[4] = 2987.1383020271246;
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Integer integer0 = new Integer((-2823));
      assertEquals((-2823), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = vector0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[-2823]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains(integer0));
      
      String string0 = StringUtils.join((List<?>) vector0, "F^S2Z+TzHwc4ro*", (-2823), (-2823));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[-2823]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains((-2823)));
      
      Integer integer1 = new Integer((-583));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-583), (int)integer1);
      assertNotNull(integer1);
      
      boolean boolean1 = vector0.add((Integer) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("[-2823, null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains((-2823)));
      assertFalse(vector0.contains(integer1));
      
      String string1 = StringUtils.join((Iterable<?>) vector0, '\"');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-2823\"", string1);
      assertNotNull(string1);
      assertEquals("[-2823, null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains((-2823)));
      assertFalse(vector0.contains(integer1));
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "-2823\"", (CharSequence) "The type must not be null");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-1000));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-1000));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceChars("offset cannot be negative", "maxWith cannot be negative", "frY))T");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ffsTrTrT)", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ffsTrTrT)";
      stringArray0[1] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.replaceAll("frY))T", stringArray0[2], "");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("frY))T", string2);
      assertNotNull(string2);
      assertEquals(4, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      String string3 = StringUtils.toRootUpperCase("frY))T");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("FRY))T", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "FRY))T", "*;QH");
      assertTrue(boolean0);
      
      String string4 = StringUtils.difference("", "");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.stripToNull("frY))T");
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("frY))T", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.rotate("", 99);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.right("", 0);
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      assertNotNull(string7);
      
      boolean boolean2 = StringUtils.isAlphanumeric("maxWith cannot be negative");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string8 = StringUtils.substringBetween("frY))T", "");
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.repeat('j', 1993);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertNotNull(string9);
      
      boolean boolean3 = StringUtils.isAllLowerCase("");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string10 = StringUtils.substringAfterLast(string9, 1993);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string10.equals((Object)string3));
      assertTrue(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertTrue(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertEquals("", string10);
      assertNotNull(string10);
      
      String string11 = StringUtils.SPACE;
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string8));
      assertEquals(" ", string11);
      assertNotNull(string11);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "FRY))T");
      assertEquals(0.0, double0, 0.01);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      boolean boolean4 = arrayList0.add(locale_FilteringMode0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>(arrayList0);
      assertNotNull(linkedList0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, linkedList0.size());
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      
      String string12 = StringUtils.join((Iterable<?>) linkedList0, "");
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string9));
      assertEquals("REJECT_EXTENDED_RANGES", string12);
      assertNotNull(string12);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, linkedList0.size());
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertTrue(linkedList0.contains(locale_FilteringMode0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string1 = StringUtils.center("org.apache.commons.lang3.StringUtils", (int) '\u0000', '\u0000');
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Org.apache.commons.lang3.StringUtils", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase("D|28u\"");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("D|28U\"", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, "\r");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\r", string4);
      assertNotNull(string4);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean0);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("org.apache.commons.lang3.StringUtils"));
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Org.apache.commons.lang3.StringUtils", 'Y');
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("\r");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      String string5 = StringUtils.removeEnd("z3(1qx_", "org.apache.commons.lang3.StringUtils");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("z3(1qx_", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.stripEnd(" ", (String) null);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int[] intArray0 = StringUtils.toCodePoints(" ");
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {32}, intArray0);
      
      String string7 = StringUtils.stripStart((String) null, "");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", 102);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.overlay("", "_", 102, 102);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("_", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToNull((String) null);
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAllUpperCase("wn)8<6X9d>wf");
      assertFalse(boolean0);
      
      String string5 = StringUtils.replaceChars("", "ZR@", "p{InCombiningDiacriticalMarks}+");
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 102;
      longArray0[1] = (long) 102;
      longArray0[2] = (long) 102;
      longArray0[3] = (long) 102;
      String string6 = StringUtils.join(longArray0, 'V', 102, (-859));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {102L, 102L, 102L, 102L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      
      Locale locale1 = Locale.forLanguageTag("");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      
      Locale locale2 = locale0.stripExtensions();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("JP", locale2.getCountry());
      assertEquals("ja_JP", locale2.toString());
      
      String string0 = locale1.getDisplayLanguage(locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      
      int int0 = StringUtils.compareIgnoreCase("", "", false);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-62);
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      String string1 = StringUtils.toEncodedString(byteArray0, charset0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\uFFFD\uFFFD", string1);
      assertNotNull(string1);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-62)}, byteArray0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty(" ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.lowerCase("eA");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ea", string1);
      assertNotNull(string1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1076);
      intArray0[1] = (-1076);
      intArray0[2] = (-1076);
      intArray0[3] = (-1076);
      String string2 = StringUtils.join(intArray0, 'z', 117, (-1300));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1076), (-1076), (-1076), (-1076)}, intArray0);
      
      String string3 = StringUtils.removeStart("eA", "org.apache.commons.lang3.RegExUtils");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("eA", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chop("eA");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("e", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.chop("B~Z8JL}^&=~eOK`$y5H");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("B~Z8JL}^&=~eOK`$y5", string5);
      assertNotNull(string5);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-1076);
      objectArray0[1] = (Object) "eA";
      objectArray0[2] = (Object) (-1076);
      objectArray0[3] = (Object) "B~Z8JL}^&=~eOK`$y5";
      objectArray0[4] = (Object) "e";
      objectArray0[5] = (Object) "ea";
      objectArray0[6] = (Object) (-1076);
      String string6 = StringUtils.join(objectArray0, 'z', Integer.MAX_VALUE, (-1076));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      assertEquals(7, objectArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "", 'z');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("G9ULK-fZyNJZn");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      String string2 = StringUtils.valueOf(charArray0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(9, stringArray0.length);
      
      String string3 = StringUtils.difference("", "");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast("crNr{/s|}w1j.I", (-1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "D;40(9";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "D;40(9");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "D;40(9", (CharSequence) "D;40(9");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAny((CharSequence) "D;40(9", charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "D;40(9", "D;40(9");
      assertFalse(boolean0);
      
      String string0 = StringUtils.uncapitalize("D;40(9");
      assertEquals("d;40(9", string0);
      assertNotNull(string0);
      
      int int3 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("&2lkf");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertEquals(3, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      String string1 = StringUtils.rightPad("t be negative", 10, "Y(Uc@DYW>-)cPg J");
      assertFalse(string1.equals((Object)string0));
      assertEquals("t be negative", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.removeFirst("t be negative", "9G56EmT #");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("t be negative", string2);
      assertNotNull(string2);
      
      int int4 = StringUtils.getLevenshteinDistance((CharSequence) "D;40(9", (CharSequence) "Y(Uc@DYW>-)cPg J", 10);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.leftPad("L", 32, "Threshold must not be negative");
      assertEquals("Threshold must not be negativeTL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("Threshold must not be negative", 32, (-239));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = StringUtils.getBytes("Array element ", (Charset) null);
      assertNotNull(byteArray0);
      assertEquals(14, byteArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "Threshold must not be negativeTL", 32);
      assertEquals(9, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "Array element ");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.wrap("Threshold must not be negative", '+');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("+Threshold must not be negative+", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "+Threshold must not be negative+";
      charSequenceArray0[1] = (CharSequence) "L";
      charSequenceArray0[2] = (CharSequence) "Array element ";
      charSequenceArray0[3] = (CharSequence) "L";
      charSequenceArray0[4] = (CharSequence) "+Threshold must not be negative+";
      charSequenceArray0[5] = (CharSequence) "Threshold must not be negative";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints(charSequenceArray0[3]);
      assertNotNull(intArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {76}, intArray0);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("', is neither of type Map.Entry nor an Array", "', is neither of type Map.Entry nor an Array", charSequenceArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("', is neither of type Map.Entry nor an Array", string3);
      assertNotNull(string3);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string1 = StringUtils.substringAfterLast(" ", "org.apache.commons.lang3.StringUtils");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase(" ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, "\r");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\r", string4);
      assertNotNull(string4);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("org.apache.commons.lang3.StringUtils"));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", 'Y');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string5 = StringUtils.chop("");
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.wrap("1O>4Wnq3b", '\u0000');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("1O>4Wnq3b", string6);
      assertNotNull(string6);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)87;
      byteArray0[8] = (byte) (-1);
      String string7 = StringUtils.join(byteArray0, '\u0000');
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertEquals("74\u00004\u00002\u0000-105\u000039\u0000-95\u00003\u000087\u0000-1", string7);
      assertNotNull(string7);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)74, (byte)4, (byte)2, (byte) (-105), (byte)39, (byte) (-95), (byte)3, (byte)87, (byte) (-1)}, byteArray0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "74\u00004\u00002\u0000-105\u000039\u0000-95\u00003\u000087\u0000-1", (CharSequence[]) stringArray1);
      assertFalse(int1 == int0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals((-1), int1);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string1 = StringUtils.substringAfterLast(" ", "org.apache.commons.lang3.StringUtils");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase(" ");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, "\r");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\r", string4);
      assertNotNull(string4);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", 'Y');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string5 = StringUtils.chop("");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.wrap("1O>4Wnq3b", '\u0000');
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("1O>4Wnq3b", string6);
      assertNotNull(string6);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)74;
      String string7 = StringUtils.right("\r", (byte)74);
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertEquals("\r", string7);
      assertNotNull(string7);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "xvd :Zo<]H", (CharSequence) "\r");
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      String string8 = StringUtils.stripStart("", "");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string5));
      assertEquals("", string8);
      assertNotNull(string8);
      
      boolean boolean1 = StringUtils.equalsAny("\r", stringArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "D<Bi3pgNF<s[lQ\"J";
      stringArray0[1] = "Exception cloning Cloneable type ";
      stringArray0[2] = "xY+YE(LOm_";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, stringArray0.length);
      
      String string1 = StringUtils.substringBetween("CRgZ$1e_;R'=s\">du6L", "xY+YE(LOm_");
      assertNull(string1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("D<Bi3pgNF<s[lQ\"J", "Exception cloning Cloneable type ", stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertEquals("D<Bi3pgNF<s[lQ\"J", string2);
      assertNotNull(string2);
      assertEquals(3, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-738), (-738));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      String string3 = StringUtils.join(floatArray0, 'V');
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "G9ULK-fZyNJZn");
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.split("G9ULK-fZyNJZn", " ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(int0));
      
      String string3 = StringUtils.removeEnd("", "G9ULK-fZyNJZn");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("G9ULK-fZyNJZn", string4);
      assertNotNull(string4);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string5 = StringUtils.prependIfMissing("", "", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      String string6 = StringUtils.repeat('v', 346);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.substringAfterLast(" ", 1999);
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.SPACE;
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertEquals(" ", string8);
      assertNotNull(string8);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 346;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'z', 1, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "HURV4riOn3#xu5W;]o", '\"');
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "HURV4riOn3#xu5W;]o", "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("HURV4riOn3#xu5W;]o");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("r1Sp`+>qaujy", "r1Sp`+>qaujy", 0);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("", (-1), "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "r1Sp`+>qaujy", 6);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      String string2 = StringUtils.substringAfterLast("HURV4riOn3#xu5W;]o", "r1Sp`+>qaujy");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[0];
      String string3 = StringUtils.join(objectArray0, '\"', (-1), (-1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, objectArray0.length);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("G9ULK-fZyNJZn");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      String string2 = StringUtils.valueOf(charArray0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(9, stringArray0.length);
      
      String string3 = StringUtils.substringBetween("Kg2<-*,H1#zF{", (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.stripStart("Kg2<-*,H1#zF{", (String) null);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Kg2<-*,H1#zF{", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBefore("Kg2<-*,H1#zF{", "");
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.rightPad("tZwoE:/\"ixNq !`nT", (-3961), "M1/E;ksoNQM");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("tZwoE:/\"ixNq !`nT", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Ca.m3<_U{_X");
      assertFalse(int1 == int0);
      assertEquals(11, int1);
      
      String string7 = StringUtils.stripStart("", "org.apache.commons.lang3.StringUtils");
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertEquals("", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.equalsAny("G9ULK-fZyNJZn", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string1 = StringUtils.center("org.apache.commons.lang3.StringUtils", (int) '\u0000', '\u0000');
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Org.apache.commons.lang3.StringUtils", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) stringArray0, "\r");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\r", string3);
      assertNotNull(string3);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      String string4 = StringUtils.center((String) null, 57, 'd');
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, stringArray0.length);
      
      String string5 = StringUtils.abbreviateMiddle((String) null, "\r", 57);
      assertNull(string5);
      
      String string6 = StringUtils.joinWith("-", stringArray0);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("-", string6);
      assertNotNull(string6);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.stripEnd("M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3");
      assertEquals("", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '%';
      String string1 = StringUtils.join(doubleArray0, '%');
      assertFalse(string1.equals((Object)string0));
      assertEquals("37.0", string1);
      assertNotNull(string1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {37.0}, doubleArray0, 0.01);
      
      String string2 = StringUtils.mid("M#21T4mQ[?Bofw[/m3", 12, 6389);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("fw[/m3", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast((String) null, " is not in the range '0' - '9'");
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "M#21T4mQ[?Bofw[/m3";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) " is not in the range '0' - '9'";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.Charsets";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string4 = StringUtils.center((String) null, 6389);
      assertNull(string4);
      
      String string5 = StringUtils.abbreviate("M#21T4mQ[?Bofw[/m3", "fw[/m3", 12, 117);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("M#21T4mQ[?Bofw[/m3", string5);
      assertNotNull(string5);
      
      Locale locale0 = Locale.forLanguageTag("org.apache.commons.lang3.Charsets");
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(set0.contains(string5));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      assertNotNull(list0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(set0.contains(string5));
      assertFalse(list0.contains(string5));
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "M#21T4mQ[?Bofw[/m3", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = StringUtils.rotate(", Length: ", (-254));
      assertEquals("ngth: , Le", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate(", Length: ", 64, 64);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(64));
      
      Integer integer0 = new Integer(2905);
      assertEquals(2905, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = vector0.add(integer0);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[2905]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains(integer0));
      assertFalse(vector0.contains(64));
      
      String string2 = StringUtils.join((List<?>) vector0, "The type must not be null", 2984, (-254));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[2905]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains(integer0));
      assertFalse(vector0.contains(64));
      
      Integer integer1 = new Integer(1925);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1925, (int)integer1);
      assertNotNull(integer1);
      
      boolean boolean1 = vector0.add(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[2905, 1925]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains(integer0));
      assertFalse(vector0.contains(64));
      
      String string3 = StringUtils.join((Iterable<?>) vector0, '1');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("290511925", string3);
      assertNotNull(string3);
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[2905, 1925]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains(integer0));
      assertFalse(vector0.contains(64));
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", (CharSequence) ", Length: ");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-12);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(" vs ");
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(" vs "));
      
      boolean boolean1 = arrayList0.add("+f,t67");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(" vs "));
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(arrayList0.contains(" vs "));
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "+f,t67");
      assertEquals(" vs +f,t67+f,t67", string0);
      assertNotNull(string0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.contains(" vs "));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) " vs +f,t67+f,t67";
      String string1 = StringUtils.capitalize("+f,t67");
      assertFalse(string1.equals((Object)string0));
      assertEquals("+f,t67", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.upperCase("ev&9n1#hSI7@F");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("EV&9N1#HSI7@F", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "'+-PcMfru&0tB");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("'+-PcMfru&0tB vs +f,t67+f,t67'+-PcMfru&0tB", string3);
      assertNotNull(string3);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(3, charSequenceArray0.length);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string2));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r", '~');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean3 = StringUtils.isAllUpperCase("D|28u\"");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string4 = StringUtils.removeEnd(" vs +f,t67+f,t67", "\r");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(" vs +f,t67+f,t67", string4);
      assertNotNull(string4);
      
      boolean boolean4 = StringUtils.equalsIgnoreCase((CharSequence) null, "\r");
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5);
      assertEquals(3, charSequenceArray0.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf("+f,t67", " vs +f,t67+f,t67", (byte)0);
      assertEquals((-1), int0);
      
      boolean boolean6 = StringUtils.isMixedCase(charSequenceArray0[1]);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.chomp("Locale must not be null", "JD");
      assertEquals("Locale must not be null", string0);
      assertNotNull(string0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("JD"));
      
      String string1 = StringUtils.repeat("JD", 1435);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.overlay("~O`cu=Nao+*GO=", "~O`cu=Nao+*GO=", (-1285), (-174));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("~O`cu=Nao+*GO=~O`cu=Nao+*GO=", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.defaultIfBlank("J[zYsm\u0002>_N`iy", (String) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("J[zYsm\u0002>_N`iy", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      String string0 = StringUtils.join(longArray0, '}');
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBetween("a}<p~1cW*L", "0");
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (-787), 8);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.substringBefore("a}<p~1cW*L", 5);
      assertFalse(string2.equals((Object)string0));
      assertEquals("a}<p~1cW*L", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull("0");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("0", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.CR;
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\r", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsWhitespace("\r");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.SPACE;
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals(" ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.prependIfMissing("@y]R", "@y]R", (CharSequence[]) null);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("@y]R", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.wrapIfMissing(" ", "0");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertEquals("0 0", string7);
      assertNotNull(string7);
      
      boolean boolean2 = StringUtils.isAllLowerCase("a}<p~1cW*L");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      boolean boolean4 = StringUtils.containsOnly((CharSequence) "@y]R", (char[]) null);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = "_!$iB{6gwWU4OKir";
      stringArray0[2] = "0";
      stringArray0[3] = null;
      stringArray0[4] = "0 0";
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "\r";
      stringArray1[1] = "@y]R";
      stringArray1[2] = " ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("_!$iB{6gwWU4OKir", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 5 vs 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string3 = StringUtils.repeat('w', (-1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("org.apache.commons.lang3.RegExUtils");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.RegExUtils", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.substringsBetween("org.apache.commons.lang3.RegExUtils", "4=bI*", "");
      assertNull(stringArray1);
      
      String string5 = StringUtils.repeat('<', 16);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("<<<<<<<<<<<<<<<<", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.wrap("4=bI*", '.');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals(".4=bI*.", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.leftPad("org.apache.commons.lang3.RegExUtils", (-1374), "4=bI*");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.RegExUtils", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.leftPad("G9ULK-fZyNJZn", 7, "org.apache.commons.lang3.RegExUtils");
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertEquals("G9ULK-fZyNJZn", string8);
      assertNotNull(string8);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)19;
      shortArray0[1] = (short)113;
      shortArray0[2] = (short)113;
      shortArray0[3] = (short) (-2184);
      String string9 = StringUtils.join(shortArray0, '<');
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertEquals("19<113<113<-2184", string9);
      assertNotNull(string9);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)19, (short)113, (short)113, (short) (-2184)}, shortArray0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "19<113<113<-2184");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      
      Locale locale1 = Locale.forLanguageTag("");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      
      String[] stringArray0 = StringUtils.substringsBetween("w:ZZ6]z4iX", "tk[g\"9#^>UM6/a@E5", "");
      assertNull(stringArray0);
      
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("]i7t(3-{%Ho", 113);
      assertFalse(string1.equals((Object)string0));
      assertEquals("]i7t(3-{%Ho                                                                                                      ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("]i7t(3-{%Ho                                                                                                      ", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.abbreviate("*\"z 6x2BM", "*\"z 6x2BM", 2090);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("*\"z 6x2BM", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.truncate("org.apache.commons.lang3.CharUtils", 113);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.CharUtils", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string0 = StringUtils.rotate((String) null, (-3222));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      String string0 = StringUtils.join(longArray0, '}');
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBetween("a}<p~1cW*L", "0");
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (-787), 8);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.removeStart((String) null, "0");
      assertNull(string2);
      
      String string3 = StringUtils.strip((String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int3 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, (-787));
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      String string4 = StringUtils.chomp((String) null);
      assertNull(string4);
      
      boolean boolean2 = StringUtils.isWhitespace((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string5 = StringUtils.replaceIgnoreCase((String) null, "0", " 0", (-1));
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string1 = StringUtils.center("org.apache.commons.lang3.StringUtils", (int) '\u0000', '\u0000');
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Org.apache.commons.lang3.StringUtils", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase("D|28u\"");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("D|28U\"", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, "\r");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\r", string4);
      assertNotNull(string4);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Org.apache.commons.lang3.StringUtils", 'Y');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("\r");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      String string5 = StringUtils.removeEnd("z3(1qx_", "org.apache.commons.lang3.StringUtils");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("z3(1qx_", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase(" ", "org.apache.commons.lang3.StringUtils");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAllBlank(stringArray1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean3);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      int int1 = StringUtils.lastOrdinalIndexOf(" ", " ", 1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      String string0 = StringUtils.join(longArray0, '}');
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("0");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBetween("a}<p~1cW*L", "0");
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (-787), 8);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      int int1 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '}', '}', '}'}, charArray0);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "0", " ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.uncapitalize("{nm");
      assertFalse(string2.equals((Object)string0));
      assertEquals("{nm", string2);
      assertNotNull(string2);
      
      int int3 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "{nm", (CharSequence) "&2lkf");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", 2484);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.substringAfterLast("D;40(9ugHLteB =btzi{V", "C;3[YX'>0bmZ_");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars((String) null, 'R', 'R');
      assertNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "c,", true);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(";}Bl9>>K+tX)y", ";}Bl9>>K+tX)y");
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
      
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      String[] stringArray1 = StringUtils.substringsBetween("0WEVlr", "6bYc7N\"Xt{@", "#");
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.split("olcGE%", "olcGE%");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertEquals(0, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      
      String string2 = StringUtils.substringBetween((String) null, "6bYc7N\"Xt{@");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Arguments cannot both be null", (String) null);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = null;
      stringArray1[1] = null;
      stringArray1[2] = "Arguments cannot both be null";
      String string0 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = '\\';
      charArray0[2] = 'B';
      charArray0[3] = 'n';
      charArray0[4] = 'A';
      charArray0[5] = 'b';
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("@\\BnAb", string1);
      assertNotNull(string1);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'@', '\\', 'B', 'n', 'A', 'b'}, charArray0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "L&{)s^_)V", (CharSequence) "", Integer.MIN_VALUE);
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceEachRepeatedly(", Length: 0", (String[]) null, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(", Length: 0", string2);
      assertNotNull(string2);
      assertEquals(5, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)86;
      String string3 = StringUtils.join(byteArray0, '@');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)20, (byte)46, (byte)86}, byteArray0);
      
      int int1 = StringUtils.indexOf((CharSequence) "20@46@86", 22);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray2 = StringUtils.substringsBetween("Minimum abbreviation width with offset is %d", "xq}W6qe`&M-4gn", "h/y");
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = StringUtils.chop("aaUdouKB3'p7Z>JX");
      assertEquals("aaUdouKB3'p7Z>J", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("aaUdouKB3'p7Z>J");
      assertFalse(string1.equals((Object)string0));
      assertEquals("AaUdouKB3'p7Z>J", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToEmpty("AaUdouKB3'p7Z>J");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("AaUdouKB3'p7Z>J", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultIfEmpty("W9($*oqj", "AaUdouKB3'p7Z>J");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("W9($*oqj", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.getDigits(";}V:r@");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "W9($*oqj", "#");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.compare("W9($*oqj", "oD", false);
      assertEquals((-24), int0);
      
      String string5 = StringUtils.join((Locale.FilteringMode[]) null);
      assertNull(string5);
      
      String string6 = StringUtils.replaceOnce("", "#", "k");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.lastIndexOfAny("AaUdouKB3'p7Z>J", stringArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, stringArray0.length);
      
      String string7 = StringUtils.join((Object[]) stringArray0, 'K');
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertEquals("", string7);
      assertNotNull(string7);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = 'Z';
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      charArray0[5] = 'Z';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "k", charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'K', 'Z', 'K', 'K', 'K', 'Z'}, charArray0);
      
      String string8 = StringUtils.deleteWhitespace("");
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string4));
      assertEquals("", string8);
      assertNotNull(string8);
      
      // Undeclared exception!
      try { 
        StringUtils.removePattern("object", "A~c[|&3v-Pt9");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal character range near index 9
         // A~c[|&3v-Pt9
         //          ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.trim("-");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "-";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.chomp("-");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("-", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("", "z*Ovtb8CpL-zI+vL@V");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(int0));
      
      String string3 = StringUtils.removeEnd((String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.substringBeforeLast("org.apache.commons.lang3.LocaleUtils", "Bl9>>K+tX)y");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.LocaleUtils", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.ordinalIndexOf("BkLYN", "org.apache.commons.lang3.LocaleUtils", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string5 = StringUtils.wrap((String) null, 'I');
      assertNull(string5);
      
      String string6 = StringUtils.leftPad((String) null, 52, (String) null);
      assertNull(string6);
      
      String string7 = StringUtils.substringAfter(" vs ", (-1));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, '9');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "", " ");
      assertNull(stringArray1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "uYe");
      assertEquals(3, int0);
      
      String string2 = StringUtils.join((Object[]) null, "");
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isBlank("G9ULK-fZyNJZn");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trim("-");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("", 3645, "-");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = " ";
      String string4 = StringUtils.defaultIfBlank(";Qju~|B884.", " ");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(";Qju~|B884.", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAllUpperCase(" ");
      assertFalse(boolean0);
      
      String string5 = ".|c(P4;Bbi,o";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "org.apache.commons.lang3.CharUtils");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.lang3.CharUtils
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)42;
      String string0 = StringUtils.stripEnd("3IG}", "3IG}");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("23h=D:`I;ng$Q*", 'S');
      assertFalse(string1.equals((Object)string0));
      assertEquals("23h=D:`I;ng$Q*", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.normalizeSpace((String) null);
      assertNull(string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfEmpty("D;40(9ugHLteB =btzi{V", supplier0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("D;40(9ugHLteB =btzi{V", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = StringUtils.stripEnd("M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("", ", Lngth");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare((String) null, "~IJ1'+p~Zt^U@H*Z", false);
      assertEquals(1, int0);
      
      int[] intArray0 = new int[0];
      String string2 = StringUtils.substringBefore("~IJ1'+p~Zt^U@H*Z", "");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, ", '");
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase("ln(,^[8tF| ", "ln(,^[8tF| ", stringArray1);
      assertEquals("ln(,^[8tF| ", string0);
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "ln(,^[8tF| ", (CharSequence) "ln(,^[8tF| ");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)54;
      String string1 = StringUtils.join(byteArray0, '<');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-65<13<17<54", string1);
      assertNotNull(string1);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-65), (byte)13, (byte)17, (byte)54}, byteArray0);
      
      String string2 = ">vo34<Y";
      String string3 = StringUtils.truncate(">vo34<Y", 127);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals(">vo34<Y", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replace(">vo34<Y", "ln(,^[8tF| ", ", '");
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(">vo34<Y", string4);
      assertNotNull(string4);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      // Undeclared exception!
      try { 
        charset0.decode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = StringUtils.removeAll("Qe8b6zcN<X<jpxOg<{", "...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("...");
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat('c', (-1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap((String) null, '.');
      assertNull(string2);
      
      String string3 = StringUtils.leftPad("'YwtkewYT<}UOc&o", 2126, (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("(0sgiF.EshJ", 3196, "\r");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String string5 = StringUtils.removeStartIgnoreCase("{!r", "'YwtkewYT<}UOc&o");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("{!r", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBefore("{!r", 819);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("{!r", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("x,|m[n^]b", "x,|m[n^]b", "x,|m[n^]b");
      assertEquals("x,|m[n^]b|m[n^]b", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "x,|m[n^]b|m[n^]b", (CharSequence) null, 9);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substring("x,|m[n^]b", (-1), 13);
      assertFalse(string1.equals((Object)string0));
      assertEquals("b", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = StringUtils.getBytes("oq#|", (Charset) null);
      assertNotNull(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)111, (byte)113, (byte)35, (byte)124}, byteArray0);
      
      int int1 = StringUtils.indexOf((CharSequence) "b", 13);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String string2 = StringUtils.removeEnd("|X,XZu6>U/5", ",^<@>^h:5Z");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("|X,XZu6>U/5", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rotate("-a2>)7Z+]Kk ky+", (-1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("a2>)7Z+]Kk ky+-", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = StringUtils.substringBetween("}UO", "}UO");
      assertNull(string0);
      
      String string1 = StringUtils.stripStart("}UO", "Ca.m3<_U{_X");
      assertEquals("}UO", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("org.apache.commons.lang3.StringUtils", "d^bR");
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("sV;U8", 49, "c5aywH].pCb,v{i7[_");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("sV;U8c5aywH].pCb,v{i7[_c5aywH].pCb,v{i7[_c5aywH].", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "sV;U8", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertEquals(34, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string4 = StringUtils.stripStart("org.apache.commons.lang3.StringUtils", "}UO");
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      assertNotNull(string4);
      
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "D;40(9";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "D;40(9");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "D;40(9", (CharSequence) "D;40(9");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAny((CharSequence) "D;40(9", charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "D;40(9", "D;40(9");
      assertFalse(boolean0);
      
      String string0 = StringUtils.uncapitalize("D;40(9");
      assertEquals("d;40(9", string0);
      assertNotNull(string0);
      
      int int3 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("&2lkf");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertEquals(3, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      String string1 = StringUtils.chomp("&2lkf");
      assertFalse(string1.equals((Object)string0));
      assertEquals("&2lkf", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("D;40(9", 3, "D;40(9");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("D;40(9", string2);
      assertNotNull(string2);
      
      int int4 = StringUtils.getLevenshteinDistance((CharSequence) "D;40(9", (CharSequence) "&2lkf", 3);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.ROOT;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      
      String string0 = locale1.getDisplayName(locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      
      String string1 = StringUtils.replaceOnce("", "", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string2 = locale0.getDisplayVariant(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      
      Locale locale2 = Locale.forLanguageTag("Lezm4WtR");
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getVariant());
      
      String[] stringArray1 = Locale.getISOCountries();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(250, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean0);
      assertEquals(250, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 17L;
      longArray0[1] = (long) '9';
      longArray0[2] = (long) '9';
      longArray0[3] = (long) '9';
      longArray0[4] = (long) '9';
      String string3 = StringUtils.deleteWhitespace("");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.substringsBetween(", Length: 0", ", Length: 0", "CF=A{ FJ>a2H$Sc");
      assertNull(stringArray2);
      
      int int0 = StringUtils.indexOf((CharSequence) ", Length: 0", (CharSequence) ", Length: 0");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-969));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-969));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.unwrap("offset cannot be negative", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("offset cannot be negative", "offset cannot be negative");
      assertTrue(boolean0);
      
      int int1 = StringUtils.compare("offset cannot be negative", "");
      assertFalse(int1 == int0);
      assertEquals(25, int1);
      
      int int2 = StringUtils.countMatches((CharSequence) "offset cannot be negative", 'B');
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string2 = StringUtils.removeStart((String) null, ", Length: ");
      assertNull(string2);
      
      int int3 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      
      String string3 = StringUtils.substringAfterLast("offset cannot be negative", "");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("jssh^$]#kBf.:v", 12);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("jssh^$]#k...", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeAll("jssh^$]#kBf.:v", "jssh^$]#kBf.:v");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("jssh^$]#kBf.:v", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.rightPad((String) null, 12, "");
      assertNull(string6);
      
      int int4 = StringUtils.lastIndexOf((CharSequence) null, (-2378), (-969));
      assertTrue(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertEquals((-1), int4);
      
      String string7 = StringUtils.rightPad(", Length: ", (-969));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertEquals(", Length: ", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.reverseDelimited("qa=n'UCJt<:^uc8ZNfQ", 's');
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertEquals("qa=n'UCJt<:^uc8ZNfQ", string8);
      assertNotNull(string8);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "jssh^$]#kBf.:v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = StringUtils.stripEnd("M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrap("", ", Lngth");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "~IJ1'+p~Zt^U@H*Z", false);
      assertEquals(1, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int int1 = StringUtils.compare((String) null, "~IJ1'+p~Zt^U@H*Z", false);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      String string2 = StringUtils.join((Locale.FilteringMode[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase(", Lngth", "M#21T4mQ[?Bofw[/m3", charSequenceArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("M#21T4mQ[?Bofw[/m3, Lngth", string3);
      assertNotNull(string3);
      assertEquals(5, charSequenceArray0.length);
      
      int int2 = StringUtils.lastIndexOfAny("M#21T4mQ[?Bofw[/m3, Lngth", charSequenceArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(5, charSequenceArray0.length);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, 'd');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("dddd", string4);
      assertNotNull(string4);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      String string0 = StringUtils.chop("E");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("ngH&&_F\tFgEu!<");
      assertFalse(string1.equals((Object)string0));
      assertEquals("NgH&&_F\tFgEu!<", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToEmpty("E");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("E", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultIfEmpty("0V46oiHH!~8?4HV}mI!\"?", "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("0V46oiHH!~8?4HV}mI!\"?", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.getDigits("8.");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("8", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "o,Ox`E}6D0'pDG46g.dPka~j.9@J!O[7HF-", "!k3%Dt(bj");
      assertNull(stringArray0);
      
      String string5 = StringUtils.repeat('A', 47);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.wrap("NgH&&_F\tFgEu!<", 'a');
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("aNgH&&_F\tFgEu!<a", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.leftPad(")i", 76, "W<FDU9}y':*0lpB");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals("W<FDU9}y':*0lpBW<FDU9}y':*0lpBW<FDU9}y':*0lpBW<FDU9}y':*0lpBW<FDU9}y':*0lp)i", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.leftPad("7{p0C!4o&", 76, "");
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertEquals("                                                                   7{p0C!4o&", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.stripStart("bha@C}neLMzw[s@k17", "iHH!~8");
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertEquals("bha@C}neLMzw[s@k17", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.center(":sv^&56`?`i~l", 5, 'R');
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertEquals(":sv^&56`?`i~l", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.wrapIfMissing("g'1qo5]&G`V", 'g');
      assertEquals("g'1qo5]&G`Vg", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("g'1qo5]&G`V", "g'1qo5]&G`V");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("p;7n[-T/7{QO");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("p;7n[-T/7{QO");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      boolean boolean2 = StringUtils.isAllLowerCase("g'1qo5]&G`V");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'g';
      charArray0[4] = 'Y';
      charArray0[5] = 'g';
      charArray0[6] = 'Y';
      charArray0[8] = 'Y';
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("YYg\u0000YgY\u0000Y", string1);
      assertNotNull(string1);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'Y', 'Y', 'g', '\u0000', 'Y', 'g', 'Y', '\u0000', 'Y'}, charArray0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "g'1qo5]&G`V", 33);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("null/empty items", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("23h=D:`I;ng$Q*", 'Q');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("23h=D:`I;ng$Q*", string2);
      assertNotNull(string2);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("G9ULK-fZyNJZn"));
      
      Spliterator<String> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("G9ULK-fZyNJZn"));
      
      boolean boolean1 = arrayList0.add("G9ULK-fZyNJZn");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.contains("G9ULK-fZyNJZn"));
      
      boolean boolean2 = arrayList0.add("");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.contains(string2));
      assertTrue(arrayList0.contains(""));
      
      boolean boolean3 = arrayList0.add("");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.contains(string2));
      assertTrue(arrayList0.contains(""));
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(arrayList0.contains(string2));
      assertTrue(arrayList0.contains(""));
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, " ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("G9ULK-fZyNJZn  ", string3);
      assertNotNull(string3);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(arrayList0.contains(" "));
      assertTrue(arrayList0.contains(""));
      
      boolean boolean4 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      assertEquals(1, stringArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-41);
      String string4 = StringUtils.join(byteArray0, '_');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("-1_-36_110_26_26_1_-41", string4);
      assertNotNull(string4);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-36), (byte)110, (byte)26, (byte)26, (byte)1, (byte) (-41)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = StringUtils.wrap("\n", '9');
      assertEquals("9\n9", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("9\n9");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "9\n9", "1O}5Q>=0Eqr>\"\".1][");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllUpperCase("\n");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray0 = StringUtils.split("\n", "[JAD$C<WU}]t$OBvRX", 4);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = 0;
      String[] stringArray1 = StringUtils.splitByWholeSeparator("-", (String) null, 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.unwrap("\n", "...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      int int1 = 3291;
      String string2 = StringUtils.repeat("'YwtkewYT<}UOc&o", "-", 3291);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.isAlphanumericSpace("[JAD$C<WU}]t$OBvRX");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string3 = StringUtils.substringBetween("HURV4riOn3#xu5W;]oHURV4riOn3#xu5W;]o", "3");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("#xu5W;]oHURV4riOn", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.appendIfMissing((String) null, "org.apache.commons.lang3.StringUtils", stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.capitalize((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.upperCase("D|28u\"");
      assertFalse(string3.equals((Object)string0));
      assertEquals("D|28U\"", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.chomp("', is neither of type Map.Entry nor an Array");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad((String) null, (-1), "', is neither of type Map.Entry nor an Array");
      assertNull(string5);
      
      String string6 = StringUtils.deleteWhitespace((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.leftPad((String) null, (-1), '8');
      assertNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-12);
      shortArray0[1] = (short)42;
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      charArray0[4] = ':';
      charArray0[5] = 'b';
      String string0 = StringUtils.abbreviateMiddle("V8BPN.C}Lg", "0[AMLjOOZzSrr8", 1);
      assertEquals("V8BPN.C}Lg", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("0[AMLjOOZzSrr8");
      assertFalse(string1.equals((Object)string0));
      assertEquals("0[AMLjOOZzSrr8", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("V8BPN.C}Lg", 10, "\nP1i_Y;qx06");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("V8BPN.C}Lg", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("0[AMLjOOZzSrr8", "ZS'q8\"tBx20)DB@+", (int) (short) (-12), 64);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("0[AMLjOOZzSrr8", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("L6r{>TW?B:", ':');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(":L6r{>TW?B:", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfBlank("1r)uTX;VsRLtsE", supplier0);
      assertEquals("1r)uTX;VsRLtsE", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "1r)uTX;VsRLtsE", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, 'S');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("", 0, '0');
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "org.apache.commons.lang3.ArrayUtils";
      String string2 = StringUtils.joinWith("org.apache.commons.lang3.ArrayUtils", objectArray0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.ArrayUtilsorg.apache.commons.lang3.ArrayUtils", string2);
      assertNotNull(string2);
      assertEquals(2, objectArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.ArrayUtils", "", 9);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)160;
      shortArray0[1] = (short) (-1236);
      shortArray0[2] = (short)53;
      shortArray0[3] = (short) (-565);
      shortArray0[4] = (short)160;
      String string3 = StringUtils.join(shortArray0, '0');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("1600-12360530-5650160", string3);
      assertNotNull(string3);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)160, (short) (-1236), (short)53, (short) (-565), (short)160}, shortArray0);
      
      String string4 = StringUtils.abbreviateMiddle("", "org.apache.commons.lang3.ArrayUtilsorg.apache.commons.lang3.ArrayUtils", (short) (-1236));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.uncapitalize("");
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center("AnXj&,hK", (int) (short) (-1236), ".dPka~j.9@J!O[7HF-");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("AnXj&,hK", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.abbreviate("Aborting to protect against StackOverflowError - output of one loop is the input of another", "", (int) (short)160, (int) (short) (-565));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.replace("tJ", "1600-12360530-5650160", (String) null, (int) (short)160);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertEquals("tJ", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.join((int[]) null, 'B', 34, 64);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.split("d^bR", "d^bR", 64);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "}pwK$CNGA", (CharSequence) "}pwK$CNGA", 64);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("}pwK$CNGA", "d^bR");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfterLast("d^bR", "}[RgM1^}m");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("(f9VckoyN.~J<'>^", 34);
      assertFalse(string2.equals((Object)string1));
      assertEquals("(f9VckoyN.~J<'>^", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("}pwK$CNGA", 34, '\u0000');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}pwK$CNGA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((int[]) null, 'q');
      assertNull(string4);
      
      int int1 = StringUtils.compare("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}pwK$CNGA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", (String) null, false);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.overlay((String) null, (String) null, 'B', 16);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZNJZ", "G9ULK-fZNJZ", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZNJZ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.split("G9ULK-fZNJZ", " ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(int0));
      
      String string3 = StringUtils.removeEnd("", "G9ULK-fZNJZ");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.ordinalIndexOf("", "", 3442);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.startsWithAny("", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = StringUtils.wrap("\n", '9');
      assertEquals("9\n9", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("9\n9");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "9\n9", "1O}5Q>=0Eqr>\"\".1][");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfBlank("1O}5Q>=0Eqr>\"\".1][", supplier0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1O}5Q>=0Eqr>\"\".1][", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)65;
      String string2 = StringUtils.join(byteArray0, 'p', (int) (byte)65, (int) (byte)65);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)65, (byte) (-12), (byte)65}, byteArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      charArray0[1] = 'p';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = 'p';
      charArray0[5] = 'p';
      charArray0[6] = '9';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'9', 'p', '9', '9', 'p', 'p', '9'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[3] = 'M';
      charArray0[4] = '\u0000';
      charArray0[5] = ':';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {':', ':', '\u0000', 'M', '\u0000', ':'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = StringUtils.trim("HURV4riOn3#xu5W;]o");
      assertEquals("HURV4riOn3#xu5W;]o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      String string3 = StringUtils.join(iterator0, 'E');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      char[] charArray0 = new char[8];
      String string4 = StringUtils.valueOf(charArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string4);
      assertNotNull(string4);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "O'kx};n");
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      String string5 = StringUtils.getIfBlank("", supplier0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string6 = StringUtils.uncapitalize("");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("O'kx};n");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{incombiningdiacriticalmarks}+", string0);
      assertNotNull(string0);
      
      int int0 = 0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      String string1 = StringUtils.join(booleanArray0, 'q', 105, 36);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'q';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'q', 0, 127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "~IJ1'+p~Zt^U@H*Z";
      charSequenceArray0[1] = (CharSequence) "~IJ1'+p~Zt^U@H*Z";
      String string0 = StringUtils.rightPad((String) null, 6);
      assertNull(string0);
      
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "~IJ1'+p~Zt^U@H*Z";
      charSequenceArray0[4] = (CharSequence) "~IJ1'+p~Zt^U@H*Z";
      charSequenceArray0[5] = (CharSequence) "~IJ1'+p~Zt^U@H*Z";
      charSequenceArray0[6] = (CharSequence) "~IJ1'+p~Zt^U@H*Z";
      charSequenceArray0[7] = (CharSequence) "~IJ1'+p~Zt^U@H*Z";
      String string1 = StringUtils.appendIfMissingIgnoreCase("~IJ1'+p~Zt^U@H*Z", "~IJ1'+p~Zt^U@H*Z", charSequenceArray0);
      assertEquals("~IJ1'+p~Zt^U@H*Z", string1);
      assertNotNull(string1);
      assertEquals(9, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "~IJ1'+p~Zt^U@H*Z", charSequenceArray0[8], 1910);
      assertEquals((-1), int0);
      assertEquals(9, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.replaceOnce("@AL", "~IJ1'+p~Zt^U@H*Z", " ");
      assertFalse(string2.equals((Object)string1));
      assertEquals("@AL", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      String string0 = StringUtils.upperCase("Search and Replace array lenghs don't match: ", locale0);
      assertEquals("SEARCH AND REPLACE ARRAY LENGHS DON'T MATCH: ", string0);
      assertNotNull(string0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      boolean boolean0 = StringUtils.isAlphaSpace("SEARCH AND REPLACE ARRAY LENGHS DON'T MATCH: ");
      assertFalse(boolean0);
      
      String string1 = locale0.getDisplayLanguage(locale0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u4E2D\u6587", string1);
      assertNotNull(string1);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      int int0 = StringUtils.compareIgnoreCase("Search and Replace array lenghs don't match: ", "Search and Replace array lenghs don't match: ", true);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("SEARCH AND REPLACE ARRAY LENGHS DON'T MATCH: ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphaSpace("Search and Replace array lenghs don't match: ");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringUtils.rightPad("BomYaratr", 954, 's');
      StringUtils.equals((CharSequence) "BomYaratr", (CharSequence) "BomYaratr");
      StringUtils.removeEnd(", Length: ", "Locale must not be null");
      StringUtils.containsWhitespace(", Length: ");
      StringUtils.containsOnly((CharSequence) ", Length: ", " vs ");
      StringUtils.replaceChars("`ypi5MtH*", 'E', '\\');
      StringUtils.getLevenshteinDistance((CharSequence) "BomYaratr", (CharSequence) "BomYaratr");
      StringUtils.substringAfter("Locale must not be null", "% A7");
      StringUtils.rightPad("BomYaratrsssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss", 954);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-1000));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-1000));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceChars("offset cannot be negative", "maxWith cannot be negative", "frY))T");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ffsTrTrT)", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ffsTrTrT)";
      stringArray0[1] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.replaceAll("frY))T", stringArray0[2], "");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("frY))T", string2);
      assertNotNull(string2);
      assertEquals(4, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      String string3 = StringUtils.toRootUpperCase("frY))T");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("FRY))T", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "FRY))T", "*;QH");
      assertTrue(boolean0);
      
      String string4 = StringUtils.difference("", "");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.stripToNull("frY))T");
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("frY))T", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.trim("frY))T");
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("frY))T", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string7 = StringUtils.chomp("ffsTrTrT)");
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertEquals("ffsTrTrT)", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.rightPad("\nMinimum abbreviation width is %dev&Un1#hSI7@F", 0, "<g<;D@26");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertEquals("\nMinimum abbreviation width is %dev&Un1#hSI7@F", string8);
      assertNotNull(string8);
      
      boolean boolean2 = StringUtils.isAllUpperCase("ffsTrTrT)");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(string8));
      
      Iterator<String> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(string8));
      
      boolean boolean3 = linkedHashSet0.add("\r");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("\r"));
      assertFalse(linkedHashSet0.contains(string8));
      
      String string9 = StringUtils.join(iterator0, "2$7l^|");
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertEquals("", string9);
      assertNotNull(string9);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("\r"));
      assertFalse(linkedHashSet0.contains(string8));
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String string10 = StringUtils.replaceChars("", "", "<g<;D@26");
      assertTrue(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertTrue(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertEquals("", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '<');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      String string1 = StringUtils.removeEnd("g(.d}E_6yNLEY2", "maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("g(.d}E_6yNLEY2", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("g(.d}E_6yNLEY2", (-1));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("g(.d}E_6yNLEY2", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.rightPad("", 14, '<');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("<<<<<<<<<<<<<<", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast(";Bi@M#<5GKx", 53);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("GKx", string4);
      assertNotNull(string4);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3110;
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("!%r#,q+{ :k", "", "7$R5OHh)~o_}E*^b}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = StringUtils.substring("|]pr(zTv%2ZWCey", 29, 29);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.defaultIfBlank("Minimum abbreviation width is %d", "|]pr(zTv%2ZWCey");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.mid("Minimum abbreviation width is %d", 5, (-7));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(3, charSequenceArray0.length);
      
      String string3 = StringUtils.chomp("gbkO?");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("gbkO?", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("Minimum abbreviation width is %d", (-7), "<V");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("Minimum abbreviation width is %d", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAllUpperCase("gbkO?");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "<V", (CharSequence) "", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.replaceOnce("e52{dcrhhH{I`Tp0>u", "e52{dcr-hH{I`Tp0>u", "$XX>x");
      assertEquals("e52{dcrhhH{I`Tp0>u", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9U`K-fZyNJZn", "G9U`K-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("G9U`K-fZyNJZn");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9U`K-fZyNJZn");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "G9U`K-fZyNJZn");
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.split("G9U`K-fZyNJZn", "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(int0));
      
      String string3 = StringUtils.removeEnd("", "G9U`K-fZyNJZn");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("G9U`K-fZyNJZn", string4);
      assertNotNull(string4);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.rightPad("", (-1), "");
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.trim("-");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "-";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.chomp("-");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("-", 0, "-");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("-", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllUpperCase("-");
      assertFalse(boolean0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "BkLYN", (CharSequence) "-", 6);
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      
      String string4 = StringUtils.unwrap("-", "B)G5%:9|n-A[#%J");
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("-", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("-", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, charSequenceArray0.length);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, '{');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("{-", string5);
      assertNotNull(string5);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-1000));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-1000));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceChars("offset cannot be negative", "maxWith cannot be negative", "frY))T");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ffsTrTrT)", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ffsTrTrT)";
      stringArray0[1] = "";
      String string2 = StringUtils.leftPad("...", (-1000));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("...", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "frY))T", (CharSequence[]) stringArray0);
      assertTrue(boolean0);
      assertEquals(4, stringArray0.length);
      
      String string3 = StringUtils.rightPad((String) null, (-1000), 'z');
      assertNull(string3);
      
      String string4 = StringUtils.substringAfterLast("%(%XL@0", 14);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceFirst("|kxn)<n-,bzA", "tils", "");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("|kxn)<n-,bzA", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.join((Object[]) stringArray0, '2', 14, (-1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("U3MtO");
      assertEquals("U3MtO", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "U3MtO", "U3MtO");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "U3MtO";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int[] intArray0 = new int[0];
      String string1 = StringUtils.join(intArray0, 'v');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string2 = StringUtils.repeat('v', 1829);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) string2, 1829);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.defaultIfEmpty("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int1 = StringUtils.length("U3MtO");
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      
      boolean boolean2 = StringUtils.isEmpty(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.SPACE;
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) " ", 1080);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.stripStart("<ACvJ%", "Minimum abbreviation width with offset is %d");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("<ACvJ%", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.remove("", '/');
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean3 = StringUtils.containsAnyIgnoreCase(string3, charSequenceArray0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string6));
      assertFalse(boolean3);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean4 = StringUtils.containsOnly((CharSequence) "<ACvJ%", "");
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Array Aelement ", "U3MtO", 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int3 = StringUtils.lastIndexOfAny(charSequenceArray0[0], stringArray0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      assertEquals(1, stringArray0.length);
      assertEquals(1, charSequenceArray0.length);
      
      String string7 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(int0));
      
      String string3 = StringUtils.removeEnd("", "");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replacePattern("JT", "", "");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("JT", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("");
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray1, stringArray0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.stripEnd("JT", (String) null);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("JT", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.unwrap(" ", 'Q');
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals(" ", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.repeat("4g.~jDBN-p9;%pR@{", "", 2811);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("23h=D:`I;ng$Q*");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string8 = StringUtils.substringBetween("e52{dcr-hH{I`Tp0>u", (String) null);
      assertNull(string8);
      
      String string9 = StringUtils.normalizeSpace("9M sM(B{");
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertEquals("9M sM(B{", string9);
      assertNotNull(string9);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string10 = StringUtils.getIfEmpty("|5l8G$Ci (X~; knqiqev&Un1#hSI7@F", supplier0);
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertEquals("|5l8G$Ci (X~; knqiqev&Un1#hSI7@F", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.lowerCase("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.removeStartIgnoreCase("", ")A{E/{R<JNWu?9WGbW]Ud2;YGa");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.swapCase("PX=BS'M");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("px=bs'm", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("The character ");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      String string0 = StringUtils.removeEndIgnoreCase("The character ", "The character ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trim("!thH>3!3`'M");
      assertFalse(string1.equals((Object)string0));
      assertEquals("!thH>3!3`'M", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(5, stringArray0.length);
      
      String string2 = StringUtils.removeStart("QmnES(ed4YG1|>SDw#", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("QmnES(ed4YG1|>SDw#", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "-";
      stringArray1[1] = "Minimum abbreviation width with offset is %d";
      stringArray1[2] = "";
      stringArray1[3] = "!thH>3!3`'M";
      stringArray1[4] = "!thH>3!3`'M";
      stringArray1[5] = "QmnES(ed4YG1|>SDw#";
      String string3 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", (-62));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.chomp("p{InCombiningDiacriticalMarks}+");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.trim("-");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "-";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.chomp("-");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("-", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootLowerCase("");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "z*Ovtb8CpL-zI+vL@V", (CharSequence) "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "z*Ovtb8CpL-zI+vL@V", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '?';
      charArray0[1] = 'd';
      charArray0[2] = 'u';
      charArray0[3] = ',';
      String string4 = StringUtils.valueOf(charArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("?du,", string4);
      assertNotNull(string4);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'?', 'd', 'u', ','}, charArray0);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", (String) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string5 = StringUtils.unwrap("-", '?');
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("-", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = '>';
      String string0 = StringUtils.join(charArray0, '>');
      assertEquals(">>>", string0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'>', '>'}, charArray0);
      
      String string1 = StringUtils.unwrap("i", 'K');
      assertFalse(string1.equals((Object)string0));
      assertEquals("i", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "Qe8b6zcN<X<jpxOg<{";
      charSequenceArray0[2] = (CharSequence) ">>>";
      charSequenceArray0[3] = (CharSequence) "i";
      charSequenceArray0[4] = (CharSequence) "i";
      charSequenceArray0[5] = (CharSequence) ">>>";
      int int0 = StringUtils.lastIndexOfAny("i", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "M#21T4mQ[?Bofw[/m3";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string0 = StringUtils.substringAfterLast("M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("(f9VckoyN.~J<'>^", 12);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(f9VckoyN...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("(f9VckoyN...", 12, 'q');
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("(f9VckoyN...", string2);
      assertNotNull(string2);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'q';
      intArray0[1] = (int) 'q';
      intArray0[2] = (int) 'q';
      intArray0[3] = (int) 'q';
      intArray0[4] = (int) 'q';
      intArray0[5] = 1;
      intArray0[6] = (int) 'q';
      String string3 = StringUtils.join(intArray0, 'q');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("113q113q113q113q113q1q113", string3);
      assertNotNull(string3);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {113, 113, 113, 113, 113, 1, 113}, intArray0);
      
      int int0 = StringUtils.compare("", "(f9VckoyN.~J<'>^", true);
      assertEquals((-16), int0);
      
      String string4 = StringUtils.overlay("M#21T4mQ[?Bofw[/m3", (String) null, 12, 12);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("M#21T4mQ[?Bofw[/m3", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("M#21T4mQ[?Bofw[/m3", 113, (String) null);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("M#21T4mQ[?Bofw[/m3                                                                                               ", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      hashSet0.forEach(consumer0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      String string1 = StringUtils.join((Iterable<?>) hashSet0, 'L');
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains('L'));
      
      String string2 = StringUtils.replaceChars((String) null, 'L', 's');
      assertNull(string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, 91);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringAfterLast("AL", (-1));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (-1726.0);
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 3796.562625277;
      doubleArray0[4] = 2987.1383020271246;
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("e52{dcr-hH{I`Tp0>uM", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Comparator should not be null.", (String) null, (-1840700267));
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("", "Comparator should not be null.", false);
      assertEquals((-30), int0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("Comparator should not be null.");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphaSpace((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = StringUtils.trim("HURV4riOn3#xu5W;]o");
      assertEquals("HURV4riOn3#xu5W;]o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("HURV4riOn3#xu5W;]o", "HURV4riOn3#xu5W;]o");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("HURV4riOn3#xu5W;]o"));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("HURV4riOn3#xu5W;]o"));
      
      String string2 = StringUtils.join(iterator0, 'E');
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains('E'));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      charArray0[3] = 'E';
      charArray0[4] = 'z';
      charArray0[5] = 'E';
      String string3 = StringUtils.valueOf(charArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("EEEEzE", string3);
      assertNotNull(string3);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'E', 'E', 'E', 'E', 'z', 'E'}, charArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "HURV4riOn3#xu5W;]o", "");
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string4 = StringUtils.getIfBlank("", supplier0);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'E', 'E', 'E', 'E', 'z', 'E'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{}", "~IJ1'+p~Zt^U@H*Z");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("{}"));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("{}"));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      String string0 = StringUtils.rotate("~IJ1'+p~Zt^U@H*Z", (-946));
      assertEquals("J1'+p~Zt^U@H*Z~I", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "J1'+p~Zt^U@H*Z~I", charArray0);
      assertEquals(0, int0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'E', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string1 = StringUtils.wrap((String) null, "Q848$Cc:eb\"7}*0)");
      assertNull(string1);
      
      String string2 = StringUtils.repeat("#$\"BIu]y)kz}PE", "J1'+p~Zt^U@H*Z~I", 99);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.center("{}", 322);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("                                                                                                                                                                {}                                                                                                                                                                ", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.center("", (-1676));
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.chomp("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.rotate("Strings must not be null", (-1676));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("nullStrings must not be ", string2);
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "nullStrings must not be ";
      String string3 = StringUtils.chomp("N)}k8Oz\")c7");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("N)}k8Oz\")c7", string3);
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "N)}k8Oz\")c7";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "G9ULK-fZyNJZn");
      assertEquals("G9ULK-fZyNJZn", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("G9ULK-fZyNJZn", "G9ULK-fZyNJZn");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("23h=D:`I;ng$Q*", 'Q');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("23h=D:`I;ng$Q*", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("?cOe vQZ)>sjJW", "G9ULK-fZyNJZn", 100);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("G9ULK-fZyNJZn");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.substringBetween("e52{dcr-hH{I`Tp0>u", "Exception cloning Cloneable type ");
      assertNull(string4);
      
      String string5 = StringUtils.normalizeSpace(" ");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = "\\u";
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string7 = StringUtils.getIfEmpty(string6, supplier0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals("\\u", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.substringBetween("e52{dcr-hH{I`Tp0>u", "Exception cloning Cloneable type ");
      assertNull(string0);
      
      String string1 = StringUtils.normalizeSpace(" ");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "\\u";
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfEmpty(string2, supplier0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\\u", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("...", ", '");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("...", "Supplied value must be a valid byte literal between -128 and 127: [", 78);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("Supplied value must be a valid byte literal between -128 and 127: [", ", '");
      assertEquals(0.45, double0, 0.01);
      
      String string2 = StringUtils.removeStart(string1, ";]R^g");
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("\n");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      double double1 = StringUtils.getJaroWinklerDistance(";]R^g", "\n");
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      String string3 = StringUtils.substringBetween("q|VZz'vydrimx", "qa=n'UCJt<:^u", "org.apache.commons.lang3.RegExUtils");
      assertNull(string3);
      
      String string4 = StringUtils.stripToEmpty(", '");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(", '", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("`GF", 78, '%');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%`GF", string5);
      assertNotNull(string5);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'q';
      int int0 = StringUtils.compareIgnoreCase("]", (String) null, false);
      assertEquals((-1), int0);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) stringArray0);
      assertNull(charSequence0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase(string2);
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsAny("\n", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string1 = StringUtils.center("org.apache.commons.lang3.StringUtils", (int) '\u0000', '\u0000');
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Org.apache.commons.lang3.StringUtils", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase("D|28u\"");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("D|28U\"", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, "\r");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\r", string4);
      assertNotNull(string4);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      
      Locale locale1 = Locale.ITALY;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("IT", locale1.getCountry());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it_IT", locale1.toString());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      
      String string5 = locale0.getDisplayLanguage(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("giapponese", string5);
      assertNotNull(string5);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it_IT", locale1.toString());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      
      String[] stringArray2 = Locale.getISOCountries();
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertEquals(250, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      int int1 = StringUtils.compareIgnoreCase("_?'X5W)Qh", (String) null, false);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("\r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("z*Ovtb8CpL-zI+vL@V", 1461);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L@Vz*Ovtb8CpL-zI+v", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.right("DZg~iec8D", 0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringBetween("3*0aE/^;$", "z*Ovtb8CpL-zI+vL@V");
      assertNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 2345, 1461);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.truncate("|5l8G$Ci (X~; knqiqev&Un1#hSI7@F", 24);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("|5l8G$Ci (X~; knqiqev&Un", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStart("", "%wj#j)>");
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.join((Object[]) charSequenceArray0, (String) null);
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      assertEquals(2, charSequenceArray0.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string7 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertEquals("", string7);
      assertNotNull(string7);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(int0));
      
      String string3 = StringUtils.removeEnd("", "");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("", 0, 0);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.lowerCase("");
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray2);
      assertEquals(0, stringArray2.length);
      assertSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      
      String string6 = StringUtils.toRootLowerCase("");
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.truncate("", 0);
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.truncate("ugHLteB =btzi{VD;40(9", 0, 0);
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string1));
      assertEquals("", string8);
      assertNotNull(string8);
      
      boolean boolean3 = StringUtils.isNumericSpace("");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.chomp(" ");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) " ";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = StringUtils.truncate("", 65, 1248);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", 1248);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string3 = StringUtils.trim("");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, charSequenceArray0.length);
      
      StringWriter stringWriter0 = new StringWriter(15);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "-", (CharSequence) "");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      String string4 = StringUtils.leftPad("", 0, (String) null);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((long[]) null, 'e', 4, (-741));
      assertNull(string5);
      
      String string6 = StringUtils.defaultIfBlank((String) null, "");
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      String string0 = StringUtils.capitalize("ev&9n1#hSI7@F");
      assertEquals("Ev&9n1#hSI7@F", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000\u0000C\u0000", string1);
      assertNotNull(string1);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'C', '\u0000'}, charArray0);
      
      String string2 = StringUtils.chomp("\u0000\u0000C\u0000");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\u0000\u0000C\u0000", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\u0000\u0000C\u0000", charArray0);
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'C', '\u0000'}, charArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("\u0000\u0000C\u0000");
      assertNotNull(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 67, 0}, intArray0);
      
      String string3 = StringUtils.strip("\u0000\u0000C\u0000", "\u0000\u0000C\u0000");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "\u0000\u0000C\u0000", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = StringUtils.truncate("", 65, 1248);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "vx~dK&,pOlzP&");
      assertNull(string1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-4364);
      intArray0[1] = 65;
      intArray0[2] = 1544;
      intArray0[3] = 65;
      intArray0[4] = 1248;
      intArray0[5] = 5;
      intArray0[6] = (int) 'e';
      String string2 = StringUtils.join(intArray0, '[', 1248, 5);
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-4364), 65, 1544, 65, 1248, 5, 101}, intArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      String string3 = StringUtils.deleteWhitespace((String) null);
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "", "j'IV");
      assertNull(stringArray0);
      
      String string4 = StringUtils.LF;
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\n", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.trim("-");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "-";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.chomp("-");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("-", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.mid("Minimum abbreviation width with offset is %d", 0, 1311);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Minimum abbreviation width with offset is %d", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "-", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(2, charSequenceArray0.length);
      
      String string4 = StringUtils.stripToNull("y@d-u3;e5GzWz$P7");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat("", "Minimum abbreviation width with offset is %d", 32);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isNotEmpty("Minimum abbreviation width with offset is %d");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("w:SUVcIQR1", "y@d-u3;e5GzWz$P7");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(32));
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(""));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, 'R', 32, 2576);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 2576
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = StringUtils.chop("aaUdouKB3'p7Z>JX");
      assertEquals("aaUdouKB3'p7Z>J", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("aaUdouKB3'p7Z>J");
      assertFalse(string1.equals((Object)string0));
      assertEquals("AaUdouKB3'p7Z>J", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToEmpty("AaUdouKB3'p7Z>J");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("AaUdouKB3'p7Z>J", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultIfEmpty("W9($*oqj", "AaUdouKB3'p7Z>J");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("W9($*oqj", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.getDigits(";}V:r@");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "W9($*oqj", "#");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string5 = StringUtils.repeat('<', 76);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.wrap("W9($*oqj", '.');
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals(".W9($*oqj.", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.leftPad("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", 32, ".W9($*oqj.");
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertEquals("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.leftPad("null/empty items", 7, "AaUdouKB3'p7Z>J");
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertEquals("null/empty items", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = StringUtils.leftPad("Mz(dz_k\fwb7", 13, "Mz(dz_k\fwb7");
      assertEquals("MzMz(dz_k\fwb7", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "MMz(dz_k\fwb7", 159);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Cloneable type ", "MMz(dz_k\fwb7");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("MMz(dz_k\fwb7");
      assertNotNull(intArray0);
      assertEquals(12, intArray0.length);
      
      String string1 = StringUtils.swapCase("]");
      assertFalse(string1.equals((Object)string0));
      assertEquals("]", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("e52{dcr-hH{I`Tp0>u", 1611, 13);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("]", (-1142));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("Comparator should not be null.", "MMz(dz_k\fwb7", stringArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("MMz(dz_k\fwb7Comparator should not be null.", string4);
      assertNotNull(string4);
      assertEquals(1, stringArray0.length);
      
      String string5 = StringUtils.stripToEmpty("MMz(dz_k\fwb7");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("MMz(dz_k\fwb7", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.length("]");
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte) (-55);
      String string6 = StringUtils.join(byteArray0, 'F');
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("-113F48F122F59F-1F50F-55", string6);
      assertNotNull(string6);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-113), (byte)48, (byte)122, (byte)59, (byte) (-1), (byte)50, (byte) (-55)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "e52{dcr-hH{I`Tp0>u";
      objectArray0[2] = (Object) "e52{dcr-hH{I`Tp0>u";
      objectArray0[3] = (Object) "e52{dcr-hH{I`Tp0>u";
      objectArray0[4] = (Object) "e52{dcr-hH{I`Tp0>u";
      objectArray0[5] = (Object) "e52{dcr-hH{I`Tp0>u";
      objectArray0[6] = (Object) "e52{dcr-hH{I`Tp0>u";
      objectArray0[7] = (Object) "e52{dcr-hH{I`Tp0>u";
      objectArray0[8] = (Object) "e52{dcr-hH{I`Tp0>u";
      String string0 = StringUtils.joinWith("e52{dcr-hH{I`Tp0>u", objectArray0);
      assertNotNull(string0);
      assertEquals(9, objectArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("e52{dcr-hH{I`Tp0>u", "829j}_4=&O", (-4373));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)53;
      String string1 = StringUtils.join(shortArray0, 's');
      assertFalse(string1.equals((Object)string0));
      assertEquals("53", string1);
      assertNotNull(string1);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)53}, shortArray0);
      
      String string2 = StringUtils.abbreviateMiddle((String) null, (String) null, (short)53);
      assertNull(string2);
      
      String string3 = StringUtils.uncapitalize((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.center("53", (-1656), "maxWith cannot be negative");
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("53", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate("'YwtkewYT<}UOc&o", "", (-256), (int) (short) (-1236));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("'YwtkewYT<}UOc&o", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.substringBetween("'", "'");
      assertNull(string0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.strip((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Integer integer0 = new Integer(1646);
      assertEquals(1646, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = vector0.add(integer0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("[1646]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(integer0));
      
      ListIterator<Integer> listIterator0 = vector0.listIterator();
      assertNotNull(listIterator0);
      assertEquals("[1646]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(vector0.contains(integer0));
      
      String string2 = StringUtils.join((List<?>) vector0, "^>E7JFqP,:", 1646, (-455));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals("[1646]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(integer0));
      assertFalse(vector0.contains((-455)));
      
      String string3 = StringUtils.truncate((String) null, 1188);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      
      Locale locale1 = Locale.ROOT;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      
      String string0 = locale1.getDisplayName(locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      
      String string1 = locale1.getDisplayLanguage();
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string2 = locale0.getDisplayVariant(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      
      Locale locale2 = Locale.forLanguageTag("oQ4[#m;6<%Fm8i5=|+");
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getLanguage());
      
      String[] stringArray1 = Locale.getISOCountries();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(250, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.SPACE;
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.startsWithAny(" ", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean0);
      assertEquals(250, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 17L;
      longArray0[1] = (long) '9';
      longArray0[2] = (long) '9';
      longArray0[3] = (long) '9';
      longArray0[4] = (long) '9';
      String string4 = StringUtils.deleteWhitespace("");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray2 = StringUtils.substringsBetween(", Length: 0", ", Length: 0", "CF=A{ FJ>a2H$Sc");
      assertNull(stringArray2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "z3(1qx_");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("|5l8G$Ci (X~; knqiq", "N)}k8Oz\")c7");
      assertEquals("|5l8G$Ci (X~; knqiq", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("ev&Un1#hSI7@F");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("ev&Un1#hSI7@F");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)53;
      String string1 = StringUtils.strip("N)}k8Oz\")c7");
      assertFalse(string1.equals((Object)string0));
      assertEquals("N)}k8Oz\")c7", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("|5l8G$Ci (X~; knqiq", "ev&Un1#hSI7@F", (byte) (-9));
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.endsWith("|5l8G$Ci (X~; knqiq", "N)}k8Oz\")c7");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("N)}k8Oz\")c7", "Array element ", "|5l8G$Ci (X~; knqiq");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("N)}k8Oz\")c7", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'v';
      charArray0[1] = 'x';
      charArray0[2] = 'v';
      charArray0[3] = 'v';
      charArray0[4] = 'v';
      charArray0[5] = 'v';
      boolean boolean2 = StringUtils.containsAny((CharSequence) "|5l8G$Ci (X~; knqiq", charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'v', 'x', 'v', 'v', 'v', 'v'}, charArray0);
      
      String string3 = StringUtils.replaceAll("]i7t(3-{'Ho", "on width is %d", "I:FU%\"L!OQNs");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("]i7t(3-{'Ho", string3);
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.isAlphanumericSpace("ev&Un1#hSI7@F");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string4 = StringUtils.deleteWhitespace("Array element ");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Arrayelement", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeEnd("|5l8G$Ci (X~; knqiq", "ev&Un1#hSI7@F");
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("|5l8G$Ci (X~; knqiq", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.stripEnd("N)}k8Oz\")c7", (String) null);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("N)}k8Oz\")c7", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "D;40(9";
      objectArray0[2] = (Object) "D;40(9";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "D;40(9";
      objectArray0[1] = (Object) "D;40(9";
      objectArray0[7] = (Object) "D;40(9";
      String string0 = StringUtils.joinWith("D;40(9", objectArray0);
      assertNotNull(string0);
      assertEquals(8, objectArray0.length);
      
      String string1 = StringUtils.right("t,b'*", 49);
      assertFalse(string1.equals((Object)string0));
      assertEquals("t,b'*", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      String string2 = StringUtils.join(longArray0, 'c', 370, 49);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "t,b'*", 16, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.repeat('c', (-1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllLowerCase("D;40(9");
      assertFalse(boolean0);
      
      String string4 = StringUtils.substringAfterLast("D;40(9", (-1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.mid("4<~#!&_qt+&Plcf@", 11, 16);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Plcf@", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isBlank("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("1r)uTX;VsRLtsE", 'L');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.center("maxWith cannot be negativeorg.apache.commons.lang3.RegExUtils", (-441), ',');
      assertEquals("maxWith cannot be negativeorg.apache.commons.lang3.RegExUtils", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.mid("1r)uTX;VsRLtsE", 1970, 11);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Locale.FilteringMode[]) null);
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny("maxWith cannot be negativeorg.apache.commons.lang3.RegExUtils", stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'i');
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'Y';
      doubleArray0[1] = (double) 'Y';
      doubleArray0[2] = (double) 'Y';
      String string1 = StringUtils.wrap("org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store Cannot store ", (String) null);
      assertEquals("org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store Cannot store ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store Cannot store ", (String) null, false);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringBefore("org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store Cannot store ", (String) null);
      assertTrue(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store Cannot store ", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = StringUtils.trim("HURV4riOn3#xu5W;]o");
      assertEquals("HURV4riOn3#xu5W;]o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      String string3 = StringUtils.stripStart("", "");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("k", 1203);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.center("", (-341), '3');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.mid("", 66, 11);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("HURV4riOn3#xu5W;]o");
      assertNotNull(stringArray0);
      assertEquals(13, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      String string0 = StringUtils.join(longArray0, '}');
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("0");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBetween("a}<p~1cW*L", "0");
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (-787), 8);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.substringBefore("a}<p~1cW*L", 5);
      assertFalse(string2.equals((Object)string0));
      assertEquals("a}<p~1cW*L", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull("0");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("0", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.CR;
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\r", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsWhitespace("\r");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(int0));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, '6', 5, 1258);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1258
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "null/empty items");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(arrayList0.contains("null/empty items"));
      
      String string1 = StringUtils.substringAfterLast("org.apache.commons.lang3.exception.CloneFailedException", 2384);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsWhitespace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[6];
      int int0 = StringUtils.countMatches((CharSequence) "b>7`T3l]AD^=\f", '9');
      assertEquals(0, int0);
      
      String string0 = StringUtils.chomp("mnbm%wia'k5J@TW");
      assertEquals("mnbm%wia'k5J@TW", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "mnbm%wia'k5J@TW", (CharSequence) "b>7`T3l]AD^=\f", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.mid("mnbm%wia'k5J@TW", (-1), (-4054));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.chop("!#p+XaS`");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("!#p+XaS", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center((String) null, 2711, "org.apache.commons.lang3.ObjectUtils");
      assertNull(string3);
      
      boolean boolean1 = StringUtils.equalsAny((CharSequence) null, stringArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(6, stringArray0.length);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("org.apache.commons.lang3.ObjectUtils"));
      
      String string4 = StringUtils.join((List<?>) linkedList0, '9', 8, (-4054));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("mnbm%wia'k5J@TW"));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("D;40(9", 117);
      assertFalse(string1.equals((Object)string0));
      assertEquals("                                                                                                               D;40(9", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((char[]) null, '_', 58, 1292);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.rightPad((String) null, (-721), '_');
      assertNull(string3);
      
      String string4 = StringUtils.substringAfterLast("z*Ovtb8CpL-zI+vL@V", (-123));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      short[] shortArray0 = new short[0];
      String string5 = StringUtils.join(shortArray0, '_');
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      String string6 = StringUtils.repeat('G', 117);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "N)}k8Oz\")c7");
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)67;
      String string7 = StringUtils.toString(byteArray0, (String) null);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals("C", string7);
      assertNotNull(string7);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)67}, byteArray0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("C");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string8 = StringUtils.replaceFirst("p;7n[-T/7{QO", (String) null, ":`aH9ID-");
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertEquals("p;7n[-T/7{QO", string8);
      assertNotNull(string8);
      
      boolean boolean2 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = StringUtils.removeAll("Qe8b6zcN<X<jpxOg<{", "...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Qe8b6zcN<X<jpxOg<{";
      String string1 = StringUtils.joinWith("Qe8b6zcN<X<jpxOg<{", objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, objectArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Qe8b6zcN<X<jpxOg<{", (-2378), (-2378));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringBefore("\r", "Qe8b6zcN<X<jpxOg<{");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\r", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited("Qe8b6zcN<X<jpxOg<{", 's');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Qe8b6zcN<X<jpxOg<{", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "\r");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "*oW^b&A=gns", (-190), 51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -190
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = StringUtils.removeAll("Qe8b6zcN<X<jpxOg<{", "...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Qe8b6zcN<X<jpxOg<{";
      String string1 = StringUtils.joinWith("Qe8b6zcN<X<jpxOg<{", objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, objectArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Qe8b6zcN<X<jpxOg<{", (-2378), (-2378));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringBefore("\r", "9Fbo,g");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\r", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited("Qe8b6zcN<X<jpxOg<{", 's');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Qe8b6zcN<X<jpxOg<{", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "\r");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "*oW^b&A=gns", (-190), 51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -190
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = StringUtils.removeAll("Qe8b6zcN<X<jpxOg<{", "...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("...");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("'YwtkewYT<}UOc&o", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.removeEnd("", "xY+YE(LO");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("", 13, "Comparator should not be null.");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ComparCompara", string2);
      assertNotNull(string2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)126;
      String string3 = StringUtils.join(shortArray0, '\\');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("126", string3);
      assertNotNull(string3);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)126}, shortArray0);
      
      String string4 = StringUtils.abbreviateMiddle("", "Qe8b6zcN<X<jpxOg<{", 16);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.uncapitalize("");
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center("iL=%LQ}&{F,", 16, "0V46o");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("0ViL=%LQ}&{F,0V4", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.abbreviate("ZS'q8\"tBx20)DB@+", "", (-1), 0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertEquals("ZS'q8\"tBx20)DB@+", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'i');
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'Y';
      doubleArray0[1] = (double) 'Y';
      doubleArray0[2] = (double) 'Y';
      doubleArray0[3] = (double) 'Y';
      doubleArray0[4] = (double) 'Y';
      doubleArray0[6] = (double) 'i';
      String string1 = StringUtils.join(doubleArray0, '%');
      assertEquals("89.0%89.0%89.0%89.0%89.0%0.0%105.0", string1);
      assertNotNull(string1);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {89.0, 89.0, 89.0, 89.0, 89.0, 0.0, 105.0}, doubleArray0, 0.01);
      
      String string2 = StringUtils.mid("org.apache.commons.lang3.Charsets", 12, 12);
      assertFalse(string2.equals((Object)string1));
      assertEquals("ommons.lang3", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("89.0%89.0%89.0%89.0%89.0%0.0%105.0", "K0b`\"N>*a7Re");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("89.0%89.0%89.0%89.0%89.0%0.0%105.0", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("...", ", '");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("...", "Supplied value must be a valid byte literal between -128 and 127: [", 78);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("Supplied value must be a valid byte literal between -128 and 127: [", ", '");
      assertEquals(0.45, double0, 0.01);
      
      String string2 = StringUtils.removeStart(string1, ";]R^g");
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("\n");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      double double1 = StringUtils.getJaroWinklerDistance(";]R^g", "\n");
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      String string3 = StringUtils.substringBetween("q|VZz'vydrimx", "qa=n'UCJt<:^u", "org.apache.commons.lang3.RegExUtils");
      assertNull(string3);
      
      String string4 = StringUtils.stripToEmpty(", '");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(", '", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("`GF", 78, '%');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%`GF", string5);
      assertNotNull(string5);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'q';
      floatArray0[1] = 3211.5469F;
      floatArray0[2] = (float) 76;
      floatArray0[3] = (float) 78;
      floatArray0[4] = (float) 'q';
      floatArray0[5] = (float) 78;
      floatArray0[6] = (-454.16254F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = (float) 'q';
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '%', (-4425), (-1537));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4425
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.abbreviate("'2Zq=}`{", "CF=A{ FJ>a2H$Sc", (-2025), 160);
      assertEquals("'2Zq=}`{", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("'2Zq=}`{");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2025);
      doubleArray0[1] = (double) (-2025);
      doubleArray0[2] = (double) (-2025);
      doubleArray0[3] = (double) 160;
      double double0 = StringUtils.getJaroWinklerDistance("'2Zq=}`{", "CF=A{ FJ>a2H$Sc");
      assertEquals(0.46, double0, 0.01);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("]", "A~c[|&3v-Pt9", (-2025), (-2025));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 13
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      charArray0[3] = 'a';
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      
      String string0 = locale0.getDisplayScript();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      
      String string1 = StringUtils.substringAfterLast("", (-640));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.truncate("", (int) '\u0000');
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle("", (String) null, 1);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string4 = StringUtils.wrap("", '8');
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "";
      char char0 = 'g';
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'g', (-739), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -739
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.trim("-");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.chomp("-");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("-", 0, "-");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("-", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllUpperCase("-");
      assertFalse(boolean0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "z*Ovtb8CpL-zI+vL@V", (CharSequence) "-", 6);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.wrap("-", 'L');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("L-L", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate("", "z*Ovtb8CpL-zI+vL@V", 6, 635);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'L';
      doubleArray0[1] = (double) 635;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'L', (-410), (-179));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -410
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = StringUtils.trim("HURV4riOn3#xu5W;]o");
      assertEquals("HURV4riOn3#xu5W;]o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("HURV4riOn3#xu5W;]o"));
      
      String string3 = StringUtils.stripStart("", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("k", 1203);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.overlay("", "", (-174), (-1285));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.stripToNull("HURV4riOn3#xu5W;]o");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("HURV4riOn3#xu5W;]o", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'i');
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.rightPad("Cannot store ", 2826, 'i');
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast((String) null, 2826);
      assertNull(string2);
      
      String string3 = StringUtils.join((short[]) null, 'i');
      assertNull(string3);
      
      String string4 = StringUtils.repeat('v', 4);
      assertFalse(string4.equals((Object)string1));
      assertEquals("vvvv", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.substringBetween("<+*Vaf\"in/ZHbE$)!o", "J((i:RDy<&{", "Cannot store ");
      assertNull(string5);
      
      String string6 = StringUtils.rotate("<};$,", 0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("<};$,", string6);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.containsWhitespace("J((i:RDy<&{");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "M#21T4mQ[?Bofw[/m3";
      objectArray0[1] = (Object) "t48|PI,fg";
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "t48|PI,fg";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "M#21T4mQ[?Bofw[/m3";
      String string0 = StringUtils.joinWith("t48|PI,fg", objectArray0);
      assertNotNull(string0);
      assertEquals(6, objectArray0.length);
      
      String string1 = StringUtils.getDigits("B99?1I<");
      assertFalse(string1.equals((Object)string0));
      assertEquals("991", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "t48|PI,fg", (CharSequence) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = 'g';
      charArray0[2] = '4';
      charArray0[3] = 'q';
      charArray0[4] = '2';
      charArray0[5] = '<';
      charArray0[6] = 'f';
      charArray0[7] = '[';
      int int1 = StringUtils.indexOfAny((CharSequence) "B99?1I<", charArray0);
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'l', 'g', '4', 'q', '2', '<', 'f', '['}, charArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("991");
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {57, 57, 49}, intArray0);
      
      String string2 = StringUtils.strip("jB[KeYf6uJ-d", "Hb\"3Rx`g>rjH+=pb");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("B[KeYf6uJ-d", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "991", (CharSequence) "B99?1I<");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.abbreviate("'2Zq=}`{", "CF=A{ FJ>a2H$Sc", (-2025), 160);
      assertEquals("'2Zq=}`{", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("'2Zq=}`{");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2025);
      doubleArray0[1] = (double) (-2025);
      doubleArray0[2] = (double) (-2025);
      doubleArray0[3] = (double) 160;
      doubleArray0[4] = (double) 160;
      doubleArray0[5] = (double) (-2025);
      doubleArray0[6] = (double) 160;
      doubleArray0[7] = (double) (-2025);
      String string1 = StringUtils.join(doubleArray0, 'g', 8192, (-739));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-2025.0), (-2025.0), (-2025.0), 160.0, 160.0, (-2025.0), 160.0, (-2025.0)}, doubleArray0, 0.01);
      
      int int0 = StringUtils.length("CF=A{ FJ>a2H$Sc");
      assertEquals(15, int0);
      
      String string2 = StringUtils.substringAfter("'2Zq=}`{", "'2Zq=}`{");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("", 8192);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.repeat("wO= {*", 2186);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) string0, (CharSequence) "wO= {*");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      
      Locale locale1 = Locale.forLanguageTag("");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      
      String string0 = locale1.getDisplayLanguage();
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string1 = locale0.getDisplayVariant(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      
      Locale locale2 = Locale.forLanguageTag("oQ4[#m;6<%Fm8i5=|+");
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getCountry());
      
      String[] stringArray1 = Locale.getISOCountries();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(250, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = locale0.getDisplayLanguage();
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Japanese", string2);
      assertNotNull(string2);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      
      String string3 = StringUtils.trim("z3(1qx_");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("z3(1qx_", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(0, int0);
      assertEquals(250, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      String string4 = StringUtils.chomp("@+}g;1<Gq+m~$Cd#");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("@+}g;1<Gq+m~$Cd#", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("@+}g;1<Gq+m~$Cd#", 49, "@+}g;1<Gq+m~$Cd#");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("@+}g;1<Gq+m~$Cd#@+}g;1<Gq+m~$Cd#@+}g;1<Gq+m~$Cd#@", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.endsWithAny("Japanese", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string6 = StringUtils.left((String) null, 49);
      assertNull(string6);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "@+}g;1<Gq+m~$Cd#", supplier0);
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string5));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string2));
      assertEquals("@+}g;1<Gq+m~$Cd#", charSequence0);
      assertNotNull(charSequence0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "@+}g;1<Gq+m~$Cd#", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(16, int1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      String string0 = locale0.getDisplayLanguage();
      assertEquals("Chinese", string0);
      assertNotNull(string0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      Locale locale1 = Locale.KOREAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.toString());
      
      String string1 = locale0.getDisplayVariant(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.toString());
      
      Locale locale2 = Locale.forLanguageTag("oQ4[#m;6<%Fm8i5=|+");
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getCountry());
      
      String[] stringArray1 = Locale.getISOCountries();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(250, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = locale2.getDisplayLanguage();
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getCountry());
      
      String string3 = StringUtils.trim((String) null);
      assertNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(0, int0);
      assertEquals(250, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      String string4 = StringUtils.chomp("oOEs;84");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("oOEs;84", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("org.apache.commons.lang3.RegExUtils", 256, "oQ4[#m;6<%Fm8i5=|+");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.RegExUtilsoQ4[#m;6<%Fm8i5=|+oQ4[#m;6<%Fm8i5=|+oQ4[#m;6<%Fm8i5=|+oQ4[#m;6<%Fm8i5=|+oQ4[#m;6<%Fm8i5=|+oQ4[#m;6<%Fm8i5=|+oQ4[#m;6<%Fm8i5=|+oQ4[#m;6<%Fm8i5=|+oQ4[#m;6<%Fm8i5=|+oQ4[#m;6<%Fm8i5=|+oQ4[#m;6<%Fm8i5=|+oQ4[#m;6<%Fm8i5=|+oQ4[#", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAllUpperCase("z3(1qx_");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "@+}g;1<Gq+m~$Cd#", (CharSequence) null, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      long[] longArray0 = new long[1];
      String string0 = StringUtils.join(longArray0, '}');
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBetween("a}<p~1cW*L", "0");
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringBefore("a}<p~1cW*L", 5);
      assertFalse(string2.equals((Object)string0));
      assertEquals("a}<p~1cW*L", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull("0");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("0", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.CR;
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("\r", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.SPACE;
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals(" ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.prependIfMissing("@y]R", "@y]R", (CharSequence[]) null);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("@y]R", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.wrapIfMissing(" ", "0");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertEquals("0 0", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.isAllLowerCase("a}<p~1cW*L");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string8 = StringUtils.SPACE;
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertEquals(" ", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.trimToNull((String) null);
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.substringBetween("X", "J|<=");
      assertNull(string0);
      
      String string1 = StringUtils.stripStart("J|<=", "Ca.m3<_U{_X");
      assertEquals("J|<=", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("org.apache.commons.lang3.StringUtils", "d^bR");
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.startsWith("J|<=", "org.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
      
      String string3 = StringUtils.unwrap("org.apache.commons.lang3.StringUtils", '$');
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "J|<=";
      charSequenceArray0[1] = (CharSequence) "Ca.m3<_U{_X";
      charSequenceArray0[2] = (CharSequence) "J|<=";
      int int0 = StringUtils.lastIndexOfAny("}UO", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(3, charSequenceArray0.length);
      
      String string4 = StringUtils.replaceEachRepeatedly("X", (String[]) null, (String[]) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("X", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((int[]) null, '$', (-1), (-1));
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[1] = '\u0000';
      charArray0[3] = 'a';
      String string0 = StringUtils.join(charArray0, '\u0000', (-1232), (-1232));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(13, charArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "Array element ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(13, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      String string1 = StringUtils.join(booleanArray0, '\u0000');
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'a';
      doubleArray0[1] = (double) 'C';
      String string2 = StringUtils.join(doubleArray0, 'a');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("97.0a67.0", string2);
      assertNotNull(string2);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {97.0, 67.0}, doubleArray0, 0.01);
      
      String string3 = StringUtils.abbreviate("", "Array element ", (-111));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "G9ULK-fZyNJZn");
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.split("G9ULK-fZyNJZn", " ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(int0));
      
      String string3 = StringUtils.stripEnd("D;40(9ugHLteB =btzi{V", "ugHLteB =btzi{VD;40(9");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBefore("", (-1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "offset cannot be negative", (CharSequence) "D;40(9ugHLteB =btzi{V");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray2 = StringUtils.split("I8hEtMm3%#asjH%9Q", "");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      String string5 = StringUtils.removeEnd("offset cannot be negative", "G9ULK-fZyNJZn");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("offset cannot be negative", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("G9ULK-fZyNJZn", string6);
      assertNotNull(string6);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string7 = StringUtils.lowerCase("U/BfYgWE=U");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertEquals("u/bfygwe=u", string7);
      assertNotNull(string7);
      
      String[] stringArray3 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotNull(stringArray3);
      assertEquals(1, stringArray3.length);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray3);
      assertNotSame(stringArray0, stringArray1);
      
      String string8 = StringUtils.removeEnd("I8hEtMm3%#asjH%9Q", (String) null);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertEquals("I8hEtMm3%#asjH%9Q", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.substringBetween("%", " A1cx!FY)/<m1RhA", "Op");
      assertNull(string9);
      
      String string10 = StringUtils.substringBetween("G9ULK-fZyNJZn", "I8hEtMm3%#asjH%9Q", "yk6XOnm*B");
      assertNull(string10);
      
      String string11 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray3));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string3));
      assertEquals(" ", string11);
      assertNotNull(string11);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray3);
      assertNotSame(stringArray0, stringArray1);
      
      int int2 = StringUtils.indexOf((CharSequence) " ", (CharSequence) "D;40(9ugHLteB =btzi{V", (-381));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string12 = StringUtils.join((Iterator<?>) null, '%');
      assertNull(string12);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = ", Length: ";
      String string1 = StringUtils.rotate(", Length: ", (-254));
      assertFalse(string1.equals((Object)string0));
      assertEquals("ngth: , Le", string1);
      assertNotNull(string1);
      
      int int0 = 64;
      String string2 = StringUtils.truncate(", Length: ", 64, 64);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) ", Length: ", (CharSequence) "");
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) ", Length: ", (CharSequence) "ngth: , Le");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.substringAfterLast("", (-254));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2267;
      intArray0[1] = (-254);
      intArray0[2] = (-1);
      intArray0[3] = (-254);
      intArray0[4] = (-254);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '>', (-1), 2685);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.abbreviate("'2Zq=}`{", "...", (-2025), 160);
      assertEquals("'2Zq=}`{", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("'2Zq=}`{");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2025);
      doubleArray0[1] = (double) (-2025);
      doubleArray0[2] = (double) (-2025);
      doubleArray0[3] = (double) 160;
      doubleArray0[4] = (double) 160;
      doubleArray0[5] = (double) (-2025);
      doubleArray0[6] = (double) 160;
      doubleArray0[7] = (double) (-2025);
      String string1 = StringUtils.join(doubleArray0, 'g', 8192, (-758));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-2025.0), (-2025.0), (-2025.0), 160.0, 160.0, (-2025.0), 160.0, (-2025.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      String string0 = StringUtils.join((List<?>) stack0, "-|&", 2415, 2415);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(2415));
      
      String string1 = StringUtils.getDigits("-|&");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("Minimum abbreviation width is %d", "ev&Un1#hSI7@F");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Minimum abbreviation width is %d", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("-|&", 64);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart("ev&Un1#hSI7@F", "ev&Un1#hSI7@F");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.lowerCase("Array element ");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("array element ", string5);
      assertNotNull(string5);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "-|&";
      String string6 = StringUtils.rightPad("", (-379));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string6));
      
      // Undeclared exception!
      try { 
        linkedList0.listIterator(18);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "G9ULK-fZyNJZn", charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("U/BfYgWE=U", "U/BfYgWE=U", 109);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.join(charArray0, '7');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string2 = StringUtils.stripAccents("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-1917));
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("ev&9n1#hSI7@F");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.stripEnd("7fn-o5<3JZp%Yi>", "maxWith cannot be negative");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("7fn-o5<3JZp%Yi>", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      
      Locale locale1 = Locale.forLanguageTag("");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      
      Locale locale2 = locale0.stripExtensions();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertNotSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja_JP", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("JP", locale2.getCountry());
      
      String string0 = locale1.getDisplayLanguage(locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("", "", false);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "clone";
      int int0 = StringUtils.compareIgnoreCase(" ", " ", true);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("clone");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace(" ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.repeat("", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.overlay("#UL$!m`orj%#|U&)L9b", "7\"-.'c1$V", (-5092), (-5092));
      assertEquals("7\"-.'c1$V#UL$!m`orj%#|U&)L9b", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("7\"-.'c1$V#UL$!m`orj%#|U&)L9b", 256);
      assertTrue(string1.equals((Object)string0));
      assertEquals("7\"-.'c1$V#UL$!m`orj%#|U&)L9b", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split((String) null, 'W');
      assertNull(stringArray0);
      
      String string2 = StringUtils.trimToEmpty("7\"-.'c1$V#UL$!m`orj%#|U&)L9b");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("7\"-.'c1$V#UL$!m`orj%#|U&)L9b", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("7\"-.'c1$V#UL$!m`orj%#|U&)L9b");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("7\"-.'c1$V#UL$!m`orj%#|U&)L9b", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("#UL$!m`orj%#|U&)L9b", "7\"-.'c1$V#UL$!m`orj%#|U&)L9b");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("#UL$!m`orj%#|U&)L9b", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("}UO", "7\"-.'c1$V#UL$!m`orj%#|U&)L9b");
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      
      String string5 = StringUtils.prependIfMissing("Hi.BJ$#", "7\"-.'c1$V#UL$!m`orj%#|U&)L9b", stringArray1);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("7\"-.'c1$V#UL$!m`orj%#|U&)L9bHi.BJ$#", string5);
      assertNotNull(string5);
      assertEquals(2, stringArray1.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 256);
      assertEquals((-1), int0);
      
      Supplier<CharBuffer> supplier0 = (Supplier<CharBuffer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharBuffer charBuffer0 = StringUtils.getIfEmpty((CharBuffer) null, supplier0);
      assertNull(charBuffer0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(2, stringArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = ')';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "7\"-.'c1$V#UL$!m`orj%#|U&)L9b", charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'W', ')'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "ULK-fZyN3Zo", 800);
      assertNull(stringArray0);
      
      String string0 = StringUtils.replaceIgnoreCase((String) null, (String) null, "on width is %d");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("on width is %d", "ULK-fZyN3Zo", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.removeAll("Qe8b6zcN<X<jpxOg<{", "...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("...");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("'YwtkewYT<}UOc&o", "'YwtkewYT<}UOc&o", (-1));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.substringBetween("...", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("}U");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("}U", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isNumericSpace("Qe8b6zcN<X<jpxOg<{");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.abbreviate("[58/m^>c.>2)", "'2Zq=}`{", (-3305), 1646);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("[58/m^>c.>2)", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrap("", "'2Zq=}`{");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string5 = StringUtils.chomp("i)8({(E", "");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("i)8({(E", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.containsIgnoreCase((CharSequence) null, "...");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray1 = StringUtils.split("<i:", "Bl9>>K+tX)y");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object2));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object5));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object6));
      assertNotNull(object7);
      
      objectArray0[7] = object7;
      Object object8 = new Object();
      assertFalse(object8.equals((Object)object5));
      assertFalse(object8.equals((Object)object3));
      assertFalse(object8.equals((Object)object6));
      assertFalse(object8.equals((Object)object2));
      assertFalse(object8.equals((Object)object0));
      assertFalse(object8.equals((Object)object7));
      assertFalse(object8.equals((Object)object4));
      assertFalse(object8.equals((Object)object1));
      assertNotNull(object8);
      
      objectArray0[8] = object8;
      String string0 = StringUtils.join(objectArray0, (String) null, 10, 10);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(9, objectArray0.length);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", (CharSequence) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2263.64F);
      floatArray0[1] = (float) 10;
      floatArray0[2] = (float) 10;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 10;
      floatArray0[5] = (float) 10;
      String string1 = StringUtils.join(floatArray0, '-');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-2263.64-10.0-10.0-0.0-10.0-10.0", string1);
      assertNotNull(string1);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-2263.64F), 10.0F, 10.0F, 0.0F, 10.0F, 10.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.trim("-");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "-";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.chomp("-");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("-", 0, "-");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("-", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllUpperCase("-");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("z*Ovtb8CpL-zI+vL@V", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[0], charSequenceArray0[0]);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(2, charSequenceArray0.length);
      
      String string4 = StringUtils.swapCase("}4UAwb1WUt");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("}4uaWB1wuT", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.substringBetween("'", "'");
      assertNull(string0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.strip((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.abbreviate((String) null, "Arguments cannot both be null", 1646, 1646);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "'", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.chomp("'", "2Zq=}`{");
      assertEquals("'", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("'", "'");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split((String) null, "Locale must not be nullcomparator");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("U3MtO");
      assertEquals("U3MtO", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "U3MtO", "U3MtO");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "U3MtO";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int[] intArray0 = new int[0];
      String string1 = StringUtils.join(intArray0, 'v');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string2 = StringUtils.repeat('v', 1829);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) string2, 1829);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.defaultIfEmpty("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int1 = StringUtils.length("U3MtO");
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      
      boolean boolean2 = StringUtils.isEmpty(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.SPACE;
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) " ", 1080);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.stripStart("<ACvJ%", "Minimum abbreviation width with offset is %d");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("<ACvJ%", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.remove("", '/');
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean3 = StringUtils.containsAnyIgnoreCase(string3, charSequenceArray0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(boolean3);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean4 = StringUtils.containsOnly((CharSequence) "<ACvJ%", "");
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Array Aelement ", "U3MtO", 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string7 = StringUtils.replaceOnce("<ACvJ%", "Minimum abbreviation width with offset is %d", "Array Aelement ");
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertEquals("<ACvJ%", string7);
      assertNotNull(string7);
      
      Vector<Locale> vector0 = new Vector<Locale>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>(vector0);
      assertNotNull(linkedList0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      Locale locale0 = new Locale("U3MtO", "Array Aelement ");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("u3mto", locale0.getLanguage());
      assertEquals("ARRAY AELEMENT ", locale0.getCountry());
      assertEquals("u3mto_ARRAY AELEMENT ", locale0.toString());
      
      boolean boolean5 = vector0.add(locale0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[u3mto_ARRAY AELEMENT ]", vector0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("u3mto", locale0.getLanguage());
      assertEquals("ARRAY AELEMENT ", locale0.getCountry());
      assertEquals("u3mto_ARRAY AELEMENT ", locale0.toString());
      assertTrue(vector0.contains(locale0));
      
      String string8 = StringUtils.join((Iterable<?>) linkedList0, '^');
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string6));
      assertEquals("", string8);
      assertNotNull(string8);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[u3mto_ARRAY AELEMENT ]", vector0.toString());
      assertEquals(0, linkedList0.size());
      assertTrue(vector0.contains(locale0));
      assertFalse(linkedList0.contains(locale0));
      
      String string9 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertEquals("Array Aelement ", string9);
      assertNotNull(string9);
      assertEquals(1, stringArray0.length);
      
      boolean boolean6 = StringUtils.isBlank(" ");
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6);
      
      String string10 = StringUtils.repeat(string3, 122);
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string9));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", "NWu?9WGbW]Ud2;YGa");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.removeEnd("", "NWu?9WGbW]Ud2;YGa");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center((String) null, 13, "NWu?9WGbW]Ud2;YGa");
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Comparator should not be null.", "org.apache.", 100, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 23
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '<');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      String string1 = StringUtils.removeEnd("g(.D}E_6yNLEnY2", "6'rF'.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("g(.D}E_6yNLEnY2", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("g(.D}E_6yNLEnY2", (-1));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("g(.D}E_6yNLEnY2", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("", 14, '<');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("<<<<<<<<<<<<<<", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast(";Bi@M#<5GKx", 53);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("GKx", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.normalizeSpace("<<<<<<<<<<<<<<");
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("<<<<<<<<<<<<<<", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '<');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      String string1 = StringUtils.removeEnd("g(.d}E_6yNLEY2", "maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("g(.d}E_6yNLEY2", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("g(.d}E_6yNLEY2", (-1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("g(.d}E_6yNLEY2", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.rightPad("", 14, '<');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("<<<<<<<<<<<<<<", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast(";Bi@M#<5GKx", 53);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("GKx", string4);
      assertNotNull(string4);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3110;
      shortArray0[1] = (short)13;
      String string5 = StringUtils.join(shortArray0, '<');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("3110<13", string5);
      assertNotNull(string5);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)3110, (short)13}, shortArray0);
      
      String string6 = StringUtils.repeat('y', 2840);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      int int0 = StringUtils.compareIgnoreCase("p;7n[-T/7{QO", "3110<13");
      assertEquals(61, int0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("p;7n[-T/7{QO");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.substringBetween("5r/", "", " ");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.stripEnd("RBxwJ]l5\"#", "RBxwJ]l5\"#");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "RBxwJ]l5\"#";
      charSequenceArray0[1] = (CharSequence) "RBxwJ]l5\"#";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean1 = StringUtils.equalsAny("RBxwJ]l5\"#", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(";}Bl9>>K+tX)y", ";}Bl9>>K+tX)y");
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
      
      String string0 = StringUtils.stripStart("!QL^A2C,{vwJkpP", "6bYc7N\"Xt{@");
      assertEquals("!QL^A2C,{vwJkpP", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("org.apache.commons.lang3.StringUtils", ";}Bl9>>K+tX)y", "6bYc7N\"Xt{@");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsAny("org.apache.commons.lang3.StringUtils", stringArray0);
      assertFalse(boolean0);
      assertEquals(14, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "HURV4riOn3#xu5W;]o", '\"');
      assertEquals(0, int0);
      
      String string0 = StringUtils.chomp("HURV4riOn3#xu5W;]o");
      assertEquals("HURV4riOn3#xu5W;]o", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "HURV4riOn3#xu5W;]o", (CharSequence) "HURV4riOn3#xu5W;]o", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.isAlpha("HURV4riOn3#xu5W;]o");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "HURV4riOn3#xu5W;]o";
      String string1 = StringUtils.chop("HURV4riOn3#xu5W;]o");
      assertFalse(string1.equals((Object)string0));
      assertEquals("HURV4riOn3#xu5W;]", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "HURV4riOn3#xu5W;]";
      charSequenceArray0[2] = (CharSequence) "HURV4riOn3#xu5W;]o";
      charSequenceArray0[3] = (CharSequence) "HURV4riOn3#xu5W;]o";
      boolean boolean1 = StringUtils.equalsAny("HURV4riOn3#xu5W;]o", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.trim(" ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(charSequenceArray0[0], charSequenceArray0[1]);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = '+';
      charArray0[2] = '`';
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("v+`", string1);
      assertNotNull(string1);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'v', '+', '`'}, charArray0);
      
      String string2 = StringUtils.chomp(" ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[0], (CharSequence) null, 27);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(2, charSequenceArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) '+';
      floatArray0[4] = (float) 'v';
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 'v';
      floatArray0[7] = (float) '+';
      floatArray0[8] = (float) '+';
      String string3 = StringUtils.join(floatArray0, 'l', 0, 8);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("0.0l-1.0l1.0l43.0l118.0l0.0l118.0l43.0", string3);
      assertNotNull(string3);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 1.0F, 43.0F, 118.0F, 0.0F, 118.0F, 43.0F, 43.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.trim("-");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "-";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.chomp("-");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("-", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("", "z*Ovtb8CpL-zI+vL@V");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(int0));
      
      String string3 = StringUtils.removeEnd((String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.substringBeforeLast("org.apache.commons.lang3.LocaleUtils", "Bl9>>K+tX)y");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.LocaleUtils", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.ordinalIndexOf("BkLYN", "org.apache.commons.lang3.LocaleUtils", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = 17L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      String string5 = StringUtils.join(longArray0, '9');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("-191790909-1909090", string5);
      assertNotNull(string5);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 17L, 0L, 0L, (-1L), 0L, 0L, 0L}, longArray0);
      
      String[] stringArray1 = StringUtils.substringsBetween("-", "-", "uYe");
      assertNull(stringArray1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "-", (CharSequence) "-");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.removeAll("Qe8b6zcN<X<jpxOg<{", "...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("...");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("'YwtkewYT<}UOc&o", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("'YwtkewYT<}UOc&o"));
      
      boolean boolean1 = treeSet0.add("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(treeSet0.contains(""));
      assertFalse(treeSet0.contains("'YwtkewYT<}UOc&o"));
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "3", 0);
      assertNull(stringArray1);
      
      String string1 = StringUtils.repeat('O', 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("|k/$@T%8#^Uu", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("|k/$@T%8#^Uu", string2);
      assertNotNull(string2);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean2 = arrayList0.add((CharBuffer) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList1.contains("3"));
      
      Iterator<String> iterator0 = arrayList1.iterator();
      assertNotNull(iterator0);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList1.contains("3"));
      
      String string3 = StringUtils.join(iterator0, 'e');
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList1.contains("3"));
      
      String string4 = StringUtils.join(iterator0, 'o');
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList1.contains("3"));
      
      boolean boolean3 = StringUtils.equalsAnyIgnoreCase("", (CharSequence[]) null);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string5 = StringUtils.replaceChars("(O>l/)e*T*$@PaA", '|', 'M');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("(O>l/)e*T*$@PaA", string5);
      assertNotNull(string5);
      
      boolean boolean4 = StringUtils.containsIgnoreCase("(O>l/)e*T*$@PaA", "Qe8b6zcN<X<jpxOg<{");
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) null, supplier0);
      assertNull(charSequence0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "p{InCombiningDiacriticalMarks}+", charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      double[] doubleArray0 = new double[1];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '<';
      intArray0[1] = (int) '<';
      intArray0[2] = (int) 'W';
      intArray0[3] = (int) '<';
      String string0 = StringUtils.join(intArray0, 'B', 1701, 1701);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {60, 60, 87, 60}, intArray0);
      
      String[] stringArray0 = StringUtils.split("p{InCombiningDiacriticalMarks}+", "}pwK$CNGA", 90);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "}pwK$CNGA", (CharSequence) "", 90);
      assertEquals(9, int0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("", "}pwK$CNGA");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "D;40(9";
      String string0 = StringUtils.wrap("|]pr(zTv%2ZWCey", 'w');
      assertEquals("w|]pr(zTv%2ZWCeyw", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("w|]pr(zTv%2ZWCeyw", "w|]pr(zTv%2ZWCeyw", 1802);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.difference("w|]pr(zTv%2ZWCeyw", "w0,$<W");
      assertFalse(string1.equals((Object)string0));
      assertEquals("0,$<W", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.wrapIfMissing("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("g(.d}E_6yNLEY2", "maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("g(.d}E_6yNLEY2", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("maxWith cannot be negative", 14, "_2#");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate((String) null, 32, 160);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      
      Locale locale1 = Locale.forLanguageTag("");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      String string0 = locale1.getDisplayLanguage();
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("N*)}ka8Oz\")c7");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = locale0.getDisplayVariant(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      Locale locale2 = Locale.forLanguageTag("oQ4[#m;6<%Fm8i5=|+");
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      
      String[] stringArray1 = Locale.getISOCountries();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(250, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = locale0.getDisplayLanguage();
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Japanese", string2);
      assertNotNull(string2);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      
      String string3 = StringUtils.trim("z3(1qx_");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("z3(1qx_", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      String string4 = StringUtils.chomp("@+}g;1<Gq+m~$Cd#");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("@+}g;1<Gq+m~$Cd#", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("@+}g;1<Gq+m~$Cd#", 49, "@+}g;1<Gq+m~$Cd#");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("@+}g;1<Gq+m~$Cd#@+}g;1<Gq+m~$Cd#@+}g;1<Gq+m~$Cd#@", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAllUpperCase("@+}g;1<Gq+m~$Cd#@+}g;1<Gq+m~$Cd#@+}g;1<Gq+m~$Cd#@");
      assertFalse(boolean0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "N*)}ka8Oz\")c7", (CharSequence) "", 6);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte)117;
      String string0 = StringUtils.join(byteArray0, '|');
      assertEquals("-41|0|60|104|-96|21|-127|5|117", string0);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-41), (byte)0, (byte)60, (byte)104, (byte) (-96), (byte)21, (byte) (-127), (byte)5, (byte)117}, byteArray0);
      
      int int0 = StringUtils.ordinalIndexOf("-41|0|60|104|-96|21|-127|5|117", "-41|0|60|104|-96|21|-127|5|117", (-1802));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWithAny("-41|0|60|104|-96|21|-127|5|117", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "G9ULK-fZyNJZn";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "G9ULK-fZyNJZn";
      charSequenceArray0[6] = (CharSequence) null;
      String string0 = StringUtils.appendIfMissing((String) null, (CharSequence) null, charSequenceArray0);
      assertNull(string0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      int int0 = StringUtils.compare((String) null, (String) null);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "G9ULK-fZyNJZn";
      stringArray0[2] = null;
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("G9ULK-fZyNJZn", string1);
      assertNotNull(string1);
      assertEquals(3, stringArray0.length);
      
      String string2 = StringUtils.replaceFirst("g(.d}E_6yNLEY2", string0, (String) null);
      assertFalse(string2.equals((Object)string1));
      assertEquals("g(.d}E_6yNLEY2", string2);
      assertNotNull(string2);
      assertEquals(7, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance(charSequenceArray0[3], charSequenceArray0[0], 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '<');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      String string1 = StringUtils.removeEnd("g(.d}E_6yNLEY2", "maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("g(.d}E_6yNLEY2", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("oq4CJBA4%QmJ(f/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("", ", Lngth");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringBefore("~IJ1'+p~Zt^U@H*Z", "");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      
      Locale locale1 = Locale.forLanguageTag("");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      
      String string0 = locale1.getDisplayLanguage();
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string1 = locale0.getDisplayVariant(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      
      Locale locale2 = Locale.forLanguageTag("oQ4[#m;6<%Fm8i5=|+");
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getLanguage());
      
      String[] stringArray1 = Locale.getISOCountries();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(250, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = locale0.getDisplayLanguage();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Japanese", string2);
      assertNotNull(string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      
      String string3 = StringUtils.trim("z3(1qx_");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("z3(1qx_", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(0, int0);
      assertEquals(250, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      String string4 = StringUtils.chomp("@+}g;1<Gq+m~$Cd#");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("@+}g;1<Gq+m~$Cd#", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("@+}g;1<Gq+m~$Cd#", 49, "@+}g;1<Gq+m~$Cd#");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("@+}g;1<Gq+m~$Cd#@+}g;1<Gq+m~$Cd#@+}g;1<Gq+m~$Cd#@", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAllUpperCase("@+}g;1<Gq+m~$Cd#@+}g;1<Gq+m~$Cd#@+}g;1<Gq+m~$Cd#@");
      assertFalse(boolean0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "N)}k8Oz\")c7", (CharSequence) "", 6);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      
      Locale locale1 = Locale.forLanguageTag("");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      
      String string0 = locale1.getDisplayLanguage(locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      
      String string1 = locale0.getDisplayVariant(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      
      Locale locale2 = locale1.stripExtensions();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertNotSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertNotSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getISO3Language());
      
      String string2 = StringUtils.abbreviate("53", "", 183);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("53", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "53";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("G9ULK-fZyNJZn");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      String string2 = StringUtils.valueOf(charArray0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(9, stringArray0.length);
      
      String string3 = StringUtils.difference("", "");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfter("N)}k8Oz\")c7qa=n'UCJt<:^uc8ZNfQ", (-1));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("", (-1), 'B');
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string1 = StringUtils.normalizeSpace((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.substringAfter((String) null, 76);
      assertNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 76, (-484));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.stripToEmpty("F-TZm<Fc");
      assertEquals("F-TZm<Fc", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("<yA.9!=3^\"CqT]");
      assertFalse(string4.equals((Object)string3));
      assertEquals("<yA.9!=3^\"CqT]", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfterLast((String) null, "Cannot clone Cloneable type ");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int int0 = 50;
      String string0 = StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", 50, 50);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("p{InCombiningDiacriticalMarks}+", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.trim("HURV4riOn3#xu5W;]o");
      assertEquals("HURV4riOn3#xu5W;]o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("HURV4riOn3#xu5W;]o");
      assertFalse(string1.equals((Object)string0));
      assertEquals("435", string1);
      assertNotNull(string1);
      
      String string2 = "";
      String string3 = StringUtils.chomp("", "HURV4riOn3#xu5W;]o");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("HURV4riOn3#xu5W;]o"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("HURV4riOn3#xu5W;]o", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = StringUtils.substringAfter("wwl`Uxpj0*j", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase("wwl`Uxpj0*j");
      assertFalse(string1.equals((Object)string0));
      assertEquals("wwl`uxpj0*j", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("Strings must not be null", '0');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0Strings must not be null0", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate((String) null, "X^", 4884);
      assertNull(string3);
      
      String string4 = StringUtils.leftPad("Object varargs must not be null", 1, "vqql$\"");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Object varargs must not be null", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Strings must not be null";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string5 = StringUtils.join((boolean[]) null, '0', 108, 1);
      assertNull(string5);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (CharSequence) "0Strings must not be null0");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.split("Strings must not be null", '~');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string6 = StringUtils.stripAccents("Object varargs must not be null");
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("Object varargs must not be null", string6);
      assertNotNull(string6);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("vqql$\"", 'R');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      
      String string7 = StringUtils.wrapIfMissing((String) null, "Strings must not be null");
      assertNull(string7);
      
      String string8 = StringUtils.wrapIfMissing("", 'g');
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.repeat('R', (-824));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertEquals("", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.substringBetween("'", "'");
      assertNull(string0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.strip((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Integer integer0 = new Integer(1646);
      assertEquals(1646, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean2 = vector0.add(integer0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(10, vector0.capacity());
      assertEquals("[1646]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(integer0));
      
      ListIterator<Integer> listIterator0 = vector0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(10, vector0.capacity());
      assertEquals("[1646]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(vector0.contains(integer0));
      
      String string2 = StringUtils.join((List<?>) vector0, "^>E7JFqP,:", 1646, (-455));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(10, vector0.capacity());
      assertEquals("[1646]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(integer0));
      assertFalse(vector0.contains((-455)));
      
      String string3 = StringUtils.join((Iterable<?>) vector0, '\u0000');
      assertFalse(string3.equals((Object)string2));
      assertEquals("1646", string3);
      assertNotNull(string3);
      assertEquals(10, vector0.capacity());
      assertEquals("[1646]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(integer0));
      assertFalse(vector0.contains((-455)));
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.swapCase("}U");
      assertEquals("}u", string0);
      assertNotNull(string0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("}U"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.chop("}u");
      assertFalse(string1.equals((Object)string0));
      assertEquals("}", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.abbreviate("}u", 5, 98);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("}u", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)42;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)42;
      intArray0[1] = (int) (short)42;
      intArray0[2] = 99;
      intArray0[3] = (int) (short)42;
      intArray0[4] = 1912;
      int int0 = 35;
      intArray0[5] = 35;
      intArray0[6] = (int) (short)42;
      intArray0[7] = (int) (short)4;
      intArray0[8] = (int) (short)4;
      String string0 = StringUtils.join(intArray0, '0');
      assertEquals("42042099042019120350420404", string0);
      assertNotNull(string0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {42, 42, 99, 42, 1912, 35, 42, 4, 4}, intArray0);
      
      int int1 = StringUtils.ordinalIndexOf("42042099042019120350420404", "42042099042019120350420404", 99);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "42042099042019120350420404";
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '0', (-1578), 35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1578
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.left(string0, 4);
      assertEquals("\\u", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) string1, (CharSequence) string1);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) string1;
      charSequenceArray0[1] = (CharSequence) string1;
      charSequenceArray0[2] = (CharSequence) string0;
      charSequenceArray0[3] = (CharSequence) string0;
      charSequenceArray0[4] = (CharSequence) string0;
      charSequenceArray0[5] = (CharSequence) string1;
      charSequenceArray0[6] = (CharSequence) string0;
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(7, charSequenceArray0.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf(charSequenceArray0[1], charSequenceArray0[5], 4);
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("B", "e52{dcr-hH{I`Tp0>u", 16);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.unwrap("B", "0A");
      assertEquals("B", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("Object varargs must not be null");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(12, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("B");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("T", "p;7n[-T/7{QO");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase(" ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      String[] stringArray2 = StringUtils.split("B", "p;7n[-T/7{QO");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(16));
      
      String string3 = StringUtils.removeEnd(";}", "Bl9>>K+tX)y");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(";}", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBeforeLast(" ", "Bl9>>K+tX)y");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.ordinalIndexOf(" ", "hF[hi=Cl~rN|h`~", 99);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.startsWithAny(" ", stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = '\u0000';
      charArray0[3] = 'a';
      String string0 = StringUtils.join(charArray0, '\u0000', 2066, 2066);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'a'}, charArray0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "Array element ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'a'}, charArray0);
      
      String string1 = StringUtils.appendIfMissing((String) null, "org.apache.commons.lang3.StringUtils", stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.capitalize((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.valueOf(charArray0);
      assertFalse(string3.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000a", string3);
      assertNotNull(string3);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'a'}, charArray0);
      
      String string4 = StringUtils.chomp((String) null);
      assertNull(string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "D|28u\"";
      stringArray1[1] = "Array element ";
      int int2 = StringUtils.ordinalIndexOf("Array element ", "D|28u\"", 2066);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2066;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 'a';
      doubleArray0[3] = (double) '\u0000';
      doubleArray0[4] = (double) 2066;
      doubleArray0[5] = (double) '\u0000';
      doubleArray0[6] = (double) 'a';
      doubleArray0[7] = (double) (-1);
      String string5 = StringUtils.join(doubleArray0, 'K');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("2066.0K-1.0K97.0K0.0K2066.0K0.0K97.0K-1.0", string5);
      assertNotNull(string5);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {2066.0, (-1.0), 97.0, 0.0, 2066.0, 0.0, 97.0, (-1.0)}, doubleArray0, 0.01);
      
      boolean boolean0 = StringUtils.startsWithAny("Array element ", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean0);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string6 = StringUtils.wrapIfMissing("Locale must not be null", 'w');
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("wLocale must not be nullw", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = StringUtils.stripAccents("The character ");
      assertEquals("The character ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "The character ";
      charSequenceArray0[1] = (CharSequence) "The character ";
      String string1 = StringUtils.prependIfMissingIgnoreCase("The character ", "The character ", charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("The character ", string1);
      assertNotNull(string1);
      assertEquals(2, charSequenceArray0.length);
      
      int int0 = StringUtils.ordinalIndexOf("The character ", charSequenceArray0[1], 2065);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.endsWithAny("The character ", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      CharBuffer charBuffer0 = StringUtils.getIfEmpty((CharBuffer) null, (Supplier<CharBuffer>) null);
      assertNull(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{}", "~IJ1'+p~Zt^U@H*Z");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("~IJ1'+p~Zt^U@H*Z"));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("~IJ1'+p~Zt^U@H*Z"));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      charArray0[3] = 'E';
      charArray0[4] = 'E';
      charArray0[5] = 'E';
      charArray0[6] = 'E';
      String string0 = StringUtils.join(charArray0, 'B', 669, (-272));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'E', 'E', 'E', 'E', 'E', 'E', 'E'}, charArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String[] stringArray2 = StringUtils.substringsBetween("{}", "", "qfw+3.");
      assertNull(stringArray2);
      
      String string1 = StringUtils.getDigits(",P]r.]uE}{");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.substringBefore("-", (-270));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("-", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "-", 317);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "HURV4riOn3#xu5W;]o", '\"');
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("HURV4riOn3#xu5W;]o");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("r1Sp`+>qaujy", "r1Sp`+>qaujy", 0);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "\r", "f");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, stringArray0.length);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "HURV4riOn3#xu5W;]o", (CharSequence) "\r");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(18, int2);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "D;40(9";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "D;40(9");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "D;40(9", (CharSequence) "D;40(9");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "D;40(9", "D;40(9");
      assertFalse(boolean0);
      
      String[] stringArray2 = StringUtils.split("6)Q.c4Dd,HMa&/i/ZC", "p[q90Nj", 32);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "p[q90Nj", (CharSequence) "p[q90Nj", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("p[q90Nj", "d^bR");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllBlank(stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      
      int int2 = StringUtils.lastOrdinalIndexOf("p[q90Nj", "D;40(9", 19);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.lastOrdinalIndexOf("6)Q.c4Dd,HMa&/i/ZC", "6)Q.c4Dd,HMa&/i/ZC", 32);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = StringUtils.stripEnd("M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("", ", Lngth");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("~IJ1'+p~Zt^U@H*Z", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chop(", Lngth");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(", Lngt", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1162;
      shortArray0[1] = (short)63;
      shortArray0[2] = (short)1162;
      String string0 = StringUtils.join(shortArray0, '7');
      assertEquals("116276371162", string0);
      assertNotNull(string0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)1162, (short)63, (short)1162}, shortArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "116276371162";
      charSequenceArray0[3] = (CharSequence) "...";
      charSequenceArray0[4] = (CharSequence) " in an array of ";
      String string1 = StringUtils.prependIfMissing("116276371162", (CharSequence) null, charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("116276371162", string1);
      assertNotNull(string1);
      assertEquals(5, charSequenceArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '^';
      charArray0[5] = '7';
      charArray0[6] = '7';
      charArray0[7] = '^';
      charArray0[8] = '7';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "116276371162", charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'^', '7', '7', '7', '^', '7', '7', '^', '7'}, charArray0);
      
      String string2 = StringUtils.lowerCase("...");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("...", string2);
      assertNotNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = StringUtils.joinWith("116276371162", charSequenceArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("...116276371162...116276371162116276371162116276371162...116276371162 in an array of ", string3);
      assertNotNull(string3);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("", (-180));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      String string2 = StringUtils.joinWith("Strings must not be null", objectArray0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(1, objectArray0.length);
      
      String string3 = StringUtils.getDigits("Strings must not be null");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string4 = StringUtils.repeat("", (-3208));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, "");
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string1 = StringUtils.center("org.apache.commons.lang3.StringUtils", (int) '\u0000', '\u0000');
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Org.apache.commons.lang3.StringUtils", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase(" ");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, "\r");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\r", string4);
      assertNotNull(string4);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("org.apache.commons.lang3.StringUtils"));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Org.apache.commons.lang3.StringUtils", 'Y');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("\r");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      String string5 = StringUtils.removeEnd(" ", "org.apache.commons.lang3.StringUtils");
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals(" ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.removeEnd("\r", " ");
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("\r", string6);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("\r", "\r");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isAllBlank(stringArray1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean3);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("\r", " ", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("org.apache.commons.lang3.ObjectUtils$Null");
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "FqQ>`EcN09d6?J", (char[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.rightPad("ceD", 7, '&');
      assertFalse(string1.equals((Object)string0));
      assertEquals("ceD&&&&", string1);
      assertNotNull(string1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "ceD&&&&");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(7, charBuffer0.capacity());
      assertEquals(7, charBuffer0.limit());
      assertEquals("ceD&&&&", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      
      CharBuffer charBuffer1 = StringUtils.getIfBlank(charBuffer0, (Supplier<CharBuffer>) null);
      assertNotNull(charBuffer1);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(7, charBuffer0.capacity());
      assertEquals(7, charBuffer0.limit());
      assertEquals("ceD&&&&", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertEquals(7, charBuffer1.length());
      assertEquals("ceD&&&&", charBuffer1.toString());
      assertEquals(7, charBuffer1.limit());
      assertEquals(7, charBuffer1.capacity());
      assertEquals(7, charBuffer1.remaining());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasRemaining());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "HURV4riOn3#xu5W;]o", '\"');
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "HURV4riOn3#xu5W;]o", "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("HURV4riOn3#xu5W;]o");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("r1Sp`+>qaujy", "r1Sp`+>qaujy", 0);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.left("org.apache.commons.lang3.StringUtilsd^bR", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNoneBlank(stringArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.trim("-");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "-";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.chomp("-");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.strip("\"=):zCT=1BO*:Wi!<V.");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\"=):zCT=1BO*:Wi!<V.", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNumericSpace("\"=):zCT=1BO*:Wi!<V.");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("-");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("4%x%9&D", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(int0));
      
      String string4 = StringUtils.join((List<?>) vector0, "BkLYN", 460, 0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(0));
      
      String string5 = StringUtils.join((Iterable<?>) vector0, 'e');
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(0));
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[14];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "z*Ovtb8CpL-zI+vL@V";
      String string1 = StringUtils.trim("fA");
      assertFalse(string1.equals((Object)string0));
      assertEquals("fA", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "fA";
      String string2 = StringUtils.removeStart("", "");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(string1));
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList1.contains(string1));
      
      Iterator<String> iterator0 = arrayList1.iterator();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(iterator0);
      assertNotSame(arrayList1, arrayList0);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList1.contains(string1));
      
      ArrayList<String> arrayList2 = new ArrayList<String>();
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertNotNull(arrayList2);
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertFalse(arrayList2.contains(string1));
      
      boolean boolean1 = arrayList2.add("fA");
      assertFalse(arrayList2.equals((Object)arrayList0));
      assertFalse(arrayList2.equals((Object)arrayList1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(arrayList2, arrayList0);
      assertNotSame(arrayList2, arrayList1);
      assertFalse(arrayList2.isEmpty());
      assertEquals(1, arrayList2.size());
      assertFalse(arrayList2.contains(""));
      assertTrue(arrayList2.contains("fA"));
      
      String string3 = StringUtils.uncapitalize("z*Ovtb8CpL-zI+vL@V");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("z*Ovtb8CpL-zI+vL@V", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "", charSequenceArray0[0], 2764);
      assertEquals((-1), int0);
      assertEquals(14, charSequenceArray0.length);
      
      String string4 = StringUtils.chomp(">J");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(">J", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "D;40(9";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "D;40(9");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "D;40(9", (CharSequence) "D;40(9");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "D;40(9", "D;40(9");
      assertFalse(boolean0);
      
      String[] stringArray2 = StringUtils.split("D;40(9", "p[q90Nj", 0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertEquals(2, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "p[q90Nj", (CharSequence) "p[q90Nj", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("p[q90Nj", "d^bR");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.wrapIfMissing("d^bR", "wVE`%[[{b,'l");
      assertEquals("wVE`%[[{b,'ld^bRwVE`%[[{b,'l", string0);
      assertNotNull(string0);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "d^bR", (CharSequence) "D;40(9");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(6, int2);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "D;40(9";
      charSequenceArray0[1] = (CharSequence) "D;40(9";
      charSequenceArray0[2] = (CharSequence) "D;40(9";
      charSequenceArray0[3] = (CharSequence) "D;40(9";
      String string0 = "ugHLteB =btzi{V";
      String string1 = StringUtils.wrapIfMissing("D;40(9", "ugHLteB =btzi{V");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ugHLteB =btzi{VD;40(9ugHLteB =btzi{V", string1);
      assertNotNull(string1);
      
      charSequenceArray0[4] = (CharSequence) "ugHLteB =btzi{VD;40(9ugHLteB =btzi{V";
      charSequenceArray0[5] = (CharSequence) "D;40(9";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string2 = "\\u";
      // Undeclared exception!
      try { 
        StringUtils.replaceAll(string2, "D;40(9", "3yiaxzLRp3");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 6
         // D;40(9
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      charArray0[1] = 'h';
      charArray0[2] = '';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("Uh", string0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'U', 'h', ''}, charArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Uh", "O'kx}6;n");
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfBlank("org.apache.commons.lang3.Charsets", supplier0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.Charsets", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("org.apache.commons.lang3.Charsets", (-377));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.Charsets", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "org.apache.commons.lang3.Charsets", charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'U', 'h', ''}, charArray0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = StringUtils.getDigits("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[8];
      String string2 = StringUtils.valueOf(charArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string2);
      assertNotNull(string2);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000").when(supplier0).get();
      String string3 = StringUtils.getIfBlank("", supplier0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = StringUtils.trim("HURV4riOn3#xu5W;]o");
      assertEquals("HURV4riOn3#xu5W;]o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      String string3 = StringUtils.join(iterator0, 'E');
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      char[] charArray0 = new char[8];
      String string4 = StringUtils.valueOf(charArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string4);
      assertNotNull(string4);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "O'kx}6;n");
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string5 = StringUtils.getIfBlank("", supplier0);
      assertNull(string5);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.reverseDelimited((String) null, 'W');
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Locale must not be null", (-1779), 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      
      String string0 = StringUtils.chomp("org.apache.commons.lang3.ObjectUtils");
      assertEquals("org.apache.commons.lang3.ObjectUtils", string0);
      assertNotNull(string0);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = StringUtils.capitalize("org.apache.commons.lang3.ObjectUtils");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Org.apache.commons.lang3.ObjectUtils", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.trim("-");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "-";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.removeStart((String) null, "-");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isNumericSpace(charSequenceArray0[0]);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string3 = StringUtils.right("y%hp>.117). ucA)", (-3399));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("maxWith cannot be negative", 'W');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string4 = StringUtils.trimToEmpty("Q=PTPNE{%q'ixV");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Q=PTPNE{%q'ixV", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.uncapitalize("p{InCombiningDiacriticalMarks}+");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.defaultString("-", "eA");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertEquals("-", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.containsWhitespace("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("VC'OjZYQnNj?a", "Q=PTPNE{%q'ixV");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(5, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string7 = StringUtils.prependIfMissing("p{InCombiningDiacriticalMarks}+", "rZw^  ?m_NVaabPw\"c", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertEquals("rZw^  ?m_NVaabPw\"cp{InCombiningDiacriticalMarks}+", string7);
      assertNotNull(string7);
      assertEquals(2, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      String string8 = StringUtils.remove("Array element ", "(BG*}smT");
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertEquals("Array element ", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = StringUtils.substringAfter("wwl`Uxpj0*j", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat((String) null, 4884);
      assertNull(string1);
      
      String string2 = StringUtils.wrap("Strings must not be null", '0');
      assertFalse(string2.equals((Object)string0));
      assertEquals("0Strings must not be null0", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate((String) null, "X^", 4884);
      assertNull(string3);
      
      String string4 = StringUtils.leftPad("Object varargs must not be null", 1, "vqql$\"");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Object varargs must not be null", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Strings must not be null";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string5 = StringUtils.strip("8xup!BD=T", "Strings must not be null");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("8xup!BD=T", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = StringUtils.trim("HURV4riOn3#xu5W;]o");
      assertEquals("HURV4riOn3#xu5W;]o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("HURV4riOn3#xu5W;]o");
      assertFalse(string1.equals((Object)string0));
      assertEquals("435", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList0.add(object0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(object0));
      assertFalse(linkedList0.contains(""));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(object0));
      assertFalse(linkedList0.contains(""));
      
      boolean boolean1 = linkedList0.add((Object) "435");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains("435"));
      assertFalse(linkedList0.contains(""));
      
      String string3 = StringUtils.join((Iterator<?>) null, 'E');
      assertNull(string3);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      charArray0[2] = '*';
      charArray0[3] = 'E';
      charArray0[4] = 'E';
      charArray0[5] = '\\';
      charArray0[6] = 'L';
      // Undeclared exception!
      try { 
        StringUtils.truncate("Array element ", (-835));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "ls";
      String string1 = "A{ FJ>a2H$Sc";
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("ls", "A{ FJ>a2H$Sc");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 0
         // A{ FJ>a2H$Sc
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "HURV4riOn3#xu5W;]o", '\"');
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "HURV4riOn3#xu5W;]o", "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("HURV4riOn3#xu5W;]o");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("r1Sp`+>qaujy", "r1Sp`+>qaujy", 0);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = StringUtils.isBlank("HURV4riOn3#xu5W;]o");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", (String) null, 0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray1, stringArray0);
      
      int int2 = StringUtils.compareIgnoreCase("HURV4riOn3#xu5W;]o", (String) null, true);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      boolean boolean2 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAlphaSpace("'YwtkewYT<}UOc&o");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string0 = StringUtils.join((Object[]) stringArray1, "F|7!W&");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.swapCase("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.lowerCase("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string2 = StringUtils.removeStartIgnoreCase("", ")A{E/{R<JNWu?9WGbW]Ud2;YGa");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.swapCase("PX=BhS'MY");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("px=bHs'my", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "}UO", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("}UO");
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {125, 85, 79}, intArray0);
      
      String string0 = StringUtils.strip("}U", "\n");
      assertEquals("}U", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("}UO", (-1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("O", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.startsWith("}U", "O");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringAfter("Q", "}UO");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOfAny("}U", (CharSequence[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "}U";
      stringArray0[1] = "\n";
      stringArray0[2] = "}U";
      stringArray0[3] = "";
      stringArray0[4] = "Q";
      stringArray0[5] = "Sa=";
      String string4 = StringUtils.swapCase("Sa=");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("sA=", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("\n", 2649, 'C');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.prependIfMissingIgnoreCase("VtQ", "\u0000\u0000C\u0000", stringArray0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("VtQ", string6);
      assertNotNull(string6);
      assertEquals(6, stringArray0.length);
      
      String string7 = StringUtils.replaceEach("\u0000\u0000C\u0000", stringArray0, stringArray0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertEquals("\u0000\u0000C\u0000", string7);
      assertNotNull(string7);
      assertEquals(6, stringArray0.length);
      
      int int2 = StringUtils.indexOf((CharSequence) "\n", 398, 2649);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = "}U";
      String string1 = StringUtils.swapCase("}U");
      assertFalse(string1.equals((Object)string0));
      assertEquals("}u", string1);
      assertNotNull(string1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("}U"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = arrayList0.add(object0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(object0));
      assertFalse(arrayList0.contains("}U"));
      
      int int0 = (-4279);
      Integer integer0 = new Integer((-4279));
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-4279), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean2 = arrayList0.add((Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(object0));
      assertFalse(arrayList0.contains("}U"));
      
      // Undeclared exception!
      try { 
        arrayList0.listIterator((-4279));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4279
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = StringUtils.substring("|]pr(zTv%2ZWCey", 29, 29);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.defaultIfBlank("Minimum abbreviation width is %d", "|]pr(zTv%2ZWCey");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.mid("Minimum abbreviation width is %d", 5, (-7));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width is %d";
      charSequenceArray0[1] = (CharSequence) "|]pr(zTv%2ZWCey";
      charSequenceArray0[2] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "|]pr(zTv%2ZWCey", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
      
      String string3 = StringUtils.defaultString("|]pr(zTv%2ZWCey");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("|]pr(zTv%2ZWCey", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToNull("{");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("{", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat("w\u0000^%JS", "w:SUVcIQR1", (-1993));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isNotEmpty("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("", charSequenceArray0[1]);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(3, charSequenceArray0.length);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(5));
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(string2));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, 'R', 18, 471);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 471
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-12);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      CharBuffer[] charBufferArray0 = new CharBuffer[0];
      CharBuffer[] charBufferArray1 = arrayList0.toArray(charBufferArray0);
      assertNotNull(charBufferArray1);
      assertEquals(0, charBufferArray0.length);
      assertEquals(0, charBufferArray1.length);
      assertSame(charBufferArray0, charBufferArray1);
      assertSame(charBufferArray1, charBufferArray0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(" vs ");
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(" vs "));
      
      boolean boolean1 = arrayList0.add("+f,t67");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(" vs "));
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(arrayList0.contains(" vs "));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("+f,t67", (String) null, (int) (short) (-12));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.right("0^l>Dz4!pTU1", 7);
      assertEquals("z4!pTU1", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.split("p{InCombSnigDiacriticlMarks}+", 'F');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.trimToEmpty("0^l>Dz4!pTU1");
      assertFalse(string1.equals((Object)string0));
      assertEquals("0^l>Dz4!pTU1", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("0^l>Dz4!pTU1");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0^l>Dz4!pTU1", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.length("+f,t67");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-969));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-969));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.unwrap("offset cannot be negative", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("offset cannot be negative", "offset cannot be negative");
      assertTrue(boolean0);
      
      int int1 = StringUtils.compare("offset cannot be negative", "\r");
      assertFalse(int1 == int0);
      assertEquals(98, int1);
      
      int int2 = StringUtils.countMatches((CharSequence) "offset cannot be negative", 'B');
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String string2 = StringUtils.removeStart((String) null, ", Length: ");
      assertNull(string2);
      
      int int3 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      
      String string3 = StringUtils.substringAfterLast("offset cannot be negative", "");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("jssh^$]#kBf.:v", 12);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("jssh^$]#k...", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeAll("jssh^$]#kBf.:v", "jssh^$]#kBf.:v");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("jssh^$]#kBf.:v", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.rightPad((String) null, 12, "");
      assertNull(string6);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "{aVwJvp-Pz)PZp";
      String string7 = StringUtils.joinWith("{aVwJvp-Pz)PZp", objectArray0);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals("{aVwJvp-Pz)PZp", string7);
      assertNotNull(string7);
      assertEquals(1, objectArray0.length);
      
      int int4 = StringUtils.lastIndexOf((CharSequence) null, (-2378), (-969));
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      assertEquals((-1), int4);
      
      String string8 = StringUtils.substringBefore((String) null, "jssh^$]#kBf.:v");
      assertNull(string8);
      
      String string9 = StringUtils.reverseDelimited("qa=n'UCJt<:^uc8ZNfQ", 's');
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertEquals("qa=n'UCJt<:^uc8ZNfQ", string9);
      assertNotNull(string9);
      
      int int5 = StringUtils.indexOf((CharSequence) "jssh^$]#k...", (CharSequence) "");
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertEquals(0, int5);
      
      String string10 = StringUtils.join(objectArray0, "mfq*d#7-l]jqa", 3017, 51);
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertTrue(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
      assertEquals("", string10);
      assertNotNull(string10);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1162;
      shortArray0[1] = (short)63;
      shortArray0[2] = (short)1162;
      String string0 = StringUtils.join(shortArray0, '7');
      assertEquals("116276371162", string0);
      assertNotNull(string0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)1162, (short)63, (short)1162}, shortArray0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("05M$lKY7z/n\"}Y*%n|", "(>9,!vpwnnk6s/", (-2032));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.unwrap("d@6>", "5zGE>]-+GXy");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("org.apache.commons.lang3.Charsets", "3F0NoFrfu+X2&Up7:", (-2032));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("org.apache.commons.lang3.Charsets");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "org.apache.commons.lang3.Charsets", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.replaceAll("05M$lKY7z/n\"}Y*%n|", "d@6>", "Ttw:wA");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("05M$lKY7z/n\"}Y*%n|", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "5zGE>]-+GXy", "on width is %d");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = StringUtils.chomp("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.capitalize("ch");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Ch", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "D;40(9";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "D;40(9");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "D;40(9", (CharSequence) "D;40(9");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAny((CharSequence) "D;40(9", charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "D;40(9", (CharSequence) "D;40(9", (int) 'h');
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "D;40(9", "D;40(9");
      assertFalse(boolean0);
      
      String string0 = StringUtils.uncapitalize("D;40(9");
      assertEquals("d;40(9", string0);
      assertNotNull(string0);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "d;40(9", (CharSequence) "D;40(9");
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("&2lkf");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertEquals(3, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      String string1 = StringUtils.uncapitalize("YI!fKH#Unku^O? cf");
      assertFalse(string1.equals((Object)string0));
      assertEquals("yI!fKH#Unku^O? cf", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace("D;40(9");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("D;40(9", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[14];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.trim("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", charSequenceArray0[1]);
      assertEquals(0, int0);
      assertEquals(14, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(charSequenceArray0[0], charSequenceArray0[1]);
      assertTrue(boolean0);
      assertEquals(14, charSequenceArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '`';
      intArray0[1] = 1934;
      intArray0[2] = (int) '+';
      intArray0[3] = 456;
      intArray0[4] = 1934;
      intArray0[5] = 1934;
      intArray0[6] = (-4364);
      intArray0[7] = (int) '+';
      intArray0[8] = (-3141);
      String string2 = StringUtils.join(intArray0, 'y', 1934, 1934);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {96, 1934, 43, 456, 1934, 1934, (-4364), 43, (-3141)}, intArray0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", 50, 1686);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "Strings must not be null");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      String string1 = StringUtils.join(doubleArray0, '<');
      assertFalse(string1.equals((Object)string0));
      assertEquals("0.0", string1);
      assertNotNull(string1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      String string2 = StringUtils.mid("UBn.+XDd|x1LFd;<:", 0, (-1081));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("UBn.+XDd|x1LFd;<:", "Strings must not be null", 1686);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("UBn.+XDd|x1LFd;<:", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(250, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, int0);
      assertEquals(250, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string0 = StringUtils.reverseDelimited("Search and Replace array lengths don't match: ", 's');
      assertEquals(" don't match: sSearch and Replace array length", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap(" don't match: sSearch and Replace array length", "Search and Replace array lengths don't match: ");
      assertTrue(string1.equals((Object)string0));
      assertEquals(" don't match: sSearch and Replace array length", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", 50, 1686);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[1] = "hdO0]1yq#";
      stringArray0[2] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[3] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[4] = "|l;7TMXnTn$x>oP^P~";
      stringArray0[5] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[6] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[7] = "p{InCombiningDiacriticalMarks}+";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(8, stringArray0.length);
      
      String string2 = StringUtils.getDigits(" ");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootLowerCase("|l;7TMXnTn$x>oP^P~");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("|l;7tmxntn$x>op^p~", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "M#21T4mQ[?Bofw[/m3";
      objectArray0[1] = objectArray0[0];
      String string0 = StringUtils.substringAfterLast("M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("M#21T4mQ[?Bofw[/m3", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripToNull("The String must not be empty");
      assertFalse(string1.equals((Object)string0));
      assertEquals("The String must not be empty", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate("M#21T4mQ[?Bofw[/m3", 99);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("?Bofw[/m3M#21T4mQ[", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.right("The String must not be empty", 457);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("The String must not be empty", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.substringBetween("The String must not be empty", "");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOf((CharSequence) "The String must not be empty", 1258, (-150));
      assertEquals((-1), int0);
      
      String string5 = StringUtils.truncate("RWk8>[X", 457);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("RWk8>[X", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.removeStart(".r", (String) null);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals(".r", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.join(objectArray0, "#");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertEquals("M#21T4mQ[?Bofw[/m3#M#21T4mQ[?Bofw[/m3##", string7);
      assertNotNull(string7);
      assertEquals(4, objectArray0.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "M#21T4mQ[?Bofw[/m3#M#21T4mQ[?Bofw[/m3##", (CharSequence) "#");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string8 = StringUtils.unwrap("org.apache.commons.lang3.CharSequenceUtils", "M#21T4mQ[?Bofw[/m3#M#21T4mQ[?Bofw[/m3##");
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-1000));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-1000));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceChars("offset cannot be negative", "maxWith cannot be negative", "maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "offset cannot be negative";
      stringArray0[1] = "";
      stringArray0[3] = "maxWith cannot be negative";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.replaceAll("", stringArray0[2], "");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(4, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      String string3 = StringUtils.toRootUpperCase("");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("Strings must not be null", "offset cannot be negative", stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Strings must not be null", string4);
      assertNotNull(string4);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "maxWith cannot be negative", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(26, int1);
      
      String string5 = StringUtils.firstNonBlank(stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("offset cannot be negative", string5);
      assertNotNull(string5);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string6 = StringUtils.replaceFirst("qa=n'UCJt<:^uc8ZNfQ", "", "p{InCombiningDiacriticalMarks}+");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+qa=n'UCJt<:^uc8ZNfQ", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string1 = StringUtils.appendIfMissing(" ", "org.apache.commons.lang3.StringUtils", stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertEquals(2, stringArray0.length);
      
      String string2 = StringUtils.capitalize(" ");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase(" ");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrap(" ", "\r");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\r \r", string4);
      assertNotNull(string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("\r \r", "org.apache.commons.lang3.StringUtils");
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(" ", " ", 8, (-1349));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsNone(charSequenceArray0[2], "");
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", charSequenceArray0[2]);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(6, charSequenceArray0.length);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.rotate("", 99);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.right("", (-1924));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAlphanumeric(charSequenceArray0[0]);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(6, charSequenceArray0.length);
      
      String string4 = StringUtils.substringBetween("Search and Replace array lengths don't match: ", "");
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0, (-2361));
      assertEquals((-1), int0);
      
      String string5 = StringUtils.truncate("qfw+3.", 1258);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("qfw+3.", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.removeStart("comparator", "Locale must not be null");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("comparator", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.join((Object[]) charSequenceArray0, "");
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertEquals("", string7);
      assertNotNull(string7);
      assertEquals(6, charSequenceArray0.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Exception cloning Cloneable type ";
      stringArray0[1] = "comparator";
      stringArray0[2] = "Locale must not be null";
      stringArray0[3] = null;
      stringArray0[4] = "RWk8>[X";
      stringArray0[5] = "Search and Replace array lengths don't match: ";
      String string8 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertEquals("", string8);
      assertNotNull(string8);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.removeAll("Qe8b6zcN<X<jpxOg<{", "...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("...");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("'YwtkewYT<}UOc&o", "'YwtkewYT<}UOc&o", (-1));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "3", 0);
      assertNull(stringArray1);
      
      String string1 = StringUtils.unwrap("Qe8b6zcN<X<jpxOg<{", "Qe8b6zcN<X<jpxOg<{");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Qe8b6zcN<X<jpxOg<{", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", "Minimum abbreviation width is %d", 3291);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("Qe8b6zcN<X<jpxOg<{");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = 'Z';
      boolean boolean2 = StringUtils.containsAny((CharSequence) "'YwtkewYT<}UOc&o", charArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'b', 'Z'}, charArray0);
      
      String string3 = StringUtils.replaceAll("qa=n'UCJt<:^uc8ZNfQ", "...", (String) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("qa=n'UCJt<:^uc8ZNfQ", string3);
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "'YwtkewYT<}UOc&o", "S%");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string4 = StringUtils.rightPad("ZrB7-0\"w", (-279), '\\');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("ZrB7-0\"w", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("Q2Ufl-}5", (-1), "qa=n'UCJt<:^u_2#");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Q2Ufl-}5", string5);
      assertNotNull(string5);
      
      boolean boolean4 = StringUtils.containsNone((CharSequence) "Q2Ufl-}5", (String) null);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      
      String[] stringArray2 = StringUtils.substringsBetween("g`)W@~m", " in an array of ", "UP :2T[,%");
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("}UO");
      assertFalse(boolean0);
      
      String string0 = "DWspY$w";
      String string1 = StringUtils.strip("DWspY$w");
      assertTrue(string1.equals((Object)string0));
      assertEquals("DWspY$w", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.endsWith("}UO", "DWspY$w");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "}UO";
      objectArray0[1] = (Object) "DWspY$w";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = (Object) "DWspY$w";
      char char0 = 'g';
      String string2 = StringUtils.join(objectArray0, 'g', 43, 2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(5, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "DWspY$w";
      charSequenceArray0[1] = (CharSequence) "DWspY$w";
      charSequenceArray0[2] = (CharSequence) "}UO";
      charSequenceArray0[3] = (CharSequence) "DWspY$w";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(5, charSequenceArray0.length);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("DWspY$w"));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("DWspY$w", 'g');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean3 = StringUtils.isAllUpperCase(charSequenceArray0[3]);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(5, charSequenceArray0.length);
      
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "\"Ya;=-)UmD6u7,^,O#Q");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \"Ya;=-)UmD6u7,^,O#Q
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      
      Locale locale1 = Locale.forLanguageTag("");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      
      String string0 = StringUtils.repeat('d', 3);
      assertEquals("ddd", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("ddd");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfterLast("", 3);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) " ";
      charSequenceArray0[2] = (CharSequence) "clone";
      charSequenceArray0[3] = (CharSequence) " ";
      String string1 = StringUtils.prependIfMissing("clone", " ", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("clone", string1);
      assertNotNull(string1);
      assertEquals(4, charSequenceArray0.length);
      
      String string2 = StringUtils.repeat('U', 1999);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase("clone");
      assertTrue(boolean0);
      
      String string3 = StringUtils.substringAfterLast("Invalid locale format: ", 98);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.mid("5am,'||&7fXlp7", 663, 17);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[20];
      charSequenceArray0[4] = (CharSequence) "{gVwGfu";
      String string0 = StringUtils.prependIfMissing("{gVwGfu", "M#21T4mQ[?Bofw[/m3", charSequenceArray0);
      assertEquals("{gVwGfu", string0);
      assertNotNull(string0);
      assertEquals(20, charSequenceArray0.length);
      
      String string1 = StringUtils.overlay("", "7\"-.'c1$V", 4, (-1751));
      assertFalse(string1.equals((Object)string0));
      assertEquals("7\"-.'c1$V", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.right("{gVwGfu", (-3399));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter("Index: ", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Index: ", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "7\"-.'c1$V", (CharSequence) "{gVwGfu");
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "X.l?6Z~S(s9B8zs");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // X.l?6Z~S(s9B8zs
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore("\n", "\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((int[]) null, '9');
      assertNull(string2);
      
      String string3 = StringUtils.substringBetween((String) null, "");
      assertNull(string3);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'r';
      floatArray0[1] = (float) 'r';
      floatArray0[2] = (float) (-3186);
      floatArray0[3] = (float) '9';
      floatArray0[4] = 1.0F;
      floatArray0[1] = (float) (-3186);
      String string4 = StringUtils.join(floatArray0, '\"', (-3186), (-3186));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {114.0F, (-3186.0F), (-3186.0F), 57.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      
      String string5 = StringUtils.substring((String) null, (-3186));
      assertNull(string5);
      
      String string6 = StringUtils.left("Q(]>(>BzF ", (-323));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.leftPad("aBI:w", (-2195), " ");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertEquals("aBI:w", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string8 = StringUtils.stripToEmpty((String) null);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string1));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("-|&", "-|&", (-2076), (-2076));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "G9ULK-fZyNJZn", charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "G9ULK-fZyNJZn", (CharSequence) "", (-8));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.strip("27zqZV*^=J", "Ls");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("27zqZV*^=J", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", "...");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = "!7$cRD.=(*n(LB=IN";
      String string4 = StringUtils.substringAfterLast("G9ULK-fZyNJZn", "!7$cRD.=(*n(LB=IN");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("..."));
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string5 = StringUtils.stripToNull("!7$cRD.=(*n(LB=IN");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("!7$cRD.=(*n(LB=IN", string5);
      assertNotNull(string5);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_US", locale1.toString());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("US", locale1.getCountry());
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("27zqZV*^=J", " ", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.trim("HURV4riOn3#xu5W;]o");
      assertEquals("HURV4riOn3#xu5W;]o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "HURV4riOn3#xu5W;]o", (CharSequence) "");
      assertEquals(18, int0);
      
      String string3 = StringUtils.LF;
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\n", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string4 = StringUtils.repeat("", 18);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "\n";
      String string5 = StringUtils.join(objectArray0, "-D[E]E");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("-D[E]E-D[E]E-D[E]E\n", string5);
      assertNotNull(string5);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.repeat("{}", 16);
      assertEquals("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.substringAfter("wwl`Uxpj0*j", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("1Y+YME(LO");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.leftPad("|~x<#SNQ.v", 0, "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("|~x<#SNQ.v", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 2);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "|~x<#SNQ.v", "1Y+YME(LO");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 2064;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 2;
      String string2 = StringUtils.join(longArray0, 'U', 2, 3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0", string2);
      assertNotNull(string2);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 2064L, 0L, 2L}, longArray0);
      
      String string3 = StringUtils.substring("maxWith cannot be negative", 4140, 16);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.equals((CharSequence) null, (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "|~x<#SNQ.v", (CharSequence) "4-+_D9Gbi_1}}aN;");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.substring("qa=n'UCJt<:!u", 3);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("n'UCJt<:!u", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-12);
      shortArray0[1] = (short)42;
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      charArray0[4] = ':';
      charArray0[5] = 'b';
      charArray0[6] = ':';
      String string0 = StringUtils.join(charArray0, ':');
      assertEquals("::::u:u:::b::", string0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {':', ':', 'u', 'u', ':', 'b', ':'}, charArray0);
      
      String string1 = StringUtils.unwrap("::::u:u:::b::", ':');
      assertFalse(string1.equals((Object)string0));
      assertEquals(":::u:u:::b:", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) ":::u:u:::b:";
      charSequenceArray0[2] = (CharSequence) "::::u:u:::b::";
      charSequenceArray0[3] = (CharSequence) ":::u:u:::b:";
      charSequenceArray0[4] = (CharSequence) "...";
      charSequenceArray0[5] = (CharSequence) "::::u:u:::b::";
      charSequenceArray0[6] = (CharSequence) ":::u:u:::b:";
      charSequenceArray0[7] = (CharSequence) ":::u:u:::b:";
      charSequenceArray0[8] = (CharSequence) "...";
      int int0 = StringUtils.lastIndexOfAny(":::u:u:::b:", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-12);
      shortArray0[1] = (short)42;
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      charArray0[4] = ':';
      charArray0[5] = 'b';
      charArray0[6] = ':';
      String string0 = StringUtils.join(charArray0, ':');
      assertEquals("::\u0000:u:u:::b::", string0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {':', '\u0000', 'u', 'u', ':', 'b', ':'}, charArray0);
      
      String string1 = StringUtils.unwrap("::\u0000:u:u:::b::", ':');
      assertFalse(string1.equals((Object)string0));
      assertEquals(":\u0000:u:u:::b:", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) ":\u0000:u:u:::b:";
      charSequenceArray0[2] = (CharSequence) "::\u0000:u:u:::b::";
      charSequenceArray0[3] = (CharSequence) ":\u0000:u:u:::b:";
      charSequenceArray0[4] = (CharSequence) "...";
      charSequenceArray0[5] = (CharSequence) "::\u0000:u:u:::b::";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0[1], (CharSequence) ":\u0000:u:u:::b:");
      assertEquals((-1), int0);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("e52{dcr-hH{I`Tp0>u", "e52{dcr-hH{I`Tp0>u", "e52{dcr-hH{I`Tp0>u");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 2
         // e52{dcr-hH{I`Tp0>u
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "Array element ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'C', '\u0000'}, charArray0);
      
      String string1 = StringUtils.appendIfMissing((String) null, "org.apache.commons.lang3.StringUtils", stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.capitalize((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.upperCase("D|28u\"");
      assertFalse(string3.equals((Object)string0));
      assertEquals("D|28U\"", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("~IJ1'+p~Zt^U@H*Z", "ev&9n1#hSI7@F", (-1917));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string4 = StringUtils.join(charArray0, '!');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\u0000!\u0000!C!\u0000", string4);
      assertNotNull(string4);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'C', '\u0000'}, charArray0);
      
      String string5 = StringUtils.stripAccents("EA");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("EA", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "EA", (-1917));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isAlpha("EA");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("EA");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.stripEnd("Supplied value must be a valid byte literal between -128 and 127: [", "`$$0p{bmt%E");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string6);
      assertNotNull(string6);
      
      int int2 = StringUtils.lastOrdinalIndexOf("D|28u\"", " ", 0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean2 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean2);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("xxkJmq-F4", "<GVoI!?$K[4tQq?v?", "\u0000!\u0000!C!\u0000");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 16
         // <GVoI!?$K[4tQq?v?
         //                 ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.getDigits("Y'6P _9+");
      assertFalse(string1.equals((Object)string0));
      assertEquals("69", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("69");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringAfterLast("o0|la", 12);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.SPACE;
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("69", charSequenceArray0[0]);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.repeat("Minimum abbreviation width is %dev&Un1#hSI7@F", "Minimum abbreviation width is %dev&Un1#hSI7@F", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Minimum abbreviation width is %dev&Un1#hSI7@F", "Minimum abbreviation width is %dev&Un1#hSI7@F");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.removeStart("Minimum abbreviation width is %dev&Un1#hSI7@F", "\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %dev&Un1#hSI7@F", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      double double1 = StringUtils.getJaroWinklerDistance("Minimum abbreviation width is %dev&Un1#hSI7@F", "");
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      String string2 = StringUtils.substringBetween("", "org.apache.commons.lang3.StringUtils", "");
      assertNull(string2);
      
      String string3 = StringUtils.stripToEmpty("org.apache.commons.lang3.StringUtils");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("org.apache.commons.lang3.StringUtils", 0, '%');
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      assertNotNull(string4);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) '%';
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (-454.16254F);
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) '%';
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'q', 0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-12);
      shortArray0[1] = (short)42;
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      charArray0[4] = ':';
      charArray0[5] = 'b';
      charArray0[6] = ':';
      String string0 = StringUtils.join(charArray0, ':');
      assertEquals("::::u:u:::b::", string0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {':', ':', 'u', 'u', ':', 'b', ':'}, charArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "::::u:u:::b::", (int) ':');
      assertEquals(12, int0);
      
      String string1 = "4-+_D9Gbi_1}}aN;";
      boolean boolean0 = StringUtils.containsNone((CharSequence) "4-+_D9Gbi_1}}aN;", "::::u:u:::b::");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)42;
      longArray0[1] = (long) ':';
      longArray0[2] = (long) (short)42;
      longArray0[3] = (long) 'b';
      longArray0[4] = (long) 12;
      longArray0[5] = (long) (short)42;
      longArray0[6] = (long) 'u';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, ':', (int) (short)42, 2064);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 42
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      String string0 = StringUtils.join(booleanArray0, '6');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '6';
      doubleArray0[1] = (double) 'Q';
      doubleArray0[2] = (double) 'Q';
      doubleArray0[3] = (double) 'Q';
      doubleArray0[4] = (double) '6';
      doubleArray0[5] = (double) 'Q';
      doubleArray0[6] = (double) 'Q';
      doubleArray0[7] = (double) '6';
      String string1 = StringUtils.join(doubleArray0, 'Z');
      assertFalse(string1.equals((Object)string0));
      assertEquals("54.0Z81.0Z81.0Z81.0Z54.0Z81.0Z81.0Z54.0", string1);
      assertNotNull(string1);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {54.0, 81.0, 81.0, 81.0, 54.0, 81.0, 81.0, 54.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.lowerCase("D;40(9");
      assertEquals("d;40(9", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[8];
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[0] = object1;
      objectArray0[2] = (Object) "org.apache.commons.lang3.exception.CloneFailedException";
      objectArray0[3] = (Object) "D;40(9";
      objectArray0[4] = (Object) "ev&9n1#hSI7@F";
      objectArray0[5] = (Object) "d;40(9";
      objectArray0[6] = (Object) "d;40(9";
      objectArray0[7] = (Object) "org.apache.commons.lang3.exception.CloneFailedException";
      boolean boolean0 = StringUtils.isAlphanumericSpace("org.apache.commons.lang3.exception.CloneFailedException");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBetween("w", "-,KK/dRNTN.");
      assertNull(string1);
      
      String string2 = StringUtils.getIfEmpty("aOoEdg QzW", (Supplier<String>) null);
      assertFalse(string2.equals((Object)string0));
      assertEquals("aOoEdg QzW", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull("-,KK/dRNTN.");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("-,KK/dRNTN.", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.strip((String) null, "Strings must not be null");
      assertNull(string4);
      
      String string5 = StringUtils.defaultString("_3='vK}_=?KKL\"T9");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("_3='vK}_=?KKL\"T9", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("N", '`');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.remove("wVE`%[[{b,'l", '`');
      assertEquals("wVE%[[{b,'l", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("j}`t(>>-", "wVE`%[[{b,'l", 76);
      assertFalse(string1.equals((Object)string0));
      assertEquals("j}`t(>>-", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase("zzNkR)W0zODCFw{", (String) null, true);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "N", (CharSequence) "wVE`%[[{b,'l");
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty("hmJSYe8l)4fJY(2\"Uky", supplier0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("hmJSYe8l)4fJY(2\"Uky", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Arguments cannot both be null", (String) null);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = null;
      int int0 = StringUtils.lastIndexOf((CharSequence) stringArray1[0], (CharSequence) "Arguments cannot both be null");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals((-1), int0);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String[] stringArray2 = StringUtils.split(stringArray1[0], stringArray1[0]);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNull(stringArray2);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(int0));
      
      String string0 = StringUtils.removeEnd(stringArray1[0], (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNull(string0);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.substring("0V46oiHH!~8?4HV}mI!\"?", (-1), (-1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty("0V46oiHH!~8?4HV}mI!\"?");
      assertFalse(boolean0);
      
      String string2 = StringUtils.lowerCase("0V46oiHH!~8?4HV}mI!\"?");
      assertFalse(string2.equals((Object)string1));
      assertEquals("0v46oihh!~8?4hv}mi!\"?", string2);
      assertNotNull(string2);
      
      String[] stringArray3 = StringUtils.stripAll(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotNull(stringArray3);
      assertEquals(3, stringArray1.length);
      assertEquals(3, stringArray3.length);
      assertNotSame(stringArray1, stringArray3);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      
      boolean boolean1 = StringUtils.isNumeric("Arguments cannot both be null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray4 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray4);
      
      String string3 = StringUtils.toRootLowerCase((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.truncate("*j-", 7);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("*j-", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate((String) null, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "M#21T4mQ[?Bofw[/m3";
      objectArray0[1] = objectArray0[0];
      String string0 = StringUtils.substringAfterLast("M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("M#21T4mQ[?Bofw[/m3", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripToNull("The String must not be empty");
      assertFalse(string1.equals((Object)string0));
      assertEquals("The String must not be empty", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate("M#21T4mQ[?Bofw[/m3", 99);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("?Bofw[/m3M#21T4mQ[", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.right("The String must not be empty", 457);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("The String must not be empty", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.substringBetween("The String must not be empty", "");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOf((CharSequence) "The String must not be empty", 1258, (-150));
      assertEquals((-1), int0);
      
      String string5 = StringUtils.truncate("RWk8>[X", 321);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("RWk8>[X", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.removeStart(".r", (String) null);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals(".r", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.join(objectArray0, "#");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertEquals("M#21T4mQ[?Bofw[/m3#M#21T4mQ[?Bofw[/m3##", string7);
      assertNotNull(string7);
      assertEquals(4, objectArray0.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "RWk8>[X";
      stringArray0[3] = "The String must not be empty";
      stringArray0[4] = "#";
      stringArray0[5] = "#";
      String string8 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertEquals("", string8);
      assertNotNull(string8);
      assertEquals(7, stringArray0.length);
      
      String string9 = StringUtils.getDigits("M#21T4mQ[?Bofw[/m3#M#21T4mQ[?Bofw[/m3##");
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertEquals("21432143", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.toRootLowerCase("#");
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string8));
      assertEquals("#", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{incombiningdiacriticalmarks}+", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[1] = "hdO0]1yq#";
      String string1 = StringUtils.center("_", 50, "hdO0]1yq#");
      assertFalse(string1.equals((Object)string0));
      assertEquals("hdO0]1yq#hdO0]1yq#hdO0]1_hdO0]1yq#hdO0]1yq#hdO0]1y", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("s6?C", "s6?C", (-1329));
      assertEquals("s6?C", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWithAny("dRt!lt", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad("l:DTUw 4ZsFA%xO", (-754), "s6?C");
      assertFalse(string1.equals((Object)string0));
      assertEquals("l:DTUw 4ZsFA%xO", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("Locale must not be nullcomparator", "s6?C");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Locale must not be nullcomparator", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("", (-180));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = StringUtils.repeat('6', Integer.MIN_VALUE);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringBetween("J((i:RDy<&{", "", "");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'i');
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.rightPad("Cannot store ", 2826, 'i');
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast((String) null, 2826);
      assertNull(string2);
      
      String string3 = StringUtils.join((short[]) null, 'i');
      assertNull(string3);
      
      String string4 = StringUtils.joinWith(string1, charSequenceArray0);
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(1, charSequenceArray0.length);
      
      String string5 = StringUtils.getDigits((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.join((boolean[]) null, 'v', 28, 2826);
      assertNull(string6);
      
      int int0 = StringUtils.countMatches(charSequenceArray0[0], (CharSequence) null);
      assertEquals(0, int0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, (char[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.stripEnd(", '", "");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals(", '", string7);
      assertNotNull(string7);
      
      int[] intArray0 = StringUtils.toCodePoints(", '");
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {44, 32, 39}, intArray0);
      
      String string8 = StringUtils.strip("Strings must not be null", "qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>u");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertEquals("Strings must not be null", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string0 = StringUtils.substringBetween("dJ", "org.apache.commons.lang3.ObjectUtils", "A7E~Bi=S<?");
      assertNull(string0);
      
      String string1 = StringUtils.repeat('9', 2187);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((boolean[]) null, '2', 2187, 2187);
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) string1, 2187);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.join((Object[]) charSequenceArray0, "z*Ovtb8CpL-zI+vL@V", 53, 35);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(2, charSequenceArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string2 = StringUtils.removeStart("_2#", "qa=n'UCJt<:^u");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("_2#", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase("_2#");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringAfterLast("Strings must not be null", 17);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "_2#", charSequenceArray0[0]);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '^';
      longArray0[1] = (long) '^';
      longArray0[2] = (long) '^';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '2', (-367), 34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -367
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-12);
      shortArray0[1] = (short)42;
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      charArray0[4] = ':';
      charArray0[5] = 'b';
      charArray0[6] = ':';
      String string0 = StringUtils.join(charArray0, ':');
      assertEquals("::::u:u:::b::", string0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {':', ':', 'u', 'u', ':', 'b', ':'}, charArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "::::u:u:::b::", (-2725));
      assertEquals((-1), int0);
      
      String string1 = "4-+_D9Gbi_1}}aN;";
      boolean boolean0 = StringUtils.containsNone((CharSequence) "4-+_D9Gbi_1}}aN;", "::::u:u:::b::");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)42;
      longArray0[1] = (long) ':';
      longArray0[2] = (long) (short)42;
      longArray0[3] = (long) 'b';
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (short)42;
      longArray0[6] = (long) 'u';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, ':', (int) (short)42, 2064);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 42
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".Jj'Zy\bA4kg-`.t?y";
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(stringArray0[1], stringArray0);
      assertTrue(boolean0);
      assertEquals(6, stringArray0.length);
      
      String string1 = "on width is %d";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("on width is %d", "on width is %d", (-3708));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 15
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = "0YCf'bErh";
      String string1 = StringUtils.normalizeSpace("0YCf'bErh");
      assertTrue(string1.equals((Object)string0));
      assertEquals("0YCf'bErh", string1);
      assertNotNull(string1);
      
      int int0 = 16;
      String string2 = StringUtils.mid("Comparator should not be null.", 16, 16);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("d not be null.", string2);
      assertNotNull(string2);
      
      String string3 = "m_";
      try { 
        StringUtils.getBytes("m_", "m_");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "D;40(9";
      objectArray0[1] = (Object) "D;40(9";
      objectArray0[2] = (Object) "D;40(9";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "D;40(9";
      objectArray0[6] = (Object) "D;40(9";
      char[] charArray0 = new char[7];
      charArray0[0] = 'b';
      charArray0[1] = 'O';
      charArray0[2] = ':';
      objectArray0[4] = (Object) ':';
      charArray0[4] = ':';
      charArray0[5] = 'b';
      charArray0[6] = ':';
      String string0 = StringUtils.join(charArray0, 'u');
      assertEquals("buOu:u\u0000u:ubu:", string0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'b', 'O', ':', '\u0000', ':', 'b', ':'}, charArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "buOu:u\u0000u:ubu:", 6);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlpha("D;40(9");
      assertFalse(boolean0);
      
      String string1 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.leftPad(">", 128, ">Q}:");
      assertFalse(string2.equals((Object)string0));
      assertEquals(">Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}>", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("\"<3|On", "D;40(9");
      assertNull(string3);
      
      boolean boolean1 = StringUtils.equals((CharSequence) null, (CharSequence) "\"<3|On");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "D;40(9";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "D;40(9");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "D;40(9", (CharSequence) "D;40(9");
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'h';
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) 'h';
      floatArray0[3] = (float) 'h';
      floatArray0[4] = (float) 'h';
      floatArray0[5] = (float) 'h';
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 'h';
      String string0 = StringUtils.join(floatArray0, 'r', 0, (-3186));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {104.0F, (-1.0F), 104.0F, 104.0F, 104.0F, 104.0F, 0.0F, 0.0F, 104.0F}, floatArray0, 0.01F);
      
      String string1 = StringUtils.reverse("DL");
      assertFalse(string1.equals((Object)string0));
      assertEquals("LD", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.left("Array element ", (-803));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("", (-3186), "ET*7");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllUpperCase("*gq?y");
      assertFalse(boolean0);
      
      String string4 = StringUtils.stripToEmpty("");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[20];
      charSequenceArray0[4] = (CharSequence) "{gVwGfu";
      String string0 = StringUtils.prependIfMissing("{gVwGfu", "M#21T4mQ[?Bofw[/m3", charSequenceArray0);
      assertEquals("{gVwGfu", string0);
      assertNotNull(string0);
      assertEquals(20, charSequenceArray0.length);
      
      String string1 = StringUtils.overlay("", "7\"-.'c1$V", 4, (-1751));
      assertFalse(string1.equals((Object)string0));
      assertEquals("7\"-.'c1$V", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.right("{gVwGfu", (-3399));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("VC'OjZYQnNj?a", 'W');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.trimToEmpty("7\"-.'c1$V");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("7\"-.'c1$V", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.uncapitalize("VC'OjZYQnNj?a");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("vC'OjZYQnNj?a", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultString("7\"-.'c1$V", "%ku]C lgD]3X");
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertEquals("7\"-.'c1$V", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("rZw^  ?m_NVaabPw\"c", (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string6 = StringUtils.prependIfMissing("y%hp>.117). ucA)", "rZw^  ?m_NVaabPw\"c", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("y%hp>.117). ucA)", string6);
      assertNotNull(string6);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      String string0 = StringUtils.join(longArray0, 'G');
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "0", (CharSequence) "0", 1757);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("0");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\n", "\n", (-4670));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("\r", (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(2, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      String string2 = StringUtils.substringBetween("m_'0Cg<w;6", (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase((String) null, "comparator", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNull(string3);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(int0));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, "\n", (-1), 460);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("N", '`');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.remove("wVE`%[[{b,'l", '`');
      assertEquals("wVE%[[{b,'l", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("j}`t(>>-", "wVE`%[[{b,'l", 76);
      assertFalse(string1.equals((Object)string0));
      assertEquals("j}`t(>>-", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "wVE`%[[{b,'l", (CharSequence) "N");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.endsWithAny("wVE%[[{b,'l", stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("e52{dcr-hH{I`Tp0>u");
      assertEquals("e52{dcr-hH{I`Tp0>u", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("e52{dcr-hH{I`Tp0>u");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("B", "e52{dcr-hH{I`Tp0>u", 8);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "e52{dcr-hH{I`Tp0>u", "B");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.unwrap("B", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("B", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("", "e52{dcr-hH{I`Tp0>u");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.compare("B", "e52{dcr-hH{I`Tp0>u");
      assertEquals((-35), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "e52{dcr-hH{I`Tp0>u", 'B');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.removeStart("e52{dcr-hH{I`Tp0>u", "qa=n'UCJt<:^uc8ZNfQ");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("e52{dcr-hH{I`Tp0>u", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.substringAfterLast((String) null, "e52{dcr-hH{I`Tp0>u");
      assertNull(string3);
      
      String string4 = StringUtils.abbreviate((String) null, 62);
      assertNull(string4);
      
      String string5 = StringUtils.removeAll((String) null, "");
      assertNull(string5);
      
      String string6 = StringUtils.rightPad("', is neither of type Map.Entry nor an Array", 8, (String) null);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.remove("B", 'B');
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      assertNotNull(string7);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "", Integer.MIN_VALUE, 0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      String string8 = StringUtils.trimToEmpty("");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.reverseDelimited("B", 'B');
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string8));
      assertEquals("", string9);
      assertNotNull(string9);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'B';
      intArray0[1] = (-35);
      intArray0[2] = 4543;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'B', (-35), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -35
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'b';
      charArray0[1] = 'O';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      charArray0[5] = 'b';
      charArray0[6] = 'b';
      String string0 = StringUtils.join(charArray0, 'u');
      assertEquals("buOu:u:u:ubub", string0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'b', 'O', ':', ':', ':', 'b', 'b'}, charArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "buOu:u:u:ubub", 6);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "buOu:u:u:ubub", "4-+_D9Gbi_1}}aN;");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "buOu:u:u:ubub", (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "4-+_D9Gbi_1}}aN;", (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.substringBetween("buOu:u:u:ubub", "buOu:u:u:ubub");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("qd7s*i5<OX", "5,/2X:71HL}B7h/)4", "Qe8b6zcN<X<jpxOg<{");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombSnigDiacriticlMarks}+", "}U", 2384);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.getDigits("p{InCombSnigDiacriticlMarks}+");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith("zk?J:2jOqRdq5Fn", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfter("p{InCombSnigDiacriticlMarks}+", "zk?J:2jOqRdq5Fn");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfAny("zk?J:2jOqRdq5Fn", stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.leftPad("zk?J:2jOqRdq5Fn", 2649, 'n');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("]i7t(3-{%Hoorg.apache.commons.lang3.StringUtils", "...", (-1104));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("1}hEnK%|o7UU5el7=<", (String) null, true);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("...");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("G9ULK-fZyNJZn");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlpha("...");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertNull(string0);
      assertEquals(0, stringArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'm', (-2025), 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2025
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("|5l8G$Ci (X~; knqiq", "N)}k8Oz\")c7");
      assertEquals("|5l8G$Ci (X~; knqiq", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("ev&Un1#hSI7@F");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("ev&Un1#hSI7@F");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte) (-9);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '\"', (-1384), (int) (byte) (-9));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1384
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.replaceChars("ZZ}lm4}mjg7U/iCX", '[', '[');
      assertEquals("ZZ}lm4}mjg7U/iCX", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "ZZ}lm4}mjg7U/iCX";
      String string1 = StringUtils.wrapIfMissing("ZZ}lm4}mjg7U/iCX", '[');
      assertFalse(string1.equals((Object)string0));
      assertEquals("[ZZ}lm4}mjg7U/iCX[", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "[ZZ}lm4}mjg7U/iCX[";
      String string2 = "()PAi>I^[H$PU";
      int int0 = (-1103);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("()PAi>I^[H$PU", "qfw+3.", (-1103));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = "\n";
      String string1 = StringUtils.wrap("\n", '9');
      assertFalse(string1.equals((Object)string0));
      assertEquals("9\n9", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("9\n9");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "9\n9", (-2004318069), 1452);
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      int int1 = StringUtils.getFuzzyDistance("\n", "9\n9", locale0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)95;
      byteArray0[8] = (byte)127;
      // Undeclared exception!
      try { 
        Charset.forName("\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.truncate("", 65, 1261);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", 1261);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(95);
      assertNotNull(byteBuffer0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(95, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=95 cap=95]", byteBuffer0.toString());
      assertEquals(95, byteBuffer0.capacity());
      assertEquals(95, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      
      ByteBuffer byteBuffer1 = byteBuffer0.duplicate();
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      assertNotNull(byteBuffer1);
      assertNotSame(byteBuffer0, byteBuffer1);
      assertNotSame(byteBuffer1, byteBuffer0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(95, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=95 cap=95]", byteBuffer0.toString());
      assertEquals(95, byteBuffer0.capacity());
      assertEquals(95, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(95, byteBuffer1.capacity());
      assertEquals(95, byteBuffer1.remaining());
      assertFalse(byteBuffer1.isDirect());
      assertTrue(byteBuffer1.hasArray());
      assertEquals(0, byteBuffer1.position());
      assertEquals(95, byteBuffer1.limit());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=95 cap=95]", byteBuffer1.toString());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(0, byteBuffer1.arrayOffset());
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 3527);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.trim("`f/YrIF[VPwo6LZ[<");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("`f/YrIF[VPwo6LZ[<", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.getDigits("...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "...", 1233, 2773);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center("", 2773);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) "");
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertEquals(2773, int1);
      
      String string2 = StringUtils.repeat('Q', 1233);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAllLowerCase("}U");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.substringAfterLast("4<~#!&_qt+&Plcf@", (-1987));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.mid("p{InCombiningDiacriticalMarks}+", (-2528), 2652);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) string1, (-2528));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.normalizeSpace("...");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("...", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.isAsciiPrintable("...");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceAll("Threshold must not be negative", ", Length: ", "Array element ");
      assertEquals("Threshold must not be negative", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isNumericSpace("Threshold must not be negative");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ", Length: ", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString(", Length: ");
      assertFalse(string1.equals((Object)string0));
      assertEquals(", Length: ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull("%JaUS3qe>R.");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("%JaUS3qe>R.", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isNotEmpty(", Length: ");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("(", "Threshold must not be negative", (-2444));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 31
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      String string0 = StringUtils.lowerCase("S-4`eD=aGk!FkYY`", locale0);
      assertEquals("s-4`ed=agk!fkyy`", string0);
      assertNotNull(string0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      boolean boolean0 = StringUtils.isEmpty("s-4`ed=agk!fkyy`");
      assertFalse(boolean0);
      
      String string1 = StringUtils.lowerCase((String) null);
      assertNull(string1);
      
      String string2 = locale0.getDisplayCountry();
      assertFalse(string2.equals((Object)string0));
      assertEquals("China", string2);
      assertNotNull(string2);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      boolean boolean1 = StringUtils.isNumeric((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray1);
      
      String string3 = StringUtils.toRootLowerCase("Locale must not be null");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("locale must not be null", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate("s-4`ed=agk!fkyy`", 3);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("s-4", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("-|&", 3, (-750));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeAll("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("z*Ovtb8CpL-zI+vL@V", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "z*Ovtb8CpL-zI+vL@V";
      String string1 = StringUtils.trim("-");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-", string1);
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "-";
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.trim("z*Ovtb8CpL-zI+vL@V");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("z*Ovtb8CpL-zI+vL@V", string2);
      assertNotNull(string2);
      
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(int0));
      
      String string3 = StringUtils.join((Iterable<?>) linkedHashSet0, (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(int0));
      
      String string4 = StringUtils.prependIfMissing((String) null, (CharSequence) null, charSequenceArray0);
      assertNull(string4);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlphaSpace("z*Ovtb8CpL-zI+vL@V");
      assertFalse(boolean0);
      
      String string5 = StringUtils.removePattern("z*Ovtb8CpL-zI+vL@V", "");
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("z*Ovtb8CpL-zI+vL@V", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = null;
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
      
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[6] = null;
      String string1 = StringUtils.prependIfMissing((String) null, (CharSequence) null, charSequenceArray0);
      assertNull(string1);
      assertEquals(7, charSequenceArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'z';
      charArray0[1] = 'R';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = '6';
      charArray0[5] = 'q';
      charArray0[6] = 'M';
      charArray0[7] = ']';
      charArray0[8] = 'x';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'z', 'R', 'M', 'M', '6', 'q', 'M', ']', 'x'}, charArray0);
      
      String string2 = StringUtils.lowerCase((String) null);
      assertNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = StringUtils.joinWith((String) null, charSequenceArray0);
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.endsWithAny(charSequenceArray0[2], charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      String string4 = StringUtils.substringBetween((String) null, "qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>u");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "M#21T4mQ[?Bofw[/m3";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string0 = StringUtils.substringAfterLast("M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("(f9VckoyN.~J<'>^", 12);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(f9VckoyN...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeAll("", "4#G 3w");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("w]`x[w_*>", 12, "4#G 3w");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("w]`x[w_*>4#", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.joinWith("qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>u", objectArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(4, objectArray0.length);
      
      String string5 = StringUtils.reverse("Minimum abbreviation width is %d");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("d% si htdiw noitaiverbba muminiM", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isNumeric("(f9VckoyN...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("Threshold must not be negative", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "M1/E;ksoNQM\\";
      String string3 = null;
      String string4 = StringUtils.reverse("z*Ovtb8CpL-zI+vL@V");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("V@Lv+Iz-LpC8btvO*z", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "z*Ovtb8CpL-zI+vL@V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.substring("|]pr(zTv%2ZWCey", 44, 44);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.defaultIfBlank("Minimum abbreviation width is %d", "|]pr(zTv%2ZWCey");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.mid("Minimum abbreviation width is %d", 5, (-7));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width is %d", 435, 2);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringBefore("Strings must not be null", "$[?");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Strings must not be null", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverseDelimited(", Length: 0", 'p');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(", Length: 0", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width is %d", (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Minimum abbreviation width is %d";
      objectArray0[2] = (Object) "Strings must not be null";
      String string5 = StringUtils.defaultString("$[?", ", Length: 0");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("$[?", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "G9ULK-fZyNJZn");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.join((Iterable<?>) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "G9ULK-fZyNJZn", (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.getDigits((String) null);
      assertNull(string2);
      
      boolean[] booleanArray0 = new boolean[0];
      String string3 = StringUtils.join(booleanArray0, 'N', (-1), (-3032));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int int2 = StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[14];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.trim(" ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(14, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(charSequenceArray0[0], charSequenceArray0[1]);
      assertTrue(boolean0);
      assertEquals(14, charSequenceArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = '+';
      charArray0[2] = '`';
      int int1 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'v', '+', '`'}, charArray0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", charSequenceArray0[0], (-1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(14, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsNone(charSequenceArray0[1], " ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(14, charSequenceArray0.length);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) " ");
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("e52{dcr-,H{I;Tp0>u", "e52{dcr-,H{I;Tp0>u", 16);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.unwrap("e52{dcr-,H{I;Tp0>u", "");
      assertEquals("e52{dcr-,H{I;Tp0>u", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast((String) null, "e52{dcr-,H{I;Tp0>u");
      assertNull(string1);
      
      String string2 = StringUtils.stripToNull((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.removeAll((String) null, "qa=n'UCJt<:vuc8ZNfQ");
      assertNull(string3);
      
      String string4 = StringUtils.rightPad("', is neither of type Map.Entry nor an Array", 16, (String) null);
      assertFalse(string4.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToEmpty((String) null);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.reverseDelimited("e52{dcr-,H{I;Tp0>u", 'B');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertEquals("e52{dcr-,H{I;Tp0>u", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "M#21T4mQ[?Bofw[/m3";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string0 = StringUtils.substringAfterLast("M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[20];
      charSequenceArray0[4] = (CharSequence) "{gVwGfu";
      String string1 = StringUtils.prependIfMissing("{gVwGfu", "M#21T4mQ[?Bofw[/m3", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{gVwGfu", string1);
      assertNotNull(string1);
      assertEquals(20, charSequenceArray0.length);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Strings must not be nullN)}k8Oz\")c7", "y%hp>.117). ucA)", (-1751));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.repeat('O', 13);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("OOOOOOOOOOOOO", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("M#21T4mQ[?Bofw[/m3", (-2004318069));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("M#21T4mQ[?Bofw[/m3", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("M#21T4mQ[?Bofw[/m3", (String) null);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("M#21T4mQ[?Bofw[/m3", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("{gVwGfu", "Minimum abbreviation width is %dev&Un1#hSI7@F");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string5 = StringUtils.right("HXC5]5", 13);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("HXC5]5", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.stripEnd("M#21T4mQ[?Bofw[/m3", (String) null);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("M#21T4mQ[?Bofw[/m3", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.substringBetween("', is neither of type Map.Entry nor an Array", "Cloneable type ", "e52{dcr-hH{I`Tp0>u");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.wrapIfMissing("z*Ovtb8CpL-zI+vL@V", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("z*Ovtb8CpL-zI+vL@V", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "z*Ovtb8CpL-zI+vL@V";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = null;
      String string3 = StringUtils.removeStart((String) null, "-");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isNumericSpace(charSequenceArray0[0]);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string1));
      
      Iterator<String> iterator0 = arrayList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string1));
      
      boolean boolean1 = arrayList0.add((String) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains(string1));
      
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, "z*Ovtb8CpL-zI+vL@V");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "M#21T4mQ[?Bofw[/m3";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string0 = StringUtils.substringAfterLast("M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("M#21T4mQ[?Bofw[/m3", "", 1979);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.repeat("Index: ", 24);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: ", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.truncate("", 65, 1248);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "vx~dK&,pOlzP&");
      assertNull(string1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-4364);
      intArray0[1] = 65;
      intArray0[2] = 1544;
      intArray0[3] = 65;
      intArray0[4] = 1248;
      intArray0[5] = 5;
      intArray0[6] = (int) 'e';
      String string2 = StringUtils.join(intArray0, '[', 1248, 5);
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-4364), 65, 1544, 65, 1248, 5, 101}, intArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      charArray0[3] = 'a';
      String string0 = StringUtils.join(charArray0, '\u0000', 2066, 2066);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'C', 'a'}, charArray0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "Array element ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'C', 'a'}, charArray0);
      
      String string1 = StringUtils.appendIfMissing((String) null, "org.apache.commons.lang3.StringUtils", stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.capitalize((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.valueOf(charArray0);
      assertFalse(string3.equals((Object)string0));
      assertEquals("\u0000\u0000Ca", string3);
      assertNotNull(string3);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'C', 'a'}, charArray0);
      
      String string4 = StringUtils.chomp((String) null);
      assertNull(string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "D|28u\"";
      stringArray1[1] = "Array element ";
      stringArray1[2] = null;
      stringArray1[3] = "K0qc,Gv";
      stringArray1[4] = null;
      stringArray1[5] = null;
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertEquals(6, stringArray2.length);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      
      String[] stringArray3 = StringUtils.substringsBetween("9]'1!", (String) null, "{}");
      assertNull(stringArray3);
      
      String string5 = StringUtils.getDigits("Strings must not be null");
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isWhitespace("K0qc,Gv");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(boolean1);
      assertEquals(6, stringArray2.length);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "{}", (-1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      String string0 = StringUtils.prependIfMissing((String) null, (CharSequence) null, charSequenceArray0);
      assertNull(string0);
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.repeat('M', 13);
      assertEquals("MMMMMMMMMMMMM", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase(charSequenceArray0[7]);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string2 = StringUtils.substringAfterLast("eA", 13);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.mid((String) null, (-2050), (-2304));
      assertNull(string3);
      
      String string4 = StringUtils.unwrap("", "eA");
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.wrap((String) null, '0');
      assertNull(string5);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "MMMMMMMMMMMMM";
      stringArray0[2] = null;
      stringArray0[3] = "";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = "MMMMMMMMMMMMM";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(7, stringArray1.length);
      assertEquals(7, stringArray0.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.removeAll("Qe8b6zcN<X<jpxOg<{", "...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("...");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("'YwtkewYT<}UOc&o", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(""));
      
      boolean boolean1 = treeSet0.add("R<zJ?w|,N-tOgMo");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(treeSet0.contains("R<zJ?w|,N-tOgMo"));
      assertFalse(treeSet0.contains(""));
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "3", 0);
      assertNull(stringArray1);
      
      String string1 = StringUtils.repeat('O', 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("", "...");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.stripEnd("...", "3");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("...", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      charArray0[3] = 'O';
      String string4 = StringUtils.valueOf(charArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("OOOO", string4);
      assertNotNull(string4);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'O', 'O', 'O', 'O'}, charArray0);
      
      String string5 = StringUtils.chomp("");
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string6 = StringUtils.replaceEachRepeatedly("L=>1.", (String[]) null, (String[]) null);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("L=>1.", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.center("OOOO", 0, '@');
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertEquals("OOOO", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.wrap("qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>u", '{');
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertEquals("{qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>u{", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = StringUtils.trim("d'l\"@D2Hd1Q(C]R:vc");
      assertEquals("d'l\"@D2Hd1Q(C]R:vc", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToEmpty((String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfBlank((String) null, "YA11t'k>F");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("YA11t'k>F", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("d'l\"@D2Hd1Q(C]R:vc", "qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>u");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNumeric("d'l\"@D2Hd1Q(C]R:vc");
      assertFalse(boolean0);
      
      String string3 = StringUtils.trimToEmpty("YA11t'k>F");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("YA11t'k>F", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isNotBlank("YA11t'k>F");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("YA11t'k>F"));
      
      String string4 = locale0.getDisplayCountry();
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("South Korea", string4);
      assertNotNull(string4);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      String string5 = StringUtils.lowerCase("d'l\"@D2Hd1Q(C]R:vc", locale0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("d'l\"@d2hd1q(c]r:vc", string5);
      assertNotNull(string5);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      String string6 = StringUtils.repeat("qa=n'UCJt<:^u", 32);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("qa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^uqa=n'UCJt<:^u", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.join((Object[]) stringArray0, "d'l\"@d2hd1q(c]r:vc");
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals("d'l\"@D2Hd1Q(C]R:vc", string7);
      assertNotNull(string7);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, "l&", (-1), (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "l&";
      charSequenceArray0[2] = (CharSequence) "l&";
      String string1 = StringUtils.removePattern("++]+5m\"!*j{[=", "~IJ1'+p~Zt^U@H*Z");
      assertFalse(string1.equals((Object)string0));
      assertEquals("++]+5m\"!*j{[=", string1);
      assertNotNull(string1);
      
      charSequenceArray0[3] = (CharSequence) "++]+5m\"!*j{[=";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "l&";
      charSequenceArray0[6] = (CharSequence) "";
      String string2 = StringUtils.removeAll("Strings must not be null", "l&");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Strings must not be null", string2);
      assertNotNull(string2);
      
      charSequenceArray0[7] = (CharSequence) "Strings must not be null";
      charSequenceArray0[8] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
      
      String string3 = StringUtils.stripToEmpty("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("++]+5m\"!*j{[=");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      CharSequence[] charSequenceArray1 = new CharSequence[7];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray1[1] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray1[2] = (CharSequence) "Strings must not be null";
      charSequenceArray1[3] = (CharSequence) "l&";
      charSequenceArray1[4] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray1[5] = (CharSequence) "";
      String string4 = StringUtils.removeIgnoreCase((String) null, "qa=n'UCJt<:!u");
      assertNull(string4);
      
      charSequenceArray1[6] = (CharSequence) null;
      int int1 = StringUtils.indexOfDifference(charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(7, charSequenceArray1.length);
      assertNotSame(charSequenceArray1, charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.left("N)}k8Oz\")c7qa=n'UCJt<:!uc8ZyQQ", 3869);
      assertEquals("N)}k8Oz\")c7qa=n'UCJt<:!uc8ZyQQ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("N)}k8Oz\")c7qa=n'UCJt<:!uc8ZyQQ");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "N)}k8Oz\")c7qa=n'UCJt<:!uc8ZyQQ", (CharSequence) "N)}k8Oz\")c7qa=n'UCJt<:!uc8ZyQQ");
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '@';
      charArray0[1] = '*';
      charArray0[2] = 'w';
      charArray0[3] = 'z';
      charArray0[4] = '}';
      charArray0[5] = 'A';
      charArray0[6] = '8';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "N)}k8Oz\")c7qa=n'UCJt<:!uc8ZyQQ", charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'@', '*', 'w', 'z', '}', 'A', '8'}, charArray0);
      
      String string1 = StringUtils.toRootUpperCase("N)}k8Oz\")c7qa=n'UCJt<:!uc8ZyQQ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("N)}K8OZ\")C7QA=N'UCJT<:!UC8ZYQQ", string1);
      assertNotNull(string1);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(int0));
      
      Integer integer0 = new Integer(44);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(44, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean2 = arrayList0.add(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(44));
      assertFalse(arrayList0.contains(int0));
      
      Integer integer1 = new Integer(48);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(48, (int)integer1);
      assertNotNull(integer1);
      
      boolean boolean3 = arrayList0.add(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(integer1));
      assertFalse(arrayList0.contains(int0));
      
      String string2 = StringUtils.join((List<?>) arrayList0, 'L', 750, (-1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(integer1));
      assertFalse(arrayList0.contains(750));
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.removeFirst("HURV4riOn3#xu5W;]o", "HURV4riOn3#xu5W;]o");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "HURV4riOn3#xu5W;]o");
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 256;
      intArray0[1] = (int) 'W';
      intArray0[2] = (int) 'W';
      intArray0[3] = (int) 'W';
      intArray0[4] = 256;
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = (-1);
      String string1 = StringUtils.join(intArray0, '1', 123, (-1587));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {256, 87, 87, 87, 256, (-1), (-1), (-1), (-1)}, intArray0);
      
      String string2 = StringUtils.substringAfterLast("", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "D;40(9");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) stringArray0[0], (CharSequence) "D;40(9");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "D;40(9", stringArray0[0]);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) stringArray0[0], (CharSequence) "D;40(9");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[0] = (double) 24;
      String string0 = StringUtils.join(doubleArray0, 'D', 24, (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {24.0, 0.0}, doubleArray0, 0.01);
      
      String string1 = StringUtils.rightPad("D;40(9", 24, 'V');
      assertFalse(string1.equals((Object)string0));
      assertEquals("D;40(9VVVVVVVVVVVVVVVVVV", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = StringUtils.removeAll("Qe8b6zcN<X<jpxOg<{", "...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("...");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("'YwtkewYT<}UOc&o", "'YwtkewYT<}UOc&o", (-1));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.abbreviateMiddle("Locale must not be nullcomparator", "Locale must not be nullcomparator", 23);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Locale must not be nullcomparator", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.prependIfMissing("The character ", "3", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("3The character ", string2);
      assertNotNull(string2);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.lowerCase("...");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("...", string3);
      assertNotNull(string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string4 = StringUtils.joinWith("Locale must not be nullcomparator", stringArray0);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(0, stringArray0.length);
      
      boolean boolean2 = StringUtils.endsWithAny((CharSequence) null, stringArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0, stringArray0.length);
      
      String string5 = StringUtils.left("3The character ", 23);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("3The character ", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "The character ", (CharSequence) "3The character ");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'd');
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'Y';
      doubleArray0[1] = (double) 'Y';
      doubleArray0[2] = (double) 'Y';
      String string1 = StringUtils.toRootUpperCase("org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store Cannot store ");
      assertEquals("ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE CANNOT STORE ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE CANNOT STORE ", (String) null, true);
      assertEquals(1, int0);
      
      String string2 = StringUtils.substringBefore("ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE CANNOT STORE ", (String) null);
      assertTrue(string2.equals((Object)string1));
      assertEquals("ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE ORG.APACHE.COMMONS.LANG3.OBJECTUTILSCANNOT STORE CANNOT STORE ", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "M#21T4mQ[?Bofw[/m3";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string0 = StringUtils.substringAfterLast("M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[20];
      charSequenceArray0[4] = (CharSequence) "{gVwGfu";
      String string1 = StringUtils.prependIfMissing("{gVwGfu", "M#21T4mQ[?Bofw[/m3", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{gVwGfu", string1);
      assertNotNull(string1);
      assertEquals(20, charSequenceArray0.length);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string2 = StringUtils.substringAfterLast("", "{gVwGfu");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing("F07o^[3.2dwYQ8l\"", "M#21T4mQ[?Bofw[/m3", charSequenceArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("M#21T4mQ[?Bofw[/m3F07o^[3.2dwYQ8l\"", string3);
      assertNotNull(string3);
      assertEquals(20, charSequenceArray0.length);
      
      String string4 = StringUtils.repeat('U', (-1751));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string5 = StringUtils.substringAfterLast("", 1184);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.mid("", (-1751), (-1751));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) null);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(list0.contains(string1));
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(list0.contains(string1));
      assertFalse(list1.contains(string1));
      
      String string7 = StringUtils.join(list1, 'O', 1184, 25);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertEquals("", string7);
      assertNotNull(string7);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(list0.contains(string7));
      assertFalse(list1.contains(string7));
      
      int int0 = StringUtils.compare("e52{dcr-hH{I`Tp0>u", "{gVwGfu", false);
      assertEquals((-22), int0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      charArray0[3] = 'a';
      String string0 = StringUtils.abbreviate((String) null, (String) null, 2722);
      assertNull(string0);
      
      int int0 = StringUtils.compare("p{InCombiningDiacriticalMarks}+", (String) null, false);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      String string1 = StringUtils.join((Locale.FilteringMode[]) null);
      assertNull(string1);
      
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      int int1 = StringUtils.lastIndexOfAny("p{InCombiningDiacriticalMarks}+", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", "", (-4448), (-4448));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("CbeLhCf&+qBr\"cFxg7Z", "B4Etu[&pK}E6MIp");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.lowerCase("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.overlay("", " ", (-5092), (-5092));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.right("", (-2171));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split(" ", 'F');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.trimToEmpty("+5wfMx^^)sp");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("+5wfMx^^)sp", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.uncapitalize("");
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "HBXr N;v";
      charSequenceArray0[1] = (CharSequence) "HBXr N;v";
      charSequenceArray0[2] = (CharSequence) "HBXr N;v";
      String string0 = StringUtils.prependIfMissing("HBXr N;v", "HBXr N;v", charSequenceArray0);
      assertEquals("HBXr N;v", string0);
      assertNotNull(string0);
      assertEquals(3, charSequenceArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-4795);
      intArray0[1] = (int) 'a';
      intArray0[2] = 2;
      intArray0[3] = (-4795);
      intArray0[4] = 331;
      String string1 = StringUtils.join(intArray0, 'Z', (-3669), (-4795));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-4795), 97, 2, (-4795), 331}, intArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      byte[] byteArray0 = StringUtils.getBytes("", charset0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1162;
      shortArray0[1] = (short)63;
      shortArray0[2] = (short)1162;
      String string0 = StringUtils.join(shortArray0, '7');
      assertEquals("116276371162", string0);
      assertNotNull(string0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)1162, (short)63, (short)1162}, shortArray0);
      
      String string1 = StringUtils.abbreviateMiddle(" in an array of ", "...", (short)1162);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" in an array of ", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "116276371162";
      charSequenceArray0[3] = (CharSequence) "...";
      charSequenceArray0[4] = (CharSequence) " in an array of ";
      String string2 = StringUtils.prependIfMissing(" in an array of ", (CharSequence) null, charSequenceArray0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" in an array of ", string2);
      assertNotNull(string2);
      assertEquals(5, charSequenceArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '^';
      charArray0[5] = '7';
      charArray0[6] = '7';
      charArray0[7] = '^';
      charArray0[8] = '7';
      boolean boolean0 = StringUtils.containsNone((CharSequence) " in an array of ", charArray0);
      assertTrue(boolean0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'^', '7', '7', '7', '^', '7', '7', '^', '7'}, charArray0);
      
      String string3 = StringUtils.lowerCase("...");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("...", string3);
      assertNotNull(string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string4 = StringUtils.joinWith("116276371162", charSequenceArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("...116276371162...116276371162116276371162116276371162...116276371162 in an array of ", string4);
      assertNotNull(string4);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.endsWithAny(charSequenceArray0[1], charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      String string0 = StringUtils.join(longArray0, 'G');
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "0", (CharSequence) "0", 1757);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("0");
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'a', 1757, Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1757
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("", (-180));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      String string2 = StringUtils.joinWith("Strings must not be null", objectArray0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(1, objectArray0.length);
      
      String string3 = null;
      String string4 = StringUtils.getDigits("Strings must not be null");
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'G', (-180), 28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -180
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      String string0 = StringUtils.join(booleanArray0, 'G', 28, 28);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string1 = StringUtils.strip("", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[20];
      charSequenceArray0[4] = (CharSequence) "{gVwGfu";
      String string0 = StringUtils.prependIfMissing("{gVwGfu", "M#21T4mQ[?Bofw[/m3", charSequenceArray0);
      assertEquals("{gVwGfu", string0);
      assertNotNull(string0);
      assertEquals(20, charSequenceArray0.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[1] = "M#21T4mQ[?Bofw[/m3";
      stringArray0[2] = "M#21T4mQ[?Bofw[/m3";
      stringArray0[3] = "M#21T4mQ[?Bofw[/m3";
      stringArray0[5] = "{gVwGfu";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "{gVwGfu");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "{gVwGfu", (CharSequence) "{gVwGfu");
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'h', (-1751), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1751
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = StringUtils.truncate("", 65, 1258);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trim("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", 1848);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceAll("", "M", "clone");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Arguments cannot both be null", (String) null);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = null;
      stringArray1[1] = null;
      stringArray1[2] = "Arguments cannot both be null";
      String string0 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.substringBetween(stringArray1[1], stringArray1[1]);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNull(string1);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "M#21T4mQ[?Bofw[/m3";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string0 = StringUtils.substringAfterLast("M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("M#21T4mQ[?Bofw[/m3", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripToNull("The String must not be empty");
      assertFalse(string1.equals((Object)string0));
      assertEquals("The String must not be empty", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate("M#21T4mQ[?Bofw[/m3", 99);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("?Bofw[/m3M#21T4mQ[", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.right("The String must not be empty", 457);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("The String must not be empty", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.substringBetween("The String must not be empty", "");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOf((CharSequence) "The String must not be empty", 1258, (-150));
      assertEquals((-1), int0);
      
      String string5 = StringUtils.truncate("RWk8>[X", 321);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("RWk8>[X", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.removeStart(".r", (String) null);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals(".r", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.join(objectArray0, "#");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals(4, objectArray0.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "RWk8>[X";
      stringArray0[3] = "The String must not be empty";
      stringArray0[4] = "#";
      stringArray0[5] = "#";
      stringArray0[6] = "RWk8>[X";
      String string8 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertEquals("", string8);
      assertNotNull(string8);
      assertEquals(7, stringArray0.length);
      
      String string9 = StringUtils.getDigits("M#21T4mQ[?Bofw[/m3#java.lang.Object@7eabb44a##");
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertEquals("2143744", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-1000));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-1000));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceChars("offset cannot be negative", "maxWith cannot be negative", "frY))T");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ffsTrTrT)", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ffsTrTrT)";
      stringArray0[1] = "";
      stringArray0[3] = "maxWith cannot be negative";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.replaceAll("frY))T", stringArray0[2], "");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("frY))T", string2);
      assertNotNull(string2);
      assertEquals(4, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      String string3 = StringUtils.toRootUpperCase("frY))T");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("FRY))T", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "FRY))T", "*;QH");
      assertTrue(boolean0);
      
      String string4 = StringUtils.difference("", "");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.prependIfMissing("frY))T", "", stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("frY))T", string5);
      assertNotNull(string5);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string6 = StringUtils.repeat('U', 5);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("UUUUU", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.substringAfterLast("{gVwGfu", (-1000));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String[] stringArray2 = StringUtils.split("fzP1", 'U');
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      String string8 = StringUtils.trimToEmpty("frY))T");
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertEquals("frY))T", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.uncapitalize((String) null);
      assertNull(string9);
      
      String[] stringArray3 = StringUtils.split("", ',');
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertNotNull(stringArray3);
      assertEquals(0, stringArray3.length);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = " ";
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = ", Length:Locle must not be null(c, Length:Locle must not be null(c(c";
      // Undeclared exception!
      try { 
        StringUtils.removeAll("f$C+D?lv#Qi=Z|[", "x\u0000/zq2<#+*IH~C%gW?x\u0000/zq2<#+*IH~C%gW?x\u0000/zq2<#+*IH~C%gW?x\u0000/zq2<#+*IH~C%gW?x\u0000/zq2<#+*IH~C%gW?");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 9
         // x\u0000/zq2<#+*IH~C%gW?x\u0000/zq2<#+*IH~C%gW?x\u0000/zq2<#+*IH~C%gW?x\u0000/zq2<#+*IH~C%gW?x\u0000/zq2<#+*IH~C%gW?
         //          ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = "";
      int int0 = (-969);
      String string1 = StringUtils.leftPad("", (-969));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (-969));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.unwrap("offset cannot be negative", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("offset cannot be negative", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("offset cannot be negative", "offset cannot be negative");
      assertTrue(boolean0);
      
      int int2 = StringUtils.compare("", "\r");
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.countMatches((CharSequence) "", 'B');
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      String string3 = "qa=n'UCJt<:^uc8ZNfQ";
      String string4 = StringUtils.removeStart((String) null, ", Length: ");
      assertNull(string4);
      
      int int4 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertEquals(0, int4);
      
      String string5 = null;
      String string6 = StringUtils.substringAfterLast("", "");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int5 = 12;
      String string7 = StringUtils.abbreviate("H-kAeSD(?g<,", 12);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertEquals("H-kAeSD(?g<,", string7);
      assertNotNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.removeAll("H-kAeSD(?g<,", "H-kAeSD(?g<,");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unknown inline modifier near index 9
         // H-kAeSD(?g<,
         //          ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '4', 2382, (-1943));
      assertNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      String string1 = StringUtils.join(objectArray0, "}UO");
      assertEquals("}UO", string1);
      assertNotNull(string1);
      assertEquals(2, objectArray0.length);
      
      String string2 = StringUtils.strip("XyiU?$X.<b]>1y");
      assertFalse(string2.equals((Object)string1));
      assertEquals("XyiU?$X.<b]>1y", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf("XyiU?$X.<b]>1y", (CharSequence) null, (-1072));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.endsWith("XyiU?$X.<b]>1y", "XyiU?$X.<b]>1y");
      assertTrue(boolean0);
      
      String string3 = "N)}k\\8Oz\")c7qa=n'UCJt<:^uc8ZNfQ";
      String string4 = StringUtils.replaceChars((String) null, "N)}k8Oz\")c7qa=n'UCJt<:^uc8ZNfQ", "}UO");
      assertNull(string4);
      
      char[] charArray0 = new char[6];
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[4] = '4';
      charArray0[5] = '4';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "}UO", charArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '4', '4', '4', '4', '4'}, charArray0);
      
      String string5 = StringUtils.replaceAll("XyiU?$X.<b]>1y", "$5", "qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>u");
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("XyiU?$X.<b]>1y", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "XyiU?$X.<b]>1y", (CharSequence) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = "|]pr(zTv%2ZWCey";
      int int0 = 29;
      String string1 = StringUtils.substring("|]pr(zTv%2ZWCey", 29, 29);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.defaultIfBlank("Minimum abbreviation width is %d", "|]pr(zTv%2ZWCey");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Minimum abbreviation width is %d", string2);
      assertNotNull(string2);
      
      String string3 = "64E1 ";
      String string4 = StringUtils.rightPad("64E1 ", 5, "org.apache.commons.lang3.LocaleUtils");
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("64E1 ", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAllUpperCase("Minimum abbreviation width is %d");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "|]pr(zTv%2ZWCey", (CharSequence) null, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", '(');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.split("h", 'Y');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.stripAccents((String) null);
      assertNull(string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, 'Y');
      assertNull(stringArray1);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, 'Y');
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("", 'g');
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat('g', 1278);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "h", 6);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "U3MtO";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string0 = StringUtils.repeat('v', 1829);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) string0, 1829);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isEmpty(string0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = StringUtils.SPACE;
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", 1080);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.chomp(" ");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = StringUtils.trim("HURV4riOn3#xu5W;]o");
      assertEquals("HURV4riOn3#xu5W;]o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "HURV4riOn3#xu5W;]o", (CharSequence) "");
      assertEquals(18, int0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("HURV4riOn3#xu5W;]o"));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("HURV4riOn3#xu5W;]o"));
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      assertFalse(function1.equals((Object)function0));
      assertNotNull(function1);
      
      linkedList0.replaceAll(unaryOperator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("HURV4riOn3#xu5W;]o"));
      
      String string3 = StringUtils.join(iterator0, 'E');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("HURV4riOn3#xu5W;]o"));
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = 'T';
      charArray0[2] = '*';
      charArray0[3] = 'E';
      charArray0[4] = 'E';
      String string4 = StringUtils.center("Strings must not be null", 18, "{");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Strings must not be null", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) "HURV4riOn3#xu5W;]o");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.valueOf(charArray0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("ET*EE\u0000\u0000\u0000", string5);
      assertNotNull(string5);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'E', 'T', '*', 'E', 'E', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", "");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string6 = StringUtils.unwrap("q)", '*');
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("q)", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.truncate("V:74", 321, 321);
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      assertNotNull(string7);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "V:74", (CharSequence) "", 321);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(4, int2);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = StringUtils.overlay("D;40(9", "7\"-.'c1$V", (-5092), (-5092));
      assertEquals("7\"-.'c1$VD;40(9", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("%ku]C lgD]3X", 256);
      assertFalse(string1.equals((Object)string0));
      assertEquals("%ku]C lgD]3X", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split((String) null, 'F');
      assertNull(stringArray0);
      
      String string2 = StringUtils.trimToEmpty("7\"-.'c1$VD;40(9");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("7\"-.'c1$VD;40(9", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("%ku]C lgD]3X");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("%ku]C lgD]3X", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("D;40(9", "7\"-.'c1$VD;40(9");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("D;40(9", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("~Ng!kV~", "~Ng!kV~", "~Ng!kV~");
      assertEquals("~Ng!kV~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("~Ng!kV~", "~Ng!kV~");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("~Ng!kV~", (-843), "");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("~Ng!kV~", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.left("~Ng!kV~", 1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("~", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      String string4 = "maxWith cannot be negative";
      String string5 = StringUtils.wrapIfMissing("maxWith cannot be negative", "org.apache.commons.lang3.RegExUtils");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.RegExUtilsmaxWith cannot be negativeorg.apache.commons.lang3.RegExUtils", string5);
      assertNotNull(string5);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      char char0 = 'G';
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'G', Integer.MIN_VALUE, (-843));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483648
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.join((double[]) null, '?');
      assertNull(string1);
      
      String string2 = StringUtils.rightPad("BkLYN", (-5429), "on width is %d");
      assertEquals("BkLYN", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllUpperCase("BkLYN");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "on width is %d", 1905);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("", ", Lngth");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = StringUtils.getDigits(",Bx'aj\u0004'5%cC~/HBh");
      assertEquals("5", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "45", (char[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace(",Bx'aj\u0004'5%cC~/HBh");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "org.apache.commons.lang3.exception.CloneFailedException";
      objectArray0[1] = (Object) ",Bx'aj\u0004'5%cC~/HBh";
      objectArray0[2] = (Object) "ev&9n1#hSI7@F";
      String string1 = StringUtils.joinWith("ev&9n1#hSI7@F", objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.exception.CloneFailedExceptionev&9n1#hSI7@F,Bx'aj\u0004'5%cC~/HBhev&9n1#hSI7@Fev&9n1#hSI7@F", string1);
      assertNotNull(string1);
      assertEquals(3, objectArray0.length);
      
      boolean boolean2 = StringUtils.equals((CharSequence) ",Bx'aj\u0004'5%cC~/HBh", (CharSequence) ",Bx'aj\u0004'5%cC~/HBh");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1024;
      shortArray0[1] = (short)321;
      shortArray0[2] = (short)37;
      String string2 = StringUtils.join(shortArray0, '\"', (int) (short)321, (-2180));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)1024, (short)321, (short)37}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      
      Locale locale1 = Locale.ROOT;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      String string0 = locale1.getDisplayName(locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      String string1 = locale1.getDisplayLanguage();
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      String string2 = locale1.getDisplayName(locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string3 = locale0.getDisplayVariant(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string3);
      assertNotNull(string3);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      Locale locale2 = Locale.forLanguageTag("oQ4[#m;6<%Fm8i5=|+");
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      
      String[] stringArray1 = Locale.getISOCountries();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(250, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.SPACE;
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.startsWithAny(" ", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean0);
      assertEquals(250, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      String string5 = StringUtils.remove("", "");
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "oQ4[#m;6<%Fm8i5=|+");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = StringUtils.remove("BL-a}zk", "BL-a}zk");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("Strings must not be null", "Strings must not be null");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      String string3 = StringUtils.join(booleanArray0, 'I');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("trueItrueItrueIfalse", string3);
      assertNotNull(string3);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'I';
      int int0 = 107;
      String string4 = StringUtils.join(charArray0, 'I', 107, 3);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'I'}, charArray0);
      
      int int1 = 1136;
      int int2 = StringUtils.indexOf((CharSequence) "", (-656), 1136);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) "trueItrueItrueIfalse";
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      String string5 = StringUtils.joinWith("", objectArray0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("truetrueItrueItrueIfalsetrue", string5);
      assertNotNull(string5);
      assertEquals(5, objectArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("a{c]uW/k|@`:c$[", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      charArray0[3] = 'a';
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      
      String string0 = locale0.getDisplayScript();
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(locale0, locale1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      
      int int0 = StringUtils.getFuzzyDistance("", "", locale1);
      assertEquals(0, int0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      
      String string1 = StringUtils.substringAfterLast("", (-640));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.truncate("", 0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      char char0 = 'C';
      charArray0[2] = 'C';
      String string0 = StringUtils.capitalize("ev&9n1#hSI7@F");
      assertEquals("Ev&9n1#hSI7@F", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000\u0000C\u0000", string1);
      assertNotNull(string1);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'C', '\u0000'}, charArray0);
      
      String string2 = StringUtils.chomp("\u0000\u0000C\u0000");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\u0000\u0000C\u0000", string2);
      assertNotNull(string2);
      
      int int0 = 611;
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "Ev&9n1#hSI7@F", (CharSequence) "ev&9n1#hSI7@F", 611);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "D|28u\"";
      stringArray0[1] = "K0qc,Gv";
      stringArray0[2] = "\u0000\u0000C\u0000";
      stringArray0[3] = null;
      stringArray0[4] = "D|28u\"";
      stringArray0[5] = "Ev&9n1#hSI7@F";
      stringArray0[6] = "Ev&9n1#hSI7@F";
      stringArray0[7] = "\u0000\u0000C\u0000";
      stringArray0[8] = null;
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("K0qc,Gv", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "D;40(9";
      objectArray0[1] = (Object) "D;40(9";
      objectArray0[2] = (Object) "D;40(9";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[6] = (Object) "D;40(9";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = StringUtils.join(objectArray0, "Array and element cannot both be null");
      assertNotNull(string0);
      assertEquals(8, objectArray0.length);
      
      String string1 = StringUtils.substringAfterLast("Search and Replace array lengths don't match: ", 3129);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.truncate("MocgS`,>Ior6S", 3129);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("MocgS`,>Ior6S", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '<');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      String string1 = StringUtils.removeEnd("g(.d}E_6yNLEY2", "maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("g(.d}E_6yNLEY2", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("maxWith cannot be negative", 14, "_2#");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("maxWith cannot be negative", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String string0 = StringUtils.trim("HURV4riOn3#xu5W;]o");
      assertEquals("HURV4riOn3#xu5W;]o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "HURV4riOn3#xu5W;]o", (CharSequence) "");
      assertEquals(18, int0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      linkedList0.replaceAll(unaryOperator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      String string3 = StringUtils.join(iterator0, 'E');
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = 'B';
      charArray0[2] = '*';
      charArray0[3] = 'E';
      charArray0[4] = 'E';
      String string4 = StringUtils.center("Strings must not be null", 18, "{");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Strings must not be null", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) "HURV4riOn3#xu5W;]o");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.valueOf(charArray0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("EB*EE\u0000\u0000\u0000", string5);
      assertNotNull(string5);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'E', 'B', '*', 'E', 'E', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", "");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string6 = StringUtils.unwrap("q)", '*');
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("q)", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-969));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-969));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.unwrap("offset cannot be negative", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("offset cannot be negative", "offset cannot be negative");
      assertTrue(boolean0);
      
      int int1 = StringUtils.compare("offset cannot be negative", "");
      assertFalse(int1 == int0);
      assertEquals(25, int1);
      
      int int2 = StringUtils.countMatches((CharSequence) "offset cannot be negative", 'B');
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String string2 = StringUtils.lowerCase("offset cannot be negative");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("offset cannot be negative", string2);
      assertNotNull(string2);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "");
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      
      String[] stringArray0 = StringUtils.split("offset cannot be negative", "a\u0005_|)");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(int3));
      
      String string3 = StringUtils.removeEnd("a\u0005_|)", "a\u0005_|)");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(3, stringArray0.length);
      
      boolean boolean1 = StringUtils.isEmpty("offset cannot be negative");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.lowerCase("");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string6 = StringUtils.defaultString("");
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String string0 = StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", 50, 1701);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[6];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "p{InCombiningDiacriticalMarks}+", charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String[] stringArray0 = StringUtils.split((String) null, "', is neither of type Map.Entry nor an Array", 0);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "\n", 50);
      assertNull(stringArray1);
      
      String string1 = StringUtils.unwrap("', is neither of type Map.Entry nor an Array", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat((String) null, "}UO", 0);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("p{InCombiningDiacriticalMarks}+");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.substringBetween("', is neither of type Map.Entry nor an Array", " vs ");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.contains(charSequenceArray0[2], (CharSequence) "HURV4riOn3#xu5W;]o");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(4, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split((String) null, 'Y');
      assertNull(stringArray0);
      
      String string1 = StringUtils.stripAccents("', is neither of type Map.Entry nor an Array");
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("#", 'Y');
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, 'Y');
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("VcOMwr0gqb2", '`');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("`VcOMwr0gqb2`", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat('W', 1278);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "M#21T4mQ[?Bofw[/m3";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string0 = StringUtils.substringAfterLast("M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[20];
      charSequenceArray0[4] = (CharSequence) "{gVwGfu";
      String string1 = StringUtils.prependIfMissing("{gVwGfu", "M#21T4mQ[?Bofw[/m3", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{gVwGfu", string1);
      assertNotNull(string1);
      assertEquals(20, charSequenceArray0.length);
      
      String string2 = StringUtils.repeat('U', (-1751));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringAfterLast("4<~#!&_qt+&Plcf@", (int) 'U');
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("", '1');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.trimToEmpty("?`M)t42k|X'W[Jv");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("?`M)t42k|X'W[Jv", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.uncapitalize("N)}k8Oz\")c7qa=n'UCJt<:^uc8ZNfQ");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("n)}k8Oz\")c7qa=n'UCJt<:^uc8ZNfQ", string5);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.split("n)}k8Oz\")c7qa=n'UCJt<:^uc8ZNfQ", '1');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = " ";
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripEnd("", "");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[0];
      String string3 = StringUtils.valueOf(charArray0);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string4 = StringUtils.chomp("L&{)s^_)V");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("L&{)s^_)V", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 1524);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("L&{)s^_)V"));
      
      char char0 = 'S';
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.LocaleUtils", 'S');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean2 = StringUtils.isAllUpperCase("L&{)s^_)V");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string5 = null;
      String string6 = StringUtils.removeStartIgnoreCase("L&{)s^_)V", (String) null);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("L&{)s^_)V", string6);
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("23h=D:`I;ng$Q*", 'Q');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("23h=D:`I;ng$Q*", string2);
      assertNotNull(string2);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string1));
      
      Spliterator<String> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string1));
      
      boolean boolean1 = arrayList0.add("G9ULK-fZyNJZn");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains(string1));
      assertTrue(arrayList0.contains("G9ULK-fZyNJZn"));
      
      boolean boolean2 = arrayList0.add("");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.contains(string2));
      assertTrue(arrayList0.contains(string1));
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(arrayList0.contains(string2));
      assertTrue(arrayList0.contains(string1));
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("G9ULK-fZyNJZn", string3);
      assertNotNull(string3);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(arrayList0.contains(string2));
      assertTrue(arrayList0.contains(string1));
      
      boolean boolean3 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.mid("Object varargs must not be null", (-1911), 1860);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Object varargs must not be null", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat((String) null, 0);
      assertNull(string5);
      
      String string6 = StringUtils.substringAfter("", ":");
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.repeat("(c", "", (-817));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
      
      boolean boolean4 = StringUtils.isAlphanumericSpace("(c");
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      String string8 = StringUtils.substringBetween("", "w");
      assertNull(string8);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      String string9 = StringUtils.getIfEmpty((String) null, supplier0);
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertEquals("", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.stripToNull("...");
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertEquals("...", string10);
      assertNotNull(string10);
      
      String string11 = StringUtils.difference("G9ULK-fZyNJZn", "org.apache.commons.lang3.RegExUtils");
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string6));
      assertEquals("org.apache.commons.lang3.RegExUtils", string11);
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string0 = StringUtils.removeIgnoreCase("*Sqo)=C", "");
      assertEquals("*Sqo)=C", string0);
      assertNotNull(string0);
      
      charSequenceArray0[2] = (CharSequence) "*Sqo)=C";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      String string1 = StringUtils.getDigits("`p=iQ,Mz[nX!%x");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("[7L%zS&rh%dl!K}", '9');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAllUpperCase("qa=n'UCJt<:^u");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.removeStartIgnoreCase("", "");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf(charSequenceArray0[5], 16, 775);
      assertEquals((-1), int0);
      assertEquals(8, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("`p=iQ,Mz[nX!%x");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-362);
      intArray0[1] = 123;
      intArray0[2] = (int) '1';
      intArray0[3] = (int) '1';
      intArray0[4] = 2382;
      intArray0[5] = 2382;
      intArray0[6] = (-1587);
      intArray0[7] = 2382;
      intArray0[8] = (int) '1';
      String string0 = StringUtils.join(intArray0, '1', 140, (-362));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-362), 123, 49, 49, 2382, 2382, (-1587), 2382, 49}, intArray0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "\r", "p{InCombiningDiacriticalMarks}+", 2382);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Iterable<?>) null, "");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trim("-");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfBlank("z*Ovtb8CpL-zI+vL@V", " ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("z*Ovtb8CpL-zI+vL@V", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "}UO", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("}UO");
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {125, 85, 79}, intArray0);
      
      String string0 = StringUtils.strip("}U", "\n");
      assertEquals("}U", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '<', (-1722), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1722
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)63;
      String string0 = StringUtils.mid((String) null, (-2304), (byte)63);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "M#21T4mQ[?Bofw[/m3";
      objectArray0[1] = (Object) "t48|PI,fg";
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "t48|PI,fg";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "M#21T4mQ[?Bofw[/m3";
      String string0 = StringUtils.joinWith("t48|PI,fg", objectArray0);
      assertNotNull(string0);
      assertEquals(6, objectArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "t48|PI,fg", (CharSequence) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = 'g';
      charArray0[2] = '4';
      charArray0[3] = 'q';
      charArray0[5] = '<';
      charArray0[6] = 'f';
      charArray0[7] = '[';
      int int1 = StringUtils.indexOfAny((CharSequence) "B99?1I<", charArray0);
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'l', 'g', '4', 'q', '\u0000', '<', 'f', '['}, charArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("M#21T4mQ[?Bofw[/m3t48|PI,fgt48|PI,fgt48|PI,fgjava.lang.Object@440b0f6et48|PI,fgt48|PI,fgt48|PI,fgjava.lang.Object@13c2cb20t48|PI,fgM#21T4mQ[?Bofw[/m3");
      assertNotNull(intArray0);
      assertEquals(149, intArray0.length);
      
      String string1 = StringUtils.strip("jB[KeYf6uJ-d", "Hb\"3Rx`g>rjH+=pb");
      assertFalse(string1.equals((Object)string0));
      assertEquals("B[KeYf6uJ-d", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.mid((String) null, 6, 1818);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("ey+6w", "-");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "G9ULK-fZyNJZn");
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.split("G9ULK-fZyNJZn", " ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(int0));
      
      String string3 = StringUtils.removeEnd("", "G9ULK-fZyNJZn");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.ordinalIndexOf("", "", 3442);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.startsWithAny("", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = StringUtils.lowerCase("D;40(9");
      assertEquals("d;40(9", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[8];
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[0] = object1;
      objectArray0[1] = (Object) "org.apache.commons.lang3.exception.CloneFailedException";
      objectArray0[2] = (Object) "org.apache.commons.lang3.exception.CloneFailedException";
      objectArray0[3] = (Object) "D;40(9";
      objectArray0[4] = (Object) "ev&9n1#hSI7@F";
      objectArray0[5] = (Object) "d;40(9";
      objectArray0[6] = (Object) "d;40(9";
      objectArray0[7] = (Object) "org.apache.commons.lang3.exception.CloneFailedException";
      String string1 = StringUtils.joinWith("ev&9n1#hSI7@F", objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(8, objectArray0.length);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "d;40(9", (CharSequence) "java.lang.Object@1c1bdff5ev&9n1#hSI7@Forg.apache.commons.lang3.exception.CloneFailedExceptionev&9n1#hSI7@Forg.apache.commons.lang3.exception.CloneFailedExceptionev&9n1#hSI7@FD;40(9ev&9n1#hSI7@Fev&9n1#hSI7@Fev&9n1#hSI7@Fd;40(9ev&9n1#hSI7@Fd;40(9ev&9n1#hSI7@Forg.apache.commons.lang3.exception.CloneFailedException");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      String string2 = StringUtils.join(shortArray0, 'V', 3613, 3613);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      String string0 = StringUtils.lowerCase("S-4`eD=aGk!FkYY`", locale0);
      assertEquals("s-4`ed=agk!fkyy`", string0);
      assertNotNull(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      String string1 = StringUtils.substringAfter("s-4`ed=agk!fkyy`", "S-4`eD=aGk!FkYY`");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "S-4`eD=aGk!FkYY`", (CharSequence) "");
      assertEquals(0, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "S-4`eD=aGk!FkYY`";
      objectArray0[1] = (Object) "s-4`ed=agk!fkyy`";
      objectArray0[2] = (Object) "S-4`eD=aGk!FkYY`";
      objectArray0[3] = (Object) locale0;
      String string2 = StringUtils.joinWith("S-4`eD=aGk!FkYY`", objectArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("S-4`eD=aGk!FkYY`S-4`eD=aGk!FkYY`s-4`ed=agk!fkyy`S-4`eD=aGk!FkYY`S-4`eD=aGk!FkYY`S-4`eD=aGk!FkYY`zh_CN", string2);
      assertNotNull(string2);
      assertEquals(4, objectArray0.length);
      
      boolean boolean0 = StringUtils.endsWithAny("s-4`ed=agk!fkyy`", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.left("8<.8crK\\.", 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "S-4`eD=aGk!FkYY`S-4`eD=aGk!FkYY`s-4`ed=agk!fkyy`S-4`eD=aGk!FkYY`S-4`eD=aGk!FkYY`S-4`eD=aGk!FkYY`zh_CN", (CharSequence) "S-4`eD=aGk!FkYY`S-4`eD=aGk!FkYY`s-4`ed=agk!fkyy`S-4`eD=aGk!FkYY`S-4`eD=aGk!FkYY`S-4`eD=aGk!FkYY`zh_CN");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("", (-180));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = 'X';
      charArray0[2] = '^';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'m', 'X', '^'}, charArray0);
      
      String string2 = StringUtils.lowerCase("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      String string3 = StringUtils.joinWith("org.apache.commons.lang3.exception.CloneFailedException", objectArray0);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '<');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string1 = StringUtils.replaceOnceIgnoreCase((String) null, "org.apache.commons.lang3.Charsets", "DL");
      assertNull(string1);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string3 = StringUtils.repeat('w', (-1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("org.apache.commons.lang3.RegExUtils");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.RegExUtils", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.endsWithAny("org.apache.commons.lang3.RegExUtils", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "D;40(9";
      objectArray0[1] = (Object) "D;40(9";
      objectArray0[2] = (Object) "D;40(9";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[6] = (Object) "D;40(9";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = StringUtils.replaceFirst("", "/%LaUD}ZY, 1Q'0g5V", "=<()Af4{SvC9l");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.thrtil", (CharSequence) "=<()Af4{SvC9l", 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      String string0 = StringUtils.join(objectArray0, "O8Z(&}B1w>JtgKl");
      assertEquals("zh_TWO8Z(&}B1w>JtgKlzh_TW", string0);
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("?A", "fd:T2(_gccgn", true);
      assertEquals((-39), int0);
      
      String string1 = StringUtils.chomp("aaw;u_F>a7Ye~K!");
      assertFalse(string1.equals((Object)string0));
      assertEquals("aaw;u_F>a7Ye~K!", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((double[]) null, 'b');
      assertNull(string2);
      
      String string3 = StringUtils.rightPad("fd:T2(_gccgn", 3636, ">a/0oW6`d.0xT&");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAllUpperCase(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "fd:T2(_gccgn", (CharSequence) "aaw;u_F>a7Ye~K!", 32);
      assertFalse(int1 == int0);
      assertEquals(15, int1);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Iterator<Object> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      String string4 = StringUtils.join((Iterable<?>) serviceLoader0, ">a/0oW6`d.0xT&");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = StringUtils.defaultString("ey+6w", "jkCb7$Z");
      assertEquals("ey+6w", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 631L;
      String string1 = StringUtils.join(longArray0, '~');
      assertFalse(string1.equals((Object)string0));
      assertEquals("631", string1);
      assertNotNull(string1);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {631L}, longArray0);
      
      String string2 = StringUtils.substringBefore("ey+6w", "_");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ey+6w", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumeric("631");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "ey+6w", (CharSequence) "_");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.removePattern("ey+6w", ";#&Oy2a]");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("ey+6w", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "D;40(9";
      objectArray0[1] = (Object) "D;40(9";
      objectArray0[2] = (Object) "D;40(9";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "D;40(9";
      objectArray0[6] = (Object) "D;40(9";
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = 'O';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      charArray0[5] = ':';
      charArray0[6] = ':';
      String string0 = StringUtils.join(charArray0, 'u');
      assertEquals(":uOu:u:u:u:u:", string0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {':', 'O', ':', ':', ':', ':', ':'}, charArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ":uOu:u:u:u:u:", 6);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlpha("D;40(9");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("D;40(9");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.stripEnd("Supplied value must be a valid byte literal between -128 and 127: [", ":uOu:u:u:u:u:");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = StringUtils.substringAfter("wwl`Uxpj0*j", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Threshold must not be negative");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      String string1 = StringUtils.LF;
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      assertNotNull(unaryOperator1);
      
      int[] intArray0 = new int[0];
      String string2 = StringUtils.join(intArray0, 'u', 32, (-1920));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "wwl`Uxpj0*j";
      charSequenceArray0[1] = (CharSequence) "Threshold must not be negative";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      String string3 = StringUtils.chop((String) null);
      assertNull(string3);
      
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "wwl`Uxpj0*j";
      charSequenceArray0[6] = (CharSequence) "Threshold must not be negative";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = StringUtils.getDigits(" ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("", "F{");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "F{", (CharSequence) " ");
      assertEquals((-1), int0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      linkedList0.replaceAll(unaryOperator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      String string2 = StringUtils.join(iterator0, '~');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(" "));
      
      String string3 = StringUtils.center((String) null, (-1), (String) null);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Strings must not be null", (CharSequence) "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) "{");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      String string4 = StringUtils.valueOf(charArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("E", string4);
      assertNotNull(string4);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'E'}, charArray0);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) null, "");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string5 = StringUtils.unwrap("", 'B');
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = StringUtils.rightPad("qa=n'UCJt<:!u", 52, "The Array must not be null");
      assertEquals("qa=n'UCJt<:!uThe Array must not be nullThe Array mus", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "qa=n'UCJt<:!uThe Array must not be nullThe Array mus", (CharSequence) "qa=n'UCJt<:!u");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("qa=n'UCJt<:!uThe Array must not be nullThe Array mus");
      assertNotNull(stringArray0);
      assertEquals(8, stringArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "|~x<#SNQ.v";
      charSequenceArray0[1] = (CharSequence) ")YTeN=D@\rqC$pYE.";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("}U", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.repeat("qa=n'UCJt<:!uThe Array must not be nullThe Array mus", (-125));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, "7_x");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("qa=n'UCJt<:!uThe7_xArray7_xmust7_xnot7_xbe7_xnullThe7_xArray7_xmus", string2);
      assertNotNull(string2);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '<');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      String string1 = StringUtils.uncapitalize("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("", (-113), "");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("", "}x|7t-KS t4iQ>pv'", (-4086), (-113));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-1000));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-1000));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceChars("offset cannot be negative", "maxWith cannot be negative", "frY))T");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ffsTrTrT)", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ffsTrTrT)";
      stringArray0[1] = "";
      stringArray0[3] = "maxWith cannot be negative";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.replaceAll("frY))T", stringArray0[2], "");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("frY))T", string2);
      assertNotNull(string2);
      assertEquals(4, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      String string3 = StringUtils.toRootUpperCase("frY))T");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("FRY))T", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("Strings must not be null", "ffsTrTrT)", stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Strings must not be null", string4);
      assertNotNull(string4);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "maxWith cannot be negative", (CharSequence) "frY))T");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.firstNonBlank(stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("ffsTrTrT)", string5);
      assertNotNull(string5);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string6 = StringUtils.replaceFirst("qa=n'UCJt<:^uc8ZNfQ", "", "p{InCombiningDiacriticalMarks}+");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+qa=n'UCJt<:^uc8ZNfQ", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = StringUtils.getDigits(",Bx'aj\u0004'5%cC~/HBh");
      assertEquals("5", string0);
      assertNotNull(string0);
      
      char[] charArray0 = null;
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "45", (char[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace(",Bx'aj\u0004'5%cC~/HBh");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "45", 1233, 56);
      assertEquals((-1), int0);
      
      String string1 = "";
      String string2 = StringUtils.center("cM CTL`&x/", 227);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("                                                                                                            cM CTL`&x/                                                                                                             ", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "                                                                                                            cM CTL`&x/                                                                                                             ", (CharSequence) ",Bx'aj\u0004'5%cC~/HBh");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = "qa=n'UCJt<:^u";
      String string4 = "FiKF7U'KQl*fD+";
      String string5 = "ch";
      String string6 = StringUtils.center("FiKF7U'KQl*fD+", (-56), "ch");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("FiKF7U'KQl*fD+", string6);
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = StringUtils.removeAll("Qe8b6zcN<X<jpxOg<{", "...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("u\"HV", 56, "Qe8b6zcN<X<jpxOg<{");
      assertFalse(string1.equals((Object)string0));
      assertEquals("u\"HVQe8b6zcN<X<jpxOg<{Qe8b6zcN<X<jpxOg<{Qe8b6zcN<X<jpxOg", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>u";
      objectArray0[2] = (Object) "u\"HV";
      objectArray0[3] = (Object) "...";
      objectArray0[4] = (Object) "qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>u";
      objectArray0[5] = (Object) "";
      String string2 = StringUtils.joinWith("", objectArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>uu\"HV...qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>u", string2);
      assertNotNull(string2);
      assertEquals(6, objectArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>uu\"HV...qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>u", 56, 56);
      assertEquals(14, int0);
      
      String string3 = StringUtils.substringBefore("u\"HVQe8b6zcN<X<jpxOg<{Qe8b6zcN<X<jpxOg<{Qe8b6zcN<X<jpxOg", "u\"HVQe8b6zcN<X<jpxOg<{Qe8b6zcN<X<jpxOg<{Qe8b6zcN<X<jpxOg");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverseDelimited("km_9Y", 'p');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("km_9Y", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOf((CharSequence) "qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>u", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string5 = StringUtils.join(objectArray0, "~}ThL?06DF=>g", 811, 16);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(6, objectArray0.length);
      
      String string6 = StringUtils.remove("km_9Y", '{');
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("km_9Y", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-890.23737F);
      floatArray0[3] = 3186.7627F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-2484.6F);
      String string0 = StringUtils.join(floatArray0, '\"', 64, 64);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-890.23737F), 3186.7627F, 0.0F, 0.0F, 0.0F, (-2484.6F)}, floatArray0, 0.01F);
      
      String string1 = StringUtils.lowerCase("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase((String) null, ":9fHi");
      assertNull(string2);
      
      String string3 = StringUtils.difference("", (String) null);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = StringUtils.removeStart("qa=n'UCJt<:^uc8ZNfQ", "N)}k8Oz\")c7");
      assertEquals("qa=n'UCJt<:^uc8ZNfQ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "qa=n'UCJt<:^uc8ZNfQ", (CharSequence) "qa=n'UCJt<:^uc8ZNfQ");
      assertEquals(1, int0);
      
      String string1 = StringUtils.substringAfterLast("p", "HURV4riOn3#xu5W;]o");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("p", 57);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("p", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeAll((String) null, "Locale must not be null");
      assertNull(string3);
      
      String string4 = StringUtils.rightPad("p", (-156), "...");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("p", string4);
      assertNotNull(string4);
      
      Object[] objectArray0 = new Object[0];
      String string5 = StringUtils.joinWith("p", objectArray0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(0, objectArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-156), 57);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.trimToEmpty("p");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertEquals("p", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.abbreviate((String) null, "", (-1), (-156));
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = StringUtils.rotate(", Length: ", (-254));
      assertEquals("ngth: , Le", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("\r", (-1278));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("DdPK9We>f~+g7R7", "66NgM1U,$");
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat((String) null, "D&P~fY", (-1278));
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(", Length: ");
      assertFalse(boolean0);
      
      String string4 = StringUtils.substringBetween((String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.replace("", "9$Sie=k5{q_GYfn.f", "66NgM1U,$", 8164);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("...");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "3", 0);
      assertNull(stringArray0);
      
      String string0 = StringUtils.substringBetween("(c", "HURV4riOn3#xu5W;]oHURV4riOn3#xu5W;]o");
      assertNull(string0);
      
      String string1 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "D;40(9";
      objectArray0[1] = (Object) "D;40(9";
      objectArray0[2] = (Object) "D;40(9";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "D;40(9";
      objectArray0[6] = (Object) "D;40(9";
      char[] charArray0 = new char[7];
      charArray0[0] = 'b';
      charArray0[1] = 'O';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      charArray0[5] = 'b';
      charArray0[6] = ':';
      String string0 = StringUtils.join(charArray0, 'u');
      assertEquals("buOu:u:u:ubu:", string0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'b', 'O', ':', ':', ':', 'b', ':'}, charArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "buOu:u:u:ubu:", 6);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlpha("D;40(9");
      assertFalse(boolean0);
      
      String string1 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.leftPad(">", 128, ">Q}:");
      assertFalse(string2.equals((Object)string0));
      assertEquals(">Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}:>Q}>", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'i');
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.rightPad("Cannot store ", 2826, 'i');
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast((String) null, 2826);
      assertNull(string2);
      
      String string3 = StringUtils.join((short[]) null, 'i');
      assertNull(string3);
      
      String string4 = StringUtils.repeat('i', 4);
      assertFalse(string4.equals((Object)string1));
      assertEquals("iiii", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.substringBetween("<+*Vaf\"in/ZHbE$)!o", "J((i:RDy<&{", "Cannot store ");
      assertNull(string5);
      
      boolean boolean2 = StringUtils.isWhitespace(charSequenceArray0[0]);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean3 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertEquals(0, int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string1 = StringUtils.center("org.apache.commons.lang3.StringUtils", (int) '\u0000', '\u0000');
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Org.apache.commons.lang3.StringUtils", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.lowerCase("org.apache.commons.lang3.StringUtils");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.stringutils", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, "\r");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("\r", string4);
      assertNotNull(string4);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(" "));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Org.apache.commons.lang3.StringUtils", 'Y');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("\r");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray2 = StringUtils.substringsBetween("org.apache.commons.lang3.stringutils", "YT<}UOc&o", "YT<}UOc&o");
      assertNull(stringArray2);
      
      String string5 = StringUtils.getDigits("Org.apache.commons.lang3.StringUtils");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("3", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isWhitespace("\r");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string6 = StringUtils.replaceChars("org.apache.commons.lang3.stringutils", "@yM9e3D7`u", "1iq6Q?eS&G: HWJ+b");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("org.apachQ.commons.lang?.stringGtils", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      String string2 = StringUtils.valueOf(charArray0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string3 = StringUtils.chomp("L&{)s^_)V");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("L&{)s^_)V", string3);
      assertNotNull(string3);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2484.6F);
      floatArray0[3] = (float) 1524;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) '\"';
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      String string4 = StringUtils.join(floatArray0, '+', 1524, 64);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-2484.6F), 1524.0F, 0.0F, 34.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      
      String string0 = "qa=n'UCJt<:^u";
      String string1 = StringUtils.replaceFirst("", "", "qa=n'UCJt<:^u");
      assertTrue(string1.equals((Object)string0));
      assertEquals("qa=n'UCJt<:^u", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("qa=n'UCJt<:^u");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripEnd("qa=n'UCJt<:^u", "");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("qa=n'UCJt<:^u", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = '[';
      charArray0[2] = '|';
      String string3 = StringUtils.valueOf(charArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("|[|", string3);
      assertNotNull(string3);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'|', '[', '|'}, charArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "qa=n'UCJt<:^u", (CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(10, stringArray0.length);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(483);
      assertNotNull(byteBuffer0);
      assertEquals(483, byteBuffer0.capacity());
      assertEquals(483, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=483 cap=483]", byteBuffer0.toString());
      assertEquals(483, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      
      ByteBuffer byteBuffer1 = byteBuffer0.putShort(446, (short) (-1));
      assertNotNull(byteBuffer1);
      assertSame(byteBuffer0, byteBuffer1);
      assertSame(byteBuffer1, byteBuffer0);
      assertEquals(483, byteBuffer0.capacity());
      assertEquals(483, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=483 cap=483]", byteBuffer0.toString());
      assertEquals(483, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer1.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=483 cap=483]", byteBuffer1.toString());
      assertFalse(byteBuffer1.hasArray());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(483, byteBuffer1.capacity());
      assertEquals(483, byteBuffer1.remaining());
      assertFalse(byteBuffer1.isReadOnly());
      assertTrue(byteBuffer1.isDirect());
      assertEquals(483, byteBuffer1.limit());
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("qa=n'UCJt<:^u", (int) (short) (-1), 1109);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = StringUtils.chop("aaUdouKB3'p7Z>JX");
      assertEquals("aaUdouKB3'p7Z>J", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("aaUdouKB3'p7Z>J");
      assertFalse(string1.equals((Object)string0));
      assertEquals("AaUdouKB3'p7Z>J", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("aaUdouKB3'p7Z>JX");
      assertNotNull(stringArray0);
      assertEquals(13, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("aaUdouKB3'p7Z>JX");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripEnd("aaUdouKB3'p7Z>J", "AaUdouKB3'p7Z>J");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.valueOf((char[]) null);
      assertNull(string3);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      String string4 = StringUtils.join(booleanArray0, 'T');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("falseTfalseTfalse", string4);
      assertNotNull(string4);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "falseTfalseTfalse";
      int int0 = StringUtils.indexOfAny((CharSequence) "falseTfalseTfalse", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string5 = StringUtils.difference("falseTfalseTfalse", "aaUdouKB3'p7Z>J");
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("aaUdouKB3'p7Z>J", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfter("N)}k8Oz\")c7qa=n'UCJt<:^uc8ZNfQ", (-1601));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.leftPad("]Cannot store ", (-1601), 'B');
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertEquals("]Cannot store ", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      linkedList0.replaceAll(unaryOperator0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.remove((Object) "z*Ovtb8CpL-zI+vL@V");
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.remove("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "M#21T4mQ[?Bofw[/m3";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string0 = StringUtils.substringAfterLast("M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[20];
      charSequenceArray0[4] = (CharSequence) "{gVwGfu";
      String string1 = StringUtils.prependIfMissing("{gVwGfu", "M#21T4mQ[?Bofw[/m3", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{gVwGfu", string1);
      assertNotNull(string1);
      assertEquals(20, charSequenceArray0.length);
      
      String string2 = StringUtils.repeat('U', (-1751));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringAfterLast("4<~#!&_qt+&Plcf@", 17);
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.mid("{gVwGfu", 11, 17);
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceOnce("M#21T4mQ[?Bofw[/m3", "org.apache.commons.lang3.LocaleUtils", "M#21T4mQ[?Bofw[/m3");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("M#21T4mQ[?Bofw[/m3", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceAll("", "!mYi/", "");
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      String string0 = StringUtils.join((Iterable<?>) treeSet0, "oq{Il/]49D7(Y");
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(treeSet0.contains("oq{Il/]49D7(Y"));
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) "");
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 53);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[3];
      Integer integer0 = new Integer(2744);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(2744, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = treeSet0.add(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean0);
      assertFalse(treeSet0.contains(53));
      assertTrue(treeSet0.contains(2744));
      
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string1 = StringUtils.defaultString("");
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "oq{Il/]49D7(Y");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.split((String) null, (String) null);
      assertNull(stringArray1);
      
      int int2 = StringUtils.ordinalIndexOf("", (CharSequence) null, 97);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean1 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = "{}";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{}", "~IJ1'+p~Zt^U@H*Z");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.LF;
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("\n", stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\n", "\n", (-1038));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("23h=D:`I;ng$Q*", 'Q');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("23h=D:`I;ng$Q*", string2);
      assertNotNull(string2);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(string2));
      
      Spliterator<String> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(string2));
      
      boolean boolean1 = arrayList0.add("G9ULK-fZyNJZn");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string2));
      assertTrue(arrayList0.contains("G9ULK-fZyNJZn"));
      
      boolean boolean2 = arrayList0.add("");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("23h=D:`I;ng$Q*"));
      assertTrue(arrayList0.contains(""));
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(arrayList0.contains("23h=D:`I;ng$Q*"));
      assertTrue(arrayList0.contains(""));
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("G9ULK-fZyNJZn", string3);
      assertNotNull(string3);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(arrayList0.contains("23h=D:`I;ng$Q*"));
      assertTrue(arrayList0.contains(""));
      
      boolean boolean3 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.mid("Object varargs must not be null", (-1911), 1860);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Object varargs must not be null", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat((String) null, 0);
      assertNull(string5);
      
      String string6 = StringUtils.substringAfter("", ":");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.repeat("(c", "", (-817));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      assertNotNull(string7);
      
      boolean boolean4 = StringUtils.isAlphanumericSpace("(c");
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
      
      String string8 = StringUtils.substringBetween("", "w");
      assertNull(string8);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string9 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string9);
      
      String string10 = StringUtils.stripToNull("...");
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string3));
      assertEquals("...", string10);
      assertNotNull(string10);
      
      String string11 = StringUtils.difference("G9ULK-fZyNJZn", "org.apache.commons.lang3.RegExUtils");
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.RegExUtils", string11);
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = StringUtils.mid("%`cMym<", 2377, 2377);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("%`cMym<").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("%`cMym<", charSequence0);
      assertNotNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "%`cMym<";
      int int0 = StringUtils.compare("", "%`cMym<");
      assertEquals((-7), int0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = StringUtils.removeAll("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("'YwtkewYT<}UOc&o", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.abbreviate("", "xY+YE(LO", (-1), (-1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.lastOrdinalIndexOf("", "", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = '`';
      String string0 = StringUtils.upperCase("p{InCombiningDiacriticalMarks}+");
      assertEquals("P{INCOMBININGDIACRITICALMARKS}+", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith("P{INCOMBININGDIACRITICALMARKS}+", "//f;<rQR3?d$BB");
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap("2\":FMj", 'K');
      assertFalse(string1.equals((Object)string0));
      assertEquals("2\":FMj", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf("2\":FMj", "//f;<rQR3?d$BB", (-3543));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "Array element ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'C', '\u0000'}, charArray0);
      
      String string1 = StringUtils.appendIfMissing((String) null, "org.apache.commons.lang3.StringUtils", stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.capitalize((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.upperCase("D|28u\"");
      assertFalse(string3.equals((Object)string0));
      assertEquals("D|28U\"", string3);
      assertNotNull(string3);
      
      String string4 = "\r";
      String string5 = StringUtils.join((Object[]) stringArray0, "\r");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("org.apache.commons.lang3.StringUtils", string5);
      assertNotNull(string5);
      assertEquals(1, stringArray0.length);
      
      String string6 = StringUtils.strip("DWspY$w");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("DWspY$w", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.endsWith("~IJ1'+p~Zt^U@H*Z", (CharSequence) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, 'u', 0, 43);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = StringUtils.substringAfter("9ouDM{s>%I&C", (-697));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("dJ", "dJ", "9ouDM{s>%I&C");
      assertNull(string1);
      
      String string2 = StringUtils.strip("9ouDM{s>%I&C");
      assertFalse(string2.equals((Object)string0));
      assertEquals("9ouDM{s>%I&C", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "9ouDM{s>%I&C", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = "]i7t(3-{%Ho";
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("W.7@-aA", "9ouDM{s>%I&C", "I:FU%\"L!OQNs");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 4
         // 9ouDM{s>%I&C
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      int int0 = (-1253);
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("g1<K;.&(Jz:m_x7c", "z?J:2jOqRdq5Fn", (-1253));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.repeat("<w^4+c", (-4742));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "g1<K;.&(Jz:m_x7c", "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.substring((String) null, 93, (-1253));
      assertNull(string1);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(int0));
      
      Integer integer0 = new Integer((-1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      stack0.setSize(93);
      assertEquals(93, stack0.capacity());
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(93, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains(93));
      
      boolean boolean0 = stack0.add(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(94, stack0.size());
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, -1]", stack0.toString());
      assertEquals(186, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains(93));
      assertTrue(stack0.contains(int1));
      
      stack0.setSize(804);
      assertEquals(804, stack0.size());
      assertEquals(804, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains(93));
      assertTrue(stack0.contains(int1));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = '&';
      boolean boolean1 = StringUtils.endsWithIgnoreCase("<w^4+c", (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        StringUtils.getBytes("(?#q><MV8[4[)l=", "Qe8b6zcN<X<jpxOg<{");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = '.';
      charArray0[3] = '.';
      charArray0[4] = '.';
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      String string0 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.truncate("", 98, 98);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      
      String string1 = StringUtils.join((long[]) null, '~');
      assertNull(string1);
      
      String string2 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isNumeric("_");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.removePattern("_", "_");
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = StringUtils.stripStart("q", "");
      assertEquals("q", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("g1<K;.&(Jz:m_x7c", "z?J:2jOqRdq5Fn", (-1253));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.repeat("<w^4+c", (-4742));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "g1<K;.&(Jz:m_x7c", "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substring((String) null, 93, (-1253));
      assertNull(string1);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(int0));
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      stack0.setSize(93);
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", stack0.toString());
      assertEquals(93, stack0.capacity());
      assertEquals(93, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.contains(int0));
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(186, stack0.capacity());
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, -1]", stack0.toString());
      assertEquals(94, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(int0));
      assertFalse(stack0.contains((-4742)));
      
      stack0.setSize(804);
      assertEquals(804, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(804, stack0.size());
      assertTrue(stack0.contains(int0));
      assertFalse(stack0.contains((-4742)));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = '&';
      charArray0[2] = 'O';
      charArray0[3] = 'I';
      charArray0[4] = 'v';
      String string2 = StringUtils.join(charArray0, '/', 4, Integer.MIN_VALUE);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'d', '&', 'O', 'I', 'v', '\u0000'}, charArray0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'d', '&', 'O', 'I', 'v', '\u0000'}, charArray0);
      assertEquals(6, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(6, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.capacity());
      assertEquals("d&OIv\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      
      CharBuffer charBuffer1 = StringUtils.defaultIfEmpty(charBuffer0, charBuffer0);
      assertNotNull(charBuffer1);
      assertEquals(6, charArray0.length);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertArrayEquals(new char[] {'d', '&', 'O', 'I', 'v', '\u0000'}, charArray0);
      assertEquals(6, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(6, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.capacity());
      assertEquals("d&OIv\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(6, charBuffer1.limit());
      assertEquals(6, charBuffer1.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(6, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasArray());
      assertEquals(6, charBuffer1.capacity());
      assertEquals("d&OIv\u0000", charBuffer1.toString());
      assertEquals(0, charBuffer1.arrayOffset());
      
      String string3 = StringUtils.stripStart("z?J:2jOqRdq5Fn", "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("z?J:2jOqRdq5Fn", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart("g1<K;.&(Jz:m_x7c", "g1<K;.&(Jz:m_x7c");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'I';
      longArray0[1] = (long) 'O';
      longArray0[2] = (long) (-1253);
      longArray0[3] = (long) 'd';
      longArray0[4] = (long) 'O';
      longArray0[5] = (long) 'O';
      longArray0[6] = (long) '&';
      longArray0[7] = (long) 'I';
      String string5 = StringUtils.join(longArray0, 'O');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("73O79O-1253O100O79O79O38O73", string5);
      assertNotNull(string5);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {73L, 79L, (-1253L), 100L, 79L, 79L, 38L, 73L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      float[] floatArray0 = new float[8];
      String string0 = StringUtils.join(floatArray0, 'x');
      assertEquals("0.0x0.0x0.0x0.0x0.0x0.0x0.0x0.0", string0);
      assertNotNull(string0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      String string1 = StringUtils.join((Iterable<?>) null, 'w');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = StringUtils.lowerCase("D;40(9");
      assertEquals("d;40(9", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[8];
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = (Object) "org.apache.commons.lang3.exception.CloneFailedException";
      objectArray0[2] = (Object) "org.apache.commons.lang3.exception.CloneFailedException";
      objectArray0[3] = (Object) "D;40(9";
      objectArray0[4] = (Object) "ev&9n1#hSI7@F";
      String string1 = StringUtils.join((List<?>) null, "org.apache.commons.lang3.exception.CloneFailedException", (-703), (-703));
      assertNull(string1);
      
      String string2 = StringUtils.stripToNull("Search and Replace array lengths don't match: ");
      assertFalse(string2.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match:", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, 'g');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.strip("9re");
      assertEquals("9re", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isMixedCase("9re");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "3F0NoFrfu+X2&Up7:");
      assertNull(stringArray0);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      String string2 = StringUtils.join((List<?>) null, "jP^", 460, 2984);
      assertNull(string2);
      
      String string3 = StringUtils.join((Iterable<?>) vector0, '6');
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(2984));
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("1r)uTX;VsRLtsE", 'L');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.center("maxWith cannot be negativeorg.apache.commons.lang3.RegExUtils", (-441), ',');
      assertEquals("maxWith cannot be negativeorg.apache.commons.lang3.RegExUtils", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.mid("1r)uTX;VsRLtsE", 1970, 1970);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("maxWith cannot be negativeorg.apache.commons.lang3.RegExUtils");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("maxWith cannot be negativeorg.apache.commons.lang3.RegExUtils");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(19, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("G9ULK-fZyNJZn", "G9ULK-fZyNJZn");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = StringUtils.mid("FLDnwN=4l)Wlt}0}", 76, (-569));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("A>xmy", "0dz=)+<&IKA(2af");
      assertFalse(string1.equals((Object)string0));
      assertEquals("A>xmy", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String string0 = StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", 50, 1701);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[6];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "p{InCombiningDiacriticalMarks}+", charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 50;
      String string1 = StringUtils.join(doubleArray0, '<');
      assertFalse(string1.equals((Object)string0));
      assertEquals("50.0", string1);
      assertNotNull(string1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {50.0}, doubleArray0, 0.01);
      
      String string2 = StringUtils.mid("p{InCombiningDiacriticalMarks}+", 50, 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast(" ", "maxWith cannot be negative");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" ", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String string0 = StringUtils.rightPad("ed:gh$", 14);
      assertEquals("ed:gh$       ", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-12);
      shortArray0[1] = (short)42;
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "ed:gh$";
      charSequenceArray0[1] = (CharSequence) "ed:gh$";
      charSequenceArray0[2] = (CharSequence) "ed:gh$       ";
      charSequenceArray0[3] = (CharSequence) "ed:gh$       ";
      String string1 = StringUtils.leftPad("ed:gh$       ", (-1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("ed:gh$       ", string1);
      assertNotNull(string1);
      
      charSequenceArray0[4] = (CharSequence) "ed:gh$       ";
      charSequenceArray0[5] = (CharSequence) "ed:gh$       ";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "ed:gh$       ", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string2 = StringUtils.rightPad("ed:gh$       ", (-32768), 'K');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("ed:gh$       ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast("Cannot store ", 14);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join(shortArray0, 'K');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("-12K42K0", string4);
      assertNotNull(string4);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-12), (short)42, (short)0}, shortArray0);
      
      String string5 = StringUtils.repeat('y', (int) (short)42);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.compareIgnoreCase("ed:gh$       ", "S");
      assertEquals((-14), int0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("Cannot store ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.substringBetween("\r", "'pJvr", (String) null);
      assertNull(string6);
      
      String string7 = StringUtils.capitalize("ed:gh$       ");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals("Ed:gh$       ", string7);
      assertNotNull(string7);
      
      int int1 = StringUtils.lastIndexOf(charSequenceArray0[4], charSequenceArray0[1], (int) (short) (-12));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = StringUtils.capitalize("\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("e52{dcr-hH{I`Tp0>u");
      assertEquals("e52{dcr-hH{I`Tp0>u", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("e52{dcr-hH{I`Tp0>u");
      assertFalse(boolean0);
      
      String string1 = StringUtils.capitalize("k6RBKN\"_");
      assertFalse(string1.equals((Object)string0));
      assertEquals("K6RBKN\"_", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = "}U";
      String string1 = StringUtils.capitalize("}U");
      assertTrue(string1.equals((Object)string0));
      assertEquals("}U", string1);
      assertNotNull(string1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("}U"));
      
      int int0 = (-4279);
      Integer integer0 = new Integer((-4279));
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-4279), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = arrayList0.add((Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains((-4279)));
      assertFalse(arrayList0.contains("}U"));
      
      // Undeclared exception!
      try { 
        arrayList0.listIterator((-4279));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4279
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.split("G9ULK-fZyNJZn", " ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(int0));
      
      String string2 = StringUtils.removeEnd("", "G9ULK-fZyNJZn");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.ordinalIndexOf("", "", 3442);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.startsWithAny("", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "", (-994));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string0 = StringUtils.wrap("|]pr(zTv%2ZWCey", '+');
      assertEquals("+|]pr(zTv%2ZWCey+", string0);
      assertNotNull(string0);
      
      int int2 = StringUtils.lastOrdinalIndexOf("|]pr(zTv%2ZWCey", "", 1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(15, int2);
      
      String string1 = StringUtils.difference("", "eAorg.apache.commons.lang3.RegExUtils");
      assertFalse(string1.equals((Object)string0));
      assertEquals("eAorg.apache.commons.lang3.RegExUtils", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.replaceChars(" ", ":lFccg&-NF", "W!W!D|28u\"W!D|28u\"");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int3 = StringUtils.length(" ");
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String string0 = StringUtils.trim("HURV4riOn3#xu5W;]o");
      assertEquals("HURV4riOn3#xu5W;]o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "HURV4riOn3#xu5W;]o", (CharSequence) "");
      assertEquals(18, int0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      int int1 = StringUtils.ordinalIndexOf("HURV4riOn3#xu5W;]o", "", 669);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-272);
      String string3 = StringUtils.join(doubleArray0, 'E');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("-272.0", string3);
      assertNotNull(string3);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-272.0)}, doubleArray0, 0.01);
      
      charSequenceArray0[2] = (CharSequence) "-272.0";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.wrapIfMissing("g'1qo5]&G`V", 'g');
      assertEquals("g'1qo5]&G`Vg", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("p;7n[-T/7{QO");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumericSpace("g'1qo5]&G`Vg");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.indexOf((CharSequence) "g'1qo5]&G`Vg", (CharSequence) "g'1qo5]&G`V", 128);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chomp("g'1qo5]&G`V");
      assertFalse(string1.equals((Object)string0));
      assertEquals("g'1qo5]&G`V", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String string0 = StringUtils.getDigits("...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "...", 1233, 2773);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center("", 2773);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) "");
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertEquals(2773, int1);
      
      String string2 = StringUtils.center("qa=n'UCJt<:^u", 1233, "FiKF7U'KQl*fD+");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.equals((CharSequence) string2, (CharSequence) string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "...", (CharSequence) string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) string1;
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "qa=n'UCJt<:^u";
      charSequenceArray0[4] = (CharSequence) string1;
      String string3 = StringUtils.valueOf((char[]) null);
      assertNull(string3);
      
      boolean boolean4 = StringUtils.containsNone((CharSequence) "", "vg6Mc}T_sQ668");
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      
      String string4 = StringUtils.unwrap("", ')');
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.lastIndexOfAny("qa=n'UCJt<:^u", charSequenceArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(13, int2);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("QBAvF{");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      
      String string0 = StringUtils.lowerCase("", locale0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string1 = StringUtils.EMPTY;
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "QBAvF{";
      charSequenceArray0[2] = (CharSequence) "";
      String string2 = StringUtils.capitalize("9Pkj}6p)%':-FJ[2Q");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("9Pkj}6p)%':-FJ[2Q", string2);
      assertNotNull(string2);
      
      charSequenceArray0[3] = (CharSequence) "9Pkj}6p)%':-FJ[2Q";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertEquals("QBAvF{", charSequence0);
      assertNotNull(charSequence0);
      assertEquals(4, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "QBAvF{", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      String string0 = "{}";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{}", "~IJ1'+p~Zt^U@H*Z");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.LF;
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("\n", stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-16);
      String string2 = StringUtils.join(byteArray0, '~', 8, 7);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)16, (byte) (-109), (byte) (-16)}, byteArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>u", (int) (byte) (-109), (int) (byte) (-109));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Y]]Eg,p%[", (-4448));
      assertEquals("Y]]Eg,p%[", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Y]]Eg,p%[", "Y]]Eg,p%[");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string1 = StringUtils.removeAll("Y]]Eg,p%[", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Y]]Eg,p%[", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.substringsBetween("Y]]Eg,p%[", "Y]]Eg,p%[", "Y]]Eg,p%[");
      assertNull(stringArray1);
      
      double double0 = StringUtils.getJaroWinklerDistance("Y]]Eg,p%[", "Y]]Eg,p%[");
      assertEquals(1.0, double0, 0.01);
      
      String string2 = StringUtils.abbreviate("", "", (-4448), (-4448));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "Y]]Eg,p%[");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.replaceAll("%JaUS3qe>R.", "Threshold must not be negative", ", Length: ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("%JaUS3qe>R.", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isNumericSpace("%JaUS3qe>R.");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Threshold must not be negative", (CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.defaultString((String) null);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripToNull("%JaUS3qe>R.");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("%JaUS3qe>R.", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.isNotEmpty("");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.endsWithIgnoreCase("%JaUS3qe>R.", "Y]]Eg,p%[");
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-4448)));
      
      String string6 = StringUtils.join((List<?>) linkedList0, 'r', 471, 471);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-4448)));
      
      int int2 = StringUtils.indexOf((CharSequence) null, 0, 1590);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = StringUtils.repeat("Invalid locale format: ", "Invalid locale format: ", (-1840700267));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("Minimum abbreviation width is %d", (-238));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width is %d";
      String string2 = StringUtils.defaultString((String) null);
      assertEquals("", string2);
      assertNotNull(string2);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string3 = StringUtils.prependIfMissingIgnoreCase("9Vpk$A1", "", charSequenceArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("9Vpk$A1", string3);
      assertNotNull(string3);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((short[]) null, '\"');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "0T|", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("~IJ1'+p~Zt^U@H*Z", 'J');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("~IJ1'+p~Zt^U@H*Z");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(15, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("~IJ1'+p~Zt^U@H*Z", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("~IJ1'+p~Zt^U@H*Z");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(6, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", charSequenceArray0[3]);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = 'r';
      charArray0[2] = 'M';
      String[] stringArray0 = new String[3];
      stringArray0[0] = "+hRW%%7{H";
      stringArray0[1] = "";
      charSequenceArray0[4] = (CharSequence) "";
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "";
      String string1 = StringUtils.replaceEach("", stringArray0, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string1.equals((Object)string0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(6, stringArray1.length);
      assertEquals(3, stringArray0.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      
      int int1 = StringUtils.lastIndexOfAny(charSequenceArray0[1], charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(6, charSequenceArray0.length);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("-g$mIR", "", charSequenceArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-g$mIR", string2);
      assertNotNull(string2);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "xY+YE(LO";
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "xY+YE(LO";
      stringArray1[1] = "xY+YE(LO";
      stringArray1[2] = "xY+YE(LO";
      String string0 = "4{-NLG?=aKAYoI#";
      stringArray1[3] = "4{-NLG?=aKAYoI#";
      stringArray1[4] = "HURV4riOn3#xu5W;]o";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("xY+YE(LO", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String string0 = "wwl`Uxpj0*j";
      String string1 = StringUtils.substringAfter("wwl`Uxpj0*j", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("wwl`Uxpj0*j");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = "";
      String string3 = StringUtils.leftPad("|~x<#SNQ.v", 0, "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("|~x<#SNQ.v", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("Threshold must not be negative");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(9, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.LF;
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\n", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfAny("|~x<#SNQ.v", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      char[] charArray0 = new char[0];
      String string5 = StringUtils.join(charArray0, 'g', 0, (-2269));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string6 = StringUtils.join((Object[]) stringArray0, "Search and Replace array lengths don't match: ");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("wwl`Uxpj0*j", string6);
      assertNotNull(string6);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      String string7 = StringUtils.leftPad("Threshold must not be negative", (-1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertEquals("Threshold must not be negative", string7);
      assertNotNull(string7);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean0);
      assertEquals(9, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      int int1 = (-32768);
      String string8 = StringUtils.rightPad("\n", (-1), 'g');
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertEquals("\n", string8);
      assertNotNull(string8);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("N)}k8Oz\")c7", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3");
      assertEquals("M#21T4mQ[?Bofw[/m3", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "M#21T4mQ[?Bofw[/m3", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrap("M#21T4mQ[?Bofw[/m3", ", Length: ");
      assertFalse(string1.equals((Object)string0));
      assertEquals(", Length: M#21T4mQ[?Bofw[/m3, Length: ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "~IJ1'+p~Zt^U@H*Z", false);
      assertEquals(1, int0);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      
      String string2 = locale1.getDisplayScript();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      
      int int1 = StringUtils.getFuzzyDistance("M#21T4mQ[?Bofw[/m3", ", Length: M#21T4mQ[?Bofw[/m3, Length: ", locale0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertSame(locale0, locale1);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string3 = StringUtils.substringAfterLast("N)}k8Oz\")c7qa=n'UCJt<:^uc8ZNfQ", (-1276));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate("=b18S=xR>M`F", 160);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("=b18S=xR>M`F", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)42;
      String string0 = StringUtils.removeEnd("Cannot store ", (String) null);
      assertEquals("Cannot store ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Cannot store ", (CharSequence) null, (-695));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("Cannot store ", "Cannot store ");
      assertTrue(boolean0);
      
      LinkedHashSet<CharBuffer> linkedHashSet0 = new LinkedHashSet<CharBuffer>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      String string1 = StringUtils.join((Iterable<?>) linkedHashSet0, "null/empty items");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "G9ULK-fZyNJZn", charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "G9ULK-fZyNJZn", (CharSequence) "", (-8));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.strip("27zqZV*^=J", "Ls");
      assertFalse(string1.equals((Object)string0));
      assertEquals("27zqZV*^=J", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", "...");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.substringAfterLast("G9ULK-fZyNJZn", "!7$cRD.=(*n(LB=IN");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(string2));
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string3 = Locale.lookupTag(arrayList0, stack0);
      assertNull(string3);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(stack0.contains(string2));
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("US", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      
      String string4 = locale1.getDisplayScript();
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("US", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      
      int int1 = StringUtils.getFuzzyDistance("27zqZV*^=J", "!7$cRD.=(*n(LB=IN", locale0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertSame(locale0, locale1);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      
      String string5 = StringUtils.substringAfterLast("", 961);
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '<');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      String string1 = StringUtils.replaceEachRepeatedly("", stringArray1, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringBetween("maxWith cannot be negative", (String) null, "");
      assertNull(string2);
      
      String string3 = StringUtils.substringAfterLast("pM^K9Ug-Z", (-2034458190));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.right("e52{dcr-hH{I`Tp0>u", 961);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("e52{dcr-hH{I`Tp0>u", string4);
      assertNotNull(string4);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("", "", (-2034458190));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertEquals(0, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray0);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("^(c1yq`C@J", "", stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("^(c1yq`C@J", string5);
      assertNotNull(string5);
      assertEquals(0, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "e52{dcr-hH{I`Tp0>u";
      charSequenceArray0[1] = (CharSequence) "e52{dcr-hH{I`Tp0>u";
      charSequenceArray0[2] = (CharSequence) "e52{dcr-hH{I`Tp0>u";
      charSequenceArray0[3] = (CharSequence) "e52{dcr-hH{I`Tp0>u";
      charSequenceArray0[4] = (CharSequence) "e52{dcr-hH{I`Tp0>u";
      charSequenceArray0[5] = (CharSequence) "e52{dcr-hH{I`Tp0>u";
      charSequenceArray0[6] = (CharSequence) "e52{dcr-hH{I`Tp0>u";
      charSequenceArray0[7] = (CharSequence) "e52{dcr-hH{I`Tp0>u";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals("e52{dcr-hH{I`Tp0>u", charSequence0);
      assertNotNull(charSequence0);
      assertEquals(8, charSequenceArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("e52{dcr-hH{I`Tp0>u");
      assertNotNull(intArray0);
      assertEquals(18, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = stringArray0[0];
      stringArray0[2] = stringArray0[0];
      String[] stringArray1 = StringUtils.split(stringArray0[1]);
      assertNull(stringArray1);
      assertEquals(3, stringArray0.length);
      
      String string0 = StringUtils.getDigits(stringArray0[2]);
      assertNull(string0);
      assertEquals(3, stringArray0.length);
      
      String string1 = StringUtils.getDigits("v^KqFcFScA)");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (-1726.0);
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 3796.562625277;
      doubleArray0[4] = 2987.1383020271246;
      String string0 = StringUtils.join(doubleArray0, '&', (-1499), (-3165));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.7, (-1726.0), 2.0, 3796.562625277, 2987.1383020271246}, doubleArray0, 0.01);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.substringAfter("", 952);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.substringAfter("", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(3, charSequenceArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'i');
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.mid((String) null, 4, (-88));
      assertNull(string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "u";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "Minimum abbreviation width with offset is %d";
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = "Cannot store ";
      stringArray0[8] = null;
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("u", string2);
      assertNotNull(string2);
      assertEquals(9, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("N[f+,NC vyn", 'f');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.remove("XXu=wA^", '^');
      assertFalse(string3.equals((Object)string2));
      assertEquals("XXu=wA", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle("XXu=wA", "gPNbiW8E($7@", 2826);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("XXu=wA", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      charArray0[3] = 'a';
      String string0 = StringUtils.join(charArray0, '\u0000', 2066, 2066);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'C', 'a'}, charArray0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "Array element ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'C', 'a'}, charArray0);
      
      String string1 = StringUtils.appendIfMissing((String) null, "org.apache.commons.lang3.StringUtils", stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.capitalize((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.valueOf(charArray0);
      assertFalse(string3.equals((Object)string0));
      assertEquals("\u0000\u0000Ca", string3);
      assertNotNull(string3);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'C', 'a'}, charArray0);
      
      String string4 = StringUtils.chomp((String) null);
      assertNull(string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "D|28u\"";
      stringArray1[1] = "Array element ";
      stringArray1[2] = null;
      stringArray1[3] = "K0qc,Gv";
      String string5 = StringUtils.mid("Object varargs must not be null", 67, 593);
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals("org.apache.commons.lang3.StringUtils", string6);
      assertNotNull(string6);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      String[] stringArray2 = StringUtils.split("", 'C');
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertEquals(0, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      String string7 = StringUtils.remove("OOy%jcnx", 'C');
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals("OOy%jcnx", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.abbreviateMiddle("", "K0qc,Gv", 8192);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      String string0 = StringUtils.strip("XyiU?$X.<b]>1y");
      assertEquals("XyiU?$X.<b]>1y", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWith("XyiU?$X.<b]>1y", "XyiU?$X.<b]>1y");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, charSequenceArray0.length);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("XyiU?$X.<b]>1y"));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("qa=n'UCJt<:^u", 'v');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean2 = StringUtils.isAllUpperCase("N)}k8Oz\")c7qa=n'UCJt<:^uc8ZNfQ");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = StringUtils.removeStartIgnoreCase("qa=n'UCJt<:^u", "N)}k8Oz\")c7qa=n'UCJt<:^uc8ZNfQ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("qa=n'UCJt<:^u", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      String string0 = StringUtils.removeAll("Qe8b6zcN<X<jpxOg<{", "...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("...");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("'YwtkewYT<}UOc&o", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(""));
      
      boolean boolean1 = treeSet0.add("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(treeSet0.contains("..."));
      assertTrue(treeSet0.contains(""));
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "3", 0);
      assertNull(stringArray1);
      
      String string1 = StringUtils.repeat('O', 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("|k/$@T%8#^Uu", 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("|k/$@T%8#^Uu", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replacePattern("", "", "#");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("#", string3);
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("|k/$@T%8#^Uu");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertEquals(12, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = StringUtils.stripEnd("...", "3");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("...", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      charArray0[3] = 'O';
      String string5 = StringUtils.valueOf(charArray0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("OOOO", string5);
      assertNotNull(string5);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'O', 'O', 'O', 'O'}, charArray0);
      
      String string6 = StringUtils.chomp("");
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "|k/$@T%8#^Uu", (CharSequence) "", (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string7 = StringUtils.replaceEachRepeatedly("L=>1.", (String[]) null, (String[]) null);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertEquals("L=>1.", string7);
      assertNotNull(string7);
      
      int int2 = StringUtils.indexOf((CharSequence) "|k/$@T%8#^Uu", 0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string8 = StringUtils.center("OOOO", 0, '@');
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertEquals("OOOO", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      String string0 = StringUtils.removeAll("Qe8b6zcN<X<jpxOg<{", "...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("...");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("'YwtkewYT<}UOc&o", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(""));
      
      boolean boolean1 = treeSet0.add("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(treeSet0.contains("'YwtkewYT<}UOc&o"));
      assertTrue(treeSet0.contains(""));
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "3", 0);
      assertNull(stringArray1);
      
      String string1 = StringUtils.unwrap("Qe8b6zcN<X<jpxOg<{", "Qe8b6zcN<X<jpxOg<{");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Qe8b6zcN<X<jpxOg<{", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", "", 3291);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("Qe8b6zcN<X<jpxOg<{");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.substringBetween("(c", "org.apache.commons.lang3.StringUtils");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 'w');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      String string1 = StringUtils.repeat("", (int) 'w');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String string0 = StringUtils.trim("HURV4riOn3#xu5W;]o");
      assertEquals("HURV4riOn3#xu5W;]o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("HURV4riOn3#xu5W;]o"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList0.add(object0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("HURV4riOn3#xu5W;]o"));
      assertTrue(linkedList0.contains(object0));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("HURV4riOn3#xu5W;]o"));
      assertTrue(linkedList0.contains(object0));
      
      boolean boolean1 = linkedList0.add((Object) "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertFalse(linkedList0.contains("HURV4riOn3#xu5W;]o"));
      assertTrue(linkedList0.contains(""));
      
      char char0 = 'E';
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, 'E');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("1r)uTX;VsRLtsE", 'L');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.center("maxWith cannot be negativeorg.apache.commons.lang3.RegExUtils", (-441), ',');
      assertEquals("maxWith cannot be negativeorg.apache.commons.lang3.RegExUtils", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(2, stringArray0.length);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      
      String string1 = StringUtils.join(iterator0, '9');
      assertFalse(string1.equals((Object)string0));
      assertEquals("IGNORE_EXTENDED_RANGES", string1);
      assertNotNull(string1);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "maxWith cannot be negativeorg.apache.commons.lang3.RegExUtils", (CharSequence) "maxWith cannot be negativeorg.apache.commons.lang3.RegExUtils");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String string0 = StringUtils.stripStart("jPY~P#\"1&,,:Lw", "?j.'zBX [Km)+a@");
      assertEquals("PY~P#\"1&,,:Lw", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "PY~P#\"1&,,:Lw", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "D;40(9";
      objectArray0[2] = (Object) "D;40(9";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "D;40(9";
      objectArray0[5] = (Object) "D;40(9";
      objectArray0[6] = (Object) "D;40(9";
      objectArray0[7] = (Object) "D;40(9";
      String string0 = StringUtils.joinWith("D;40(9", objectArray0);
      assertNotNull(string0);
      assertEquals(8, objectArray0.length);
      
      String string1 = StringUtils.right("t,b'*", 49);
      assertFalse(string1.equals((Object)string0));
      assertEquals("t,b'*", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "D;40(9", (CharSequence) "D;40(9", 16);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[0];
      String string2 = StringUtils.join(longArray0, 'c', 370, 49);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "t,b'*", 16, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.lowerCase("D;40(9D;40(9D;40(9D;40(9D;40(9java.lang.Object@6620deb7D;40(9D;40(9D;40(9D;40(9D;40(9D;40(9D;40(9D;40(9");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'L';
      charArray0[1] = '*';
      charArray0[2] = 'L';
      charArray0[3] = 'j';
      charArray0[4] = '*';
      charArray0[5] = '*';
      charArray0[6] = '\\';
      charArray0[7] = 'c';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "d;40(9d;40(9d;40(9d;40(9d;40(9java.lang.object@6620deb7d;40(9d;40(9d;40(9d;40(9d;40(9d;40(9d;40(9d;40(9", charArray0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'L', '*', 'L', 'j', '*', '*', '\\', 'c'}, charArray0);
      
      String string4 = StringUtils.wrap("t,b'*", "");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("t,b'*", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat("D;40(9", (String) null, (-1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("e52{dcr-hH{I`Tp0>u");
      assertEquals("e52{dcr-hH{I`Tp0>u", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d", (-911));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.unwrap((String) null, "A>Z_q");
      assertNull(string1);
      
      String string2 = StringUtils.repeat("c{%@e-3g@!#-~\"XCbo", (String) null, 0);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("e52{dcr-hH{I`Tp0>u");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringBetween(", '", (String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'd');
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'd';
      doubleArray0[1] = (double) 'd';
      doubleArray0[2] = (double) 'd';
      String string1 = StringUtils.wrap("org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store Cannot store ", (String) null);
      assertEquals("org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store Cannot store ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringBefore("org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store Cannot store ", (String) null);
      assertTrue(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store org.apache.commons.lang3.ObjectUtilsCannot store Cannot store ", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      boolean boolean0 = vector0.add((Object) "N)}k8Oz\")c7qa=n'UCJt<:!uc8ZyQQ");
      assertTrue(boolean0);
      assertEquals("[N)}k8Oz\")c7qa=n'UCJt<:!uc8ZyQQ]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains("N)}k8Oz\")c7qa=n'UCJt<:!uc8ZyQQ"));
      
      Stream<Object> stream0 = vector0.stream();
      assertNotNull(stream0);
      assertEquals("[N)}k8Oz\")c7qa=n'UCJt<:!uc8ZyQQ]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains("N)}k8Oz\")c7qa=n'UCJt<:!uc8ZyQQ"));
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("N)}k8Oz\")c7qa=n'UCJt<:!uc8ZyQQ"));
      
      Integer integer0 = new Integer((-4182));
      assertEquals((-4182), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = vector0.add((Object) integer0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("[N)}k8Oz\")c7qa=n'UCJt<:!uc8ZyQQ, -4182]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertTrue(vector0.contains("N)}k8Oz\")c7qa=n'UCJt<:!uc8ZyQQ"));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) vector0;
      Object[] objectArray1 = priorityQueue0.toArray(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("N)}k8Oz\")c7qa=n'UCJt<:!uc8ZyQQ"));
      
      boolean boolean2 = priorityQueue0.offer("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(1, priorityQueue0.size());
      assertTrue(priorityQueue0.contains(""));
      assertFalse(priorityQueue0.contains("N)}k8Oz\")c7qa=n'UCJt<:!uc8ZyQQ"));
      
      boolean boolean3 = vector0.removeAll(priorityQueue0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals("[N)}k8Oz\")c7qa=n'UCJt<:!uc8ZyQQ, -4182]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals(1, priorityQueue0.size());
      assertTrue(vector0.contains((-4182)));
      assertFalse(vector0.contains(""));
      assertTrue(priorityQueue0.contains(""));
      assertFalse(priorityQueue0.contains("N)}k8Oz\")c7qa=n'UCJt<:!uc8ZyQQ"));
      
      String string0 = StringUtils.join((List<?>) vector0, "N)}k8Oz\")c7qa=n'UCJt<:!uc8ZyQQ", 4631, 4631);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("[N)}k8Oz\")c7qa=n'UCJt<:!uc8ZyQQ, -4182]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertTrue(vector0.contains((-4182)));
      assertFalse(vector0.contains(4631));
      
      boolean boolean4 = StringUtils.containsAny((CharSequence) "", (CharSequence) "N)}k8Oz\")c7qa=n'UCJt<:!uc8ZyQQ");
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String string1 = StringUtils.unwrap("[1Z", "[1Z");
      assertFalse(string1.equals((Object)string0));
      assertEquals("[1Z", string1);
      assertNotNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints("N)}k8Oz\")c7qa=n'UCJt<:!uc8ZyQQ");
      assertNotNull(intArray0);
      assertEquals(31, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      String string0 = StringUtils.join(objectArray0, "Array and element cannot both be null");
      assertNotNull(string0);
      assertEquals(6, objectArray0.length);
      
      boolean boolean0 = StringUtils.isNumericSpace("Array and element cannot both be null");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("?A", "?A", true);
      assertEquals(0, int0);
      
      String string1 = StringUtils.chomp("?A");
      assertFalse(string1.equals((Object)string0));
      assertEquals("?A", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((double[]) null, '[');
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAllUpperCase("?A");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "java.lang.Object@dd07591Array and element cannot both be nulljava.lang.Object@1106537fArray and element cannot both be nulljava.lang.Object@5cf1d864Array and element cannot both be nulljava.lang.Object@36cc8b8Array and element cannot both be nulljava.lang.Object@d9e49b9Array and element cannot both be nulljava.lang.Object@2ea06ede", (CharSequence) "Array and element cannot both be null", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Iterator<Object> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      String string3 = StringUtils.join((Iterable<?>) serviceLoader0, "Rbsx3r!");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = stringArray0[0];
      stringArray0[2] = stringArray0[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String[] stringArray2 = StringUtils.substringsBetween(stringArray0[2], "", "4;4{S{?V'6fa!JatIc*");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNull(stringArray2);
      assertEquals(3, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      String string0 = StringUtils.join((double[]) null, '%');
      assertNull(string0);
      
      String string1 = StringUtils.mid("Cannot store ]", (-1250), (-1250));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBeforeLast("Minimum abbreviation width with offset is %d", "Array Aelement ");
      assertFalse(string2.equals((Object)string1));
      assertEquals("Minimum abbreviation width with offset is %d", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 727.0;
      doubleArray0[1] = 727.0;
      doubleArray0[2] = 3592.0;
      String string0 = StringUtils.join(doubleArray0, 'm');
      assertEquals("727.0m727.0m3592.0", string0);
      assertNotNull(string0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {727.0, 727.0, 3592.0}, doubleArray0, 0.01);
      
      String string1 = StringUtils.mid("maxWith cannot be negative", (-2034458190), 639);
      assertFalse(string1.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "+hRW%%7{H";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "maxWith cannot be negative";
      stringArray0[4] = "";
      stringArray0[5] = "maxWith cannot be negative";
      stringArray0[6] = "maxWith cannot be negative";
      stringArray0[7] = "727.0m727.0m3592.0";
      stringArray0[8] = "maxWith cannot be negative";
      String string2 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.trim("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      String string2 = "";
      String string3 = StringUtils.chomp((String) null, "");
      assertNull(string3);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = '0';
      charArray0[6] = '<';
      String string4 = StringUtils.join(charArray0, '+');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("<+<+<+<+<+0+<", string4);
      assertNotNull(string4);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', '0', '<'}, charArray0);
      
      String string5 = StringUtils.upperCase("{gEYbD\"A(<A}q]f<");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("{GEYBD\"A(<A}Q]F<", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "<+<+<+<+<+0+<", (CharSequence) "{GEYBD\"A(<A}Q]F<");
      assertEquals((-1), int0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains('<'));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains('<'));
      
      boolean boolean0 = linkedList0.add((Object) "{GEYBD\"A(<A}Q]F<");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains('<'));
      assertTrue(linkedList0.contains("{GEYBD\"A(<A}Q]F<"));
      
      // Undeclared exception!
      try { 
        linkedList0.subList(12, 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 12
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      String string0 = StringUtils.join((List<?>) stack0, "-|&", 2415, 2415);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains("-|&"));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2415;
      floatArray0[1] = (float) 2415;
      floatArray0[2] = (float) 2415;
      floatArray0[3] = (float) 2415;
      floatArray0[4] = (float) 2415;
      String string1 = StringUtils.join(floatArray0, 'e', 15, 15);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {2415.0F, 2415.0F, 2415.0F, 2415.0F, 2415.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", (-675));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.right("p{InCombSnigDiacriticlMarks}+", (-675));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.split("p{InCombSnigDiacriticlMarks}+", 'F');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.trimToEmpty("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string4 = StringUtils.unwrap("Array and element cannot both be null", 'F');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Array and element cannot both be null", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      String string0 = StringUtils.right("G9ULK-fZyNJZn", (-1724));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd((String) null, ", '");
      assertNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty(", '", supplier0);
      assertFalse(string2.equals((Object)string0));
      assertEquals(", '", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.strip("Cannot store ", "sj,MOb\"X*8L");
      assertEquals("Cannot store ", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[10];
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertNotNull(string1);
      assertEquals(10, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", 662);
      assertEquals((-1), int0);
      
      String string2 = "_7#xz$;YO";
      String string3 = "w";
      String string4 = StringUtils.replaceEachRepeatedly("w", (String[]) null, (String[]) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("w", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", charArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertEquals(10, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "_7#xz$;YO", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      String string0 = StringUtils.chomp("w", "w");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith("w", "`Fw~&{WiH!:.");
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap("`Fw~&{WiH!:.", 'T');
      assertFalse(string1.equals((Object)string0));
      assertEquals("`Fw~&{WiH!:.", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "`Fw~&{WiH!:.";
      charSequenceArray0[1] = (CharSequence) "`Fw~&{WiH!:.";
      int int0 = StringUtils.lastIndexOfAny("w", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.replaceEachRepeatedly("`Fw~&{WiH!:.", stringArray0, stringArray0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("`Fw~&{WiH!:.", string2);
      assertNotNull(string2);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.join((int[]) null, 'J', 5, 5);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.wrap((String) null, 'J');
      assertNull(string1);
      
      String string2 = StringUtils.leftPad((String) null, 32, "Minimum abbreviation width is %dlTI8:\"(n`%:h:>v");
      assertNull(string2);
      
      String string3 = StringUtils.rightPad((String) null, 32, 'J');
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore("\n", "\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((int[]) null, '9');
      assertNull(string2);
      
      String string3 = StringUtils.substringBetween((String) null, "");
      assertNull(string3);
      
      String string4 = StringUtils.join((int[]) null, 'e', (-4364), (-4364));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-1000));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-1000));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceChars("offseg cannot be egative", "maxWith cannot be negative", "frY))T");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ffsrTrT)", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ffsrTrT)";
      stringArray0[1] = "";
      stringArray0[3] = "maxWith cannot be negative";
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = ':';
      charArray0[3] = 'u';
      charArray0[4] = 'u';
      charArray0[5] = 'O';
      String string2 = StringUtils.join(charArray0, 'u');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("OuOu:uuuuuO", string2);
      assertNotNull(string2);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'O', 'O', ':', 'u', 'u', 'O'}, charArray0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "maxWith cannot be negative", 6);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.upperCase((String) null);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      String string0 = StringUtils.join((char[]) null, 'O');
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 28);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore("0R`^1kV8BA2!u8n", 11);
      assertEquals("0R`^1kV8BA2!u8n", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      String string0 = StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", 50, 1686);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[6];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "p{InCombiningDiacriticalMarks}+", charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 50;
      String string1 = StringUtils.strip("p{InCombiningDiacriticalMarks}+", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertNotNull(string1);
      
      CharBuffer charBuffer0 = StringUtils.defaultIfEmpty((CharBuffer) null, (CharBuffer) null);
      assertNull(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = '.';
      charArray0[3] = '.';
      charArray0[4] = '.';
      charArray0[5] = '.';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'.', '.', '.', '.', '.', '.'}, charArray0);
      assertEquals(6, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(6, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(6, charBuffer0.limit());
      assertEquals("......", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      
      CharBuffer charBuffer1 = StringUtils.defaultIfEmpty(charBuffer0, charBuffer0);
      assertNotNull(charBuffer1);
      assertEquals(6, charArray0.length);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertArrayEquals(new char[] {'.', '.', '.', '.', '.', '.'}, charArray0);
      assertEquals(6, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(6, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(6, charBuffer0.limit());
      assertEquals("......", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals("......", charBuffer1.toString());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(6, charBuffer1.capacity());
      assertTrue(charBuffer1.hasArray());
      assertEquals(6, charBuffer1.limit());
      assertEquals(6, charBuffer1.length());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals(6, charBuffer1.remaining());
      assertEquals(0, charBuffer1.position());
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      String string0 = StringUtils.join((List<?>) stack0, "-|&", 2415, 2415);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("-|&"));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      charArray0[1] = '4';
      charArray0[2] = '.';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'Z', '4', '.'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.length());
      assertEquals("Z4.", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.capacity());
      
      CharBuffer charBuffer1 = StringUtils.defaultIfEmpty(charBuffer0, charBuffer0);
      assertNotNull(charBuffer1);
      assertEquals(3, charArray0.length);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertArrayEquals(new char[] {'Z', '4', '.'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.length());
      assertEquals("Z4.", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.capacity());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(3, charBuffer1.length());
      assertEquals(3, charBuffer1.remaining());
      assertEquals("Z4.", charBuffer1.toString());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertEquals(3, charBuffer1.limit());
      assertEquals(3, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      String string0 = StringUtils.lowerCase("N)}k8Oz\")c7", locale0);
      assertEquals("n)}k8oz\")c7", string0);
      assertNotNull(string0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      String string1 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "p{InCombiningDiacriticalMarks}+");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // p{InCombiningDiacriticalMarks}+
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      charArray0[3] = 'a';
      String string0 = StringUtils.join(charArray0, '\u0000', 2066, 2066);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'C', 'a'}, charArray0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "Array element ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'C', 'a'}, charArray0);
      
      String string1 = StringUtils.appendIfMissing((String) null, "org.apache.commons.lang3.StringUtils", stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.capitalize((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.valueOf(charArray0);
      assertFalse(string3.equals((Object)string0));
      assertEquals("\u0000\u0000Ca", string3);
      assertNotNull(string3);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'C', 'a'}, charArray0);
      
      String string4 = StringUtils.chomp((String) null);
      assertNull(string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "D|28u\"";
      stringArray1[1] = "Array element ";
      stringArray1[2] = null;
      stringArray1[3] = "K0qc,Gv";
      stringArray1[4] = null;
      stringArray1[5] = null;
      String string5 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNull(string5);
      assertEquals(1, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("D|28u\"");
      assertFalse(boolean0);
      
      String string6 = StringUtils.substringBetween((String) null, "", "^>x$$#8(w:G-");
      assertNull(string6);
      
      String string7 = StringUtils.substringAfterLast("Array and element cannot both be null", 2066);
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.right("K0qc,Gv", 51);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertEquals("K0qc,Gv", string8);
      assertNotNull(string8);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens((String) null, "@t2^R", 6);
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String string0 = StringUtils.trim("HURV4riOn3#xu5W;]o");
      assertEquals("HURV4riOn3#xu5W;]o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("HURV4riOn3#xu5W;]o"));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("HURV4riOn3#xu5W;]o"));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("HURV4riOn3#xu5W;]o"));
      
      String string3 = StringUtils.join(iterator0, 'E');
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("HURV4riOn3#xu5W;]o"));
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      charArray0[2] = '*';
      charArray0[3] = 'E';
      charArray0[4] = 'E';
      charArray0[5] = '\\';
      charArray0[6] = 'L';
      charArray0[7] = 'E';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "HURV4riOn3#xu5W;]o", charArray0);
      assertEquals(0, int0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'E', 'E', '*', 'E', 'E', '\\', 'L', 'E'}, charArray0);
      
      String string4 = StringUtils.overlay("", "p{InCombiningDiacriticalMarks}+", 0, 29);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join(charArray0, 'v');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("EvEv*vEvEv\\vLvE", string5);
      assertNotNull(string5);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'E', 'E', '*', 'E', 'E', '\\', 'L', 'E'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      String string0 = StringUtils.join((List<?>) stack0, "-|&", 2415, 2415);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(2415));
      
      String string1 = StringUtils.getDigits("-|&");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("Minimum abbreviation width is %d", "ev&Un1#hSI7@F");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("-|&", 64);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart("ev&Un1#hSI7@F", "ev&Un1#hSI7@F");
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.lowerCase("Array element ");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("array element ", string5);
      assertNotNull(string5);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "-|&";
      objectArray0[1] = (Object) "-|&";
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "array element ";
      String string6 = StringUtils.joinWith("-|&", objectArray0);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '@';
      intArray0[1] = (int) '@';
      intArray0[2] = (int) '@';
      String string0 = StringUtils.join(intArray0, 'V');
      assertEquals("64V64V64", string0);
      assertNotNull(string0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {64, 64, 64}, intArray0);
      
      int int0 = StringUtils.compare("", "", false);
      assertEquals(0, int0);
      
      String string1 = StringUtils.unwrap((String) null, 'V');
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "org.apache.commons.lang3.RegExUtils");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombSnigDiacriticlMarks}+", "}U", 2384);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.right("Rcv -\" l~g_TuamV#c7", 2384);
      assertEquals("Rcv -\" l~g_TuamV#c7", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.split("Rcv -\" l~g_TuamV#c7", 'F');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.trimToEmpty("}U");
      assertFalse(string1.equals((Object)string0));
      assertEquals("}U", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("p{InCombSnigDiacriticlMarks}+");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("p{InCombSnigDiacriticlMarks}+", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.length("}U");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.overlay("", "z*Ovtb8CpL-zI+vL@V", (-1285), (-1285));
      assertFalse(string1.equals((Object)string0));
      assertEquals("z*Ovtb8CpL-zI+vL@V", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull("\n");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("...", ", '");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(", '", "org.apache.commons.lang3.LocaleUtils", 78);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("g1<K;.&(Jz:m_x7c", "z?J:2jOqRdq5Fn", (-1253));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.repeat("<w^4+c", (-4742));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "g1<K;.&(Jz:m_x7c", "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substring((String) null, 93, (-1253));
      assertNull(string1);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(int0));
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-1]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      assertFalse(stack0.contains((-4742)));
      
      stack0.setSize(804);
      assertEquals(804, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(804, stack0.capacity());
      assertTrue(stack0.contains(integer0));
      assertFalse(stack0.contains((-4742)));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = '&';
      charArray0[2] = 'O';
      charArray0[3] = 'I';
      charArray0[4] = 'v';
      String string2 = StringUtils.join(charArray0, '/', 4, Integer.MIN_VALUE);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'d', '&', 'O', 'I', 'v', '\u0000'}, charArray0);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("g1<K;.&(Jz:m_x7c", (CharSequence) null, stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("g1<K;.&(Jz:m_x7c", string3);
      assertNotNull(string3);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-1), 804);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte)97;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "d)1|`?u,-A+KRG>It");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // d)1|`?u,-A+KRG>It
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      String string0 = StringUtils.lowerCase("S-4`eD=aGk!FkYY`", locale0);
      assertEquals("s-4`ed=agk!fkyy`", string0);
      assertNotNull(string0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "s-4`ed=agk!fkyy`");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // s-4`ed=agk!fkyy`
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.chop("PR2D~I6ib!)LDt");
      assertEquals("PR2D~I6ib!)LD", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("PR2D~I6ib!)LD", 1268);
      assertTrue(string2.equals((Object)string1));
      assertEquals("PR2D~I6ib!)LD", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("PR2D~I6ib!)LD", 154, "PR2D~I6ib!)LDt");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("PR2D~I6ib!)LDtPR2D~I6ib!)LDtPR2D~I6ib!)LDtPR2D~I6ib!)LDtPR2D~I6ib!)LDtPR2D~I6ib!)LDPR2D~I6ib!)LDtPR2D~I6ib!)LDtPR2D~I6ib!)LDtPR2D~I6ib!)LDtPR2D~I6ib!)LDtP", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) "PHB3|", (CharSequence) "PR2D~I6ib!)LDtPR2D~I6ib!)LDtPR2D~I6ib!)LDtPR2D~I6ib!)LDtPR2D~I6ib!)LDtPR2D~I6ib!)LDPR2D~I6ib!)LDtPR2D~I6ib!)LDtPR2D~I6ib!)LDtPR2D~I6ib!)LDtPR2D~I6ib!)LDtP");
      assertEquals(0, int0);
      
      String string4 = StringUtils.difference("g2qvF!B/!c2`#DA+;j", (String) null);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("g2qvF!B/!c2`#DA+;j", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      String string0 = StringUtils.getDigits("...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "...", 1233, 2773);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center("", 2773);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) "");
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertEquals(2773, int1);
      
      String string2 = StringUtils.center("qa=n'UCJt<:^u", 1233, "FiKF7U'KQl*fD+");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.equals((CharSequence) string2, (CharSequence) string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "...", (CharSequence) string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) string1;
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "qa=n'UCJt<:^u";
      charSequenceArray0[4] = (CharSequence) string1;
      String string3 = StringUtils.valueOf((char[]) null);
      assertNull(string3);
      
      boolean boolean4 = StringUtils.containsNone((CharSequence) "", "vg6Mc}T_sQ668");
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      
      String string4 = StringUtils.wrap("~IJ1'+p~Zt^U@H*Z", "null/empty items");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("null/empty items~IJ1'+p~Zt^U@H*Znull/empty items", string4);
      assertNotNull(string4);
      
      boolean boolean5 = StringUtils.startsWithIgnoreCase("null/empty items~IJ1'+p~Zt^U@H*Znull/empty items", "");
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5);
      
      String string5 = StringUtils.abbreviate("~rqiQ", 32);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("~rqiQ", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "HURV4riOn3#xu5W;]o", '\"');
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissingIgnoreCase("HURV4riOn3#xu5W;]o", "HURV4riOn3#xu5W;]o", charSequenceArray0);
      assertEquals("HURV4riOn3#xu5W;]o", string0);
      assertNotNull(string0);
      assertEquals(0, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "HURV4riOn3#xu5W;]o", (CharSequence) "HURV4riOn3#xu5W;]o");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "HURV4riOn3#xu5W;]o";
      stringArray0[1] = "HURV4riOn3#xu5W;]o";
      stringArray0[2] = "HURV4riOn3#xu5W;]o";
      stringArray0[5] = "HURV4riOn3#xu5W;]o";
      stringArray0[6] = "HURV4riOn3#xu5W;]o";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("HURV4riOn3#xu5W;]o", string1);
      assertNotNull(string1);
      assertEquals(7, stringArray0.length);
      
      float[] floatArray0 = new float[10];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) 'r';
      floatArray0[2] = (float) 'r';
      floatArray0[3] = 1.0F;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '\"', (-1352), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1352
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      String string0 = "Strings must not be null";
      String string1 = StringUtils.stripAccents("Strings must not be null");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Strings must not be null", string1);
      assertNotNull(string1);
      
      char char0 = 'f';
      int int0 = StringUtils.countMatches((CharSequence) "Strings must not be null", 'f');
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("Strings must not be null");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 'f';
      floatArray0[5] = (float) 'f';
      floatArray0[6] = (float) 0;
      char char1 = 'I';
      int int1 = 601;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'I', 1, 601);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      String string0 = StringUtils.removeAll("Qe8b6zcN<X<jpxOg<{", "...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("...");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("'YwtkewYT<}UOc&o", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.center("", 13, "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("             ", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare("5g#S3^[Z?~QwRs6%)G", "", true);
      assertFalse(int1 == int0);
      assertEquals(18, int1);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      String string0 = StringUtils.center("Rb#Ukmq#", 21);
      assertEquals("      Rb#Ukmq#       ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "...", (CharSequence) "Qe8b6zcN<X<jpxOg<{");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.wrapIfMissing("...", 'S');
      assertFalse(string1.equals((Object)string0));
      assertEquals("S...S", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "FLDnwN=4l)Wlt}0}", (CharSequence) "Sr");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      String string0 = StringUtils.center("_", 323, "]");
      assertEquals("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]_]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("P+aQ_XD-", "6'rF'.6'rF'.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("P+aQ_XD-", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "0T|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      String string0 = StringUtils.getDigits("...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "...", 1233, 2773);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "null/empty items";
      stringArray0[1] = "...";
      String string1 = StringUtils.replaceEachRepeatedly("qa=n'UCJt<:^uc8ZNfQ", stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("qa=n'UCJt<:^uc8ZNfQ", string1);
      assertNotNull(string1);
      assertEquals(2, stringArray0.length);
      
      String string2 = StringUtils.join((char[]) null, '9', 1233, 920);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      String string1 = StringUtils.upperCase((String) null, locale0);
      assertNull(string1);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      String string2 = StringUtils.remove("opUk>im$*2wObHN6D", '-');
      assertEquals("opUk>im$*2wObHN6D", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      String string0 = StringUtils.getDigits("...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "...", 1233, 2773);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center("", 2773);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) "");
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertEquals(2773, int1);
      
      String string2 = StringUtils.center("qa=n'UCJt<:^u", 1233, "FiKF7U'KQl*fD+");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.equals((CharSequence) string2, (CharSequence) string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "...", (CharSequence) string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) string1;
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "qa=n'UCJt<:^u";
      charSequenceArray0[4] = (CharSequence) string1;
      charSequenceArray0[5] = (CharSequence) "FiKF7U'KQl*fD+";
      String string3 = StringUtils.LF;
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\n", string3);
      assertNotNull(string3);
      
      charSequenceArray0[6] = (CharSequence) "\n";
      int int2 = StringUtils.lastIndexOfAny("qa=n'UCJt<:^u", charSequenceArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(13, int2);
      assertEquals(7, charSequenceArray0.length);
      
      String string4 = StringUtils.join((char[]) null, 'g', 2773, 5);
      assertNull(string4);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, "Comparator should not be null.");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(7, charSequenceArray0.length);
      
      Locale locale0 = Locale.forLanguageTag("Threshold must not be negative");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      
      String string6 = StringUtils.upperCase((String) null, locale0);
      assertNull(string6);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "hdO0]1yq#";
      stringArray0[2] = "p{InCombiningDiacriticalMarks}+";
      String string0 = StringUtils.center("_", 50, "hdO0]1yq#");
      assertEquals("hdO0]1yq#hdO0]1yq#hdO0]1_hdO0]1yq#hdO0]1yq#hdO0]1y", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("Xyr", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Xyr", string1);
      assertNotNull(string1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 50;
      floatArray0[1] = (float) 50;
      floatArray0[2] = (float) 50;
      floatArray0[3] = (float) 50;
      floatArray0[4] = 1897.6062F;
      floatArray0[5] = (float) 50;
      String string2 = StringUtils.join(floatArray0, '6');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("50.0650.0650.0650.061897.6062650.0", string2);
      assertNotNull(string2);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {50.0F, 50.0F, 50.0F, 50.0F, 1897.6062F, 50.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Xyr", (CharSequence) "_");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "hdO0]1yq#hdO0]1yq#hdO_hdO0]1yq#hdO0]1yq#hdO0", (CharSequence) "50.0650.0650.0650.061897.6062650.0");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.swapCase("Py8");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("pY8", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "z*Ovtb8CpL-zI+vL@V", charArray0);
      assertEquals(0, int0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'j', 'j', '\u0000'}, charArray0);
      
      String string1 = StringUtils.wrap("", "\r");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      
      String string0 = locale0.getDisplayLanguage();
      assertEquals("German", string0);
      assertNotNull(string0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      Locale locale1 = Locale.KOREA;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("KR", locale1.getCountry());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("ko", locale1.getLanguage());
      
      String string1 = locale0.getDisplayVariant(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("KR", locale1.getCountry());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("ko", locale1.getLanguage());
      
      String string2 = StringUtils.wrap("German", "offset cannot be negative");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("offset cannot be negativeGermanoffset cannot be negative", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "German", (CharSequence) "German");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.left(string0, 4);
      assertEquals("\\u", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) string1, (CharSequence) string1);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) string1;
      charSequenceArray0[1] = (CharSequence) string1;
      charSequenceArray0[2] = (CharSequence) string0;
      charSequenceArray0[3] = (CharSequence) string0;
      charSequenceArray0[4] = (CharSequence) string1;
      charSequenceArray0[5] = (CharSequence) string1;
      charSequenceArray0[6] = (CharSequence) string0;
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.wrap(string1, ")Mi`kZk2!\"CQk");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(")Mi`kZk2!\"CQk\\u)Mi`kZk2!\"CQk", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("B", "e52{dcr-hH{I`Tp0>u", 16);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.unwrap("B", "0A");
      assertEquals("B", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("B", string1);
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.replaceFirst("z?J:2jOqRdq5Fn", "z?J:2jOqRdq5Fn", "org.apache.commons.lang3.thrtil");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("z?org.apache.commons.lang3.thrtil", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[0];
      String string3 = StringUtils.join(charArray0, 'U');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "D;40(9";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "D;40(9");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "D;40(9", (CharSequence) "D;40(9");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAny((CharSequence) "D;40(9", charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "D;40(9", (CharSequence) "D;40(9", (int) 'l');
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "D;40(9", "D;40(9");
      assertFalse(boolean0);
      
      String string0 = StringUtils.uncapitalize("D;40(9");
      assertEquals("d;40(9", string0);
      assertNotNull(string0);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "d;40(9", (CharSequence) "D;40(9");
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      
      String[] stringArray2 = new String[1];
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      stringArray2[0] = "d;40(9";
      String string1 = StringUtils.getCommonPrefix(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("d;40(9", string1);
      assertNotNull(string1);
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      String string2 = StringUtils.substringBetween("d;40(9", "Array element ");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      String string0 = StringUtils.trim("HURV4riOn3#xu5W;]o");
      assertEquals("HURV4riOn3#xu5W;]o", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "HURV4riOn3#xu5W;]o", (CharSequence) "HURV4riOn3#xu5W;]o");
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 256;
      intArray0[1] = (int) 'W';
      intArray0[2] = (int) 'W';
      intArray0[3] = (int) 'W';
      intArray0[4] = 256;
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = (-1);
      String string1 = StringUtils.join(intArray0, '1', 123, (-1587));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {256, 87, 87, 87, 256, (-1), (-1), (-1), (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '4', 2382, (-1943));
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "q?DEp", "-.");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "-.", (CharSequence) null);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 256;
      intArray0[1] = (-1);
      intArray0[2] = 2382;
      intArray0[3] = (-1943);
      intArray0[4] = (-1943);
      intArray0[5] = (int) '4';
      String string1 = StringUtils.join(intArray0, '@', 52, (-1943));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {256, (-1), 2382, (-1943), (-1943), 52}, intArray0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[7] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[0] = ':';
      charArray0[4] = ':';
      charArray0[5] = ':';
      charArray0[6] = '+';
      charArray0[7] = '+';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(":``\u0000::++", string0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {':', '`', '`', '\u0000', ':', ':', '+', '+'}, charArray0);
      
      String string1 = StringUtils.chomp("p{InCombiningDiacriticalMarks}+");
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) ":``\u0000::++", (CharSequence) null, 30);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[1] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[2] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[3] = null;
      String string2 = StringUtils.replaceEach("p{InCombiningDiacriticalMarks}+", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      assertNotNull(string2);
      assertEquals(4, stringArray0.length);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) ":``\u0000::++", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-1000));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-1000));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceChars("offset cannot be negative", "maxWith cannot be negative", "frY))T");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ffsTrTrT)", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ffsTrTrT)";
      stringArray0[1] = "";
      stringArray0[3] = "maxWith cannot be negative";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.replaceAll("frY))T", stringArray0[2], "");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("frY))T", string2);
      assertNotNull(string2);
      assertEquals(4, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      String string3 = StringUtils.toRootUpperCase("frY))T");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("FRY))T", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "FRY))T", "*;QH");
      assertTrue(boolean0);
      
      String string4 = StringUtils.difference("", "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.stripToNull("frY))T");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("frY))T", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.removeEndIgnoreCase("cH5+PCpHz", "WH5(dj~LqfWQQ(Cw");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("cH5+PCpHz", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.removeFirst("z?J:2jOqRdq5Fn", "");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertEquals("z?J:2jOqRdq5Fn", string7);
      assertNotNull(string7);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      String string8 = StringUtils.upperCase("WH5(dj~LqfWQQ(Cw", locale0);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertEquals("WH5(DJ~LQFWQQ(CW", string8);
      assertNotNull(string8);
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string9 = StringUtils.remove("ffsTrTrT)", ':');
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertEquals("ffsTrTrT)", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "clone";
      charSequenceArray0[2] = (CharSequence) "clone";
      charSequenceArray0[3] = (CharSequence) "\n";
      String string1 = StringUtils.prependIfMissing("clone", "\n", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("clone", string1);
      assertNotNull(string1);
      assertEquals(4, charSequenceArray0.length);
      
      String string2 = StringUtils.lowerCase("org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.stringutils", string2);
      assertNotNull(string2);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      
      Locale locale1 = Locale.JAPANESE;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      
      String string3 = locale0.getDisplayVariant(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      
      Locale locale2 = locale0.stripExtensions();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertNotSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("ja_JP", locale2.toString());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("JP", locale2.getCountry());
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("ja", locale2.getLanguage());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string4 = locale1.getDisplayLanguage();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Japanese", string4);
      assertNotNull(string4);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      
      String string5 = StringUtils.chomp("\n");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.stringutils", (CharSequence) "@+}g;1<Gq+m~$Cd#", (-2013265917));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = 'S';
      charArray0[2] = 'r';
      charArray0[3] = 'W';
      charArray0[4] = 'c';
      charArray0[5] = 'z';
      charArray0[6] = 'd';
      String string0 = StringUtils.repeat('~', 732);
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("HBXr N;v");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBetween((String) null, "org.apache.commons.lang3.LocaleUtils", "%O_o%JB(fRt/wNi^+>");
      assertNull(string1);
      
      String string2 = StringUtils.substringAfterLast((String) null, (-2528));
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isEmpty("%O_o%JB(fRt/wNi^+>");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string3 = StringUtils.chomp("");
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.join((char[]) null, 'b');
      assertNull(string1);
      
      String string2 = StringUtils.replaceAll((String) null, (String) null, (String) null);
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "Array element ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'C', '\u0000'}, charArray0);
      
      String string1 = StringUtils.appendIfMissing((String) null, "org.apache.commons.lang3.StringUtils", stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.capitalize((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.upperCase("D|28u\"");
      assertFalse(string3.equals((Object)string0));
      assertEquals("D|28U\"", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("~IJ1'+p~Zt^U@H*Z", "ev&9n1#hSI7@F", (-1917));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.substringBetween("p{InCombiningDiacriticalMarks}+", "z?J:2jOqRdq5Fn");
      assertNull(string4);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, " ");
      assertFalse(boolean0);
      
      String string5 = StringUtils.unwrap("org.apache.commons.lang3.StringUtils", '\u0000');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("org.apache.commons.lang3.StringUtils", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string6 = StringUtils.replaceEachRepeatedly("D|28u\"", stringArray0, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("D|28u\"", string6);
      assertNotNull(string6);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      charArray0[3] = 'a';
      String string0 = StringUtils.join(charArray0, '\u0000', 2066, 2066);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'C', 'a'}, charArray0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "Array element ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'C', 'a'}, charArray0);
      
      String string1 = StringUtils.appendIfMissing((String) null, "org.apache.commons.lang3.StringUtils", stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.capitalize((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.upperCase("D|28u\"");
      assertFalse(string3.equals((Object)string0));
      assertEquals("D|28U\"", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("~IJ1'+p~Zt^U@H*Z", "ev&Un1#hSI7@F", (-1917));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.substringBetween("p{InCombiningDiacriticalMarks}+", "z?J:2jOqRdq5Fn");
      assertNull(string4);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, "");
      assertFalse(boolean0);
      
      String string5 = StringUtils.unwrap("org.apache.commons.lang3.StringUtils", '\u0000');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("org.apache.commons.lang3.StringUtils", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "Array element ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string1 = StringUtils.appendIfMissing((String) null, "org.apache.commons.lang3.StringUtils", stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.capitalize((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.upperCase("D|28u\"");
      assertFalse(string3.equals((Object)string0));
      assertEquals("D|28U\"", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Array element ", charArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string4 = StringUtils.wrap("D|28u\"", "l^]2)");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("l^]2)D|28u\"l^]2)", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat("", (String) null, (-3454));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      String string0 = StringUtils.capitalize("y0S<.nn;xUGT;'}AAd");
      assertEquals("Y0S<.nn;xUGT;'}AAd", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("y0S<.nn;xUGT;'}AAd");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("y0S<.nn;xUGT;'}AAd", "y0S<.nn;xUGT;'}AAd", (-3017));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("y0S<.nn;xUGT;'}AAd", "Y0S<.nn;xUGT;'}AAd", false);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("B");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAlphaSpace("y0S<.nn;xUGT;'}AAd");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAlpha("B");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "D;40(9";
      objectArray0[1] = (Object) "D;40(9";
      objectArray0[2] = (Object) "D;40(9";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "D;40(9";
      objectArray0[5] = (Object) "D;40(9";
      objectArray0[6] = (Object) "D;40(9";
      char[] charArray0 = new char[7];
      charArray0[0] = 'b';
      charArray0[1] = 'O';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      charArray0[5] = 'b';
      charArray0[6] = 'b';
      String string0 = StringUtils.join(charArray0, 'u');
      assertEquals("buOu:u:u:ubub", string0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'b', 'O', ':', ':', ':', 'b', 'b'}, charArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "buOu:u:u:ubub", 6);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlpha("D;40(9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{}", "~IJ1'+p~Zt^U@H*Z");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Index: ", "~IJ1'+p~Zt^U@H*Z", 1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      short[] shortArray0 = new short[3];
      String string0 = StringUtils.join(shortArray0, '&', 3063, (-28));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) '/';
      doubleArray0[2] = (double) (-28);
      doubleArray0[3] = (double) '/';
      doubleArray0[4] = (double) '&';
      String string1 = StringUtils.join(doubleArray0, 'i', (-28), (-28));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 47.0, (-28.0), 47.0, 38.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "XyiU?$X.<b]>1y";
      stringArray0[1] = "XyiU?$X.<b]>1y";
      stringArray0[2] = "XyiU?$X.<b]>1y";
      stringArray0[3] = "XyiU?$X.<b]>1y";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("XyiU?$X.<b]>1y", string0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      
      String string1 = StringUtils.substringBetween("d^bRObject varargs must not be null", "XyiU?$X.<b]>1y");
      assertNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "XyiU?$X.<b]>1y", 'E');
      assertEquals(0, int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      charArray0[3] = 'E';
      charArray0[4] = 'E';
      charArray0[5] = 'E';
      charArray0[6] = 'E';
      charArray0[7] = 'E';
      charArray0[8] = 'E';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "M#21T4mQ[?Bofw[/m3";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string0 = StringUtils.substringAfterLast("M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[20];
      charSequenceArray0[4] = (CharSequence) "{gVwGfu";
      String string1 = StringUtils.prependIfMissing("{gVwGfu", "M#21T4mQ[?Bofw[/m3", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{gVwGfu", string1);
      assertNotNull(string1);
      assertEquals(20, charSequenceArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 6;
      intArray0[1] = 2;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '^', (-4795), 377);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4795
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("e52{dcr-hH{I`Tp0>u");
      assertEquals("e52{dcr-hH{I`Tp0>u", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("e52{dcr-hH{I`Tp0>u");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("B", "e52{dcr-hH{I`Tp0>u", 16);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("e52{dcr-hH{I`Tp0>u", "e52{dcr-hH{I`Tp0>u");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.substringBetween("e52{dcr-hH{I`Tp0>u", "CRgZ$1e_;R'=s\">du6L");
      assertNull(string2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("comparator", "B", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Bcomparator", string3);
      assertNotNull(string3);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = 'Z';
      charArray0[2] = 'C';
      charArray0[3] = 'a';
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "HBXr N;v";
      charSequenceArray0[1] = (CharSequence) "HBXr N;v";
      charSequenceArray0[2] = (CharSequence) "HBXr N;v";
      charSequenceArray0[3] = (CharSequence) "HBXr N;v";
      charSequenceArray0[4] = (CharSequence) "HBXr N;v";
      charSequenceArray0[5] = (CharSequence) "HBXr N;v";
      String string0 = StringUtils.prependIfMissing("HBXr N;v", "HBXr N;v", charSequenceArray0);
      assertEquals("HBXr N;v", string0);
      assertNotNull(string0);
      assertEquals(6, charSequenceArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '(';
      intArray0[1] = (int) '(';
      intArray0[2] = (int) 'a';
      intArray0[3] = (int) '(';
      String string1 = StringUtils.join(intArray0, '(', 2, (-4795));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {40, 40, 97, 40}, intArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      
      byte[] byteArray0 = StringUtils.getBytes("y\"X?\"_X", charset0);
      assertNotNull(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)121, (byte)34, (byte)88, (byte)63, (byte)34, (byte)95, (byte)88}, byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      
      byte[] byteArray0 = StringUtils.getBytes("`Fw~&{WiH!:.", charset0);
      assertNotNull(byteArray0);
      assertEquals(12, byteArray0.length);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("g1<K;.&(Jz:m_x7c", "z?J:2jOqRdq5Fn", (-1253));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = "<w^4+c";
      int int0 = (-4742);
      String string1 = StringUtils.repeat("<w^4+c", (-4742));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "g1<K;.&(Jz:m_x7c", "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.substring((String) null, 93, (-1253));
      assertNull(string2);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(int0));
      
      stack0.setSize(804);
      assertEquals(804, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(804, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains(int0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = '&';
      charArray0[2] = 'O';
      charArray0[3] = 'I';
      charArray0[4] = 'v';
      charArray0[5] = 'x';
      String string3 = StringUtils.join(charArray0, '/', 4, Integer.MIN_VALUE);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'d', '&', 'O', 'I', 'v', 'x'}, charArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-1), 804);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      String string0 = StringUtils.stripAccents("M{Is1\";;%ME;}8@9;");
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("M{Is1\";;%ME;}8@9;", "M{Is1\";;%ME;}8@9;", (-2149));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "M{Is1\";;%ME;}8@9;";
      charSequenceArray0[1] = (CharSequence) "M{Is1\";;%ME;}8@9;";
      boolean boolean0 = StringUtils.endsWithAny("M{Is1\";;%ME;}8@9;", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      CharBuffer charBuffer0 = StringUtils.getIfEmpty((CharBuffer) null, (Supplier<CharBuffer>) null);
      assertNull(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "p{InCombiningDiacriticalMarks}+", charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty("qa=n'UCJt<:^u", supplier0);
      assertEquals("qa=n'UCJt<:^u", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      String string0 = StringUtils.remove("$W=/CS~", 'v');
      assertEquals("$W=/CS~", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("$W=/CS~");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceIgnoreCase("$W=/CS~", "$W=/CS~", "$W=/CS~", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("$W=/CS~", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "$W=/CS~", (CharSequence) "$W=/CS~");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.getIfEmpty("$W=/CS~", (Supplier<String>) null);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("$W=/CS~", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("\"^H_%7}#9PZj_!zmo|", "\"^H_%7}#9PZj_!zmo|");
      assertNull(string3);
      
      String string4 = StringUtils.lowerCase("The type must not be null", (Locale) null);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("the type must not be null", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Iterator<Locale.LanguageRange> iterator0 = arrayList0.iterator();
      assertNotNull(iterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = StringUtils.join(iterator0, "'L~7E-2,VamW+Ac");
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "[(mFB#zeL";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "'L~7E-2,VamW+Ac";
      String string1 = StringUtils.replaceEach("[(mFB#zeL", stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[(mFB#zeL", string1);
      assertNotNull(string1);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[0] = ':';
      charArray0[4] = ':';
      charArray0[5] = ':';
      charArray0[6] = '+';
      charArray0[7] = '+';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(":``\u0000::++", string0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {':', '`', '`', '\u0000', ':', ':', '+', '+'}, charArray0);
      
      String string1 = StringUtils.chomp("p{InCombiningDiacriticalMarks}+");
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) ":``\u0000::++", (CharSequence) null, 30);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "p{InCombiningDiacriticalMarks}+";
      String string2 = StringUtils.replaceEachRepeatedly("K0qc,Gv", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("K0qc,Gv", string2);
      assertNotNull(string2);
      assertEquals(4, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("K0qc,Gv");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringBetween((String) null, "K0qc,Gv", "p{InCombiningDiacriticalMarks}+");
      assertNull(string3);
      
      String string4 = StringUtils.substringAfterLast("Gxx?TS3M'./", 1);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "ULK-fZyN3Zo", 800);
      assertNull(stringArray0);
      
      String string0 = StringUtils.replaceIgnoreCase((String) null, (String) null, "on width is %d");
      assertNull(string0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("on width is %d", (String) null, 53);
      assertNotNull(stringArray1);
      assertEquals(4, stringArray1.length);
      
      String string1 = StringUtils.replaceIgnoreCase((String) null, "g(.d}E_6yNLEY2maxWith cannot be negative", "]<e&i&fW+m{370");
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "g(.d}E_6yNLEY2maxWith cannot be negative", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      byte[] byteArray0 = StringUtils.getBytes("F&[hat%r~?", charset0);
      assertNotNull(byteArray0);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)70, (byte)38, (byte)91, (byte)104, (byte)97, (byte)116, (byte)37, (byte)114, (byte)126, (byte)63}, byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens("hE", (String) null, 9);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string1 = StringUtils.normalizeSpace("org.apache.commons.lang3.StringUtils");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Org.apache.commons.lang3.StringUtils", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase(" ");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertNull(charSequence0);
      assertEquals(2, stringArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("org.apache.commons.lang3.StringUtils");
      assertNotNull(intArray0);
      assertEquals(36, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      long[] longArray0 = new long[1];
      String string0 = StringUtils.join(longArray0, '}');
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("0");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeEnd("org.apache.commons.lang3.RegExUtils", "org.apache.commons.lang3.RegExUtils");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("H", 13, "org.apache.commons.lang3.RegExUtils");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apHorg.ap", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("RWk8>[X", "0", 18, 13);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("RWk8>[X", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      String string0 = StringUtils.substringBetween("9re", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("G9ULK-fZyNJZn", "G9ULK-fZyNJZn");
      assertEquals("G9ULK-fZyNJZn", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "G9ULK-fZyNJZn", (CharSequence) "G9ULK-fZyNJZn");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      
      Locale locale1 = Locale.forLanguageTag("");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      
      String string0 = StringUtils.wrapIfMissing("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = locale0.getDisplayVariant(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      
      Locale locale2 = locale1.stripExtensions();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertNotSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getLanguage());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string2 = locale0.getDisplayLanguage();
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Japanese", string2);
      assertNotNull(string2);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      
      String string3 = StringUtils.chomp("@+}g;1<Gq+m~$Cd#");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("@+}g;1<Gq+m~$Cd#", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "N)}k8Oz\")c7", (CharSequence) "", 6);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      String string0 = StringUtils.removeAll("Qe8b6zcN<X<jpxOg<{", "...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("...");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(""));
      
      boolean boolean1 = treeSet0.add("...");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(treeSet0.contains("..."));
      assertFalse(treeSet0.contains(""));
      
      boolean boolean2 = treeSet0.add("");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(treeSet0.contains("..."));
      assertFalse(treeSet0.contains("Qe8b6zcN<X<jpxOg<{"));
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "3", 0);
      assertNull(stringArray1);
      
      String string1 = StringUtils.repeat('O', 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("|k/$@T%8#^Uu", 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("|k/$@T%8#^Uu", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("", "");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("", "");
      assertNotNull(stringArray2);
      assertEquals(0, stringArray2.length);
      assertSame(stringArray2, stringArray0);
      
      String string4 = StringUtils.right((String) null, (-1724));
      assertNull(string4);
      
      String string5 = StringUtils.stripEnd("|k/$@T%8#^Uu", "");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertEquals("|k/$@T%8#^Uu", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBetween("lHA\",)QVNSQM>%w$O", "', is neither of type Map.Entry nor an Array", "G3:d%U=qB|LGK");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      Locale locale0 = Locale.forLanguageTag("G9ULK-fZyNJZn");
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWithAny(" ", stringArray0);
      assertFalse(boolean0);
      assertEquals(250, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(250, stringArray0.length);
      
      String string1 = StringUtils.repeat(" ", 256);
      assertFalse(string1.equals((Object)string0));
      assertEquals("                                                                                                                                                                                                                                                                ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removePattern("G9ULK-fZyNJZn", "                                                                                                                                                                                                                                                                ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("G9ULK-fZyNJZn", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, '`', (-1458), 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1458
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      String string0 = StringUtils.removeAll("Qe8b6zcN<X<jpxOg<{", "...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("...");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("'YwtkewYT<}UOc&o", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("..."));
      
      boolean boolean1 = treeSet0.add("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(treeSet0.contains("..."));
      assertTrue(treeSet0.contains(""));
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "3", 0);
      assertNull(stringArray1);
      
      String string1 = StringUtils.repeat('O', 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("|k/$@T%8#^Uu", 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("|k/$@T%8#^Uu", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStartIgnoreCase("", (String) null);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("", "'YwtkewYT<}UOc&o");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertEquals(0, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      
      String string4 = StringUtils.right((String) null, (-1724));
      assertNull(string4);
      
      String string5 = StringUtils.stripEnd("|k/$@T%8#^Uu", "");
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("|k/$@T%8#^Uu", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.removePattern("Qe8b6zcN<X<jpxOg<{", "Wsu#~dlk%>i}7Zi2H0");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("Qe8b6zcN<X<jpxOg<{", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.valueOf(charArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 1524);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(", Length: 0", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("The Array must not be null", '\'');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (int) '\'', 0);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("FI`", "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '$';
      charArray0[4] = '\'';
      charArray0[5] = '$';
      charArray0[6] = '\'';
      // Undeclared exception!
      try { 
        Charset.forName("FI`");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // FI`
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      String string0 = StringUtils.abbreviate("'2Zq=}`{", "C=A{ FJ>a2H$c", (-2025), 160);
      assertEquals("'2Zq=}`{", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("'2Zq=}`{");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2025);
      doubleArray0[1] = (double) (-2025);
      doubleArray0[2] = (double) (-2025);
      int int0 = StringUtils.compare("C=A{ FJ>a2H$c", "'2Zq=}`{", false);
      assertEquals(28, int0);
      
      String string1 = StringUtils.substringBefore("h2Ma8.<x/j", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("h2Ma8.<x/j", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{}", "~IJ1'+p~Zt^U@H*Z");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, '}', Integer.MAX_VALUE, 112);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("e52{dcr-hH{I`Tp0>u");
      assertEquals("e52{dcr-hH{I`Tp0>u", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("e52{dcr-hH{I`Tp0>u");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("B", "e52{dcr-hH{I`Tp0>u", 16);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "e52{dcr-hH{I`Tp0>u", "B");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.unwrap("B", "0A");
      assertFalse(string1.equals((Object)string0));
      assertEquals("B", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("0A", "e52{dcr-hH{I`Tp0>u");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.compare("B", "e52{dcr-hH{I`Tp0>u");
      assertEquals((-35), int0);
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("B", string2);
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.replaceFirst("z?J:2jOqRdq5Fn", "z?J:2jOqRdq5Fn", "org.apache.commons.lang3.thrtil");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("z?org.apache.commons.lang3.thrtil", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "z?J:2jOqRdq5Fn", (CharSequence) "e52{dcr-hH{I`Tp0>u", (-35));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeFirst("G9ULK-fZyNJZn", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("G9ULK-fZyNJZn", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "G9ULK-fZyNJZn", (CharSequence) "", (-1009));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      String string0 = StringUtils.leftPad("L", 32, "Threshold must not be negative");
      assertEquals("Threshold must not be negativeTL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("Threshold must not be negative", 32, (-239));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "Array element ";
      byte[] byteArray0 = StringUtils.getBytes("Array element ", (Charset) null);
      assertNotNull(byteArray0);
      assertEquals(14, byteArray0.length);
      
      int int0 = 35;
      String string3 = StringUtils.truncate("Array element ", 35, 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chop("Threshold must not be negative");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Threshold must not be negativ", string4);
      assertNotNull(string4);
      
      String string5 = "maxWith cannot be negative";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("maxWith cannot be negative", (-239));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      String string0 = "M#21T4mQ[?Bofw[/m3";
      String string1 = StringUtils.replaceOnceIgnoreCase("M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3");
      assertTrue(string1.equals((Object)string0));
      assertEquals("M#21T4mQ[?Bofw[/m3", string1);
      assertNotNull(string1);
      
      String string2 = null;
      String string3 = StringUtils.substringAfterLast("", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = 12;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("M#21T4mQ[?Bofw[/m3", (-3244));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter(" ", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("G9ULK-fZyNJZn", "", 156);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(" ");
      assertTrue(boolean0);
      
      String string3 = StringUtils.substringBetween(" ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNull(string3);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "", 156);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("e52{dcr-hH{I`Tp0>u");
      assertEquals("e52{dcr-hH{I`Tp0>u", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("e52{dcr-hH{I`Tp0>u");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("B", "e52{dcr-hH{I`Tp0>u", 16);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "e52{dcr-hH{I`Tp0>u", "B");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.unwrap("B", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("B", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("", "e52{dcr-hH{I`Tp0>u");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.compare("B", "e52{dcr-hH{I`Tp0>u");
      assertEquals((-35), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "e52{dcr-hH{I`Tp0>u", 'B');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.removeStart("e52{dcr-hH{I`Tp0>u", "qa=n'UCJt<:^uc8ZNfQ");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("e52{dcr-hH{I`Tp0>u", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.countMatches((CharSequence) "B", (CharSequence) "e52{dcr-hH{I`Tp0>u");
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      String string3 = StringUtils.substringAfterLast((String) null, "e52{dcr-hH{I`Tp0>u");
      assertNull(string3);
      
      String string4 = StringUtils.abbreviate((String) null, 52);
      assertNull(string4);
      
      String string5 = StringUtils.removeAll((String) null, "");
      assertNull(string5);
      
      String string6 = StringUtils.rightPad("', is neither of type Map.Entry nor an Array", 16, (String) null);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("', is neither of type Map.Entry nor an Array", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.defaultString(", '");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertEquals(", '", string7);
      assertNotNull(string7);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = 'y';
      charArray0[2] = 'N';
      charArray0[3] = 'y';
      boolean boolean3 = StringUtils.containsAny((CharSequence) ", '", charArray0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'}', 'y', 'N', 'y'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      String string0 = StringUtils.leftPad("L", 32, "Threshold must not be negative");
      assertEquals("Threshold must not be negativeTL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("Threshold must not be negative", 32, (-239));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = StringUtils.getBytes("Array element ", (Charset) null);
      assertNotNull(byteArray0);
      assertEquals(14, byteArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "Threshold must not be negativeTL", 32);
      assertEquals(9, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "Array element ");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string2 = StringUtils.removeEnd("\n", "L");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rotate("", 1259);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("K", "K");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("K", 1461);
      assertFalse(string1.equals((Object)string0));
      assertEquals("K", string1);
      assertNotNull(string1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("K"));
      
      // Undeclared exception!
      try { 
        linkedList0.listIterator(1137);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1137, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      String string0 = StringUtils.replacePattern((String) null, "wwl`Uxpj0*j", (String) null);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Threshold must not be negative");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      assertNotNull(unaryOperator1);
      
      linkedList0.replaceAll(unaryOperator1);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.remove((Object) "xY+YE(LO");
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.toRootUpperCase((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      String string0 = StringUtils.remove("W~cQ8%?aZ&SM\u0003F+&", "]z^\"^;9WB7 Km");
      assertEquals("W~cQ8%?aZ&SM\u0003F+&", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAny("W~cQ8%?aZ&SM\u0003F+&", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.truncate("ugHLteB =btzi{V", 1361);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ugHLteB =btzi{V", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      String string0 = StringUtils.join(longArray0, '}');
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("0");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBetween("a}<p~1cW*L", "0");
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (-787), 8);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "0", 8);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)41;
      String string0 = StringUtils.join(byteArray0, '@');
      assertNotNull(string0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)63, (byte)63, (byte)0, (byte)96, (byte)41}, byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = '|';
      charArray0[2] = '@';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "63@63@0@96@41", charArray0);
      assertEquals(0, int0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'`', '|', '@'}, charArray0);
      
      int int1 = StringUtils.indexOf((CharSequence) "63@63@0@96@41", 440, (-3239));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      short[] shortArray0 = new short[0];
      String string1 = StringUtils.join(shortArray0, '4');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("XD1h@c({ qn");
      assertEquals("XD1H@C({ QN", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("a[MC/ y:T5x1s@/0", '|');
      assertFalse(string1.equals((Object)string0));
      assertEquals("|a[MC/ y:T5x1s@/0|", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("XD1h@c({ qn", 31, "\r");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      String string0 = StringUtils.truncate("", 65, 1248);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      Locale locale1 = Locale.ITALIAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      
      String string2 = locale1.getDisplayVariant(locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      
      String string3 = StringUtils.upperCase("qa=n'UCJt<:^uc8ZNfQ", locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("QA=N'UCJT<:^UC8ZNFQ", string3);
      assertNotNull(string3);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[1] = "q-Ww:/3;>z8GcCkO^RM";
      stringArray0[2] = "Y]]Eg,p%[";
      stringArray0[3] = "Y]]Eg,p%[";
      stringArray0[4] = "Y]]Eg,p%[";
      stringArray0[5] = "Y]]Eg,p%[";
      String string0 = StringUtils.replaceEach("p{InCombiningDiacriticalMarks}+", stringArray0, stringArray0);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      assertEquals(6, stringArray0.length);
      
      String string1 = StringUtils.join((Object[]) stringArray0, 'j');
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+jq-Ww:/3;>z8GcCkO^RMjY]]Eg,p%[jY]]Eg,p%[jY]]Eg,p%[jY]]Eg,p%[", string1);
      assertNotNull(string1);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '$';
      floatArray0[1] = (float) '$';
      String string0 = StringUtils.overlay("2lOS}G@j|", (String) null, 800, 800);
      assertEquals("2lOS}G@j|", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore((String) null, 25);
      assertNull(string1);
      
      String string2 = StringUtils.defaultString("Xc&#O8r@;>");
      assertFalse(string2.equals((Object)string0));
      assertEquals("Xc&#O8r@;>", string2);
      assertNotNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(25));
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(25));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, 'c', (-4868), (-800));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -4868
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      String string0 = StringUtils.overlay("z*Ovtb8CpL-zI+vL@V", "", 3108, 3108);
      assertEquals("z*Ovtb8CpL-zI+vL@V", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("", 3108);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("z*Ovtb8CpL-zI+vL@V");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("1r)uTX;VsRLtsE", 'L');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.overlay("1r)uTX;VsRLtsE", "comparator", 50, (-441));
      assertEquals("comparator", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("comparator");
      assertTrue(string1.equals((Object)string0));
      assertEquals("comparator", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      String string0 = StringUtils.truncate("", 65, 1248);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.chop("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", 0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[3];
      String string3 = StringUtils.abbreviate("", "", 1248, 65536);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.overlay(" ?tyV1-.Ks4S>?k(J)%", "null/empty items", 1733, 50);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(" ?tyV1-.Ks4S>?k(J)%null/empty items", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) " ?tyV1-.Ks4S>?k(J)%null/empty items", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) " ?tyV1-.Ks4S>?k(J)%", charArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string5 = StringUtils.replaceAll("-\"/J`XyRXPw2", "null/empty items", "");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("-\"/J`XyRXPw2", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.left(string0, 4);
      assertEquals("\\u", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) string0, (CharSequence) string1);
      assertTrue(boolean0);
      
      String string2 = StringUtils.overlay(string1, (String) null, 4, 8192);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("\\u", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      String string0 = StringUtils.substringAfter("9ouDM{s>%I&C", (-697));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("dJ", "dJ", "9ouDM{s>%I&C");
      assertNull(string1);
      
      String string2 = StringUtils.repeat('z', 12);
      assertFalse(string2.equals((Object)string0));
      assertEquals("zzzzzzzzzzzz", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap("23h=D:`I;ng$Q*", 'Q');
      assertFalse(string1.equals((Object)string0));
      assertEquals("23h=D:`I;ng$Q*", string1);
      assertNotNull(string1);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string0));
      
      Spliterator<String> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string0));
      
      boolean boolean1 = arrayList0.add("G9ULK-fZyNJZn");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains("G9ULK-fZyNJZn"));
      assertFalse(arrayList0.contains(string0));
      
      boolean boolean2 = arrayList0.add("");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(string0));
      assertFalse(arrayList0.contains(" "));
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(arrayList0.contains(string0));
      assertFalse(arrayList0.contains(" "));
      
      String string2 = StringUtils.join((Iterator<?>) listIterator0, (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("G9ULK-fZyNJZn", string2);
      assertNotNull(string2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertTrue(arrayList0.contains(string0));
      assertFalse(arrayList0.contains(" "));
      
      boolean boolean3 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.mid("Object varargs must not be null", (-1911), 1860);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Object varargs must not be null", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat((String) null, 0);
      assertNull(string4);
      
      String string5 = StringUtils.substringAfter("", "");
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat("(c", "", (-817));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean4 = StringUtils.isAlphanumericSpace("(c");
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      String string7 = StringUtils.substringBetween("", "w");
      assertNull(string7);
      
      String string8 = StringUtils.substringBefore(" vs ", "\r");
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertEquals(" vs ", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      String string0 = StringUtils.substringBefore("org.apache.commons.lang3.RegExUtils", "ev&~n1#(`SI7@F");
      assertEquals("org.apache.commons.lang3.RegExUtils", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat('j', 8);
      assertFalse(string1.equals((Object)string0));
      assertEquals("jjjjjjjj", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isBlank("org.apache.commons.lang3.RegExUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      
      Locale locale1 = Locale.forLanguageTag("");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      
      String string0 = locale1.getDisplayLanguage();
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string1 = locale0.getDisplayVariant(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      
      Locale locale2 = Locale.forLanguageTag("oQ4[#m;6<%Fm8i5=|+");
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      
      String[] stringArray1 = Locale.getISOCountries();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(250, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = locale0.getDisplayLanguage();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Japanese", string2);
      assertNotNull(string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      
      int int0 = StringUtils.getFuzzyDistance("N)}k8Oz\")c7", "", locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertEquals(0, int0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      
      String string3 = StringUtils.replaceChars("Japanese", "", "N)}k8Oz\")c7");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("Japanese", string3);
      assertNotNull(string3);
      
      int int1 = (-4441);
      char char0 = '$';
      String string4 = StringUtils.difference("ZE$9R*t}swS?|P65->z", "The Array must not be null");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("The Array must not be null", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("x", 0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("x", string5);
      assertNotNull(string5);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("oQ4[#m;6<%Fm8i5=|+"));
      
      // Undeclared exception!
      try { 
        linkedList0.listIterator((-4441));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4441, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "ULK-fZyN3Zo";
      charSequenceArray0[1] = (CharSequence) "ULK-fZyN3Zo";
      charSequenceArray0[2] = (CharSequence) "ULK-fZyN3Zo";
      charSequenceArray0[3] = (CharSequence) "ULK-fZyN3Zo";
      charSequenceArray0[4] = (CharSequence) "ULK-fZyN3Zo";
      boolean boolean0 = StringUtils.endsWithAny("ULK-fZyN3Zo", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.replace("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("z*Ovtb8CpL-zI+vL@V", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "z*Ovtb8CpL-zI+vL@V";
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, "z*Ovtb8CpL-zI+vL@V");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceChars("", ")Pj=e+zGD#vU7qC", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      int int0 = (-1943);
      String string0 = StringUtils.join((short[]) null, '4', 2382, (-1943));
      assertNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      String string1 = "}UO";
      String string2 = StringUtils.join(objectArray0, "}UO");
      assertTrue(string2.equals((Object)string1));
      assertEquals("}UO", string2);
      assertNotNull(string2);
      assertEquals(2, objectArray0.length);
      
      String string3 = "XyiU?$X.<b]>1y";
      String string4 = StringUtils.strip("XyiU?$X.<b]>1y");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("XyiU?$X.<b]>1y", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.lastOrdinalIndexOf("XyiU?$X.<b]>1y", (CharSequence) null, (-1072));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.endsWith("XyiU?$X.<b]>1y", "XyiU?$X.<b]>1y");
      assertTrue(boolean0);
      
      String string5 = StringUtils.replaceChars((String) null, "N)}k8Oz\")c7qa=n'UCJt<:^uc8ZNfQ", "}UO");
      assertNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'v', 43, 2382);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 43
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, 'Y');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("g'1qo5]&G`V", 'g');
      assertFalse(string1.equals((Object)string0));
      assertEquals("g'1qo5]&G`Vg", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase("g'1qo5]&G`V", "g'1qo5]&G`V");
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("p;7n[-T/7{QO");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = "null/empty items";
      String[] stringArray0 = StringUtils.splitByCharacterType("p;7n[-T/7{QO");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      boolean boolean3 = StringUtils.isAllLowerCase("g'1qo5]&G`V");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'g';
      charArray0[4] = 'Y';
      charArray0[5] = 'g';
      charArray0[6] = 'Y';
      charArray0[8] = 'Y';
      String string3 = StringUtils.valueOf(charArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("YYg\u0000YgY\u0000Y", string3);
      assertNotNull(string3);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'Y', 'Y', 'g', '\u0000', 'Y', 'g', 'Y', '\u0000', 'Y'}, charArray0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "g'1qo5]&G`V", 33);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("null/empty items", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[0] = ':';
      charArray0[4] = ':';
      charArray0[5] = ':';
      charArray0[6] = '+';
      charArray0[7] = '+';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(":``\u0000::++", string0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {':', '`', '`', '\u0000', ':', ':', '+', '+'}, charArray0);
      
      String string1 = StringUtils.chomp("p{InCombiningDiacriticalMarks}+");
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) ":``\u0000::++", (CharSequence) null, 30);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[1] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[2] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[3] = null;
      String string2 = StringUtils.replaceEach("p{InCombiningDiacriticalMarks}+", stringArray0, stringArray0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      assertNotNull(string2);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = ".Jj'Zy\\bA4kg-`.t?y";
      stringArray0[0] = ".Jj'Zy\bA4kg-`.t?y";
      stringArray0[1] = "b>7`T3l]AD^=\f";
      stringArray0[2] = "b>7`T3l]AD^=\f";
      stringArray0[3] = "b>7`T3l]AD^=\f";
      stringArray0[4] = "b>7`T3l]AD^=\f";
      stringArray0[5] = "b>7`T3l]AD^=\f";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("b>7`T3l]AD^=\f", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{}", "~IJ1'+p~Zt^U@H*Z");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.replaceEachRepeatedly("The Array must not be null", stringArray0, stringArray0);
      assertEquals("The Array must not be null", string0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "{}", (CharSequence) "{}", 56);
      assertEquals(0, int0);
      
      String string1 = StringUtils.trim("YDwc~hhcM");
      assertFalse(string1.equals((Object)string0));
      assertEquals("YDwc~hhcM", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      String string0 = "b>7`T3l]AD^=\\f";
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".Jj'Zy\bA4kg-`.t?y";
      stringArray0[1] = "b>7`T3l]AD^=\f";
      stringArray0[3] = "b>7`T3l]AD^=\f";
      stringArray0[4] = "b>7`T3l]AD^=\f";
      stringArray0[5] = "b>7`T3l]AD^=\f";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("b>7`T3l]AD^=\f", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Class<Integer> class0 = Integer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer0).toString();
      serviceLoader0.forEach(consumer0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) classLoader1;
      objectArray0[1] = (Object) classLoader1;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) consumer0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) class0;
      String string1 = StringUtils.join(objectArray0, "1[mIBtOtN");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, objectArray0.length);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(5);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(5, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.limit());
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "e52{dcr-hH{I`Tp0>u", (CharSequence) charBuffer0);
      assertFalse(boolean0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(5, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.limit());
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore("\n", "\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((int[]) null, '9');
      assertNull(string2);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      String string3 = "";
      ByteBuffer byteBuffer0 = charset0.encode("");
      assertNotNull(byteBuffer0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)76;
      FloatBuffer floatBuffer0 = byteBuffer0.asFloatBuffer();
      assertNotNull(floatBuffer0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(floatBuffer0.isDirect());
      assertEquals("java.nio.ByteBufferAsFloatBufferB[pos=0 lim=0 cap=0]", floatBuffer0.toString());
      assertFalse(floatBuffer0.hasArray());
      assertEquals(0, floatBuffer0.capacity());
      assertEquals(0, floatBuffer0.limit());
      assertFalse(floatBuffer0.hasRemaining());
      assertEquals(0, floatBuffer0.position());
      assertFalse(floatBuffer0.isReadOnly());
      assertEquals(0, floatBuffer0.remaining());
      
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)106;
      ByteBuffer byteBuffer1 = ByteBuffer.wrap(byteArray0, 0, 0);
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      assertNotNull(byteBuffer1);
      assertEquals(9, byteArray0.length);
      assertNotSame(byteBuffer1, byteBuffer0);
      assertArrayEquals(new byte[] {(byte) (-4), (byte)76, (byte)122, (byte)0, (byte) (-92), (byte)13, (byte)80, (byte)0, (byte)106}, byteArray0);
      assertEquals(9, byteBuffer1.capacity());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=9]", byteBuffer1.toString());
      assertEquals(0, byteBuffer1.limit());
      assertTrue(byteBuffer1.hasArray());
      assertFalse(byteBuffer1.hasRemaining());
      assertEquals(0, byteBuffer1.position());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals(0, byteBuffer1.remaining());
      assertFalse(byteBuffer1.isDirect());
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "Kn)Pe%N|5/6rl", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        byteBuffer0.putShort(1366, (short)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripEnd("", "");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[0];
      String string3 = StringUtils.valueOf(charArray0);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        ByteBuffer.allocateDirect((-175));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative capacity: -175
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Arguments cannot both be null", (String) null);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Arguments cannot both be null");
      assertFalse(boolean0);
      
      String string0 = StringUtils.center("DQ=Vmrd", (-1279), '\'');
      assertEquals("DQ=Vmrd", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "DQ=Vmrd", 128);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1162;
      shortArray0[1] = (short)53;
      shortArray0[2] = (short)1162;
      String string0 = StringUtils.join(shortArray0, '7');
      assertEquals("116275371162", string0);
      assertNotNull(string0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)1162, (short)53, (short)1162}, shortArray0);
      
      String string1 = StringUtils.abbreviateMiddle(" in an array of ", "...", (short)1162);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" in an array of ", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "116275371162";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      String string2 = StringUtils.joinWith("t48|PI,fg", objectArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(3, objectArray0.length);
      
      String string3 = StringUtils.getDigits((String) null);
      assertNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) "t48|PI,fg", (CharSequence) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '7';
      charArray0[5] = '7';
      int int1 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'7', '7', '7', '7', '7', '7'}, charArray0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string4 = StringUtils.strip("qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>u", "qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>u");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("}U", 'Q');
      assertEquals("Q}UQ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      charArray0[3] = 'a';
      String string0 = StringUtils.strip("9re");
      assertEquals("9re", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("9re");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("9re");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.wrapIfMissing(";X!*!4[15\"tNPni33e2", '\u0000');
      assertFalse(string1.equals((Object)string0));
      assertEquals(";X!*!4[15\"tNPni33e2", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) ";X!*!4[15\"tNPni33e2";
      boolean boolean3 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      String string0 = StringUtils.trim("HURV4riOn3#xu5W;]o");
      assertEquals("HURV4riOn3#xu5W;]o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "HURV4riOn3#xu5W;]o", (CharSequence) "");
      assertEquals(18, int0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      String string3 = StringUtils.join(iterator0, 'E');
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = 'B';
      charArray0[2] = '*';
      charArray0[3] = 'E';
      charArray0[4] = 'E';
      charArray0[5] = '\\';
      charArray0[6] = 'L';
      String string4 = StringUtils.wrapIfMissing("HURV4riOn3#xu5W;]o", '\\');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("\\HURV4riOn3#xu5W;]o\\", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      String string0 = StringUtils.substringAfter("wwl`Uxpj0*j", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("1Y+YME(LO", "wwl`Uxpj0*j");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.leftPad("|~x<#SNQ.v", 0, "=");
      assertFalse(string1.equals((Object)string0));
      assertEquals("|~x<#SNQ.v", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("Threshold must not be negative");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(9, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      charArray0[1] = 'c';
      charArray0[2] = '8';
      charArray0[3] = '[';
      String string2 = StringUtils.valueOf(charArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("pc8[", string2);
      assertNotNull(string2);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'p', 'c', '8', '['}, charArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "wwl`Uxpj0*j");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("Threshold must not be negative", "|~x<#SNQ.v");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.join((short[]) null, 'd', (-154), (-798));
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      String string0 = "M#21T4mQ[?Bofw[/m3";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "M#21T4mQ[?Bofw[/m3";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "M#21T4mQ[?Bofw[/m3";
      objectArray0[3] = (Object) "M#21T4mQ[?Bofw[/m3";
      String string1 = "N)}k\\8Oz\")c7";
      String string2 = StringUtils.join(objectArray0, "N)}k8Oz\")c7", 2382, 123);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(4, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      char char0 = '&';
      String string3 = StringUtils.join(booleanArray0, '&');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("true", string3);
      assertNotNull(string3);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      int[] intArray0 = StringUtils.toCodePoints("true");
      assertNotNull(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {116, 114, 117, 101}, intArray0);
      
      String string4 = "org.apache.commons.lang3.ArrayUtils";
      try { 
        StringUtils.getBytes("", "org.apache.commons.lang3.ArrayUtils");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      float[] floatArray0 = new float[8];
      String string0 = StringUtils.join(floatArray0, 'x');
      assertEquals("0.0x0.0x0.0x0.0x0.0x0.0x0.0x0.0", string0);
      assertNotNull(string0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("_%VgQM]y", "comparator", (CharSequence[]) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("comparator_%VgQM]y", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("5XsVQ!gkNc`^'h", 'S');
      assertEquals("S5XsVQ!gkNc`^'hS", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat('%', 32);
      assertFalse(string1.equals((Object)string0));
      assertEquals("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string2 = StringUtils.prependIfMissing("ugHLteB =btzi{V", "ugHLteB =btzi{V", (CharSequence[]) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ugHLteB =btzi{V", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStartIgnoreCase((String) null, (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("M#21T4mQ[?Bofw[/m3");
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeStartIgnoreCase("h4Q7[s2r2S78oT^Aac", "M#21T4mQ[?Bofw[/m3");
      assertEquals("h4Q7[s2r2S78oT^Aac", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("", 0, '0');
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "org.apache.commons.lang3.ArrayUtils";
      String string2 = StringUtils.joinWith("org.apache.commons.lang3.ArrayUtils", objectArray0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.ArrayUtilsorg.apache.commons.lang3.ArrayUtils", string2);
      assertNotNull(string2);
      assertEquals(2, objectArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.ArrayUtils", "", 9);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.right((String) null, 0);
      assertNull(string3);
      
      String string4 = StringUtils.stripEnd("", "");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore("\n", "\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((int[]) null, '9');
      assertNull(string2);
      
      String string3 = StringUtils.substringBetween((String) null, "");
      assertNull(string3);
      
      String string4 = StringUtils.repeat('e', (-2947));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", 10);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)96;
      String string0 = StringUtils.stripEnd("}-\u0003yeT", "I,->[4WU]x^D'PTq'(");
      assertEquals("}-\u0003ye", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("Array element ", "lHA\",)QVNSQM>%w$O", "}-\u0003ye");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      String string0 = StringUtils.rightPad("C!v/", 10, "C!v/");
      assertEquals("C!v/C!v/C!", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("null/empty items", 10);
      assertFalse(string1.equals((Object)string0));
      assertEquals("mpty itemsnull/e", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "clone";
      charSequenceArray0[2] = (CharSequence) "clone";
      charSequenceArray0[3] = (CharSequence) "\n";
      String string1 = StringUtils.prependIfMissing("clone", "\n", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("clone", string1);
      assertNotNull(string1);
      assertEquals(4, charSequenceArray0.length);
      
      String string2 = StringUtils.substringBefore("\n", "\n");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      String string0 = StringUtils.rotate(", Length: ", (-254));
      assertEquals("ngth: , Le", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate(", Length: ", 64, 64);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("7dhtd3VFJb");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "G9ULK-fZyNJZn");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.join((Iterable<?>) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.uncapitalize("Object varargs must not be null");
      assertEquals("object varargs must not be null", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      String string0 = StringUtils.abbreviate("'2Zq=}`{", "CF=A{ FJ>a2H$Sc", (-2025), 160);
      assertEquals("'2Zq=}`{", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("'2Zq=}`{");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2025);
      doubleArray0[1] = (double) (-2025);
      doubleArray0[2] = (double) (-2025);
      doubleArray0[3] = (double) 160;
      double double0 = StringUtils.getJaroWinklerDistance("'2Zq=}`{", "CF=A{ FJ>a2H$Sc");
      assertEquals(0.46, double0, 0.01);
      
      String[] stringArray0 = StringUtils.substringsBetween("qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>u", "'2Zq=}`{", "]");
      assertNull(stringArray0);
      
      String string1 = StringUtils.LF;
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>u", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>u", "'2Zq=}`{", "'2Zq=}`{");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 6
         // '2Zq=}`{
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(6, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", charSequenceArray0[3]);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = 'r';
      charArray0[2] = 'M';
      charArray0[3] = ';';
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst(" in an array of ", "N)}k8Oz\")c7", "x01Dz~'");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 0
         // N)}k8Oz\")c7
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)41;
      String string0 = StringUtils.join(byteArray0, '@');
      assertNotNull(string0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)63, (byte)63, (byte)0, (byte)96, (byte)41}, byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = 'm';
      charArray0[2] = '@';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "63@63@0@96@41", charArray0);
      assertEquals(0, int0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'`', 'm', '@'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      
      Locale locale1 = Locale.forLanguageTag("");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      
      Locale locale2 = locale0.stripExtensions();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertNotSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja_JP", locale2.toString());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("JP", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("JPN", locale2.getISO3Country());
      
      String string0 = StringUtils.join((byte[]) null, '>');
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "gj$_";
      stringArray0[1] = "M0";
      stringArray0[2] = " in an array of ";
      stringArray0[3] = "*,!>KH 'A;1";
      stringArray0[4] = "Comparator should not be null.";
      stringArray0[5] = "(";
      stringArray0[6] = "";
      stringArray0[7] = "";
      String string0 = StringUtils.join((byte[]) null, '`');
      assertNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = 'm';
      charArray0[2] = '/';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'`', 'm', '/'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.trim(" ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(charSequenceArray0[0], charSequenceArray0[1]);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = '+';
      charArray0[2] = '`';
      String string2 = StringUtils.valueOf(charArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("v+`", string2);
      assertNotNull(string2);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'v', '+', '`'}, charArray0);
      
      String string3 = StringUtils.chomp(" ");
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[0], (CharSequence) null, 27);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(2, charSequenceArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      String string4 = StringUtils.replaceFirst((String) null, "Minimum abbreviation width is %d", "#4*d");
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      String string0 = StringUtils.truncate("", 65, 1248);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.chop("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", 0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string3 = StringUtils.removeStart("", "");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(""));
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList1.contains(""));
      
      Iterator<String> iterator0 = arrayList1.iterator();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(iterator0);
      assertNotSame(arrayList1, arrayList0);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList1.contains(""));
      
      boolean boolean2 = arrayList1.add("comparator");
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertNotSame(arrayList1, arrayList0);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertTrue(arrayList1.contains("comparator"));
      assertFalse(arrayList1.contains(""));
      
      String string4 = "Strings must not be null";
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, "");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 9;
      intArray0[1] = 75;
      intArray0[2] = 2;
      intArray0[3] = (-4198);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'M', (-4198), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4198
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("e52{dcr-hH{I`Tp0>u", 'L');
      assertEquals("e52{dcr-hH{I`Tp0>u", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1789569704);
      intArray0[1] = (int) 'L';
      intArray0[2] = (int) 'L';
      String string1 = StringUtils.join(intArray0, 'L', Integer.MAX_VALUE, (-1080));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1789569704), 76, 76}, intArray0);
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 256;
      intArray0[1] = 256;
      String string0 = StringUtils.join(intArray0, '1', 256, 256);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {256, 256}, intArray0);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("e52{dcr-hH{I`Tp0>u");
      assertEquals("e52{dcr-hH{I`Tp0>u", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("e52{dcr-hH{I`Tp0>u");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("B", "e52{dcr-hH{I`Tp0>u", 8);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "e52{dcr-hH{I`Tp0>u", "B");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.unwrap("B", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("B", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("", "e52{dcr-hH{I`Tp0>u");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.compare("B", "e52{dcr-hH{I`Tp0>u");
      assertEquals((-35), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "e52{dcr-hH{I`Tp0>u", 'B');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.removeStart("e52{dcr-hH{I`Tp0>u", "qa=n'UCJt<:^uc8ZNfQ");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("e52{dcr-hH{I`Tp0>u", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.substringAfterLast((String) null, "e52{dcr-hH{I`Tp0>u");
      assertNull(string3);
      
      String string4 = StringUtils.abbreviate((String) null, 52);
      assertNull(string4);
      
      String string5 = StringUtils.removeAll((String) null, "");
      assertNull(string5);
      
      String string6 = StringUtils.rightPad("', is neither of type Map.Entry nor an Array", 8, (String) null);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("', is neither of type Map.Entry nor an Array", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.joinWith("qa=n'UCJt<:^uc8ZNfQ", stringArray0);
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertEquals("B", string7);
      assertNotNull(string7);
      assertEquals(1, stringArray0.length);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "B", Integer.MIN_VALUE, 0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      String string8 = StringUtils.trimToEmpty("B");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertEquals("B", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.reverseDelimited("B", 'B');
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertEquals("", string9);
      assertNotNull(string9);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'B';
      intArray0[1] = (-35);
      intArray0[2] = 4543;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'B', (-35), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -35
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "p{InCombiningDiacriticalMarks}+", charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1701;
      intArray0[1] = 1701;
      intArray0[2] = (int) '<';
      intArray0[3] = (int) '<';
      intArray0[4] = (int) '<';
      intArray0[5] = 1701;
      intArray0[6] = 1701;
      intArray0[7] = Integer.MIN_VALUE;
      intArray0[8] = (-1076);
      String string0 = StringUtils.join(intArray0, 'g', 4659, 1701);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {1701, 1701, 60, 60, 60, 1701, 1701, Integer.MIN_VALUE, (-1076)}, intArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray0 = StringUtils.split("h", 'Y');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.stripAccents((String) null);
      assertNull(string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, 'Y');
      assertNull(stringArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'Y';
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      String string2 = StringUtils.join(floatArray0, 'Y');
      assertEquals("89.0Y-1.0Y-1.0", string2);
      assertNotNull(string2);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {89.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      String string3 = StringUtils.difference((String) null, (String) null);
      assertNull(string3);
      
      CharSequence[] charSequenceArray1 = new CharSequence[0];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      boolean boolean3 = StringUtils.isAnyEmpty(charSequenceArray1);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(boolean3);
      assertEquals(0, charSequenceArray1.length);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string2));
      
      ListIterator<String> listIterator0 = linkedList0.listIterator(0);
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(linkedList0.contains(string2));
      
      String string4 = StringUtils.join((Iterator<?>) listIterator0, 'Y');
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(linkedList0.contains(string4));
      
      String string5 = StringUtils.join((Iterator<?>) listIterator0, "89.0Y-1.0Y-1.0");
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(linkedList0.contains(string4));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3");
      assertEquals("M#21T4mQ[?Bofw[/m3", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "M#21T4mQ[?Bofw[/m3", (char[]) null);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "M#21T4mQ[?Bofw[/m3";
      objectArray0[1] = (Object) "M#21T4mQ[?Bofw[/m3";
      objectArray0[2] = (Object) "M#21T4mQ[?Bofw[/m3";
      objectArray0[3] = (Object) "M#21T4mQ[?Bofw[/m3";
      String string1 = StringUtils.join(objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("M#21T4mQ[?Bofw[/m3M#21T4mQ[?Bofw[/m3M#21T4mQ[?Bofw[/m3M#21T4mQ[?Bofw[/m3", string1);
      assertNotNull(string1);
      assertEquals(4, objectArray0.length);
      
      String string2 = StringUtils.strip("M#21T4mQ[?Bofw[/m3");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("M#21T4mQ[?Bofw[/m3", string2);
      assertNotNull(string2);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      int int0 = StringUtils.getFuzzyDistance("M#21T4mQ[?Bofw[/m3M#21T4mQ[?Bofw[/m3M#21T4mQ[?Bofw[/m3M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3M#21T4mQ[?Bofw[/m3M#21T4mQ[?Bofw[/m3M#21T4mQ[?Bofw[/m3", locale0);
      assertEquals(214, int0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string3 = StringUtils.difference("M#21T4mQ[?Bofw[/m3", "...");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("...", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, 'g');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      
      String string1 = locale0.getDisplayScript();
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(locale0, locale1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      float[] floatArray0 = null;
      char char0 = 'g';
      String string0 = StringUtils.join((float[]) null, 'g');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = "Sg_:$7@hjAg";
      try { 
        StringUtils.getBytes("Index: ", "Sg_:$7@hjAg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      
      String string0 = locale0.getDisplayScript();
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(locale0, locale1);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      int int0 = StringUtils.getFuzzyDistance("|]pr(zTv%2ZWCey", "|]pr(zTv%2ZWCey", locale1);
      assertEquals(43, int0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      
      String string1 = StringUtils.substringAfterLast("I>", (-1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.truncate("", 43);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("j}`t(>>-", "wVE`%[[{b,'l", 76);
      assertEquals("j}`t(>>-", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "wVE`%[[{b,'l", (CharSequence) "N");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      Locale locale1 = Locale.forLanguageTag("");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string0 = locale0.getDisplayVariant(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      
      Locale locale2 = Locale.forLanguageTag("oQ4[#m;6<%Fm8i5=|+");
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getVariant());
      
      String string1 = locale0.getDisplayLanguage();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Chinese", string1);
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      String string2 = locale0.getScript();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      int int0 = StringUtils.getFuzzyDistance("N)}k8Oz\")c7", "", locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertEquals(0, int0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      String string3 = StringUtils.trim("");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      char char0 = '$';
      String string4 = StringUtils.join((float[]) null, '$');
      assertNull(string4);
      
      String string5 = StringUtils.difference("ZE$9R*t}swS?|P65->z", "The Array must not be null");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("The Array must not be null", string5);
      assertNotNull(string5);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("oQ4[#m;6<%Fm8i5=|+"));
      
      // Undeclared exception!
      try { 
        linkedList0.listIterator((-4441));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4441, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Comparator should not be null.";
      stringArray0[1] = "";
      stringArray0[2] = "-";
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Comparator should not be null.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-1000));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("", "offset cannot be negative");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "offset cannot be negative");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compare("", "\r");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.removeStart((String) null, ", Length: ");
      assertNull(string2);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.substringAfterLast("", "");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat(", Length: ", "\r", (-1000));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeAll("jssh^$]#kBf.:v", "jssh^$]#kBf.:v");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("jssh^$]#kBf.:v", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.rightPad((String) null, 12, "");
      assertNull(string6);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "{VwJvp-P/)PZp";
      String string7 = StringUtils.substringBefore("offset cannot be negative", (String) null);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertEquals("offset cannot be negative", string7);
      assertNotNull(string7);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, (-2378), (-1000));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string8 = StringUtils.substringBefore((String) null, "jssh^$]#kBf.:v");
      assertNull(string8);
      
      String string9 = StringUtils.reverseDelimited("", 's');
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string3));
      assertEquals("", string9);
      assertNotNull(string9);
      
      int int3 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      
      String string10 = StringUtils.join(objectArray0, "mfq*d#7-l]jqa", 3017, 51);
      assertFalse(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string1));
      assertTrue(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertEquals("", string10);
      assertNotNull(string10);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("\n", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      String string0 = StringUtils.stripEnd("M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("", ", Lngth");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare((String) null, "~IJ1'+p~Zt^U@H*Z", false);
      assertEquals(1, int0);
      
      String string2 = StringUtils.substringBefore("", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{}", "~IJ1'+p~Zt^U@H*Z");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("\n", stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.repeat("~IJ1'+p~Zt^U@H*Z", 16);
      assertFalse(string1.equals((Object)string0));
      assertEquals("~IJ1'+p~Zt^U@H*Z~IJ1'+p~Zt^U@H*Z~IJ1'+p~Zt^U@H*Z~IJ1'+p~Zt^U@H*Z~IJ1'+p~Zt^U@H*Z~IJ1'+p~Zt^U@H*Z~IJ1'+p~Zt^U@H*Z~IJ1'+p~Zt^U@H*Z~IJ1'+p~Zt^U@H*Z~IJ1'+p~Zt^U@H*Z~IJ1'+p~Zt^U@H*Z~IJ1'+p~Zt^U@H*Z~IJ1'+p~Zt^U@H*Z~IJ1'+p~Zt^U@H*Z~IJ1'+p~Zt^U@H*Z~IJ1'+p~Zt^U@H*Z", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, "Minimum abbreviation width is %dev&Un1#hSI7@F");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("{}", string2);
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, "_2#");
      assertNull(stringArray1);
      
      String string3 = StringUtils.rightPad((String) null, 16, "~IJ1'+p~Zt^U@H*Z");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate("7'8-[\"Aa/9F*1 FK#", " ", 3);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7' ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.reverseDelimited("X^", '#');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("X^", string2);
      assertNotNull(string2);
      
      int[] intArray0 = new int[0];
      String string3 = StringUtils.join(intArray0, '#', 3, (-227));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 's');
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfterLast("_", "org.apache.commons.lang3.StringUtils");
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("qa=n'UCJt<:^uc8ZNfQ", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-1000));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-1000));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.unwrap("offset cannot be negative", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("offset cannot be negative", "offset cannot be negative");
      assertTrue(boolean0);
      
      int int1 = StringUtils.compare("", "\r");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.countMatches((CharSequence) "", 'B');
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string2 = StringUtils.removeStart((String) null, ", Length: ");
      assertNull(string2);
      
      int int3 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      
      String string3 = StringUtils.substringAfterLast("", "");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("jssh^$]#kBf.:v", 12);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("jssh^$]#k...", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeAll("jssh^$]#kBf.:v", "jssh^$]#kBf.:v");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("jssh^$]#kBf.:v", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.rightPad((String) null, 12, "");
      assertNull(string6);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "{aVwJvp-Pz)PZp";
      String string7 = StringUtils.joinWith("{aVwJvp-Pz)PZp", objectArray0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertEquals("{aVwJvp-Pz)PZp", string7);
      assertNotNull(string7);
      assertEquals(1, objectArray0.length);
      
      int int4 = StringUtils.lastIndexOf((CharSequence) null, (-2378), (-1000));
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertEquals((-1), int4);
      
      String string8 = StringUtils.substringBefore((String) null, "jssh^$]#kBf.:v");
      assertNull(string8);
      
      String string9 = StringUtils.reverseDelimited("qa=n'UCJt<:^uc8ZNfQ", 's');
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertEquals("qa=n'UCJt<:^uc8ZNfQ", string9);
      assertNotNull(string9);
      
      int int5 = StringUtils.indexOf((CharSequence) "jssh^$]#k...", (CharSequence) "");
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertTrue(int5 == int3);
      assertFalse(int5 == int1);
      assertTrue(int5 == int2);
      assertEquals(0, int5);
      
      String string10 = StringUtils.join(objectArray0, "mfq*d#7-l]jqa", 3017, 51);
      assertTrue(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertEquals("", string10);
      assertNotNull(string10);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)42;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '_', (int) (short)42, 98);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 42
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      String string0 = "ed:gh$";
      String string1 = StringUtils.rightPad("ed:gh$", 14);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ed:gh$       ", string1);
      assertNotNull(string1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-12);
      shortArray0[1] = (short)42;
      shortArray0[2] = (short)11;
      char char0 = '_';
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '_', (int) (short)42, 98);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 42
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      String string0 = StringUtils.substring("", (-180));
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = StringUtils.stripStart("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("x,|m[n^]b");
      assertEquals("x,|m[n^]b", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "x,|m[n^]b", (CharSequence) "x,|m[n^]b", 13);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "x,|m[n^]b", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.replaceOnce("x,|m[n^]b", "x,|m[n^]b", "x,|m[n^]b");
      assertTrue(string1.equals((Object)string0));
      assertEquals("x,|m[n^]b", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("x,|m[n^]b", "The String must not be empty", "The String must not be empty");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("x,|m[n^]b", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'^'}, charArray0);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 1236, 108);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.leftPad("", (int) '^', "2A+");
      assertFalse(string1.equals((Object)string0));
      assertEquals("2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2A+2");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.wrapIfMissing((String) null, '^');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("e52{dcr-hH{I`Tp0>u");
      assertEquals("e52{dcr-hH{I`Tp0>u", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("e52{dcr-hH{I`Tp0>u");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("B", "e52{dcr-hH{I`Tp0>u", 8);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "e52{dcr-hH{I`Tp0>u", "B");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.unwrap("B", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("B", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("", "e52{dcr-hH{I`Tp0>u");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.compare("B", "e52{dcr-hH{I`Tp0>u");
      assertEquals((-35), int0);
      
      String string2 = StringUtils.trim("z?J:2jOqRdq5Fn");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("z?J:2jOqRdq5Fn", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("", "4&");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "e52{dcr-hH{I`Tp0>u");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("e52{dcr-hH{I`Tp0>u"));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("e52{dcr-hH{I`Tp0>u"));
      
      String string5 = StringUtils.join(iterator0, 'B');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("e52{dcr-hH{I`Tp0>u"));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'E';
      charArray0[3] = '\\';
      charArray0[4] = '*';
      charArray0[5] = '\\';
      charArray0[6] = 'E';
      charArray0[7] = '*';
      charArray0[8] = 'E';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'B', 'B', 'E', '\\', '*', '\\', 'E', '*', 'E'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      charArray0[3] = 'a';
      String string0 = StringUtils.strip("9re");
      assertEquals("9re", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("9re");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("9re");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "9re", (CharSequence) "9re");
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "$$py26!<O");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // $$py26!<O
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("z*Ovtb8CpL-zI+vL@V");
      assertFalse(string1.equals((Object)string0));
      assertEquals("z*Ovtb8CpL-zI+vL@V", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "z*Ovtb8CpL-zI+vL@V", 2744);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "z*Ovtb8CpL-zI+vL@V", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.replaceOnce("ZDxB=4agb~,", "Exception cloning Cloneable type ", "ev&9n1#hSI7@F");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ZDxB=4agb~,", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("i.A{OGI_=?zCM ", (-1116));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      String string0 = StringUtils.center("eA", (-32768), 'A');
      assertEquals("eA", string0);
      assertNotNull(string0);
      
      String string1 = "0J>5m_DK62zo";
      // Undeclared exception!
      try { 
        Charset.forName("eA");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // eA
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      String string0 = StringUtils.join(longArray0, 'G');
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "0", (CharSequence) "0", 1742);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("0");
      assertTrue(boolean0);
      
      String string1 = StringUtils.capitalize("\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isMixedCase("\n");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.wrap("0", 'G');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("G0G", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      String string0 = StringUtils.truncate("", 65, 1248);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", 0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      charArray0[1] = '+';
      charArray0[2] = '`';
      String string3 = StringUtils.chomp((String) null);
      assertNull(string3);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) null, 65);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      String string2 = StringUtils.valueOf(charArray0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string3 = StringUtils.chomp("L&{)s^_)V");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("L&{)s^_)V", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 1524);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(", Length: 0", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay("", "", 1248, 1248);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 3);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Locale must not be null", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 1925);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = ';';
      charArray0[2] = 'v';
      charArray0[3] = '5';
      charArray0[4] = '\\';
      charArray0[5] = 'h';
      charArray0[6] = '/';
      charArray0[7] = 'u';
      charArray0[8] = 'a';
      String string1 = StringUtils.join(charArray0, 'a', 0, 0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'c', ';', 'v', '5', '\\', 'h', '/', 'u', 'a'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'i');
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.wrap((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.repeat((String) null, "~{.QWxJR~[O7)^n7s;", (-1632));
      assertNull(string2);
      
      String string3 = StringUtils.join((float[]) null, 's', (-1632), (-2013265917));
      assertNull(string3);
      
      String string4 = StringUtils.replace((String) null, "P@,$o&idDT-", (String) null, (-1632));
      assertNull(string4);
      
      String string5 = StringUtils.substringAfterLast("g(.D}E_6yNLEnY26'rF'.", (String) null);
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      String string0 = StringUtils.join(longArray0, '}');
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("0");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBetween("a}<p~1cW*L", "0");
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (-787), 8);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.truncate("RWk8>[X", 1258);
      assertFalse(string2.equals((Object)string0));
      assertEquals("RWk8>[X", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("RWk8>[X", "p{InCombiningDiacriticalMarks}+");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("RWk8>[X", string3);
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "RWk8>[X";
      objectArray0[1] = (Object) "RWk8>[X";
      objectArray0[2] = (Object) 0L;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      String string4 = StringUtils.join(objectArray0, "IOQbP)c$lQ8O!tC'^");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(4, objectArray0.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.commons.lang3.CharSequenceUtils";
      stringArray0[1] = "IOQbP)c$lQ8O!tC'^";
      stringArray0[2] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[3] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[4] = null;
      stringArray0[5] = "p{InCombiningDiacriticalMarks}+";
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      String string0 = StringUtils.stripToNull("#");
      assertEquals("#", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "#", (CharSequence) "#", 1221);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1221;
      intArray0[1] = 1221;
      intArray0[2] = 0;
      String string1 = StringUtils.join(intArray0, 't');
      assertFalse(string1.equals((Object)string0));
      assertEquals("1221t1221t0", string1);
      assertNotNull(string1);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1221, 1221, 0}, intArray0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "#", (CharSequence) "1221t1221t0");
      assertFalse(int1 == int0);
      assertEquals(11, int1);
      
      double double0 = StringUtils.getJaroWinklerDistance("#", "#");
      assertEquals(1.0, double0, 0.01);
      
      String string2 = StringUtils.center("null/empty items", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("null/empty items", string2);
      assertNotNull(string2);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 't';
      floatArray0[2] = (float) 1221;
      floatArray0[3] = (-758.972F);
      floatArray0[4] = (float) 1221;
      floatArray0[5] = (float) 0;
      String string3 = StringUtils.join(floatArray0, '9');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("0.09116.091221.09-758.97291221.090.0", string3);
      assertNotNull(string3);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 116.0F, 1221.0F, (-758.972F), 1221.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = StringUtils.isEmpty("#");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace("#");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.defaultString("#", (String) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("#", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("JQsH,^m");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string5 = StringUtils.replacePattern("0.09116.091221.09-758.97291221.090.0", "0.09116.091221.09-758.97291221.090.0", "X>M%MV!gi:[c:");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("X>M%MV!gi:[c:", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore("\n", "\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char char0 = '9';
      String string2 = StringUtils.join((int[]) null, '9');
      assertNull(string2);
      
      String string3 = "Kn)Pe%N|5/6rl";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      ByteBuffer byteBuffer0 = charset0.encode("");
      assertNotNull(byteBuffer0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)106;
      ByteBuffer byteBuffer1 = ByteBuffer.wrap(byteArray0, 0, 0);
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      assertNotNull(byteBuffer1);
      assertEquals(9, byteArray0.length);
      assertNotSame(byteBuffer1, byteBuffer0);
      assertArrayEquals(new byte[] {(byte) (-4), (byte)76, (byte)122, (byte)0, (byte) (-92), (byte)13, (byte)80, (byte)0, (byte)106}, byteArray0);
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=9]", byteBuffer1.toString());
      assertFalse(byteBuffer1.isReadOnly());
      assertTrue(byteBuffer1.hasArray());
      assertFalse(byteBuffer1.hasRemaining());
      assertEquals(0, byteBuffer1.limit());
      assertEquals(0, byteBuffer1.position());
      assertEquals(0, byteBuffer1.remaining());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertFalse(byteBuffer1.isDirect());
      assertEquals(9, byteBuffer1.capacity());
      
      // Undeclared exception!
      try { 
        byteBuffer0.putShort(1366, (short)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.leftPad("", (-1000));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-1000));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceChars("offset cannot be negative", "maxWith cannot be negative", "frY))T");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ffsTrTrT)", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ffsTrTrT)";
      stringArray0[1] = "";
      stringArray0[3] = "maxWith cannot be negative";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.replaceAll("frY))T", stringArray0[2], "");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("frY))T", string3);
      assertNotNull(string3);
      assertEquals(4, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      String string4 = StringUtils.toRootUpperCase("frY))T");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("FRY))T", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "FRY))T", "*;QH");
      assertTrue(boolean0);
      
      String string5 = StringUtils.difference("", "");
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string6 = StringUtils.stripToNull("frY))T");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertEquals("frY))T", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.rotate("", 99);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.right("", 0);
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertEquals("", string8);
      assertNotNull(string8);
      
      boolean boolean2 = StringUtils.isAlphanumeric("maxWith cannot be negative");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string9 = StringUtils.substringBetween("frY))T", "");
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string7));
      assertEquals("", string9);
      assertNotNull(string9);
      
      int int1 = StringUtils.indexOf((CharSequence) "", 1258, 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("RWk8>[X", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.CR;
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((int[]) null, '9');
      assertNull(string2);
      
      String string3 = StringUtils.substringBetween((String) null, "\r");
      assertNull(string3);
      
      String string4 = StringUtils.capitalize("}~:H&o9rNO");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("}~:H&o9rNO", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      String string0 = StringUtils.center("MP ~P#20X)gv(66I|(", (-2840));
      assertEquals("MP ~P#20X)gv(66I|(", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad((String) null, 0);
      assertNull(string1);
      
      String string2 = StringUtils.substringAfterLast("^.TMH1|ng'", 0);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.strip("");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("MP ~P#20X)gv(66I|(");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains((-2840)));
      
      String string4 = StringUtils.join((List<?>) vector0, "jP^", 0, (-166));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains((-166)));
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.wrapIfMissing("g'1qo5]&G`V", 'g');
      assertEquals("g'1qo5]&G`Vg", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("g'1qo5]&G`V", "g'1qo5]&G`V");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("p;7n[-T/7{QO");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("p;7n[-T/7{QO");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      String[] stringArray1 = Locale.getISOLanguages();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(188, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.removeEnd("U", "g'1qo5]&G`V");
      assertFalse(string1.equals((Object)string0));
      assertEquals("U", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("1r)uTX;VsRLtsE");
      assertEquals("1r)uTX;VsRLtsE", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("1r)uTX;VsRLtsE");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("*]MN+n^;.", "BP9bLMt2=/jXeX$3", 2173);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("1r)uTX;VsRLtsE", "1r)uTX;VsRLtsE", false);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("1r)uTX;VsRLtsE");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphaSpace("BP9bLMt2=/jXeX$3");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-969));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-969));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.unwrap("offset cannot be negative", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("offset cannot be negative", "offset cannot be negative");
      assertTrue(boolean0);
      
      int int1 = StringUtils.compare("offset cannot be negative", "\r");
      assertFalse(int1 == int0);
      assertEquals(98, int1);
      
      String string2 = StringUtils.reverseDelimited("", 'B');
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "offset cannot be negative";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "offset cannot be negative", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(8, charSequenceArray0.length);
      
      String string3 = StringUtils.getDigits("");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isWhitespace("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.substringAfterLast("", (-3526));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      charArray0[3] = 'a';
      String string0 = StringUtils.join((int[]) null, '0', (-2980), (-2980));
      assertNull(string0);
      
      String string1 = StringUtils.rightPad((String) null, 1260, '-');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase(charSequenceArray0[1]);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[1]);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "z*Ovtb8CpL-zI+vL@V", (CharSequence) null, 1000);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "z*Ovtb8CpL-zI+vL@V", (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("PGBy~", "`PuS\"%^;y,~=x", (-2267));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      CharSequence[] charSequenceArray1 = new CharSequence[1];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "z*Ovtb8CpL-zI+vL@V";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray1.length);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      
      String string1 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, 'c');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      String string0 = StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", 50, 1701);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = 'J';
      charArray0[2] = 'A';
      charArray0[3] = '0';
      charArray0[4] = '-';
      charArray0[5] = '.';
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("aJA0-.", string1);
      assertNotNull(string1);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'a', 'J', 'A', '0', '-', '.'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      String string0 = StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", 50, 1701);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[6];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "p{InCombiningDiacriticalMarks}+", charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("H`iJh2RP;cj1}(", "p{InCombiningDiacriticalMarks}+", "H`iJh2RP;cj1}(");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 0
         // p{InCombiningDiacriticalMarks}+
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", 2484);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.substringAfterLast("D;40(9ugHLteB =btzi{V", "C;3[YX'>0bmZ_");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars((String) null, 'R', '\"');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.lowerCase("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      
      Iterator<Integer> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      
      String string0 = StringUtils.join(iterator0, "SAV@&%ie");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfterLast("SAV@&%ie", ".>EF5e)~! Jf");
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) iterator0;
      objectArray0[1] = (Object) serviceLoader0;
      objectArray0[2] = (Object) "SAV@&%ie";
      objectArray0[3] = (Object) "SAV@&%ie";
      Object object0 = new Object();
      assertNotNull(object0);
      
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      
      objectArray0[4] = object0;
      String string2 = StringUtils.join(objectArray0, "SAV@&%ie");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(5, objectArray0.length);
      
      int int0 = StringUtils.length("SAV@&%ie");
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      String string0 = StringUtils.rightPad(" is not in the range '0' - '9'", 1531, '8');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      String string0 = StringUtils.rightPad("(Zeg}  (wwp4/kFkc#", (int) (short) (-12));
      assertEquals("(Zeg}  (wwp4/kFkc#", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      String string0 = StringUtils.chomp("org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("org.apache.commons.lang3.StringUtils", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.substringAfterLast("mL!", "]RgkAx");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("QYjei??s8lnMM-[~T", "QYjei??s8lnMM-[~T", "ek^F^HM+s");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 16
         // QYjei??s8lnMM-[~T
         //                 ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = 'C';
      charArray0[3] = 'a';
      String string0 = StringUtils.abbreviate((String) null, (String) null, 2722);
      assertNull(string0);
      
      int int0 = StringUtils.compare("p{InCombiningDiacriticalMarks}+", (String) null, false);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.truncate("e8", 2722);
      assertEquals("e8", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("org.apache.commons.lang3.StringUtils", (-1), "e8");
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("#S%AH%[p.", "#S%AH%[p.", (String) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-1000));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-1000));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceChars("offset cannot be negative", "maxWith cannot be negative", "frY))T");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ffsTrTrT)", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("ffsTrTrT)", "Array element ");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("ffsTrTrT)", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "Array element ", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.leftPad("", (-1000));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-1000));
      assertEquals((-1), int0);
      
      String string2 = "maxWith cannot be negative";
      String string3 = StringUtils.replaceChars("offset cannot be negative", "maxWith cannot be negative", "frY))T");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("ffsTrTrT)", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ffsTrTrT)";
      stringArray0[1] = "";
      stringArray0[2] = "frY))T";
      stringArray0[3] = "maxWith cannot be negative";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("frY))T", "frY))T", "");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 2
         // frY))T
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "D;40(9";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "D;40(9");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string0 = StringUtils.uncapitalize("D;40(9");
      assertEquals("d;40(9", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'i');
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "}U", (CharSequence) "}U");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      String string0 = StringUtils.removeFirst((String) null, "");
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      short[] shortArray0 = new short[1];
      String string0 = StringUtils.join(shortArray0, 'M');
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      String string1 = StringUtils.rightPad("T(EQK.L*V94", 8, "0");
      assertFalse(string1.equals((Object)string0));
      assertEquals("T(EQK.L*V94", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'p', (-2383), (-2383));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string0 = StringUtils.removeStart("4N", "pEM>*@xC-ict|-S");
      assertEquals("4N", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("Exception cloning Cloneable type ", 2559, (String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("'m7yBxlc@#s&Wzvf3fS", "Exception cloning Cloneable type ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("'m7yBxlc@#s&Wzvf3fS", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEnd("k\"", "Array element ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("k\"", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      String string0 = StringUtils.substring("|]pr(zTv%2ZWCey", 29, 29);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.defaultIfBlank("Minimum abbreviation width is %d", "|]pr(zTv%2ZWCey");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.mid("Minimum abbreviation width is %d", 5, (-7));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverse((String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isNumeric("|]pr(zTv%2ZWCey");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.right("Minimum abbreviation width is %d", 79);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.split("The type must not be null", 'k');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string5 = StringUtils.trimToEmpty((String) null);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.uncapitalize("Minimum abbreviation width is %d");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("minimum abbreviation width is %d", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.defaultString((String) null, "'S|f");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertEquals("'S|f", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      String string0 = StringUtils.defaultString("ey+6w", "jkCb7$Z");
      assertEquals("ey+6w", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("org.apache.commons.lang3.LocaleUtils", "", false);
      assertEquals(36, int0);
      
      String string1 = StringUtils.substringBefore("i(DKwm1V\"V(@N", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string0 = StringUtils.removeStart("'2Zq=}`{", (String) null);
      assertEquals("'2Zq=}`{", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = '`';
      String string0 = "//f;<rQR3?d$BB";
      String string1 = StringUtils.removeStart("}>~+{-^mGpgh:&Wp", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("}>~+{-^mGpgh:&Wp", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("}>~+{-^mGpgh:&Wp");
      assertFalse(boolean0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(string0));
      
      Iterator<String> iterator0 = arrayList0.iterator();
      assertNotNull(iterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(string0));
      
      boolean boolean1 = arrayList0.add((String) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string0));
      
      String string2 = "gEm17G";
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, "gEm17G");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string0 = StringUtils.substringAfterLast((String) null, "12z93Z$NjA");
      assertNull(string0);
      
      String string1 = StringUtils.rightPad("Exception cloning Cloneable type ", (-6238), 'n');
      assertEquals("Exception cloning Cloneable type ", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "M#21T4mQ[?Bofw[/m3";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      CharSequence[] charSequenceArray0 = new CharSequence[20];
      charSequenceArray0[4] = (CharSequence) "{gVwGfu";
      String string0 = StringUtils.prependIfMissing("{gVwGfu", "M#21T4mQ[?Bofw[/m3", charSequenceArray0);
      assertEquals("{gVwGfu", string0);
      assertNotNull(string0);
      assertEquals(20, charSequenceArray0.length);
      
      String string1 = StringUtils.repeat('U', (-1751));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringAfterLast("4<~#!&_qt+&Plcf@", 17);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.mid("{gVwGfu", 11, 17);
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.deleteWhitespace("Supplied value must be a valid byte literal between -128 and 127: [");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Suppliedvaluemustbeavalidbyteliteralbetween-128and127:[", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "HURV4riOn3#xu5W;]o", (char[]) null);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) "HURV4riOn3#xu5W;]o";
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("ZC/");
      assertEquals("ZC/", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("ZC/");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      String string0 = StringUtils.rightPad("T18Re$e\"U@7", 66, "T18Re$e\"U@7");
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      String string1 = StringUtils.center("hdO0]1yq#", 1279, "hdO0]1yq#");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("fOiUfU~P~", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("fOiUfU~P~", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      String string0 = StringUtils.trim("HURV4riOn3#xu5W;]o");
      assertEquals("HURV4riOn3#xu5W;]o", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "HURV4riOn3#xu5W;]o", (CharSequence) "HURV4riOn3#xu5W;]o");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.trim("-");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "HURV4riOn3#xu5W;]o";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.removeStart("-", "HURV4riOn3#xu5W;]o");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("-", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumericSpace(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int2 = StringUtils.indexOf((CharSequence) "-", charSequenceArray0[0], (-1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(1, charSequenceArray0.length);
      
      String string3 = StringUtils.chomp("HURV4riOn3#xu5W;]o");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("HURV4riOn3#xu5W;]o", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "D;40(9";
      String string0 = StringUtils.reverseDelimited("D;40(9", 'k');
      assertEquals("D;40(9", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "D;40(9", (CharSequence) "D;40(9");
      assertEquals(0, int0);
      
      String string1 = StringUtils.join(objectArray0, "D;40(9", 1075, 656);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare((String) null, "z*Ovtb8CpL-zI+vL@V");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((byte[]) null, 'D', (-1), (-1587));
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("B", "e52{dcr-hH{I`Tp0>u", 16);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.unwrap("B", "");
      assertEquals("B", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast((String) null, "e52{dcr-hH{I`Tp0>u");
      assertNull(string1);
      
      String string2 = StringUtils.stripToNull((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.removeAll((String) null, "qa=n'UCJt<:^uc8ZNfQ");
      assertNull(string3);
      
      String string4 = StringUtils.rightPad("Cannot clone Cloneable type ", 16, (String) null);
      assertFalse(string4.equals((Object)string0));
      assertEquals("Cannot clone Cloneable type ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.joinWith("qa=n'UCJt<:^uc8ZNfQ", stringArray0);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("B", string5);
      assertNotNull(string5);
      assertEquals(1, stringArray0.length);
      
      String string6 = StringUtils.trimToEmpty("B");
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertEquals("B", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.reverseDelimited("B", 'B');
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.left(string0, 19);
      assertEquals("\\u", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) string1, (CharSequence) string1);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      stringArray0[1] = string0;
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("\\u", string2);
      assertNotNull(string2);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (long) 64;
      String string0 = StringUtils.defaultIfBlank(" ", ";Qju~|B884.");
      assertEquals(";Qju~|B884.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits(", Length: ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.mid(";Qju~|B884.", 845, 4);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("U3MtO");
      assertEquals("U3MtO", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "U3MtO", "U3MtO");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "U3MtO";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "U3MtO", (CharSequence) "U3MtO");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "gj$_";
      stringArray0[1] = "M0";
      stringArray0[2] = " in an array of ";
      stringArray0[3] = "*,!>KH 'A;1";
      stringArray0[4] = "Comparator should not be null.";
      stringArray0[5] = "(";
      stringArray0[6] = "";
      stringArray0[7] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("gj$_", string0);
      assertNotNull(string0);
      assertEquals(8, stringArray0.length);
      
      String string1 = StringUtils.unwrap("2ja4G", 'i');
      assertFalse(string1.equals((Object)string0));
      assertEquals("2ja4G", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissing("@yf^Ld&Aq6DK) \"+2", (CharSequence) null, stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("@yf^Ld&Aq6DK) \"+2", string2);
      assertNotNull(string2);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      Locale locale1 = Locale.ROOT;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      
      String string0 = locale1.getDisplayName(locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(250, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3");
      assertEquals("M#21T4mQ[?Bofw[/m3", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "M#21T4mQ[?Bofw[/m3", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrap("M#21T4mQ[?Bofw[/m3", ", Length: ");
      assertFalse(string1.equals((Object)string0));
      assertEquals(", Length: M#21T4mQ[?Bofw[/m3, Length: ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "~IJ1'+p~Zt^U@H*Z", false);
      assertEquals(1, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) ", Length: ";
      charSequenceArray0[1] = (CharSequence) "~IJ1'+p~Zt^U@H*Z";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) ", Length: ";
      charSequenceArray0[4] = (CharSequence) ", Length: ";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals(", Length: ", charSequence0);
      assertNotNull(charSequence0);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllUpperCase(", Length: ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      
      String string0 = locale1.getDisplayLanguage(locale0);
      assertEquals("fran\u00E7ais", string0);
      assertNotNull(string0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "p'pb<", true);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("{}");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("~IJ1'+p~Zt^U@H*Z");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale1 = Locale.ITALY;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("it", locale1.getLanguage());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it_IT", locale1.toString());
      assertEquals("IT", locale1.getCountry());
      
      int int0 = StringUtils.compareIgnoreCase("x\u0000/zq2<#+*IH~C%gW?", "r?3Cz)z", false);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("N", '`');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.remove("wVE`%[[{b,'l", '`');
      assertEquals("wVE%[[{b,'l", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("j}`t(>>-", "wVE`%[[{b,'l", 76);
      assertFalse(string1.equals((Object)string0));
      assertEquals("j}`t(>>-", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "wVE`%[[{b,'l", (CharSequence) "N");
      assertEquals(0, int0);
      
      String string2 = StringUtils.join((Object[]) null, "wVE%[[{b,'l", 0, 76);
      assertNull(string2);
      
      int int1 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("wVE%[[{b,'l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("The character ");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      String string0 = StringUtils.replaceIgnoreCase("W.LN~B", "6nFZJ?Pdc,~", (String) null, 415);
      assertEquals("W.LN~B", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWithAny("The character ", stringArray0);
      assertTrue(boolean0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean1 = StringUtils.equalsAny("6nFZJ?Pdc,~", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.replaceOnceIgnoreCase("iNqHQ69", "iNqHQ69", (String) null);
      assertEquals("iNqHQ69", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnce("iNqHQ69", "C>I!M_lQ eX7>\"+)", (String) null);
      assertTrue(string2.equals((Object)string1));
      assertEquals("iNqHQ69", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) null, "C>I!M_lQ eX7>\"+)", (-750), (-750));
      assertNull(string3);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "C>I!M_lQ eX7>\"+)", false);
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("N", '`');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.remove((String) null, '`');
      assertNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("j}`t(>>-", "wVE`%[[{b,'l", 76);
      assertEquals("j}`t(>>-", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase("zzNkR)W0zODCFw{", (String) null, true);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "N", (CharSequence) "wVE`%[[{b,'l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      String string0 = "We*ky\"al";
      // Undeclared exception!
      try { 
        StringUtils.truncate("We*ky\"al", (-13), (-13));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "D;40(9";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)2;
      String string0 = StringUtils.join(byteArray0, 'O', (int) (byte)2, (int) (byte)2);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '<');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      String string1 = StringUtils.removeEnd("g(.D}E_6yNLEnY2", "6'rF'.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("g(.D}E_6yNLEnY2", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("K:s&Rgz7lP", (-1));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("The String must not be empty", (-689));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      String string0 = StringUtils.substringAfter("9ouDM{s>%I&C", (-697));
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)78;
      String string1 = StringUtils.join(byteArray0, 'x');
      assertFalse(string1.equals((Object)string0));
      assertEquals("78", string1);
      assertNotNull(string1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)78}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = (-1522);
      String string0 = StringUtils.join(byteArray0, 'w', (-1522), (-1522));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int1 = 2;
      // Undeclared exception!
      try { 
        StringUtils.truncate("", 2, (-1522));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      int int0 = StringUtils.indexOfAny((CharSequence) "z*Ovtb8CpL-zI+vL@V", charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'m'}, charArray0);
      
      String string1 = StringUtils.chomp("z*Ovtb8CpL-zI+vL@V");
      assertFalse(string1.equals((Object)string0));
      assertEquals("z*Ovtb8CpL-zI+vL@V", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "z*Ovtb8CpL-zI+vL@V", charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'m'}, charArray0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("z*Ovtb8CpL-zI+vL@V");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.capitalize("z*Ovtb8CpL-zI+vL@V");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Z*Ovtb8CpL-zI+vL@V", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = 'S';
      charArray0[2] = 'r';
      charArray0[3] = 'W';
      charArray0[4] = 'c';
      charArray0[5] = 'z';
      charArray0[6] = 'd';
      String string0 = StringUtils.join(charArray0, 'z', 802, 802);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'^', 'S', 'r', 'W', 'c', 'z', 'd'}, charArray0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'^', 'S', 'r', 'W', 'c', 'z', 'd'}, charArray0);
      
      String string1 = StringUtils.appendIfMissing("", "", stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.capitalize("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase("");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("g=7S/Cg~+|Vax{+@", (String) null, (-1503));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.substringBetween("z?J:2jOqRdq5Fn", (String) null);
      assertNull(string4);
      
      boolean boolean0 = StringUtils.startsWith("", "z?J:2jOqRdq5Fn");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.abbreviateMiddle("Locale must not be nullcomparator", "dRt!lt", 23);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Locale mudRt!ltmparator", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWithAny("Locale must not be nullcomparator", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.rightPad(", Length:Locle must not be null(c, Length:Locle must not be null(c(c", (-648), "|D\"3*rh??>");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(", Length:Locle must not be null(c, Length:Locle must not be null(c(c", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("EiM,P)/v$poV52", "h");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("EiM,P)/v$poV52", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-969));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-969));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.abbreviateMiddle("offset cannot be negative", "Strings must not be nullN)}k8Oz\")c7", (-969));
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      String string2 = "zzNkR)W0zODCFw{";
      int int1 = StringUtils.compareIgnoreCase("offset cannot be negative", "N)}k8Oz\")c7", true);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = '^';
      charArray0[2] = '3';
      charArray0[3] = '';
      charArray0[4] = '^';
      charArray0[5] = '@';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-969), (-969));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Comparator should not be null.";
      stringArray0[1] = "";
      stringArray0[2] = "-";
      stringArray0[3] = "-";
      String string1 = StringUtils.joinWith((String) null, charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.getDigits("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[5];
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = 'l';
      charArray0[4] = '<';
      int int1 = StringUtils.indexOfAny((CharSequence) "-", charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '[', '[', 'l', '<'}, charArray0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string3 = StringUtils.strip("-", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("-", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfAny(charSequenceArray0[1], "XyJM_.cXW2WVwpd4");
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(2, charSequenceArray0.length);
      
      String string4 = StringUtils.abbreviate("", (-1), 0);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      long[] longArray0 = new long[1];
      String string0 = StringUtils.join(longArray0, '}');
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBetween("a}<p~1cW*L", "0");
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringBefore("a}<p~1cW*L", (-1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("a}<p~1cW*L", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull("0");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("0", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.CR;
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\r", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.SPACE;
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals(" ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToNull("0");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("0", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.countMatches((CharSequence) "0", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("e52{dcr-hH{I`Tp0>u");
      assertEquals("e52{dcr-hH{I`Tp0>u", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("e52{dcr-hH{I`Tp0>u");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("", "e52{dcr-hH{I`Tp0>u", false);
      assertEquals((-18), int0);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphaSpace("B");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isAlpha("B");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("e52{dcr-hH{I`Tp0>u", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.normalizeSpace("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase(charSequence0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      String string0 = StringUtils.truncate("", 65, 1248);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.chop("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", 0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      charArray0[1] = '+';
      charArray0[2] = '`';
      String string3 = StringUtils.valueOf(charArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(":+`", string3);
      assertNotNull(string3);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {':', '+', '`'}, charArray0);
      
      String string4 = StringUtils.chomp((String) null);
      assertNull(string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) null, 65);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.center("org.apache.commons.lang3.StringUtils", (int) '\u0000', '\u0000');
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.abbreviateMiddle("org.apache.commons.lang3.StringUtils", (String) null, (-1767));
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-1000));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-1000));
      assertEquals((-1), int0);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.join((List<?>) linkedList0, '3', (-1), (-1000));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) " ", (CharSequence) " ");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("", 0, '0');
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "org.apache.commons.lang3.ArrayUtils";
      objectArray0[1] = (Object) "";
      String string2 = StringUtils.joinWith("org.apache.commons.lang3.ArrayUtils", objectArray0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.ArrayUtilsorg.apache.commons.lang3.ArrayUtils", string2);
      assertNotNull(string2);
      assertEquals(2, objectArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.ArrayUtils", "", 9);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short) (-1236);
      shortArray0[2] = (short)53;
      shortArray0[3] = (short) (-565);
      shortArray0[4] = (short)1162;
      String string3 = StringUtils.join(shortArray0, '0');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("40-12360530-56501162", string3);
      assertNotNull(string3);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)4, (short) (-1236), (short)53, (short) (-565), (short)1162}, shortArray0);
      
      String string4 = StringUtils.abbreviateMiddle("", "org.apache.commons.lang3.ArrayUtilsorg.apache.commons.lang3.ArrayUtils", 0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.uncapitalize("");
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.joinWith("", objectArray0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("org.apache.commons.lang3.ArrayUtils", string6);
      assertNotNull(string6);
      assertEquals(2, objectArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "org.apache.commons.lang3.ArrayUtils", (CharSequence) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = '0';
      charArray0[7] = '0';
      int int1 = StringUtils.indexOfAny((CharSequence) "40-12360530-56501162", charArray0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'0', '0', '0', '0', '0', '0', '0', '0'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Comparator should not be null.";
      stringArray0[1] = "";
      stringArray0[2] = "-";
      stringArray0[3] = "-";
      stringArray0[4] = "\n";
      stringArray0[5] = "";
      stringArray0[6] = "z*Ovtb8CpL-zI+vL@V";
      String[] stringArray1 = Locale.getISOCountries();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(250, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "-", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.unwrap("z*Ovtb8CpL-zI+vL@V", "\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("z*Ovtb8CpL-zI+vL@V", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.lowerCase("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.unwrap("Arguments cannot both be null", "Arguments cannot both be null");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Arguments cannot both be null", string2);
      assertNotNull(string2);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(""));
      
      HashSet<String> hashSet0 = new HashSet<String>(stack0);
      assertNotNull(hashSet0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(stack0.contains(""));
      assertFalse(hashSet0.contains(""));
      
      boolean boolean1 = stack0.add("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(string2));
      assertTrue(stack0.contains(""));
      
      HashSet hashSet1 = (HashSet)hashSet0.clone();
      assertNotNull(hashSet1);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      assertFalse(stack0.contains(string2));
      assertTrue(stack0.contains(""));
      assertFalse(hashSet0.contains(""));
      
      String string3 = StringUtils.join((Iterable<?>) hashSet0, "Minimum abbreviation width with offset is %d");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(stack0.contains(string2));
      assertTrue(stack0.contains(""));
      assertFalse(hashSet0.contains(""));
      
      String string4 = StringUtils.replace("", "/&pM]", "Arguments cannot both be null");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.split("", '}');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = '}';
      String string5 = StringUtils.valueOf(charArray0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("}}}}}", string5);
      assertNotNull(string5);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'}', '}', '}', '}', '}'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{}", "~IJ1'+p~Zt^U@H*Z");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("\n", stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("~IJ1'+p~Zt^U@H*Z");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      String string0 = StringUtils.unwrap("", "...");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase(" vs ", (String) null);
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(" vs ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray0 = StringUtils.split("", 'Y');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.stripAccents((String) null);
      assertNull(string1);
      
      String[] stringArray1 = StringUtils.split((String) null, "yN*wv*~37@A5ON");
      assertNull(stringArray1);
      
      int int1 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, (-272));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean3 = StringUtils.startsWithAny((CharSequence) null, (CharSequence[]) null);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray0 = StringUtils.split("", 'Y');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.stripAccents((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.unwrap("", (String) null);
      assertEquals("", string2);
      assertNotNull(string2);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(string2));
      
      HashSet<String> hashSet0 = new HashSet<String>(stack0);
      assertNotNull(hashSet0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(stack0.contains(string2));
      assertFalse(hashSet0.contains(string2));
      
      boolean boolean3 = stack0.add("");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(string2));
      
      HashSet hashSet1 = (HashSet)hashSet0.clone();
      assertNotNull(hashSet1);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      assertTrue(stack0.contains(string2));
      assertFalse(hashSet0.contains(string2));
      
      String string3 = StringUtils.join((Iterable<?>) hashSet0, (String) null);
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(stack0.contains(string3));
      assertFalse(hashSet0.contains(string3));
      
      String string4 = StringUtils.replace("The Array must not be null", (String) null, "");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("The Array must not be null", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.split("The Array must not be null", '}');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      charArray0[5] = '}';
      charArray0[6] = 'Y';
      charArray0[7] = 'Y';
      charArray0[8] = 'Y';
      String string5 = StringUtils.valueOf(charArray0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("}}YYY}YYY", string5);
      assertNotNull(string5);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'}', '}', 'Y', 'Y', 'Y', '}', 'Y', 'Y', 'Y'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      String string0 = StringUtils.getDigits("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("", (-2866), "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", (-2866));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 436, (-2866));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.substringAfter(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) " ", (int) '\u0000');
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.trim("-");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "-";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) stringBuffer0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      String string2 = StringUtils.leftPad("", 3645, "-");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      long[] longArray0 = new long[0];
      String string3 = StringUtils.join(longArray0, 'l', Integer.MIN_VALUE, 8);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      String string4 = StringUtils.defaultIfBlank(";Qju~|B884.", " ");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(";Qju~|B884.", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      String string0 = StringUtils.center("\r", 8182, "bhM+9?sOu};");
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("D;40(9ugHLteB =btzi{V", "hdO0]1yq#");
      assertFalse(string1.equals((Object)string0));
      assertEquals("D;40(9ugHLteB =btzi{V", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      String string0 = StringUtils.substringAfter("wwl`Uxpj0*j", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("1Y+YME(LO");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.leftPad("|~x<#SNQ.v", 0, "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("|~x<#SNQ.v", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("Threshold must not be negative");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(9, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      charArray0[1] = 'c';
      charArray0[2] = '8';
      charArray0[3] = '[';
      String string2 = StringUtils.valueOf(charArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("pc8[", string2);
      assertNotNull(string2);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'p', 'c', '8', '['}, charArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "wwl`Uxpj0*j");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("Threshold must not be negative", "|~x<#SNQ.v");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.join((short[]) null, 'd', (-154), (-798));
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.replaceChars("", '', '>');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "z*Ovtb8CpL-zI+vL@V";
      int int0 = StringUtils.lastIndexOfAny("z*Ovtb8CpL-zI+vL@V", charSequenceArray0);
      assertEquals(18, int0);
      assertEquals(4, charSequenceArray0.length);
      
      String string2 = StringUtils.chop("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[4];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      String string1 = StringUtils.join(locale_FilteringModeArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("REJECT_EXTENDED_RANGESMAP_EXTENDED_RANGESMAP_EXTENDED_RANGESREJECT_EXTENDED_RANGES", string1);
      assertNotNull(string1);
      assertEquals(4, locale_FilteringModeArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny("REJECT_EXTENDED_RANGESMAP_EXTENDED_RANGESMAP_EXTENDED_RANGESREJECT_EXTENDED_RANGES", charSequenceArray0);
      assertEquals(82, int0);
      assertEquals(2, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[0], 82, 70);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      String string0 = "\\u";
      int int0 = 4;
      String string1 = StringUtils.left(string0, 4);
      assertEquals("\\u", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) string1, (CharSequence) string1);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) string1;
      charSequenceArray0[1] = (CharSequence) string1;
      charSequenceArray0[2] = (CharSequence) string0;
      int int1 = StringUtils.lastIndexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.chop((String) null);
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance(charSequenceArray0[0], (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      String string0 = StringUtils.join((boolean[]) null, '#');
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      String string1 = StringUtils.trimToEmpty("K+jh'!^e1)b]DO;gw7");
      assertEquals("K+jh'!^e1)b]DO;gw7", string1);
      assertNotNull(string1);
      
      charSequenceArray0[4] = (CharSequence) "K+jh'!^e1)b]DO;gw7";
      charSequenceArray0[5] = (CharSequence) null;
      boolean boolean0 = StringUtils.containsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string2 = StringUtils.join((float[]) null, '#', (-1751), (-14));
      assertNull(string2);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, '#', 48, (-1751));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(6, charSequenceArray0.length);
      
      String string4 = StringUtils.removeEndIgnoreCase("", (String) null);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsOnly(charSequenceArray0[5], (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      String string0 = "?h>:y";
      String string1 = StringUtils.trimToNull("?h>:y");
      assertTrue(string1.equals((Object)string0));
      assertEquals("?h>:y", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      charArray0[1] = 'm';
      charArray0[2] = 'Y';
      charArray0[3] = '+';
      charArray0[4] = 't';
      int int0 = 2147483598;
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 2147483598, 108);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[1] = 'C';
      String string0 = StringUtils.capitalize("ev&9n1#hSI7@F");
      assertEquals("Ev&9n1#hSI7@F", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("ev&9n1#hSI7@F");
      assertFalse(string1.equals((Object)string0));
      assertEquals("917", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.EMPTY;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.startsWith("", "D|28u\"");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringAfter("zk?J:2jOqRdq5Fn", "ev&9n1#hSI7@F");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfAny("zk?J:2jOqRdq5Fn", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "zk?J:2jOqRdq5Fn";
      stringArray0[1] = "ev&9n1#hSI7@F";
      stringArray0[2] = "ev&9n1#hSI7@F";
      stringArray0[3] = "D|28u\"";
      stringArray0[4] = "Ev&9n1#hSI7@F";
      String string4 = StringUtils.replaceEachRepeatedly("Sa=", stringArray0, stringArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Sa=", string4);
      assertNotNull(string4);
      assertEquals(5, stringArray0.length);
      
      String string5 = StringUtils.leftPad("D|28u\"", 2649, '/');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore("\n", "\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((int[]) null, '9');
      assertNull(string2);
      
      String string3 = StringUtils.chop("UQ^d;A$58");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("UQ^d;A$5", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("PHB3|", 1268);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("PHB3|", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.center("#e5l", (-235), "UmYej[");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("#e5l", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.countMatches((CharSequence) "#e5l", (CharSequence) "UQ^d;A$5");
      assertEquals(0, int0);
      
      String string6 = StringUtils.difference("UQ^d;A$58", (String) null);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("UQ^d;A$58", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = "-";
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("", "-");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("z*Ovtb8CpL-zI+vL@V", charSequenceArray0[1], stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("z*Ovtb8CpL-zI+vL@V", string2);
      assertNotNull(string2);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance(charSequenceArray0[0], "z*Ovtb8CpL-zI+vL@V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Index: ", "");
      assertEquals("Index: ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Index: ";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) null;
      CharSequence[] charSequenceArray1 = new CharSequence[2];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "Index: ";
      charSequenceArray1[1] = (CharSequence) "Index: ";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray1.length);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      String string0 = StringUtils.left("^,", (-1280));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("\n");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      String string0 = StringUtils.chomp("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "...", (CharSequence) "...", (-1779));
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlpha("...");
      assertFalse(boolean0);
      
      String string1 = StringUtils.chop("%");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      String string0 = StringUtils.removeAll("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("Index: ", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Index: ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Index: ";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string3 = StringUtils.chop("");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance(charSequenceArray0[2], (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "p{InCombiningDiacriticalMarks}+", charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("p{InCombiningDiacriticalMarks}+", "}pwK$CNGA", 90);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) stringArray0[0], (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(7, stringArray0.length);
      
      String string1 = StringUtils.difference(stringArray0[0], "hh51GB=0KL\"8b|~");
      assertFalse(string1.equals((Object)string0));
      assertEquals("hh51GB=0KL\"8b|~", string1);
      assertNotNull(string1);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = 'Z';
      charArray0[2] = 'C';
      charArray0[3] = 'a';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("(ZCa", string0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'(', 'Z', 'C', 'a'}, charArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "(ZCa", "HBXr N;v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      String string0 = StringUtils.stripAccents("Array element ");
      assertEquals("Array element ", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Array element ", charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      String string0 = StringUtils.removeFirst("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", (String) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        StringUtils.getBytes("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      String string0 = StringUtils.wrap("wO#[h&)v&jAm8V3", '+');
      assertEquals("+wO#[h&)v&jAm8V3+", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("|]pr(zTv%2ZWCey", "+wO#[h&)v&jAm8V3+", 1);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.difference("+wO#[h&)v&jAm8V3+", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("e52{dcr-hH{I`Tp0>u");
      assertEquals("e52{dcr-hH{I`Tp0>u", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("e52{dcr-hH{I`Tp0>u");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("B", "e52{dcr-hH{I`Tp0>u", 16);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("B", "e52{dcr-hH{I`Tp0>u", false);
      assertEquals((-3), int0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("B");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAlphaSpace("e52{dcr-hH{I`Tp0>u");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("z*Ovtb8CpL-zI+vL@V");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = StringUtils.strip("XyiU?$X.<b]>1y");
      assertEquals("XyiU?$X.<b]>1y", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWith("XyiU?$X.<b]>1y", "XyiU?$X.<b]>1y");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, charSequenceArray0.length);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("XyiU?$X.<b]>1y"));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("qa=n'UCJt<:^u", 'v');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean2 = StringUtils.isAllUpperCase("N)}k8Oz\")c7qa=n'UCJt<:^uc8ZNfQ");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      String string0 = "...";
      String string1 = StringUtils.removeAll("Qe8b6zcN<X<jpxOg<{", "...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("...");
      assertFalse(boolean0);
      
      String string3 = "'YwtkewYT<}UOc&o";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("'YwtkewYT<}UOc&o", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      PriorityQueue<Object> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<Object>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "HURV4riOn3#xu5W;]o", '\"');
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissingIgnoreCase("HURV4riOn3#xu5W;]o", "HURV4riOn3#xu5W;]o", charSequenceArray0);
      assertEquals("HURV4riOn3#xu5W;]o", string0);
      assertNotNull(string0);
      assertEquals(0, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "HURV4riOn3#xu5W;]o", (CharSequence) "HURV4riOn3#xu5W;]o");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "HURV4riOn3#xu5W;]o";
      stringArray0[1] = "HURV4riOn3#xu5W;]o";
      stringArray0[2] = "HURV4riOn3#xu5W;]o";
      stringArray0[5] = "HURV4riOn3#xu5W;]o";
      stringArray0[6] = "HURV4riOn3#xu5W;]o";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("HURV4riOn3#xu5W;]o", string1);
      assertNotNull(string1);
      assertEquals(7, stringArray0.length);
      
      String string2 = StringUtils.replaceFirst((String) null, "org.apache.commons.lang3.StringUtils", "x01Dz~'");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(6, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", charSequenceArray0[3]);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      charArray0[1] = 'r';
      charArray0[2] = 'M';
      charArray0[3] = ';';
      charArray0[4] = 'm';
      charArray0[5] = '/';
      charArray0[6] = 'g';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'9', 'r', 'M', ';', 'm', '/', 'g'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "D;40(9";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "D;40(9");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "D;40(9", (CharSequence) "D;40(9");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAny((CharSequence) "D;40(9", charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "D;40(9", (CharSequence) "D;40(9", (int) 'h');
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "D;40(9", "D;40(9");
      assertFalse(boolean0);
      
      String string0 = StringUtils.appendIfMissing("D;40(9", "D;40(9", stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("D;40(9", string0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("D;40(9", "D;40(9", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("D;40(9", string1);
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("wVE`%[[{b,'l");
      assertEquals("wVE`%[[{b,'l", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("wVE`%[[{b,'l", "wVE`%[[{b,'l");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = ':';
      charArray0[2] = ':';
      String string2 = StringUtils.join(charArray0, 'b');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" b:b:", string2);
      assertNotNull(string2);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {' ', ':', ':'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      String string0 = StringUtils.truncate("", 65, 1248);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "vx~dK&,pOlzP&");
      assertNull(string1);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(""));
      
      Iterator<String> iterator0 = hashSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(""));
      
      String string2 = StringUtils.join(iterator0, 'e');
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(""));
      
      String string3 = StringUtils.center("", 65, "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("                                                                 ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("", 10, "Minimum abbreviation width is %d");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Minimum ab", string4);
      assertNotNull(string4);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(""));
      
      Iterator<String> iterator1 = hashSet0.iterator();
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      assertNotSame(iterator1, iterator0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(""));
      
      String string5 = StringUtils.rightPad("org.apache.commons.lang3.CharSequenceUtils", 35);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Strings must not be null", (CharSequence) "Minimum ab", 16);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.substring("vx~dK&,pOlzP&", 7, 20);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("pOlzP&", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      String string0 = StringUtils.substringBefore("wVE`%[[{b,'l", "wVE`%[[{b,'l");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      char char0 = ' ';
      charArray0[0] = ' ';
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "wVE`%[[{b,'l";
      String string1 = StringUtils.joinWith("", objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("wVE`%[[{b,'l", string1);
      assertNotNull(string1);
      assertEquals(1, objectArray0.length);
      
      String string2 = StringUtils.right("qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>u", 49);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>u", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "wVE`%[[{b,'l", (CharSequence) "t,b'*", 49);
      assertEquals(10, int0);
      
      int int1 = 370;
      long[] longArray0 = new long[0];
      int int2 = 98;
      String string3 = StringUtils.join(longArray0, '~', 370, 98);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "", 408, 98);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      String string4 = StringUtils.lowerCase("");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("wVE`%[[{b,'l", "wVE`%[[{b,'l");
      assertTrue(boolean0);
      
      try { 
        StringUtils.getBytes(", Length: 0", "(?#q><MV8[4[)l=");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.join((int[]) null, 'B', 34, 64);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.split("d^bR", "d^bR", 64);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "}pwK$CNGA", (CharSequence) "}pwK$CNGA", 64);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("}pwK$CNGA", "d^bR");
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((long[]) null, '\u0000', 29, 34);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.equalsAny((CharSequence) null, stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      String string0 = StringUtils.remove("M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("", ", Length: ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) ", Length: ";
      long[] longArray0 = new long[0];
      String string2 = StringUtils.join(longArray0, 'y');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ", Length: ", (CharSequence) "", 1742);
      assertEquals(10, int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String string3 = StringUtils.capitalize("");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      String string0 = StringUtils.replaceFirst("", "", "qa=n'UCJt<:^u");
      assertEquals("qa=n'UCJt<:^u", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.thrtil", (CharSequence) "qa=n'UCJt<:^u", 13);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "HURV4riOn3#xu5W;]o", '\"');
      assertEquals(0, int0);
      
      String string0 = StringUtils.removeStart("qa=n'UCJt<:^uc8ZNfQ", "N)}k8Oz\")c7");
      assertEquals("qa=n'UCJt<:^uc8ZNfQ", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.countMatches((CharSequence) "qa=n'UCJt<:^uc8ZNfQ", (CharSequence) "qa=n'UCJt<:^uc8ZNfQ");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string1 = StringUtils.substringAfterLast("p", "HURV4riOn3#xu5W;]o");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("p", 52);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("p", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeAll((String) null, "Locale must not be null");
      assertNull(string3);
      
      String string4 = StringUtils.rightPad("0kKu!iBiIaD2", (-156), "...");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("0kKu!iBiIaD2", string4);
      assertNotNull(string4);
      
      Object[] objectArray0 = new Object[0];
      String string5 = StringUtils.joinWith("0kKu!iBiIaD2", objectArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(0, objectArray0.length);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, (-156), 52);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string6 = StringUtils.trimToEmpty("p");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("p", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.reverseDelimited("", 'f');
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      String string0 = StringUtils.right("Y+{c", 322);
      assertEquals("Y+{c", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Y+{c", "Y+{c");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.abbreviate("Y+{c", "U<}`}&ei>{ybLL", 64, 322);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Y+{c", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      String string0 = StringUtils.rightPad("}U", (-3349), "}U");
      assertEquals("}U", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "{aVwJvp-Pz)PZp", 2384, (-56));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBefore("{aVwJvp-Pz)PZp", "(4qB7E_('fPY");
      assertFalse(string1.equals((Object)string0));
      assertEquals("{aVwJvp-Pz)PZp", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.reverseDelimited("}U", 'w');
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("}U", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      String string0 = StringUtils.truncate("", 65, 1248);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", 1248);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(95);
      assertNotNull(byteBuffer0);
      assertEquals(95, byteBuffer0.capacity());
      assertEquals(95, byteBuffer0.remaining());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=95 cap=95]", byteBuffer0.toString());
      assertEquals(95, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      
      ByteBuffer byteBuffer1 = byteBuffer0.duplicate();
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      assertNotNull(byteBuffer1);
      assertNotSame(byteBuffer0, byteBuffer1);
      assertNotSame(byteBuffer1, byteBuffer0);
      assertEquals(95, byteBuffer0.capacity());
      assertEquals(95, byteBuffer0.remaining());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=95 cap=95]", byteBuffer0.toString());
      assertEquals(95, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer1.isReadOnly());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(95, byteBuffer1.remaining());
      assertFalse(byteBuffer1.hasArray());
      assertEquals(0, byteBuffer1.position());
      assertTrue(byteBuffer1.isDirect());
      assertEquals(95, byteBuffer1.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=95 cap=95]", byteBuffer1.toString());
      assertEquals(95, byteBuffer1.limit());
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 3);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "G9ULK-fZyNJZn", (CharSequence) "G9ULK-fZyNJZn", 1034);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Y]]Eg,p%[", (-4448));
      assertEquals("Y]]Eg,p%[", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Y]]Eg,p%[", "Y]]Eg,p%[");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string1 = StringUtils.removeAll("Y]]Eg,p%[", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Y]]Eg,p%[", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.substringsBetween("Y]]Eg,p%[", "Y]]Eg,p%[", "Y]]Eg,p%[");
      assertNull(stringArray1);
      
      double double0 = StringUtils.getJaroWinklerDistance("Y]]Eg,p%[", "Y]]Eg,p%[");
      assertEquals(1.0, double0, 0.01);
      
      String string2 = StringUtils.abbreviate("", "", (-4448), (-4448));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "Y]]Eg,p%[");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.replaceAll("%JaUS3qe>R.", "Threshold must not be negative", ", Length: ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("%JaUS3qe>R.", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isNumericSpace("%JaUS3qe>R.");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = StringUtils.reverse("org.apache.commons.lang3.LocaleUtils");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("slitUelacoL.3gnal.snommoc.ehcapa.gro", string4);
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.isNumeric("Y]]Eg,p%[");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string5 = StringUtils.right("Y]]Eg,p%[", 1);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("[", string5);
      assertNotNull(string5);
      
      String[] stringArray2 = StringUtils.split("org.apache.commons.lang3.RegExUtils", 'k');
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      
      String string6 = StringUtils.trimToEmpty("maxWith cannot be negative");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("maxWith cannot be negative", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.uncapitalize("Y]]Eg,p%[");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals("y]]Eg,p%[", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.defaultString("'S|f", "org.apache.commons.lang3.LocaleUtils");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertEquals("'S|f", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "D;40(9";
      objectArray0[1] = (Object) "D;40(9";
      objectArray0[2] = (Object) "D;40(9";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "D;40(9";
      objectArray0[5] = (Object) "D;40(9";
      objectArray0[6] = (Object) "D;40(9";
      objectArray0[7] = (Object) "D;40(9";
      String string0 = StringUtils.joinWith("D;40(9", objectArray0);
      assertNotNull(string0);
      assertEquals(8, objectArray0.length);
      
      String string1 = StringUtils.right("t,b'*", 49);
      assertFalse(string1.equals((Object)string0));
      assertEquals("t,b'*", string1);
      assertNotNull(string1);
      
      int int0 = 16;
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "D;40(9", (CharSequence) "D;40(9", 16);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      long[] longArray0 = new long[0];
      char char0 = 'c';
      int int2 = 370;
      String string2 = StringUtils.join(longArray0, 'c', 370, 49);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "t,b'*", 16, 0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
      
      String string3 = StringUtils.lowerCase("D;40(9D;40(9D;40(9D;40(9D;40(9D;40(9java.lang.Object@4d002c22D;40(9D;40(9D;40(9D;40(9D;40(9D;40(9D;40(9D;40(9");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("t,b'*", "t,b'*");
      assertTrue(boolean0);
      
      try { 
        StringUtils.getBytes("->$dx14TukCHG?e", "D;40(9D;40(9D;40(9D;40(9D;40(9D;40(9java.lang.Object@4d002c22D;40(9D;40(9D;40(9D;40(9D;40(9D;40(9D;40(9D;40(9");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      String[] stringArray0 = new String[1];
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) stringArray0[0], charArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("&2lkf");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string0 = StringUtils.normalizeSpace(stringArray0[0]);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNull(string0);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = 'l';
      charArray0[2] = 'L';
      charArray0[3] = '{';
      charArray0[4] = '2';
      charArray0[5] = 'A';
      charArray0[6] = 'T';
      charArray0[7] = '%';
      charArray0[8] = '3';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'g', 'l', 'L', '{', '2', 'A', 'T', '%', '3'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "M#21T4mQ[?Bofw[/m3";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string0 = StringUtils.substringAfterLast("M#21T4mQ[?Bofw[/m3", "M#21T4mQ[?Bofw[/m3");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("(f9VckoyN.~J<'>^", 12);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(f9VckoyN...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeAll("", "4#G 3w");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("w]`x[w_*>", 12, "4#G 3w");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("w]`x[w_*>4#", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.joinWith("qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>u", objectArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(4, objectArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "jssh^$]#kBf.:v", (-32768), (-32768));
      assertEquals((-1), int0);
      
      String string5 = StringUtils.substringBefore("JXp`yd5r2/qY s", "w]`x[w_*>");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("JXp`yd5r2/qY s", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.reverseDelimited("JXp`yd5r2/qY s", 'p');
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("`yd5r2/qY spJX", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOf((CharSequence) "qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>u", (CharSequence) "`yd5r2/qY spJX");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.join(objectArray0, "w]`x[w_*>4#", 12, (-2115));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      assertNotNull(string7);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray0 = StringUtils.split("h", 'Y');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.stripAccents((String) null);
      assertNull(string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, 'Y');
      assertNull(stringArray1);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, 'h');
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("g'1qo5]&G`V", 'g');
      assertFalse(string3.equals((Object)string2));
      assertEquals("g'1qo5]&G`Vg", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "Zbk.");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.center("org.apache.commons.lang3.StringUtils1?aWUUd-g1P6ZM", (-1296), '+');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.StringUtils1?aWUUd-g1P6ZM", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.abbreviateMiddle("org.apache.commons.lang3.StringUtils1?aWUUd-g1P6ZM", "", 260);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.StringUtils1?aWUUd-g1P6ZM", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      String string0 = null;
      int int0 = (-248);
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-248));
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      char char0 = '0';
      String[] stringArray1 = StringUtils.split("W2#sF9S#gZ8AGx", '0');
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "W2#sF9S#gZ8AGx", (-248), (-248));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null, 65);
      assertNull(stringArray0);
      
      int int0 = StringUtils.compareIgnoreCase("Threshold must not be negative", "-]`2P+6w2at}y", false);
      assertEquals(71, int0);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphaSpace("-]`2P+6w2at}y");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      String[] stringArray0 = new String[8];
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      String string0 = StringUtils.substringBefore("wVE`%[[{b,'l", "wVE`%[[{b,'l");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("N", '`');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.remove((String) null, '`');
      assertNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle("j}`t(>>-", "wVE`%[[{b,'l", 76);
      assertFalse(string2.equals((Object)string0));
      assertEquals("j}`t(>>-", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) ", Length: ", (-254));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.removeFirst("", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      String string1 = StringUtils.upperCase("", locale0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      String string2 = StringUtils.remove("opUk>im$*2wObHN6D", ';');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("opUk>im$*2wObHN6D", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      String string0 = StringUtils.defaultString("ey+6w", "jkCb7$Z");
      assertEquals("ey+6w", string0);
      assertNotNull(string0);
      
      Locale locale0 = new Locale("org.apache.commons.lang3.ArrayUtils", "XisRWNd#TdhhF", "9wHlujxEp, ");
      assertNotNull(locale0);
      assertEquals("org.apache.commons.lang3.arrayutils_XISRWND#TDHHF_9wHlujxEp, ", locale0.toString());
      assertEquals("org.apache.commons.lang3.arrayutils", locale0.getLanguage());
      assertEquals("XISRWND#TDHHF", locale0.getCountry());
      assertEquals("9wHlujxEp, ", locale0.getVariant());
      
      String string1 = StringUtils.upperCase("ey+6w", locale0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("EY+6W", string1);
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.arrayutils_XISRWND#TDHHF_9wHlujxEp, ", locale0.toString());
      assertEquals("org.apache.commons.lang3.arrayutils", locale0.getLanguage());
      assertEquals("XISRWND#TDHHF", locale0.getCountry());
      assertEquals("9wHlujxEp, ", locale0.getVariant());
      
      String string2 = StringUtils.remove("9wHlujxEp, ", '-');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("9wHlujxEp, ", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      String string0 = StringUtils.trim("HURV4riOn3#xu5W;]o");
      assertEquals("HURV4riOn3#xu5W;]o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("$K?mr2SMjM", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string1.equals((Object)string0));
      assertEquals("$K?mr2SMjM", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "$K?mr2SMjM", (CharSequence) "$K?mr2SMjM");
      assertEquals(0, int0);
      
      String string2 = StringUtils.unwrap("$K?mr2SMjM", "HURV4riOn3#xu5W;]o");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("$K?mr2SMjM", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      String string0 = StringUtils.getDigits("...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "...", 1233, 2773);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center("", 2773);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) "");
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertEquals(2773, int1);
      
      String string2 = StringUtils.wrapIfMissing("}U", 'Q');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Q}UQ", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      String string0 = StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", 50, 1701);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[6];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "p{InCombiningDiacriticalMarks}+", charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 50;
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '<';
      intArray0[1] = (int) '<';
      intArray0[2] = (int) 'W';
      intArray0[3] = (int) '<';
      String string1 = StringUtils.join(intArray0, 'B', 1701, 1701);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {60, 60, 87, 60}, intArray0);
  }

  @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.chomp(" ");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", (CharSequence) " ", (int) '\u0000');
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) " ");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      String string0 = StringUtils.abbreviate("M#21T4mQ[?Bofw[/m3", 2382);
      assertEquals("M#21T4mQ[?Bofw[/m3", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "M#21T4mQ[?Bofw[/m3", (char[]) null);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "M#21T4mQ[?Bofw[/m3";
      objectArray0[1] = (Object) "M#21T4mQ[?Bofw[/m3";
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "M#21T4mQ[?Bofw[/m3", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '4';
      charArray0[1] = 'd';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "N)}k8Oz\")c7", charArray0);
      assertEquals(0, int0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'4', 'd', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      String string0 = StringUtils.getDigits("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnce("", "", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("Minimum abbreviation width is %d", '{');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      String string0 = StringUtils.center("z*Ovtb8CpL-zI+vL@V", (-1406));
      assertEquals("z*Ovtb8CpL-zI+vL@V", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "z*Ovtb8CpL-zI+vL@V", (CharSequence) "z*Ovtb8CpL-zI+vL@V");
      assertEquals(0, int0);
      
      String string1 = StringUtils.wrapIfMissing("|Di/_SrZz ", 'Y');
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y|Di/_SrZz Y", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.noneOf(class0);
      assertNotNull(enumSet0);
      assertEquals(0, enumSet0.size());
      
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.copyOf(enumSet0);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotNull(enumSet1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(0, enumSet0.size());
      assertEquals(0, enumSet1.size());
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet1.iterator();
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotNull(iterator0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(0, enumSet0.size());
      assertEquals(0, enumSet1.size());
      
      String string0 = StringUtils.join(iterator0, 'E');
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(0, enumSet0.size());
      assertEquals(0, enumSet1.size());
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      String string0 = StringUtils.stripEnd("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("S!dP!");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("Array and element cannot both be null", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Array and element cannot both be null", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("S!dP!"));
      
      boolean boolean0 = linkedList0.add((Object) "");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("S!dP!"));
      assertTrue(linkedList0.contains(""));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("S!dP!"));
      assertTrue(linkedList0.contains(""));
      
      char char0 = 'E';
      LinkedList<CharBuffer> linkedList1 = new LinkedList<CharBuffer>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      // Undeclared exception!
      try { 
        linkedList1.listIterator((-1396));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1396, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>(3590);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, '\u0000');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, priorityQueue0.size());
      
      String string1 = StringUtils.chomp("g(.d}E_6yNLEY2", "g(.d}E_6yNLEY2");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'Y', 'P');
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", 13);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      String string0 = StringUtils.removeEnd("\n", (String) null);
      assertEquals("\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.lowerCase("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("Arguments cannot both be null", (String) null);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      int int1 = StringUtils.ordinalIndexOf("", (CharSequence) null, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.startsWithAny("", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      String string0 = "{}";
      String[] stringArray0 = StringUtils.substringsBetween("~IJ1'+p~Zt^U@H*Z", "~IJ1'+p~Zt^U@H*Z", "{}");
      assertNull(stringArray0);
      
      String string1 = StringUtils.LF;
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("\n", (CharSequence[]) null);
      assertFalse(boolean0);
      
      int int0 = (-1038);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\n", "\n", (-1038));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      String string0 = StringUtils.removeAll("Qe8b6zcN<X<jpxOg<{", "...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("...");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("'YwtkewYT<}UOc&o", "'YwtkewYT<}UOc&o", (-1));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "3", 0);
      assertNull(stringArray1);
      
      String string1 = StringUtils.unwrap("Qe8b6zcN<X<jpxOg<{", "Qe8b6zcN<X<jpxOg<{");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Qe8b6zcN<X<jpxOg<{", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", "", 3291);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("Qe8b6zcN<X<jpxOg<{");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.substringBetween("(c", "org.apache.commons.lang3.StringUtils");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("1r)uTX;VsRLtsE", "1r)uTX;VsRLtsE", "1r)uTX;VsRLtsE");
      assertNull(stringArray0);
      
      String string0 = StringUtils.center("maxWith cannot be negativeorg.apache.commons.lang3.RegExUtils", (-441), ',');
      assertEquals("maxWith cannot be negativeorg.apache.commons.lang3.RegExUtils", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "maxWith cannot be negativeorg.apache.commons.lang3.RegExUtils", (CharSequence) "maxWith cannot be negativeorg.apache.commons.lang3.RegExUtils");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string0 = StringUtils.lowerCase("S-4`eD=aGk!FkYY`", locale0);
      assertEquals("s-4`ed=agk!fkyy`", string0);
      assertNotNull(string0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string1 = StringUtils.substringAfter("s-4`ed=agk!fkyy`", "S-4`eD=aGk!FkYY`");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "S-4`eD=aGk!FkYY`", (CharSequence) "");
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(";}Bl9>>K+tX)y", ";}Bl9>>K+tX)y");
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
      
      String string0 = StringUtils.removeEnd("Ca.m3<_U{_X", "6bYc7N\"Xt{@");
      assertEquals("Ca.m3<_U{_X", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Ca.m3<_U{_X", stringArray0);
      assertFalse(boolean0);
      assertEquals(14, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test785()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("~IJ1'+p~Zt^U@H*Z", "~IJ1'+p~Zt^U@H*Z", "{}");
      assertNull(stringArray0);
      
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("\n", (CharSequence[]) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\n", "\n", (-1038));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test786()  throws Throwable  {
      String string0 = StringUtils.removeAll("XyiU?$X.<b]>1y", "XyiU?$X.<b]>1y");
      assertEquals("XyiU?$X.<b]>1y", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWith("XyiU?$X.<b]>1y", "XyiU?$X.<b]>1y");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, charSequenceArray0.length);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      String[] stringArray0 = StringUtils.split("XyiU?$X.<b]>1y", "N)}k8Oz\")c7qa=n'UCJt<:^uc8ZNfQ");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      boolean boolean2 = StringUtils.isAllUpperCase("N)}k8Oz\")c7qa=n'UCJt<:^uc8ZNfQ");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = StringUtils.removeStartIgnoreCase("qa=n'UCJt<:^u", "N)}k8Oz\")c7qa=n'UCJt<:^uc8ZNfQ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("qa=n'UCJt<:^u", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test787()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Comparator should not be null.";
      stringArray0[1] = "";
      stringArray0[2] = "-";
      stringArray0[3] = "-";
      stringArray0[4] = "\n";
      stringArray0[5] = "";
      stringArray0[6] = "z*Ovtb8CpL-zI+vL@V";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.left("z*Ovtb8CpL-zI+vL@V", 1873);
      assertFalse(string1.equals((Object)string0));
      assertEquals("z*Ovtb8CpL-zI+vL@V", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("", "0?g{_uO>XEbEMB");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("z*Ovtb8CpL-zI+vL@V");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("8", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test788()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '\u0000';
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.substringAfterLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", 1572);
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.substringAfter("", 1572);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.abbreviate("LEE_Ux_:N", "", (int) '\u0000', 1572);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("LEE_Ux_:N", string2);
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "LEE_Ux_:N";
      String string3 = StringUtils.toRootUpperCase("LEE_Ux_:N");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("LEE_UX_:N", string3);
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "LEE_UX_:N";
      String string4 = StringUtils.join((Object[]) charSequenceArray0, "Aborting to protect against StackOverflowError - output of one loop is the input of another", 1572, 1572);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(8, charSequenceArray0.length);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string5 = StringUtils.join((short[]) null, '&');
      assertNull(string5);
      
      charSequenceArray0[5] = (CharSequence) null;
      String string6 = StringUtils.reverseDelimited("LEE_Ux_:N", '\u0000');
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("LEE_Ux_:N", string6);
      assertNotNull(string6);
      
      charSequenceArray0[6] = (CharSequence) "LEE_Ux_:N";
      String string7 = StringUtils.strip("LEE_Ux_:N");
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals("LEE_Ux_:N", string7);
      assertNotNull(string7);
      
      charSequenceArray0[7] = (CharSequence) "LEE_Ux_:N";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertTrue(charSequence0.equals((Object)string7));
      assertTrue(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string6));
      assertFalse(charSequence0.equals((Object)string4));
      assertEquals("LEE_Ux_:N", charSequence0);
      assertNotNull(charSequence0);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test789()  throws Throwable  {
      String string0 = StringUtils.removeAll("Qe8b6zcN<X<jpxOg<{", "...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("...");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("'YwtkewYT<}UOc&o", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.removeEnd("", "xY+YE(LO");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("", 13, "Comparator should not be null.");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ComparCompara", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Supplied value must be a valid byte literal between -32768 and 32767: [", "xY+YE(LO", 1587, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 17
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test790()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("", "-");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("z*Ovtb8CpL-zI+vL@V", charSequenceArray0[1], stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("z*Ovtb8CpL-zI+vL@V", string1);
      assertNotNull(string1);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, stringArray0.length);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[0], "z*Ovtb8CpL-zI+vL@V");
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test791()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string1 = StringUtils.center("org.apache.commons.lang3.StringUtils", (int) '\u0000', '\u0000');
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Org.apache.commons.lang3.StringUtils", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase("D|28u\"");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("D|28U\"", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, "\r");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\r", string4);
      assertNotNull(string4);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string2));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Org.apache.commons.lang3.StringUtils", 'Y');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("\r");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      String string5 = StringUtils.removeEnd("z3(1qx_", "org.apache.commons.lang3.StringUtils");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("z3(1qx_", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.stripEnd(" ", (String) null);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int[] intArray0 = StringUtils.toCodePoints(" ");
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {32}, intArray0);
  }

  @Test(timeout = 4000)
  public void test792()  throws Throwable  {
      String string0 = StringUtils.leftPad("cOuiw5JW(Rp#@b", 2020, 'b');
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "cOuiw5JW(Rp#@b", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(2020));
      
      String string1 = StringUtils.join((List<?>) arrayList0, string0, 6, (-405));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains((-405)));
  }

  @Test(timeout = 4000)
  public void test793()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, '', 56, (-1201));
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      String string1 = StringUtils.join(intArray0, '', 21, (-1201));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string2 = StringUtils.trimToEmpty("org.apache.commons.lang3.CharSequenceUtils");
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.commons.lang3.CharSequenceUtils";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = null;
      stringArray0[4] = "";
      stringArray0[5] = "org.apache.commons.lang3.CharSequenceUtils";
      stringArray0[6] = "org.apache.commons.lang3.CharSequenceUtils";
      stringArray0[7] = null;
      stringArray0[8] = null;
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string3);
      assertNotNull(string3);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test794()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull(" ");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test795()  throws Throwable  {
      String string0 = StringUtils.overlay("D;40(9", "7\"-.'c1$V", (-5092), (-5092));
      assertEquals("7\"-.'c1$VD;40(9", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore((String) null, (-4095));
      assertNull(string1);
      
      String string2 = StringUtils.defaultString("7\"-.'c1$V");
      assertFalse(string2.equals((Object)string0));
      assertEquals("7\"-.'c1$V", string2);
      assertNotNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("7\"-.'c1$V"));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, 'K', (-1), 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test796()  throws Throwable  {
      String string0 = StringUtils.trim("HURV4riOn3#xu5W;]o");
      assertEquals("HURV4riOn3#xu5W;]o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "HURV4riOn3#xu5W;]o", (-1751));
      assertNull(stringArray0);
      
      String string3 = StringUtils.substring("HURV4riOn3#xu5W;]o", 11);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("xu5W;]o", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("", "_%VgQM]y");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat("{~qVC-.%#pOLk&#_", (-2004318069));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.overlay("wn)8<6X9d>wf", (String) null, (-1751), 11);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("f", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.stripToNull((String) null);
      assertNull(string7);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test797()  throws Throwable  {
      String string0 = StringUtils.abbreviate("M#21T4mQ[?Bofw[/m3", 2382);
      assertEquals("M#21T4mQ[?Bofw[/m3", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "M#21T4mQ[?Bofw[/m3", (char[]) null);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "M#21T4mQ[?Bofw[/m3";
      objectArray0[1] = (Object) "M#21T4mQ[?Bofw[/m3";
      objectArray0[2] = (Object) "M#21T4mQ[?Bofw[/m3";
      objectArray0[3] = (Object) "M#21T4mQ[?Bofw[/m3";
      String string1 = StringUtils.join(objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("M#21T4mQ[?Bofw[/m3M#21T4mQ[?Bofw[/m3M#21T4mQ[?Bofw[/m3M#21T4mQ[?Bofw[/m3", string1);
      assertNotNull(string1);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test798()  throws Throwable  {
      String string0 = StringUtils.getDigits("p{InCombiningDiacriticalMarks}+");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "p{InCombiningDiacriticalMarks}+", "#");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.stripStart("", "org.apache.commons.lang3.Charsets");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsAny("p{InCombiningDiacriticalMarks}+", stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test799()  throws Throwable  {
      String string0 = StringUtils.rightPad("ed:gh$", 14);
      assertEquals("ed:gh$       ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("", Integer.MAX_VALUE);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test800()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      charArray0[3] = 'a';
      String string0 = StringUtils.strip("9re");
      assertEquals("9re", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("9re");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("9re");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("9re", "3F0NoFrfu+X2&Up7:");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, "p{InCombiningDiacriticalMarks}+", 460, 2984);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 2984
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test801()  throws Throwable  {
      String string0 = StringUtils.stripToNull("~_)G!e!;3:bkc&vcw9c");
      assertEquals("~_)G!e!;3:bkc&vcw9c", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "~_)G!e!;3:bkc&vcw9c", (CharSequence) "~_)G!e!;3:bkc&vcw9c", 13);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test802()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(";}Bl9>>K+tX)y", ";}Bl9>>K+tX)y");
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Ca.m3<_U{_X", (CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(14, stringArray0.length);
      
      boolean boolean0 = StringUtils.isBlank("Ca.m3<_U{_X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test803()  throws Throwable  {
      String string0 = StringUtils.center("Object varargs must not be null", 8);
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("-", 98);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-", string1);
      assertNotNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints("Object varargs must not be null");
      assertNotNull(intArray0);
      assertEquals(31, intArray0.length);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("Object varargs must not be null", "-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test804()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "{g)9>7;f%");
      assertEquals("{g)9>7;f%", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test805()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("Arguments cannot both be null", "Arguments cannot both be null");
      assertEquals(1.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("i.A{OGI_=zCM ", "i.A{OGI_=zCM ", (-1116), 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 14
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test806()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      String string0 = StringUtils.lowerCase("S-4`eD=aGk!FkYY`", locale0);
      assertEquals("s-4`ed=agk!fkyy`", string0);
      assertNotNull(string0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "S-4`eD=aGk!FkYY`", (CharSequence) "s-4`ed=agk!fkyy`");
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "s-4`ed=agk!fkyy`");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // s-4`ed=agk!fkyy`
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test807()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.join((Object[]) null, '#');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test808()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add((Object) "8j~xO~+4Ai)Rrx-gV$");
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains("8j~xO~+4Ai)Rrx-gV$"));
      
      String string0 = StringUtils.join((List<?>) arrayList0, '$', 157, 157);
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains("8j~xO~+4Ai)Rrx-gV$"));
      assertFalse(arrayList0.contains('$'));
  }

  @Test(timeout = 4000)
  public void test809()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test810()  throws Throwable  {
      String string0 = StringUtils.defaultString("G9ULK-fZyNJZn");
      assertEquals("G9ULK-fZyNJZn", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)874;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'u', 8, 3582);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test811()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      String string0 = StringUtils.stripStart("nnzH6FnkWokWCZZu", "nnzH6FnkWokWCZZu");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test812()  throws Throwable  {
      String string0 = StringUtils.substring("|]pr(zTv%2ZWCey", 44, 44);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.defaultIfBlank("Minimum abbreviation width is %d", "|]pr(zTv%2ZWCey");
      assertEquals("Minimum abbreviation width is %d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.mid("Minimum abbreviation width is %d", 5, (-7));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverse((String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isNumeric("|]pr(zTv%2ZWCey");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.substringBefore("org.apache.commons.lang3.CharSequenceUtils", 44);
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, (CharSequence[]) null);
      boolean boolean3 = StringUtils.contains((CharSequence) "org.apache.commons.lang3.CharSequenceUtils", (CharSequence) null);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test813()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String[] stringArray2 = StringUtils.substringsBetween("Search and Replace array lengths don't match: ", "", "4;4{S{?V'6fa!JatIc*");
      assertNull(stringArray2);
      
      String string0 = StringUtils.getDigits("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test814()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      String string0 = locale0.getDisplayLanguage();
      assertEquals("German", string0);
      assertNotNull(string0);
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string1 = StringUtils.stripEnd("German", "German");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test815()  throws Throwable  {
      String string0 = StringUtils.defaultString("ey+6w", "jkCb7$Z");
      assertEquals("ey+6w", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace(" vs ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("vs", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("opUk>im$*2wObHW6D", 'j');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("opUk>im$*2wObHW6D", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test816()  throws Throwable  {
      String string0 = StringUtils.truncate("', has a length less than 2", 2121, 8192);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("ugHLteB =btzi{VD;40(9");
      assertFalse(boolean0);
      
      String string1 = StringUtils.capitalize("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test817()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("`", "+e~Ms");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test818()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Y]]Eg,p%[", (-4448));
      assertEquals("Y]]Eg,p%[", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Y]]Eg,p%[", "Y]]Eg,p%[");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string1 = StringUtils.removeAll("Y]]Eg,p%[", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Y]]Eg,p%[", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.substringsBetween("Y]]Eg,p%[", "Y]]Eg,p%[", "Y]]Eg,p%[");
      assertNull(stringArray1);
      
      double double0 = StringUtils.getJaroWinklerDistance("Y]]Eg,p%[", "Y]]Eg,p%[");
      assertEquals(1.0, double0, 0.01);
      
      String string2 = StringUtils.abbreviate("", "", (-4448), (-4448));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "Y]]Eg,p%[");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.replaceAll("%JaUS3qe>R.", "Threshold must not be negative", ", Length: ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("%JaUS3qe>R.", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isNumericSpace("%JaUS3qe>R.");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Threshold must not be negative", (CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.defaultString("Threshold must not be negative");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Threshold must not be negative", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripToNull("%JaUS3qe>R.");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("%JaUS3qe>R.", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.isNotEmpty("");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.endsWithIgnoreCase("%JaUS3qe>R.", "Y]]Eg,p%[");
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-4448)));
      
      String string6 = StringUtils.join((List<?>) linkedList0, 'r', 471, 471);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-4448)));
  }

  @Test(timeout = 4000)
  public void test819()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      String string0 = StringUtils.join(doubleArray0, 'N');
      assertEquals("0.0", string0);
      assertNotNull(string0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      String string1 = StringUtils.repeat("0.0", (int) 'N');
      assertFalse(string1.equals((Object)string0));
      assertEquals("0.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.0", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test820()  throws Throwable  {
      long[] longArray0 = new long[1];
      String string0 = StringUtils.join(longArray0, 'G');
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test821()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("The character ");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      String string0 = StringUtils.join(booleanArray0, '6');
      assertEquals("true6false6false6true", string0);
      assertNotNull(string0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '6';
      String string1 = StringUtils.join(doubleArray0, 'Q');
      assertFalse(string1.equals((Object)string0));
      assertEquals("54.0", string1);
      assertNotNull(string1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {54.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test822()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("The character ");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      String string0 = StringUtils.join(booleanArray0, '6');
      assertEquals("false6false6true6false", string0);
      assertNotNull(string0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      
      String string1 = StringUtils.replaceOnce("The character ", "false6false6true6false", "Jf-(6/^}m}!3Z07hhZ=");
      assertFalse(string1.equals((Object)string0));
      assertEquals("The character ", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test823()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '<');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test824()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      String string1 = "Ov2'<GdWV >D.v3";
      String string2 = "";
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      StringUtils.repeat("Ov2'<GdWV >D.v3", "", Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test825()  throws Throwable  {
      String string0 = StringUtils.repeat("Arguments cannot both be null", 114);
      assertNotNull(string0);
      
      String string1 = StringUtils.SPACE;
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test826()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "ULK-fZyN3Zo", 800);
      assertNull(stringArray0);
      
      String string0 = StringUtils.replaceIgnoreCase((String) null, (String) null, "on width is %d");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      byte[] byteArray0 = StringUtils.getBytes("F&[hat%r~?", charset0);
      assertNotNull(byteArray0);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)70, (byte)38, (byte)91, (byte)104, (byte)97, (byte)116, (byte)37, (byte)114, (byte)126, (byte)63}, byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
  }

  @Test(timeout = 4000)
  public void test827()  throws Throwable  {
      String string0 = StringUtils.substringAfter("wwl`Uxpj0*j", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("1Y+YME(LO");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1Y+YME(LO", string1);
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.getDigits("1Y+YME(LO");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("1", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test828()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase(",Bx'aj\u0004'5%cC~/HBh", ",Bx'aj\u0004'5%cC~/HBh");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "", 78);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test829()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("", "M!61CY:%H:$Akc4E[F", "M!61CY:%H:$Akc4E[F");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test830()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "M#21T4mQ[?Bofw[/m3";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string0 = StringUtils.joinWith("M#21T4mQ[?Bofw[/m3", objectArray0);
      assertNotNull(string0);
      assertEquals(4, objectArray0.length);
      
      String string1 = StringUtils.reverse((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("M#21T4mQ[?Bofw[/m3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test831()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", "", "");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "";
      String string1 = StringUtils.joinWith("", objectArray0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test832()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("~IJ1'+p~Zt^U@H*Z", 'J');
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("~IJ1'+p~Zt^U@H*Z");
      assertEquals(15, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.replaceIgnoreCase("org.apache.commons.lang3.LocaleUtils", "noJYr", "~IJ1'+p~Zt^U@H*Z");
      assertEquals("org.apache.commons.lang3.LocaleUtils", string0);
  }

  @Test(timeout = 4000)
  public void test833()  throws Throwable  {
      String string0 = StringUtils.repeat("{}", 16);
      assertNotNull(string0);
      assertEquals("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Minimum abbreviation width is %dev&Un1#hSI7@F";
      Object object0 = new Object();
      String string1 = StringUtils.join(objectArray0, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}");
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width is %dev&Un1#hSI7@F{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}", string1);
  }

  @Test(timeout = 4000)
  public void test834()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, '}', Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test835()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      StringUtils.join(doubleArray0, '<');
      StringUtils.removeEnd("g(.D}E_6yNLEnY2", "6'rF'.");
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test836()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "D;40(9";
      int[] intArray0 = StringUtils.toCodePoints("D;40(9");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {68, 59, 52, 48, 40, 57}, intArray0);
  }

  @Test(timeout = 4000)
  public void test837()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.abbreviate("", (-760));
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join(objectArray0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test838()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      StringUtils.join(objectArray0, "", 0, (-233));
      StringUtils.toCodePoints("");
      String string0 = "org.apache.commons.lang3.ArrayUtils";
      try { 
        StringUtils.getBytes("", "org.apache.commons.lang3.ArrayUtils");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test839()  throws Throwable  {
      String string0 = StringUtils.substring("G9ULK-fZyNJZn", (-1), (-1));
      assertEquals("", string0);
      
      StringUtils.isEmpty("G9ULK-fZyNJZn");
      String string1 = StringUtils.lowerCase("G9ULK-fZyNJZn");
      assertEquals("g9ulk-fzynjzn", string1);
      
      StringUtils.stripAll((String[]) null);
      boolean boolean0 = StringUtils.isNumeric("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("G9ULK-fZyNJZn");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "g9ulk-fzynjzn", (CharSequence) "g9ulk-fzynjzn");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test840()  throws Throwable  {
      StringUtils.countMatches((CharSequence) "HURV4riOn3#xu5W;]o", '\"');
      StringUtils.indexOfAny((CharSequence) "HURV4riOn3#xu5W;]o", "");
      StringUtils.isAllUpperCase("HURV4riOn3#xu5W;]o");
      StringUtils.split("r1Sp`+>qaujy", "r1Sp`+>qaujy", 0);
      // Undeclared exception!
      try { 
        StringUtils.removePattern("r1Sp`+>qaujy", "[i!NRU2?");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 7
         // [i!NRU2?
         //        ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test841()  throws Throwable  {
      Object object0 = new Object();
      String string0 = StringUtils.join((short[]) null, '_', 2944, 322);
      assertNull(string0);
      
      StringUtils.substring((String) null, 322, 2944);
      String string1 = StringUtils.substringAfterLast("Locale must not be null", "Locale must not be null");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test842()  throws Throwable  {
      String string0 = StringUtils.trim("HURV4riOn3#xu5W;]o");
      assertNotNull(string0);
      assertEquals("HURV4riOn3#xu5W;]o", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "HURV4riOn3#xu5W;]o", "HURV4riOn3#xu5W;]o");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test843()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.LocaleUtils", "org.apache.commons.lang3.LocaleUtils", 78);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test844()  throws Throwable  {
      String string0 = "g1<K;.&(Jz:m_x7c";
      int int0 = (-1253);
      StringUtils.splitByWholeSeparatorPreserveAllTokens("g1<K;.&(Jz:m_x7c", "z?J:2jOqRdq5Fn", (-1253));
      String string1 = "<w^4+c";
      StringUtils.repeat("<w^4+c", (-4742));
      StringUtils.indexOfAny((CharSequence) "g1<K;.&(Jz:m_x7c", "");
      int int1 = 93;
      StringUtils.substring((String) null, 93, (-1253));
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      char char0 = 'C';
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      charArray0[5] = 'C';
      charArray0[6] = 'C';
      charArray0[7] = 'C';
      // Undeclared exception!
      try { 
        charBuffer0.get(charArray0, 187, 1873);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test845()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("e52{dcr-hH{I`Tp0>u");
      boolean boolean0 = StringUtils.isBlank("e52{dcr-hH{I`Tp0>u");
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("B", "e52{dcr-hH{I`Tp0>u", 8);
      boolean boolean1 = StringUtils.containsNone((CharSequence) "e52{dcr-hH{I`Tp0>u", "B");
      assertTrue(boolean1);
      
      StringUtils.unwrap("B", "");
      boolean boolean2 = StringUtils.equalsIgnoreCase("", "e52{dcr-hH{I`Tp0>u");
      assertTrue(boolean2 == boolean0);
      
      int int0 = StringUtils.compare("B", "e52{dcr-hH{I`Tp0>u");
      assertEquals((-35), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "e52{dcr-hH{I`Tp0>u", 'B');
      assertEquals(0, int1);
      
      String string1 = StringUtils.removeStart("e52{dcr-hH{I`Tp0>u", "qa=n'UCJt<:^uc8ZNfQ");
      assertTrue(string1.equals((Object)string0));
      
      StringUtils.countMatches((CharSequence) "B", (CharSequence) "e52{dcr-hH{I`Tp0>u");
      String string2 = StringUtils.substringAfterLast((String) null, "e52{dcr-hH{I`Tp0>u");
      assertNull(string2);
      
      String string3 = StringUtils.abbreviate((String) null, 52);
      assertNull(string3);
      
      StringUtils.removeAll((String) null, "");
      StringUtils.rightPad("', is neither of type Map.Entry nor an Array", 8, (String) null);
      String string4 = StringUtils.joinWith("qa=n'UCJt<:^uc8ZNfQ", stringArray0);
      assertNotNull(string4);
      
      StringUtils.lastIndexOf((CharSequence) "B", Integer.MIN_VALUE, 0);
      String string5 = StringUtils.trimToEmpty("B");
      assertTrue(string5.equals((Object)string4));
      
      String string6 = StringUtils.reverseDelimited("B", 'B');
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test846()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("e52{dcr-hH{I`Tp0>u");
      assertEquals("e52{dcr-hH{I`Tp0>u", string0);
      
      boolean boolean0 = StringUtils.isBlank("e52{dcr-hH{I`Tp0>u");
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("B", "e52{dcr-hH{I`Tp0>u", 16);
      StringUtils.containsNone((CharSequence) "e52{dcr-hH{I`Tp0>u", "B");
      StringUtils.unwrap("B", "0A");
      StringUtils.equalsIgnoreCase("0A", "e52{dcr-hH{I`Tp0>u");
      int int0 = StringUtils.compare("B", "e52{dcr-hH{I`Tp0>u");
      assertEquals((-35), int0);
      
      boolean boolean1 = StringUtils.equalsAny("e52{dcr-hH{I`Tp0>u", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.stripEnd("B", "e52{dcr-hH{I`Tp0>u");
      String string2 = StringUtils.defaultString("B", "B");
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test847()  throws Throwable  {
      String string0 = StringUtils.overlay("e52{dcr-hH{I`Tp0>u", "Index: ", 28, 28);
      assertEquals("e52{dcr-hH{I`Tp0>uIndex: ", string0);
      
      StringUtils.right("ev&Un1#hSI7@F", 28);
      String string1 = StringUtils.overlay("7\"-.'c1$V", "e52{dcr-hH{I`Tp0>u", (-5092), 28);
      String string2 = StringUtils.right("qa=n'UCJt<:^uc8ZNfQ", 28);
      assertNotNull(string2);
      assertEquals("qa=n'UCJt<:^uc8ZNfQ", string2);
      
      String[] stringArray0 = StringUtils.split("1nfI[x(b+7eUK85", 'd');
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.trimToEmpty("e52{dcr-hH{I`Tp0>u");
      assertEquals("e52{dcr-hH{I`Tp0>u", string3);
      
      String string4 = StringUtils.uncapitalize("e52{dcr-hH{I`Tp0>u");
      assertTrue(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test848()  throws Throwable  {
      String string0 = StringUtils.trim("HURV4riOn3#xu5W;]o");
      assertEquals("HURV4riOn3#xu5W;]o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("");
      String string2 = StringUtils.chomp("", "");
      assertEquals("", string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.iterator();
      String string3 = StringUtils.substring("qa=n'UCJt<:^uc8ZNfQ", 64);
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.stripStart("", "");
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test849()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      charArray0[1] = '7';
      charArray0[2] = 'k';
      charArray0[3] = 'Z';
      charArray0[4] = 'k';
      StringUtils.join(charArray0, 'F');
      StringUtils.containsAny((CharSequence) "FF7FkFZFk", (CharSequence) "FF7FkFZFk");
      String string0 = "\\u";
      StringUtils.center((String) null, 13, string0);
      StringUtils.replace(string0, "E2k8tjp=X*T", "qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>u");
      StringUtils.difference(string0, "g[y-AkY3z67}*U4Fv");
      StringUtils.leftPad("qa=n'UCJt<:^uc8ZNfQe52{dcr-hH{I`Tp0>u", 17, 'j');
      StringUtils.substringBeforeLast("g[y-AkY3z67}*U4Fv", "g[y-AkY3z67}*U4Fv");
      String string1 = StringUtils.rotate((String) null, 17);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test850()  throws Throwable  {
      String string0 = "";
      StringUtils.uncapitalize("");
      int int0 = (-180);
      StringUtils.substring("", (-180));
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = 'X';
      charArray0[2] = '^';
      StringUtils.containsNone((CharSequence) "", charArray0);
      StringUtils.substringBeforeLast("", "");
      StringUtils.contains((CharSequence) "", (CharSequence) "");
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      // Undeclared exception!
      try { 
        linkedList0.listIterator((-180));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -180, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test851()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = '=';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "CF=A{ FJ>a2H$Sc", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test852()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
      
      Locale locale0 = Locale.ENGLISH;
      String string1 = StringUtils.normalizeSpace((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.remove("opUk>im$*2wObHW6D", '-');
      assertEquals("opUk>im$*2wObHW6D", string2);
  }

  @Test(timeout = 4000)
  public void test853()  throws Throwable  {
      String string0 = StringUtils.chomp("qU#[{/|!#e!e`6.");
      assertEquals("qU#[{/|!#e!e`6.", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "qU#[{/|!#e!e`6.", (CharSequence) "qU#[{/|!#e!e`6.");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrap("7`jr\"T^_)/~ly", '+');
      assertEquals("+7`jr\"T^_)/~ly+", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("qa=n'UCJt<:^u");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test854()  throws Throwable  {
      String string0 = StringUtils.getDigits("...");
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      boolean boolean2 = StringUtils.containsNone((CharSequence) "...", (char[]) null);
      assertFalse(boolean2 == boolean1);
      
      String string1 = StringUtils.lowerCase("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "...";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "...";
      objectArray0[4] = (Object) "...";
      String string2 = StringUtils.joinWith("l}u2mm", objectArray0);
      assertEquals("...l}u2mml}u2mml}u2mm...l}u2mm...", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test855()  throws Throwable  {
      StringUtils.getDigits("...");
      StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "");
      String string0 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test856()  throws Throwable  {
      String string0 = StringUtils.substringAfter("wwl`Uxpj0*j", (String) null);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("1Y+YME(LO");
      String string1 = StringUtils.leftPad("|~x<#SNQ.v", 0, "");
      assertEquals("|~x<#SNQ.v", string1);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("Threshold must not be negative");
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.LF;
      String string3 = StringUtils.difference("Search and Replace array lengths don't match: ", (String) null);
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertNotNull(string3);
      
      StringUtils.lastIndexOfAny("Search and Replace array lengths don't match: ", stringArray0);
      char[] charArray0 = new char[0];
      String string4 = StringUtils.join(charArray0, 'g', 0, (-2269));
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) stringArray0, "Search and Replace array lengths don't match: ");
      assertEquals("1Y+YME(LO", string5);
      assertNotNull(string5);
      
      Locale locale0 = Locale.forLanguageTag("Search and Replace array lengths don't match: ");
      String string6 = StringUtils.upperCase("wwl`Uxpj0*j", locale0);
      assertEquals("WWL`UXPJ0*J", string6);
  }

  @Test(timeout = 4000)
  public void test857()  throws Throwable  {
      StringUtils.toCodePoints("HURV4riOn3#xu5W;]o");
      StringUtils.getBytes((String) null, "HURV4riOn3#xu5W;]o");
      // Undeclared exception!
      try { 
        Charset.forName("HURV4riOn3#xu5W;]o");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // HURV4riOn3#xu5W;]o
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test858()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.SPACE;
      String string1 = StringUtils.difference("*.s4UhzA-#  \"'45", "*.s4UhzA-#  \"'45");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test859()  throws Throwable  {
      StringUtils.substringAfter("", "");
      StringUtils.lowerCase("");
      StringUtils.splitPreserveAllTokens("", 'F');
      try { 
        StringUtils.getBytes("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test860()  throws Throwable  {
      String string0 = "";
      StringUtils.difference("", "");
      String string1 = "";
      try { 
        StringUtils.getBytes("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test861()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      charSequenceArray0[0] = (CharSequence) "";
      StringUtils.trim("-");
      charSequenceArray0[1] = (CharSequence) "-";
      StringUtils.indexOfDifference(charSequenceArray0);
      String string0 = null;
      StringUtils.removeStart((String) null, "-");
      StringUtils.isNumericSpace(charSequenceArray0[0]);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Iterator<String> iterator0 = arrayList0.iterator();
      arrayList0.add((String) null);
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, "z*Ovtb8CpL-zI+vL@V");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test862()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      String string1 = StringUtils.strip("z*Ovtb8CpL-zI+vL@V", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("z*Ovtb8CpL-zI+vL@V", string1);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0[1], (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test863()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test864()  throws Throwable  {
      String string0 = StringUtils.overlay("e52{dcr-hH{I`Tp0>u", "\r", 28, 28);
      assertEquals("e52{dcr-hH{I`Tp0>u\r", string0);
      
      String string1 = StringUtils.right("ev&Un1#hSI7@F", 28);
      assertEquals("ev&Un1#hSI7@F", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split(" ", 'd');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.left(" ", 101);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart(" ", " ");
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test865()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("O!&Nlx2E<5:u(`z", " in an array of ");
      assertEquals("O!&Nlx2E<5:u(`z", string0);
      
      StringUtils.lastIndexOf((CharSequence) "O!&Nlx2E<5:u(`z", 0);
      String string1 = StringUtils.removeFirst("", " in an array of ");
      Locale locale0 = Locale.ENGLISH;
      String string2 = StringUtils.upperCase("", locale0);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("Threshold must not be negative", 'f');
      assertEquals("Threshold must not be negative", string3);
  }

  @Test(timeout = 4000)
  public void test866()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.trim("-");
      assertNotNull(string1);
      assertEquals("-", string1);
      
      charSequenceArray0[1] = (CharSequence) "-";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      
      String string2 = StringUtils.removeStart((String) null, "-");
      assertNull(string2);
      
      StringUtils.isNumericSpace(charSequenceArray0[0]);
      int int1 = StringUtils.indexOf((CharSequence) null, charSequenceArray0[1], 0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.chomp(">J");
      assertEquals(">J", string3);
  }

  @Test(timeout = 4000)
  public void test867()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substringAfterLast("org.apache.commons.lang3.RegExUtils", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test868()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "'2Zq=}`{";
      charSequenceArray0[1] = (CharSequence) "'2Zq=}`{";
      charSequenceArray0[2] = (CharSequence) "'2Zq=}`{";
      charSequenceArray0[3] = (CharSequence) "'2Zq=}`{";
      StringUtils.indexOfDifference(charSequenceArray0);
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("'2Zq=}`{", "'2Zq=}`{", "'2Zq=}`{");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 6
         // '2Zq=}`{
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test869()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test870()  throws Throwable  {
      short[] shortArray0 = new short[1];
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Z`[q";
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Z`[q", (CharSequence) "Z`[q");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsWhitespace("Z`[q");
      assertFalse(boolean0);
      
      String string0 = StringUtils.difference("Z`[q", "Z`[q");
      assertEquals("", string0);
      
      String string1 = StringUtils.stripToNull("{v5");
      assertEquals("{v5", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test871()  throws Throwable  {
      String string0 = StringUtils.trimToNull("Minimum abbreviation width is %d");
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width is %d", string0);
  }

  @Test(timeout = 4000)
  public void test872()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      charSequenceArray0[0] = (CharSequence) "";
      StringUtils.trim(" ");
      charSequenceArray0[1] = (CharSequence) "";
      StringUtils.indexOfDifference(charSequenceArray0);
      StringUtils.endsWithIgnoreCase(charSequenceArray0[0], charSequenceArray0[1]);
      String string0 = null;
      StringUtils.removeStart((String) null, " ");
      StringUtils.containsWhitespace("z*Ovtb8CpL-zI+vL@V");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Iterator<String> iterator0 = arrayList0.iterator();
      arrayList0.add((String) null);
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, "Strings must not be null");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test873()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "D;40(9";
      objectArray0[2] = (Object) "D;40(9";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "D;40(9";
      objectArray0[1] = (Object) "D;40(9";
      objectArray0[1] = (Object) "D;40(9";
      objectArray0[7] = (Object) "D;40(9";
      String string0 = StringUtils.joinWith("D;40(9", objectArray0);
      String string1 = StringUtils.right("t,b'*", 49);
      assertEquals("t,b'*", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "D;40(9", (CharSequence) "D;40(9", 16);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[0];
      StringUtils.join(longArray0, 'c', 370, 49);
      StringUtils.lastIndexOf((CharSequence) "t,b'*", 16, 0);
      String string2 = StringUtils.lowerCase("D;40(9D;40(9D;40(9D;40(9D;40(9D;40(9java.lang.Object@224ddde3D;40(9D;40(9D;40(9D;40(9D;40(9D;40(9");
      assertNotNull(string2);
      
      StringUtils.repeat('}', 0);
      boolean boolean0 = StringUtils.isAllLowerCase("D;40(9");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringAfterLast("K*", 0);
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.mid("4<~#!&_qt+&Plcf@", 11, 16);
      assertEquals("Plcf@", string4);
  }

  @Test(timeout = 4000)
  public void test874()  throws Throwable  {
      StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      StringUtils.stripEnd("", "");
      StringUtils.unwrap("23h=D:`I;ng$Q*", 'Q');
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.spliterator();
      arrayList0.add("G9ULK-fZyNJZn");
      arrayList0.add("");
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      StringUtils.join((Iterator<?>) listIterator0, (String) null);
      assertFalse(listIterator0.hasNext());
      
      StringUtils.isAllEmpty(stringArray0);
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = 'Q';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test875()  throws Throwable  {
      StringUtils.countMatches((CharSequence) "HURV4riOn3#xu5W;]o", '\"');
      StringUtils.indexOfAny((CharSequence) "HURV4riOn3#xu5W;]o", "");
      StringUtils.isAllUpperCase("HURV4riOn3#xu5W;]o");
      StringUtils.split("r1Sp`+>qaujy", "r1Sp`+>qaujy", 0);
      StringUtils.splitByWholeSeparator("Minimum abbreviation width with offset is %d", "\r", 0);
      StringUtils.unwrap("HURV4riOn3#xu5W;]o", (String) null);
      StringUtils.repeat("(I]0|/vrq[", "\r", 0);
      StringUtils.isAlphanumericSpace("Minimum abbreviation width with offset is %d");
      String string0 = StringUtils.substringBetween("'YwtkewYT<}UOc&o", "ylh GZoPcf+");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test876()  throws Throwable  {
      StringUtils.overlay("D;40(9", "7\"-.'c1$V", (-5092), (-5092));
      StringUtils.substringBefore((String) null, (-4095));
      StringUtils.replaceAll("D;40(9", "7\"-.'c1$V", "D;40(9");
      StringUtils.mid("D;40(9", (-4095), 380);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test877()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = 'C';
      charArray0[3] = 'a';
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '\u0000';
      StringUtils.repeat('#', (-2528));
      boolean boolean0 = StringUtils.isAllLowerCase("HBXr N;v");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringBetween("org.apache.commons.lang3.LocaleUtils", "", "u^1O^^8z^'oC");
      assertNull(string0);
      
      String string1 = StringUtils.substringAfterLast("", (-1279));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test878()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("G9ULK-fZyNJZn");
      boolean boolean0 = StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      StringUtils.valueOf(charArray0);
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 6);
      String string1 = StringUtils.replaceEachRepeatedly(", Length: 0", stringArray0, stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(", Length: 0", string1);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test879()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '<');
      assertNotNull(string0);
      
      String string1 = StringUtils.mid("maxWith cannot be negative", '<', '<');
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBeforeLast("maxWith cannot be negative", "");
      assertEquals("maxWith cannot be negative", string2);
  }

  @Test(timeout = 4000)
  public void test880()  throws Throwable  {
      StringUtils.substringBetween("3fXlkk72Td", "E-cGR");
      StringUtils.join((Iterator<?>) null, "2Zq=}`{");
      StringUtils.stripToNull("u5");
      StringUtils.toRootLowerCase("gOZU:Bc-:}1Cz");
      StringUtils.substringsBetween("u5", "gOZU:Bc-:}1Cz", "gozu:bc-:}1cz");
      StringUtils.replaceIgnoreCase("gozu:bc-:}1cz", ";}Bl9>>K+tX)y", "kEU,");
      StringUtils.indexOf((CharSequence) "gozu:bc-:}1cz", 4);
      StringUtils.substringAfterLast("iosj", "gozu:bc-:}1cz");
      StringUtils.contains((CharSequence) "3fXlkk72Td", (CharSequence) "2Zq=}`{");
      StringUtils.overlay("[fG", "kEU,", (-1), (-601));
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>(linkedHashSet0);
      StringUtils.join((Iterable<?>) linkedList0, "gozu:bc-:}1cz");
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test881()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, "");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("REJECT_EXTENDED_RANGES");
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat(" ", (-276));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceAll("mk", "", "");
      assertEquals("mk", string2);
  }

  @Test(timeout = 4000)
  public void test882()  throws Throwable  {
      String string0 = StringUtils.repeat("{}", 16);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Minimum abbreviation width is %dev&Un1#hSI7@F";
      objectArray0[1] = (Object) "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}";
      objectArray0[2] = (Object) "Minimum abbreviation width is %dev&Un1#hSI7@F";
      objectArray0[3] = (Object) "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}";
      objectArray0[4] = (Object) "Minimum abbreviation width is %dev&Un1#hSI7@F";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "Minimum abbreviation width is %dev&Un1#hSI7@F";
      objectArray0[7] = (Object) "{}";
      String string1 = StringUtils.join(objectArray0, "{}");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test883()  throws Throwable  {
      String string0 = StringUtils.chomp("N)}k8Oz\")c7", (String) null);
      assertNotNull(string0);
      assertEquals("N)}k8Oz\")c7", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "N)}k8Oz\")c7", (char[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.wrap("Threshold must not be negative", "N)}k8Oz\")c7");
      assertEquals("N)}k8Oz\")c7Threshold must not be negativeN)}k8Oz\")c7", string1);
      
      String string2 = StringUtils.repeat((String) null, "N)}k8Oz\")c7", (-1));
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "Threshold must not be negative";
      charSequenceArray0[4] = (CharSequence) "N)}k8Oz\")c7";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "Threshold must not be negative";
      charSequenceArray0[7] = (CharSequence) "N)}k8Oz\")c7";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test884()  throws Throwable  {
      String string0 = StringUtils.LF;
      boolean boolean0 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore("\n", "\n");
      assertEquals("", string1);
      
      StringUtils.join((int[]) null, '9');
      String string2 = StringUtils.substringBetween((String) null, "");
      assertNull(string2);
      
      StringUtils.startsWith("", "Kn)Pe%N|5/6rl");
      String string3 = StringUtils.unwrap((String) null, '9');
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[1] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      int int0 = StringUtils.lastIndexOfAny("p{InCombiningDiacriticalMarks}+", charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test885()  throws Throwable  {
      String string0 = StringUtils.trim("HURV4riOn3#xu5W;]o");
      assertEquals("HURV4riOn3#xu5W;]o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("");
      assertEquals("", string1);
      
      String string2 = StringUtils.chomp("", "");
      assertEquals("", string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "HURV4riOn3#xu5W;]o", (CharSequence) "");
      assertEquals(18, int0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.iterator();
      StringUtils.join(iterator0, 'E');
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = 'B';
      charArray0[2] = '*';
      charArray0[3] = 'E';
      charArray0[4] = 'E';
      charArray0[5] = '\\';
      charArray0[6] = 'L';
      charArray0[7] = 'E';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "HURV4riOn3#xu5W;]o", charArray0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test886()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "G9ULK-fZyNJZn";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "G9ULK-fZyNJZn";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test887()  throws Throwable  {
      StringUtils.substringAfter((String) null, (String) null);
      StringUtils.lastIndexOf((CharSequence) null, 1818);
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test888()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.swapCase("}U");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      StringUtils.join((short[]) null, 'B', 98, 109);
      StringUtils.isAlphanumericSpace((CharSequence) null);
      String string1 = StringUtils.abbreviate("}u", 5, 98);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test889()  throws Throwable  {
      StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      double[] doubleArray0 = new double[0];
      StringUtils.join(doubleArray0, '<');
      String string0 = StringUtils.mid("maxWith cannot be negative", (-2034458190), (-2034458190));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test890()  throws Throwable  {
      StringUtils.reverseDelimited((String) null, 'i');
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'Y';
      doubleArray0[1] = (double) 'Y';
      doubleArray0[2] = (double) 'Y';
      doubleArray0[3] = (double) 'Y';
      doubleArray0[4] = (double) 'Y';
      doubleArray0[5] = (double) 'Y';
      doubleArray0[6] = (double) 'i';
      String string0 = StringUtils.join(doubleArray0, '%');
      assertNotNull(string0);
      
      String string1 = StringUtils.mid("org.apache.commons.lang3.Charsets", 12, 12);
      assertEquals("ommons.lang3", string1);
      
      String string2 = StringUtils.substringBeforeLast("89.0%89.0%89.0%89.0%89.0%89.0%105.0", "K0b`\"N>*a7Re");
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test891()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombSnigDiacriticlMarks}+", "}U", 2384);
      String string0 = StringUtils.getDigits("p{InCombSnigDiacriticlMarks}+");
      boolean boolean0 = StringUtils.startsWith("z?J:2jOqRdq5Fn", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfter("p{InCombSnigDiacriticlMarks}+", "z?J:2jOqRdq5Fn");
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfAny("z?J:2jOqRdq5Fn", stringArray0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals("", string2);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test892()  throws Throwable  {
      String string0 = "G9ULK-fZyNJZn";
      StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "G9ULK-fZyNJZn");
      StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      StringUtils.stripEnd("G9ULK-fZyNJZn", "G9ULK-fZyNJZn");
      char[] charArray0 = new char[0];
      StringUtils.valueOf(charArray0);
      // Undeclared exception!
      try { 
        ByteBuffer.allocateDirect((-175));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative capacity: -175
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test893()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("G95LK-fZyNJZn", "G95LK-fZyNJZn", 2481);
      assertEquals(1, stringArray0.length);
      
      StringUtils.chomp("D;40(9ugHLtet =btzi{V");
      StringUtils.repeat((String) null, 1);
      String string0 = StringUtils.chomp("^:~bC2J46;sy-r");
      assertEquals("^:~bC2J46;sy-r", string0);
  }

  @Test(timeout = 4000)
  public void test894()  throws Throwable  {
      String string0 = StringUtils.substringBetween("1r)uTX;VsRLtsE", "maxWith cannot be negativeorg.apache.commons.lang3.RegExUtils");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test895()  throws Throwable  {
      String string0 = StringUtils.unwrap("aAT>%@Bm;W", "aAT>%@Bm;W");
      assertEquals("aAT>%@Bm;W", string0);
  }

  @Test(timeout = 4000)
  public void test896()  throws Throwable  {
      String string0 = StringUtils.abbreviate("wVE`%[[{b,'l", "wVE`%[[{b,'l", 100, 100);
      assertEquals("wVE`%[[{b,'l", string0);
  }

  @Test(timeout = 4000)
  public void test897()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("z*Ovtb8CpL-zI+vL@V", "z*Ovtb8CpL-zI+vL@V");
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("z*Ovtb8CpL-zI+vL@V");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test898()  throws Throwable  {
      String string0 = StringUtils.unwrap("9j+x>Be!-(F", 'N');
      assertEquals("9j+x>Be!-(F", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "9j+x>Be!-(F", (CharSequence) "9j+x>Be!-(F");
      assertEquals(0, int0);
      
      StringUtils.indexOf((CharSequence) "9j+x>Be!-(F", 15, 0);
      String[] stringArray0 = StringUtils.splitByWholeSeparator("@>tukYYzq", " vs ");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test899()  throws Throwable  {
      String string0 = StringUtils.repeat("QjA0DWkYFqxJy{2&;", "QjA0DWkYFqxJy{2&;", 0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test900()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, "", 0, (-233));
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("org.apache.commons.lang3.ArrayUtils");
      assertFalse(boolean0);
      
      StringUtils.substringBetween("org.apache.commons.lang3.LocaleUtils", "org.apache.commons.lang3.ArrayUtils", "Supplied value must be a valid byte literal between -32768 and 32767: [");
      String string1 = StringUtils.substringAfterLast("e52{dcr-hH{I`Tp0>u", (-1458));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test901()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase(" ", " ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test902()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test903()  throws Throwable  {
      StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      StringUtils.splitByCharacterType("G9ULK-fZyNJZn");
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test904()  throws Throwable  {
      StringUtils.unwrap((String) null, (String) null);
      String string0 = StringUtils.repeat("G9ULK-fZyNJZn", "Locale must not be null", 46);
      StringUtils.isAlphanumericSpace(string0);
      String string1 = StringUtils.substringBetween("f{}2t)Q^%fLUBH", (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test905()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-12);
      shortArray0[1] = (short)42;
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      charArray0[5] = ':';
      String string0 = StringUtils.join(charArray0, '\u0000');
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap(":\u0000:\u0000:\u0000:\u0000:\u0000:\u0000\u0000", ':');
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test906()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      StringUtils.unwrap("23h=D:`I;ng$Q*", 'Q');
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.spliterator();
      arrayList0.add("G9ULK-fZyNJZn");
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      StringUtils.join((Iterator<?>) listIterator0, (String) null);
      StringUtils.isAllEmpty(stringArray0);
      StringUtils.mid("Object varargs must not be null", (-1911), 1860);
      StringUtils.repeat((String) null, 0);
      StringUtils.substringAfter("", "");
      StringUtils.repeat("(c", "", (-817));
      StringUtils.isAlphanumericSpace("(c");
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-1003), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test907()  throws Throwable  {
      String string0 = StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "G9ULK-fZyNJZn", (CharSequence) "");
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test908()  throws Throwable  {
      StringUtils.replacePattern("G9ULK-fZyNJZn", "G9ULK-fZyNJZn", "");
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      StringUtils.isAllLowerCase("G9ULK-fZyNJZn");
      StringUtils.stripEnd("", "");
      StringUtils.unwrap("23h=D:`I;ng$Q*", 'Q');
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.spliterator();
      arrayList0.add("G9ULK-fZyNJZn");
      arrayList0.add("");
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      StringUtils.join((Iterator<?>) listIterator0, (String) null);
      StringUtils.isAllEmpty(stringArray0);
      StringUtils.mid("Object varargs must not be null", (-1911), 1860);
      StringUtils.repeat((String) null, 0);
      StringUtils.substringAfter("", "");
      StringUtils.repeat("(c", "", (-817));
      StringUtils.isAlphanumericSpace("(c");
      String string0 = StringUtils.substringBetween("", "w");
      assertNull(string0);
  }
}
